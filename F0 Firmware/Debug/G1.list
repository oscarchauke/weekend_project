
G1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f44  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  08009008  08009008  0000a008  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009448  08009448  0000b220  2**0
                  CONTENTS
  4 .ARM          00000000  08009448  08009448  0000b220  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009448  08009448  0000b220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009448  08009448  0000a448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800944c  0800944c  0000a44c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000220  20000000  08009450  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001294  20000220  08009670  0000b220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014b4  08009670  0000b4b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b220  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ec2  00000000  00000000  0000b248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e62  00000000  00000000  0001e10a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  00020f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ef3  00000000  00000000  000222a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000048c2  00000000  00000000  0002319b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000169b2  00000000  00000000  00027a5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000828ec  00000000  00000000  0003e40f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c0cfb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054a8  00000000  00000000  000c0d40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000c61e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000220 	.word	0x20000220
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008fec 	.word	0x08008fec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000224 	.word	0x20000224
 8000104:	08008fec 	.word	0x08008fec

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ff69 	bl	8001314 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fea9 	bl	80011a4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff5b 	bl	8001314 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff51 	bl	8001314 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fed3 	bl	800122c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fec9 	bl	800122c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_dadd>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	4657      	mov	r7, sl
 80004ac:	464e      	mov	r6, r9
 80004ae:	4645      	mov	r5, r8
 80004b0:	46de      	mov	lr, fp
 80004b2:	b5e0      	push	{r5, r6, r7, lr}
 80004b4:	b083      	sub	sp, #12
 80004b6:	9000      	str	r0, [sp, #0]
 80004b8:	9101      	str	r1, [sp, #4]
 80004ba:	030c      	lsls	r4, r1, #12
 80004bc:	004f      	lsls	r7, r1, #1
 80004be:	0fce      	lsrs	r6, r1, #31
 80004c0:	0a61      	lsrs	r1, r4, #9
 80004c2:	9c00      	ldr	r4, [sp, #0]
 80004c4:	031d      	lsls	r5, r3, #12
 80004c6:	0f64      	lsrs	r4, r4, #29
 80004c8:	430c      	orrs	r4, r1
 80004ca:	9900      	ldr	r1, [sp, #0]
 80004cc:	9200      	str	r2, [sp, #0]
 80004ce:	9301      	str	r3, [sp, #4]
 80004d0:	00c8      	lsls	r0, r1, #3
 80004d2:	0059      	lsls	r1, r3, #1
 80004d4:	0d4b      	lsrs	r3, r1, #21
 80004d6:	4699      	mov	r9, r3
 80004d8:	9a00      	ldr	r2, [sp, #0]
 80004da:	9b01      	ldr	r3, [sp, #4]
 80004dc:	0a6d      	lsrs	r5, r5, #9
 80004de:	0fd9      	lsrs	r1, r3, #31
 80004e0:	0f53      	lsrs	r3, r2, #29
 80004e2:	432b      	orrs	r3, r5
 80004e4:	469a      	mov	sl, r3
 80004e6:	9b00      	ldr	r3, [sp, #0]
 80004e8:	0d7f      	lsrs	r7, r7, #21
 80004ea:	00da      	lsls	r2, r3, #3
 80004ec:	4694      	mov	ip, r2
 80004ee:	464a      	mov	r2, r9
 80004f0:	46b0      	mov	r8, r6
 80004f2:	1aba      	subs	r2, r7, r2
 80004f4:	428e      	cmp	r6, r1
 80004f6:	d100      	bne.n	80004fa <__aeabi_dadd+0x52>
 80004f8:	e0b0      	b.n	800065c <__aeabi_dadd+0x1b4>
 80004fa:	2a00      	cmp	r2, #0
 80004fc:	dc00      	bgt.n	8000500 <__aeabi_dadd+0x58>
 80004fe:	e078      	b.n	80005f2 <__aeabi_dadd+0x14a>
 8000500:	4649      	mov	r1, r9
 8000502:	2900      	cmp	r1, #0
 8000504:	d100      	bne.n	8000508 <__aeabi_dadd+0x60>
 8000506:	e0e9      	b.n	80006dc <__aeabi_dadd+0x234>
 8000508:	49c9      	ldr	r1, [pc, #804]	@ (8000830 <__aeabi_dadd+0x388>)
 800050a:	428f      	cmp	r7, r1
 800050c:	d100      	bne.n	8000510 <__aeabi_dadd+0x68>
 800050e:	e195      	b.n	800083c <__aeabi_dadd+0x394>
 8000510:	2501      	movs	r5, #1
 8000512:	2a38      	cmp	r2, #56	@ 0x38
 8000514:	dc16      	bgt.n	8000544 <__aeabi_dadd+0x9c>
 8000516:	2180      	movs	r1, #128	@ 0x80
 8000518:	4653      	mov	r3, sl
 800051a:	0409      	lsls	r1, r1, #16
 800051c:	430b      	orrs	r3, r1
 800051e:	469a      	mov	sl, r3
 8000520:	2a1f      	cmp	r2, #31
 8000522:	dd00      	ble.n	8000526 <__aeabi_dadd+0x7e>
 8000524:	e1e7      	b.n	80008f6 <__aeabi_dadd+0x44e>
 8000526:	2120      	movs	r1, #32
 8000528:	4655      	mov	r5, sl
 800052a:	1a8b      	subs	r3, r1, r2
 800052c:	4661      	mov	r1, ip
 800052e:	409d      	lsls	r5, r3
 8000530:	40d1      	lsrs	r1, r2
 8000532:	430d      	orrs	r5, r1
 8000534:	4661      	mov	r1, ip
 8000536:	4099      	lsls	r1, r3
 8000538:	1e4b      	subs	r3, r1, #1
 800053a:	4199      	sbcs	r1, r3
 800053c:	4653      	mov	r3, sl
 800053e:	40d3      	lsrs	r3, r2
 8000540:	430d      	orrs	r5, r1
 8000542:	1ae4      	subs	r4, r4, r3
 8000544:	1b45      	subs	r5, r0, r5
 8000546:	42a8      	cmp	r0, r5
 8000548:	4180      	sbcs	r0, r0
 800054a:	4240      	negs	r0, r0
 800054c:	1a24      	subs	r4, r4, r0
 800054e:	0223      	lsls	r3, r4, #8
 8000550:	d400      	bmi.n	8000554 <__aeabi_dadd+0xac>
 8000552:	e10f      	b.n	8000774 <__aeabi_dadd+0x2cc>
 8000554:	0264      	lsls	r4, r4, #9
 8000556:	0a64      	lsrs	r4, r4, #9
 8000558:	2c00      	cmp	r4, #0
 800055a:	d100      	bne.n	800055e <__aeabi_dadd+0xb6>
 800055c:	e139      	b.n	80007d2 <__aeabi_dadd+0x32a>
 800055e:	0020      	movs	r0, r4
 8000560:	f001 fe5e 	bl	8002220 <__clzsi2>
 8000564:	0003      	movs	r3, r0
 8000566:	3b08      	subs	r3, #8
 8000568:	2120      	movs	r1, #32
 800056a:	0028      	movs	r0, r5
 800056c:	1aca      	subs	r2, r1, r3
 800056e:	40d0      	lsrs	r0, r2
 8000570:	409c      	lsls	r4, r3
 8000572:	0002      	movs	r2, r0
 8000574:	409d      	lsls	r5, r3
 8000576:	4322      	orrs	r2, r4
 8000578:	429f      	cmp	r7, r3
 800057a:	dd00      	ble.n	800057e <__aeabi_dadd+0xd6>
 800057c:	e173      	b.n	8000866 <__aeabi_dadd+0x3be>
 800057e:	1bd8      	subs	r0, r3, r7
 8000580:	3001      	adds	r0, #1
 8000582:	1a09      	subs	r1, r1, r0
 8000584:	002c      	movs	r4, r5
 8000586:	408d      	lsls	r5, r1
 8000588:	40c4      	lsrs	r4, r0
 800058a:	1e6b      	subs	r3, r5, #1
 800058c:	419d      	sbcs	r5, r3
 800058e:	0013      	movs	r3, r2
 8000590:	40c2      	lsrs	r2, r0
 8000592:	408b      	lsls	r3, r1
 8000594:	4325      	orrs	r5, r4
 8000596:	2700      	movs	r7, #0
 8000598:	0014      	movs	r4, r2
 800059a:	431d      	orrs	r5, r3
 800059c:	076b      	lsls	r3, r5, #29
 800059e:	d009      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a0:	230f      	movs	r3, #15
 80005a2:	402b      	ands	r3, r5
 80005a4:	2b04      	cmp	r3, #4
 80005a6:	d005      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a8:	1d2b      	adds	r3, r5, #4
 80005aa:	42ab      	cmp	r3, r5
 80005ac:	41ad      	sbcs	r5, r5
 80005ae:	426d      	negs	r5, r5
 80005b0:	1964      	adds	r4, r4, r5
 80005b2:	001d      	movs	r5, r3
 80005b4:	0223      	lsls	r3, r4, #8
 80005b6:	d400      	bmi.n	80005ba <__aeabi_dadd+0x112>
 80005b8:	e12d      	b.n	8000816 <__aeabi_dadd+0x36e>
 80005ba:	4a9d      	ldr	r2, [pc, #628]	@ (8000830 <__aeabi_dadd+0x388>)
 80005bc:	3701      	adds	r7, #1
 80005be:	4297      	cmp	r7, r2
 80005c0:	d100      	bne.n	80005c4 <__aeabi_dadd+0x11c>
 80005c2:	e0d3      	b.n	800076c <__aeabi_dadd+0x2c4>
 80005c4:	4646      	mov	r6, r8
 80005c6:	499b      	ldr	r1, [pc, #620]	@ (8000834 <__aeabi_dadd+0x38c>)
 80005c8:	08ed      	lsrs	r5, r5, #3
 80005ca:	4021      	ands	r1, r4
 80005cc:	074a      	lsls	r2, r1, #29
 80005ce:	432a      	orrs	r2, r5
 80005d0:	057c      	lsls	r4, r7, #21
 80005d2:	024d      	lsls	r5, r1, #9
 80005d4:	0b2d      	lsrs	r5, r5, #12
 80005d6:	0d64      	lsrs	r4, r4, #21
 80005d8:	0524      	lsls	r4, r4, #20
 80005da:	432c      	orrs	r4, r5
 80005dc:	07f6      	lsls	r6, r6, #31
 80005de:	4334      	orrs	r4, r6
 80005e0:	0010      	movs	r0, r2
 80005e2:	0021      	movs	r1, r4
 80005e4:	b003      	add	sp, #12
 80005e6:	bcf0      	pop	{r4, r5, r6, r7}
 80005e8:	46bb      	mov	fp, r7
 80005ea:	46b2      	mov	sl, r6
 80005ec:	46a9      	mov	r9, r5
 80005ee:	46a0      	mov	r8, r4
 80005f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f2:	2a00      	cmp	r2, #0
 80005f4:	d100      	bne.n	80005f8 <__aeabi_dadd+0x150>
 80005f6:	e084      	b.n	8000702 <__aeabi_dadd+0x25a>
 80005f8:	464a      	mov	r2, r9
 80005fa:	1bd2      	subs	r2, r2, r7
 80005fc:	2f00      	cmp	r7, #0
 80005fe:	d000      	beq.n	8000602 <__aeabi_dadd+0x15a>
 8000600:	e16d      	b.n	80008de <__aeabi_dadd+0x436>
 8000602:	0025      	movs	r5, r4
 8000604:	4305      	orrs	r5, r0
 8000606:	d100      	bne.n	800060a <__aeabi_dadd+0x162>
 8000608:	e127      	b.n	800085a <__aeabi_dadd+0x3b2>
 800060a:	1e56      	subs	r6, r2, #1
 800060c:	2a01      	cmp	r2, #1
 800060e:	d100      	bne.n	8000612 <__aeabi_dadd+0x16a>
 8000610:	e23b      	b.n	8000a8a <__aeabi_dadd+0x5e2>
 8000612:	4d87      	ldr	r5, [pc, #540]	@ (8000830 <__aeabi_dadd+0x388>)
 8000614:	42aa      	cmp	r2, r5
 8000616:	d100      	bne.n	800061a <__aeabi_dadd+0x172>
 8000618:	e26a      	b.n	8000af0 <__aeabi_dadd+0x648>
 800061a:	2501      	movs	r5, #1
 800061c:	2e38      	cmp	r6, #56	@ 0x38
 800061e:	dc12      	bgt.n	8000646 <__aeabi_dadd+0x19e>
 8000620:	0032      	movs	r2, r6
 8000622:	2a1f      	cmp	r2, #31
 8000624:	dd00      	ble.n	8000628 <__aeabi_dadd+0x180>
 8000626:	e1f8      	b.n	8000a1a <__aeabi_dadd+0x572>
 8000628:	2620      	movs	r6, #32
 800062a:	0025      	movs	r5, r4
 800062c:	1ab6      	subs	r6, r6, r2
 800062e:	0007      	movs	r7, r0
 8000630:	4653      	mov	r3, sl
 8000632:	40b0      	lsls	r0, r6
 8000634:	40d4      	lsrs	r4, r2
 8000636:	40b5      	lsls	r5, r6
 8000638:	40d7      	lsrs	r7, r2
 800063a:	1e46      	subs	r6, r0, #1
 800063c:	41b0      	sbcs	r0, r6
 800063e:	1b1b      	subs	r3, r3, r4
 8000640:	469a      	mov	sl, r3
 8000642:	433d      	orrs	r5, r7
 8000644:	4305      	orrs	r5, r0
 8000646:	4662      	mov	r2, ip
 8000648:	1b55      	subs	r5, r2, r5
 800064a:	45ac      	cmp	ip, r5
 800064c:	4192      	sbcs	r2, r2
 800064e:	4653      	mov	r3, sl
 8000650:	4252      	negs	r2, r2
 8000652:	000e      	movs	r6, r1
 8000654:	464f      	mov	r7, r9
 8000656:	4688      	mov	r8, r1
 8000658:	1a9c      	subs	r4, r3, r2
 800065a:	e778      	b.n	800054e <__aeabi_dadd+0xa6>
 800065c:	2a00      	cmp	r2, #0
 800065e:	dc00      	bgt.n	8000662 <__aeabi_dadd+0x1ba>
 8000660:	e08e      	b.n	8000780 <__aeabi_dadd+0x2d8>
 8000662:	4649      	mov	r1, r9
 8000664:	2900      	cmp	r1, #0
 8000666:	d175      	bne.n	8000754 <__aeabi_dadd+0x2ac>
 8000668:	4661      	mov	r1, ip
 800066a:	4653      	mov	r3, sl
 800066c:	4319      	orrs	r1, r3
 800066e:	d100      	bne.n	8000672 <__aeabi_dadd+0x1ca>
 8000670:	e0f6      	b.n	8000860 <__aeabi_dadd+0x3b8>
 8000672:	1e51      	subs	r1, r2, #1
 8000674:	2a01      	cmp	r2, #1
 8000676:	d100      	bne.n	800067a <__aeabi_dadd+0x1d2>
 8000678:	e191      	b.n	800099e <__aeabi_dadd+0x4f6>
 800067a:	4d6d      	ldr	r5, [pc, #436]	@ (8000830 <__aeabi_dadd+0x388>)
 800067c:	42aa      	cmp	r2, r5
 800067e:	d100      	bne.n	8000682 <__aeabi_dadd+0x1da>
 8000680:	e0dc      	b.n	800083c <__aeabi_dadd+0x394>
 8000682:	2501      	movs	r5, #1
 8000684:	2938      	cmp	r1, #56	@ 0x38
 8000686:	dc14      	bgt.n	80006b2 <__aeabi_dadd+0x20a>
 8000688:	000a      	movs	r2, r1
 800068a:	2a1f      	cmp	r2, #31
 800068c:	dd00      	ble.n	8000690 <__aeabi_dadd+0x1e8>
 800068e:	e1a2      	b.n	80009d6 <__aeabi_dadd+0x52e>
 8000690:	2120      	movs	r1, #32
 8000692:	4653      	mov	r3, sl
 8000694:	1a89      	subs	r1, r1, r2
 8000696:	408b      	lsls	r3, r1
 8000698:	001d      	movs	r5, r3
 800069a:	4663      	mov	r3, ip
 800069c:	40d3      	lsrs	r3, r2
 800069e:	431d      	orrs	r5, r3
 80006a0:	4663      	mov	r3, ip
 80006a2:	408b      	lsls	r3, r1
 80006a4:	0019      	movs	r1, r3
 80006a6:	1e4b      	subs	r3, r1, #1
 80006a8:	4199      	sbcs	r1, r3
 80006aa:	4653      	mov	r3, sl
 80006ac:	40d3      	lsrs	r3, r2
 80006ae:	430d      	orrs	r5, r1
 80006b0:	18e4      	adds	r4, r4, r3
 80006b2:	182d      	adds	r5, r5, r0
 80006b4:	4285      	cmp	r5, r0
 80006b6:	4180      	sbcs	r0, r0
 80006b8:	4240      	negs	r0, r0
 80006ba:	1824      	adds	r4, r4, r0
 80006bc:	0223      	lsls	r3, r4, #8
 80006be:	d559      	bpl.n	8000774 <__aeabi_dadd+0x2cc>
 80006c0:	4b5b      	ldr	r3, [pc, #364]	@ (8000830 <__aeabi_dadd+0x388>)
 80006c2:	3701      	adds	r7, #1
 80006c4:	429f      	cmp	r7, r3
 80006c6:	d051      	beq.n	800076c <__aeabi_dadd+0x2c4>
 80006c8:	2101      	movs	r1, #1
 80006ca:	4b5a      	ldr	r3, [pc, #360]	@ (8000834 <__aeabi_dadd+0x38c>)
 80006cc:	086a      	lsrs	r2, r5, #1
 80006ce:	401c      	ands	r4, r3
 80006d0:	4029      	ands	r1, r5
 80006d2:	430a      	orrs	r2, r1
 80006d4:	07e5      	lsls	r5, r4, #31
 80006d6:	4315      	orrs	r5, r2
 80006d8:	0864      	lsrs	r4, r4, #1
 80006da:	e75f      	b.n	800059c <__aeabi_dadd+0xf4>
 80006dc:	4661      	mov	r1, ip
 80006de:	4653      	mov	r3, sl
 80006e0:	4319      	orrs	r1, r3
 80006e2:	d100      	bne.n	80006e6 <__aeabi_dadd+0x23e>
 80006e4:	e0bc      	b.n	8000860 <__aeabi_dadd+0x3b8>
 80006e6:	1e51      	subs	r1, r2, #1
 80006e8:	2a01      	cmp	r2, #1
 80006ea:	d100      	bne.n	80006ee <__aeabi_dadd+0x246>
 80006ec:	e164      	b.n	80009b8 <__aeabi_dadd+0x510>
 80006ee:	4d50      	ldr	r5, [pc, #320]	@ (8000830 <__aeabi_dadd+0x388>)
 80006f0:	42aa      	cmp	r2, r5
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dadd+0x24e>
 80006f4:	e16a      	b.n	80009cc <__aeabi_dadd+0x524>
 80006f6:	2501      	movs	r5, #1
 80006f8:	2938      	cmp	r1, #56	@ 0x38
 80006fa:	dd00      	ble.n	80006fe <__aeabi_dadd+0x256>
 80006fc:	e722      	b.n	8000544 <__aeabi_dadd+0x9c>
 80006fe:	000a      	movs	r2, r1
 8000700:	e70e      	b.n	8000520 <__aeabi_dadd+0x78>
 8000702:	4a4d      	ldr	r2, [pc, #308]	@ (8000838 <__aeabi_dadd+0x390>)
 8000704:	1c7d      	adds	r5, r7, #1
 8000706:	4215      	tst	r5, r2
 8000708:	d000      	beq.n	800070c <__aeabi_dadd+0x264>
 800070a:	e0d0      	b.n	80008ae <__aeabi_dadd+0x406>
 800070c:	0025      	movs	r5, r4
 800070e:	4662      	mov	r2, ip
 8000710:	4653      	mov	r3, sl
 8000712:	4305      	orrs	r5, r0
 8000714:	431a      	orrs	r2, r3
 8000716:	2f00      	cmp	r7, #0
 8000718:	d000      	beq.n	800071c <__aeabi_dadd+0x274>
 800071a:	e137      	b.n	800098c <__aeabi_dadd+0x4e4>
 800071c:	2d00      	cmp	r5, #0
 800071e:	d100      	bne.n	8000722 <__aeabi_dadd+0x27a>
 8000720:	e1a8      	b.n	8000a74 <__aeabi_dadd+0x5cc>
 8000722:	2a00      	cmp	r2, #0
 8000724:	d100      	bne.n	8000728 <__aeabi_dadd+0x280>
 8000726:	e16a      	b.n	80009fe <__aeabi_dadd+0x556>
 8000728:	4663      	mov	r3, ip
 800072a:	1ac5      	subs	r5, r0, r3
 800072c:	4653      	mov	r3, sl
 800072e:	1ae2      	subs	r2, r4, r3
 8000730:	42a8      	cmp	r0, r5
 8000732:	419b      	sbcs	r3, r3
 8000734:	425b      	negs	r3, r3
 8000736:	1ad3      	subs	r3, r2, r3
 8000738:	021a      	lsls	r2, r3, #8
 800073a:	d400      	bmi.n	800073e <__aeabi_dadd+0x296>
 800073c:	e203      	b.n	8000b46 <__aeabi_dadd+0x69e>
 800073e:	4663      	mov	r3, ip
 8000740:	1a1d      	subs	r5, r3, r0
 8000742:	45ac      	cmp	ip, r5
 8000744:	4192      	sbcs	r2, r2
 8000746:	4653      	mov	r3, sl
 8000748:	4252      	negs	r2, r2
 800074a:	1b1c      	subs	r4, r3, r4
 800074c:	000e      	movs	r6, r1
 800074e:	4688      	mov	r8, r1
 8000750:	1aa4      	subs	r4, r4, r2
 8000752:	e723      	b.n	800059c <__aeabi_dadd+0xf4>
 8000754:	4936      	ldr	r1, [pc, #216]	@ (8000830 <__aeabi_dadd+0x388>)
 8000756:	428f      	cmp	r7, r1
 8000758:	d070      	beq.n	800083c <__aeabi_dadd+0x394>
 800075a:	2501      	movs	r5, #1
 800075c:	2a38      	cmp	r2, #56	@ 0x38
 800075e:	dca8      	bgt.n	80006b2 <__aeabi_dadd+0x20a>
 8000760:	2180      	movs	r1, #128	@ 0x80
 8000762:	4653      	mov	r3, sl
 8000764:	0409      	lsls	r1, r1, #16
 8000766:	430b      	orrs	r3, r1
 8000768:	469a      	mov	sl, r3
 800076a:	e78e      	b.n	800068a <__aeabi_dadd+0x1e2>
 800076c:	003c      	movs	r4, r7
 800076e:	2500      	movs	r5, #0
 8000770:	2200      	movs	r2, #0
 8000772:	e731      	b.n	80005d8 <__aeabi_dadd+0x130>
 8000774:	2307      	movs	r3, #7
 8000776:	402b      	ands	r3, r5
 8000778:	2b00      	cmp	r3, #0
 800077a:	d000      	beq.n	800077e <__aeabi_dadd+0x2d6>
 800077c:	e710      	b.n	80005a0 <__aeabi_dadd+0xf8>
 800077e:	e093      	b.n	80008a8 <__aeabi_dadd+0x400>
 8000780:	2a00      	cmp	r2, #0
 8000782:	d074      	beq.n	800086e <__aeabi_dadd+0x3c6>
 8000784:	464a      	mov	r2, r9
 8000786:	1bd2      	subs	r2, r2, r7
 8000788:	2f00      	cmp	r7, #0
 800078a:	d100      	bne.n	800078e <__aeabi_dadd+0x2e6>
 800078c:	e0c7      	b.n	800091e <__aeabi_dadd+0x476>
 800078e:	4928      	ldr	r1, [pc, #160]	@ (8000830 <__aeabi_dadd+0x388>)
 8000790:	4589      	cmp	r9, r1
 8000792:	d100      	bne.n	8000796 <__aeabi_dadd+0x2ee>
 8000794:	e185      	b.n	8000aa2 <__aeabi_dadd+0x5fa>
 8000796:	2501      	movs	r5, #1
 8000798:	2a38      	cmp	r2, #56	@ 0x38
 800079a:	dc12      	bgt.n	80007c2 <__aeabi_dadd+0x31a>
 800079c:	2180      	movs	r1, #128	@ 0x80
 800079e:	0409      	lsls	r1, r1, #16
 80007a0:	430c      	orrs	r4, r1
 80007a2:	2a1f      	cmp	r2, #31
 80007a4:	dd00      	ble.n	80007a8 <__aeabi_dadd+0x300>
 80007a6:	e1ab      	b.n	8000b00 <__aeabi_dadd+0x658>
 80007a8:	2120      	movs	r1, #32
 80007aa:	0025      	movs	r5, r4
 80007ac:	1a89      	subs	r1, r1, r2
 80007ae:	0007      	movs	r7, r0
 80007b0:	4088      	lsls	r0, r1
 80007b2:	408d      	lsls	r5, r1
 80007b4:	40d7      	lsrs	r7, r2
 80007b6:	1e41      	subs	r1, r0, #1
 80007b8:	4188      	sbcs	r0, r1
 80007ba:	40d4      	lsrs	r4, r2
 80007bc:	433d      	orrs	r5, r7
 80007be:	4305      	orrs	r5, r0
 80007c0:	44a2      	add	sl, r4
 80007c2:	4465      	add	r5, ip
 80007c4:	4565      	cmp	r5, ip
 80007c6:	4192      	sbcs	r2, r2
 80007c8:	4252      	negs	r2, r2
 80007ca:	4452      	add	r2, sl
 80007cc:	0014      	movs	r4, r2
 80007ce:	464f      	mov	r7, r9
 80007d0:	e774      	b.n	80006bc <__aeabi_dadd+0x214>
 80007d2:	0028      	movs	r0, r5
 80007d4:	f001 fd24 	bl	8002220 <__clzsi2>
 80007d8:	0003      	movs	r3, r0
 80007da:	3318      	adds	r3, #24
 80007dc:	2b1f      	cmp	r3, #31
 80007de:	dc00      	bgt.n	80007e2 <__aeabi_dadd+0x33a>
 80007e0:	e6c2      	b.n	8000568 <__aeabi_dadd+0xc0>
 80007e2:	002a      	movs	r2, r5
 80007e4:	3808      	subs	r0, #8
 80007e6:	4082      	lsls	r2, r0
 80007e8:	429f      	cmp	r7, r3
 80007ea:	dd00      	ble.n	80007ee <__aeabi_dadd+0x346>
 80007ec:	e0a9      	b.n	8000942 <__aeabi_dadd+0x49a>
 80007ee:	1bdb      	subs	r3, r3, r7
 80007f0:	1c58      	adds	r0, r3, #1
 80007f2:	281f      	cmp	r0, #31
 80007f4:	dc00      	bgt.n	80007f8 <__aeabi_dadd+0x350>
 80007f6:	e1ac      	b.n	8000b52 <__aeabi_dadd+0x6aa>
 80007f8:	0015      	movs	r5, r2
 80007fa:	3b1f      	subs	r3, #31
 80007fc:	40dd      	lsrs	r5, r3
 80007fe:	2820      	cmp	r0, #32
 8000800:	d005      	beq.n	800080e <__aeabi_dadd+0x366>
 8000802:	2340      	movs	r3, #64	@ 0x40
 8000804:	1a1b      	subs	r3, r3, r0
 8000806:	409a      	lsls	r2, r3
 8000808:	1e53      	subs	r3, r2, #1
 800080a:	419a      	sbcs	r2, r3
 800080c:	4315      	orrs	r5, r2
 800080e:	2307      	movs	r3, #7
 8000810:	2700      	movs	r7, #0
 8000812:	402b      	ands	r3, r5
 8000814:	e7b0      	b.n	8000778 <__aeabi_dadd+0x2d0>
 8000816:	08ed      	lsrs	r5, r5, #3
 8000818:	4b05      	ldr	r3, [pc, #20]	@ (8000830 <__aeabi_dadd+0x388>)
 800081a:	0762      	lsls	r2, r4, #29
 800081c:	432a      	orrs	r2, r5
 800081e:	08e4      	lsrs	r4, r4, #3
 8000820:	429f      	cmp	r7, r3
 8000822:	d00f      	beq.n	8000844 <__aeabi_dadd+0x39c>
 8000824:	0324      	lsls	r4, r4, #12
 8000826:	0b25      	lsrs	r5, r4, #12
 8000828:	057c      	lsls	r4, r7, #21
 800082a:	0d64      	lsrs	r4, r4, #21
 800082c:	e6d4      	b.n	80005d8 <__aeabi_dadd+0x130>
 800082e:	46c0      	nop			@ (mov r8, r8)
 8000830:	000007ff 	.word	0x000007ff
 8000834:	ff7fffff 	.word	0xff7fffff
 8000838:	000007fe 	.word	0x000007fe
 800083c:	08c0      	lsrs	r0, r0, #3
 800083e:	0762      	lsls	r2, r4, #29
 8000840:	4302      	orrs	r2, r0
 8000842:	08e4      	lsrs	r4, r4, #3
 8000844:	0013      	movs	r3, r2
 8000846:	4323      	orrs	r3, r4
 8000848:	d100      	bne.n	800084c <__aeabi_dadd+0x3a4>
 800084a:	e186      	b.n	8000b5a <__aeabi_dadd+0x6b2>
 800084c:	2580      	movs	r5, #128	@ 0x80
 800084e:	032d      	lsls	r5, r5, #12
 8000850:	4325      	orrs	r5, r4
 8000852:	032d      	lsls	r5, r5, #12
 8000854:	4cc3      	ldr	r4, [pc, #780]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000856:	0b2d      	lsrs	r5, r5, #12
 8000858:	e6be      	b.n	80005d8 <__aeabi_dadd+0x130>
 800085a:	4660      	mov	r0, ip
 800085c:	4654      	mov	r4, sl
 800085e:	000e      	movs	r6, r1
 8000860:	0017      	movs	r7, r2
 8000862:	08c5      	lsrs	r5, r0, #3
 8000864:	e7d8      	b.n	8000818 <__aeabi_dadd+0x370>
 8000866:	4cc0      	ldr	r4, [pc, #768]	@ (8000b68 <__aeabi_dadd+0x6c0>)
 8000868:	1aff      	subs	r7, r7, r3
 800086a:	4014      	ands	r4, r2
 800086c:	e696      	b.n	800059c <__aeabi_dadd+0xf4>
 800086e:	4abf      	ldr	r2, [pc, #764]	@ (8000b6c <__aeabi_dadd+0x6c4>)
 8000870:	1c79      	adds	r1, r7, #1
 8000872:	4211      	tst	r1, r2
 8000874:	d16b      	bne.n	800094e <__aeabi_dadd+0x4a6>
 8000876:	0022      	movs	r2, r4
 8000878:	4302      	orrs	r2, r0
 800087a:	2f00      	cmp	r7, #0
 800087c:	d000      	beq.n	8000880 <__aeabi_dadd+0x3d8>
 800087e:	e0db      	b.n	8000a38 <__aeabi_dadd+0x590>
 8000880:	2a00      	cmp	r2, #0
 8000882:	d100      	bne.n	8000886 <__aeabi_dadd+0x3de>
 8000884:	e12d      	b.n	8000ae2 <__aeabi_dadd+0x63a>
 8000886:	4662      	mov	r2, ip
 8000888:	4653      	mov	r3, sl
 800088a:	431a      	orrs	r2, r3
 800088c:	d100      	bne.n	8000890 <__aeabi_dadd+0x3e8>
 800088e:	e0b6      	b.n	80009fe <__aeabi_dadd+0x556>
 8000890:	4663      	mov	r3, ip
 8000892:	18c5      	adds	r5, r0, r3
 8000894:	4285      	cmp	r5, r0
 8000896:	4180      	sbcs	r0, r0
 8000898:	4454      	add	r4, sl
 800089a:	4240      	negs	r0, r0
 800089c:	1824      	adds	r4, r4, r0
 800089e:	0223      	lsls	r3, r4, #8
 80008a0:	d502      	bpl.n	80008a8 <__aeabi_dadd+0x400>
 80008a2:	000f      	movs	r7, r1
 80008a4:	4bb0      	ldr	r3, [pc, #704]	@ (8000b68 <__aeabi_dadd+0x6c0>)
 80008a6:	401c      	ands	r4, r3
 80008a8:	003a      	movs	r2, r7
 80008aa:	0028      	movs	r0, r5
 80008ac:	e7d8      	b.n	8000860 <__aeabi_dadd+0x3b8>
 80008ae:	4662      	mov	r2, ip
 80008b0:	1a85      	subs	r5, r0, r2
 80008b2:	42a8      	cmp	r0, r5
 80008b4:	4192      	sbcs	r2, r2
 80008b6:	4653      	mov	r3, sl
 80008b8:	4252      	negs	r2, r2
 80008ba:	4691      	mov	r9, r2
 80008bc:	1ae3      	subs	r3, r4, r3
 80008be:	001a      	movs	r2, r3
 80008c0:	464b      	mov	r3, r9
 80008c2:	1ad2      	subs	r2, r2, r3
 80008c4:	0013      	movs	r3, r2
 80008c6:	4691      	mov	r9, r2
 80008c8:	021a      	lsls	r2, r3, #8
 80008ca:	d454      	bmi.n	8000976 <__aeabi_dadd+0x4ce>
 80008cc:	464a      	mov	r2, r9
 80008ce:	464c      	mov	r4, r9
 80008d0:	432a      	orrs	r2, r5
 80008d2:	d000      	beq.n	80008d6 <__aeabi_dadd+0x42e>
 80008d4:	e640      	b.n	8000558 <__aeabi_dadd+0xb0>
 80008d6:	2600      	movs	r6, #0
 80008d8:	2400      	movs	r4, #0
 80008da:	2500      	movs	r5, #0
 80008dc:	e67c      	b.n	80005d8 <__aeabi_dadd+0x130>
 80008de:	4da1      	ldr	r5, [pc, #644]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 80008e0:	45a9      	cmp	r9, r5
 80008e2:	d100      	bne.n	80008e6 <__aeabi_dadd+0x43e>
 80008e4:	e090      	b.n	8000a08 <__aeabi_dadd+0x560>
 80008e6:	2501      	movs	r5, #1
 80008e8:	2a38      	cmp	r2, #56	@ 0x38
 80008ea:	dd00      	ble.n	80008ee <__aeabi_dadd+0x446>
 80008ec:	e6ab      	b.n	8000646 <__aeabi_dadd+0x19e>
 80008ee:	2580      	movs	r5, #128	@ 0x80
 80008f0:	042d      	lsls	r5, r5, #16
 80008f2:	432c      	orrs	r4, r5
 80008f4:	e695      	b.n	8000622 <__aeabi_dadd+0x17a>
 80008f6:	0011      	movs	r1, r2
 80008f8:	4655      	mov	r5, sl
 80008fa:	3920      	subs	r1, #32
 80008fc:	40cd      	lsrs	r5, r1
 80008fe:	46a9      	mov	r9, r5
 8000900:	2a20      	cmp	r2, #32
 8000902:	d006      	beq.n	8000912 <__aeabi_dadd+0x46a>
 8000904:	2140      	movs	r1, #64	@ 0x40
 8000906:	4653      	mov	r3, sl
 8000908:	1a8a      	subs	r2, r1, r2
 800090a:	4093      	lsls	r3, r2
 800090c:	4662      	mov	r2, ip
 800090e:	431a      	orrs	r2, r3
 8000910:	4694      	mov	ip, r2
 8000912:	4665      	mov	r5, ip
 8000914:	1e6b      	subs	r3, r5, #1
 8000916:	419d      	sbcs	r5, r3
 8000918:	464b      	mov	r3, r9
 800091a:	431d      	orrs	r5, r3
 800091c:	e612      	b.n	8000544 <__aeabi_dadd+0x9c>
 800091e:	0021      	movs	r1, r4
 8000920:	4301      	orrs	r1, r0
 8000922:	d100      	bne.n	8000926 <__aeabi_dadd+0x47e>
 8000924:	e0c4      	b.n	8000ab0 <__aeabi_dadd+0x608>
 8000926:	1e51      	subs	r1, r2, #1
 8000928:	2a01      	cmp	r2, #1
 800092a:	d100      	bne.n	800092e <__aeabi_dadd+0x486>
 800092c:	e0fb      	b.n	8000b26 <__aeabi_dadd+0x67e>
 800092e:	4d8d      	ldr	r5, [pc, #564]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000930:	42aa      	cmp	r2, r5
 8000932:	d100      	bne.n	8000936 <__aeabi_dadd+0x48e>
 8000934:	e0b5      	b.n	8000aa2 <__aeabi_dadd+0x5fa>
 8000936:	2501      	movs	r5, #1
 8000938:	2938      	cmp	r1, #56	@ 0x38
 800093a:	dd00      	ble.n	800093e <__aeabi_dadd+0x496>
 800093c:	e741      	b.n	80007c2 <__aeabi_dadd+0x31a>
 800093e:	000a      	movs	r2, r1
 8000940:	e72f      	b.n	80007a2 <__aeabi_dadd+0x2fa>
 8000942:	4c89      	ldr	r4, [pc, #548]	@ (8000b68 <__aeabi_dadd+0x6c0>)
 8000944:	1aff      	subs	r7, r7, r3
 8000946:	4014      	ands	r4, r2
 8000948:	0762      	lsls	r2, r4, #29
 800094a:	08e4      	lsrs	r4, r4, #3
 800094c:	e76a      	b.n	8000824 <__aeabi_dadd+0x37c>
 800094e:	4a85      	ldr	r2, [pc, #532]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000950:	4291      	cmp	r1, r2
 8000952:	d100      	bne.n	8000956 <__aeabi_dadd+0x4ae>
 8000954:	e0e3      	b.n	8000b1e <__aeabi_dadd+0x676>
 8000956:	4663      	mov	r3, ip
 8000958:	18c2      	adds	r2, r0, r3
 800095a:	4282      	cmp	r2, r0
 800095c:	4180      	sbcs	r0, r0
 800095e:	0023      	movs	r3, r4
 8000960:	4240      	negs	r0, r0
 8000962:	4453      	add	r3, sl
 8000964:	181b      	adds	r3, r3, r0
 8000966:	07dd      	lsls	r5, r3, #31
 8000968:	085c      	lsrs	r4, r3, #1
 800096a:	2307      	movs	r3, #7
 800096c:	0852      	lsrs	r2, r2, #1
 800096e:	4315      	orrs	r5, r2
 8000970:	000f      	movs	r7, r1
 8000972:	402b      	ands	r3, r5
 8000974:	e700      	b.n	8000778 <__aeabi_dadd+0x2d0>
 8000976:	4663      	mov	r3, ip
 8000978:	1a1d      	subs	r5, r3, r0
 800097a:	45ac      	cmp	ip, r5
 800097c:	4192      	sbcs	r2, r2
 800097e:	4653      	mov	r3, sl
 8000980:	4252      	negs	r2, r2
 8000982:	1b1c      	subs	r4, r3, r4
 8000984:	000e      	movs	r6, r1
 8000986:	4688      	mov	r8, r1
 8000988:	1aa4      	subs	r4, r4, r2
 800098a:	e5e5      	b.n	8000558 <__aeabi_dadd+0xb0>
 800098c:	2d00      	cmp	r5, #0
 800098e:	d000      	beq.n	8000992 <__aeabi_dadd+0x4ea>
 8000990:	e091      	b.n	8000ab6 <__aeabi_dadd+0x60e>
 8000992:	2a00      	cmp	r2, #0
 8000994:	d138      	bne.n	8000a08 <__aeabi_dadd+0x560>
 8000996:	2480      	movs	r4, #128	@ 0x80
 8000998:	2600      	movs	r6, #0
 800099a:	0324      	lsls	r4, r4, #12
 800099c:	e756      	b.n	800084c <__aeabi_dadd+0x3a4>
 800099e:	4663      	mov	r3, ip
 80009a0:	18c5      	adds	r5, r0, r3
 80009a2:	4285      	cmp	r5, r0
 80009a4:	4180      	sbcs	r0, r0
 80009a6:	4454      	add	r4, sl
 80009a8:	4240      	negs	r0, r0
 80009aa:	1824      	adds	r4, r4, r0
 80009ac:	2701      	movs	r7, #1
 80009ae:	0223      	lsls	r3, r4, #8
 80009b0:	d400      	bmi.n	80009b4 <__aeabi_dadd+0x50c>
 80009b2:	e6df      	b.n	8000774 <__aeabi_dadd+0x2cc>
 80009b4:	2702      	movs	r7, #2
 80009b6:	e687      	b.n	80006c8 <__aeabi_dadd+0x220>
 80009b8:	4663      	mov	r3, ip
 80009ba:	1ac5      	subs	r5, r0, r3
 80009bc:	42a8      	cmp	r0, r5
 80009be:	4180      	sbcs	r0, r0
 80009c0:	4653      	mov	r3, sl
 80009c2:	4240      	negs	r0, r0
 80009c4:	1ae4      	subs	r4, r4, r3
 80009c6:	2701      	movs	r7, #1
 80009c8:	1a24      	subs	r4, r4, r0
 80009ca:	e5c0      	b.n	800054e <__aeabi_dadd+0xa6>
 80009cc:	0762      	lsls	r2, r4, #29
 80009ce:	08c0      	lsrs	r0, r0, #3
 80009d0:	4302      	orrs	r2, r0
 80009d2:	08e4      	lsrs	r4, r4, #3
 80009d4:	e736      	b.n	8000844 <__aeabi_dadd+0x39c>
 80009d6:	0011      	movs	r1, r2
 80009d8:	4653      	mov	r3, sl
 80009da:	3920      	subs	r1, #32
 80009dc:	40cb      	lsrs	r3, r1
 80009de:	4699      	mov	r9, r3
 80009e0:	2a20      	cmp	r2, #32
 80009e2:	d006      	beq.n	80009f2 <__aeabi_dadd+0x54a>
 80009e4:	2140      	movs	r1, #64	@ 0x40
 80009e6:	4653      	mov	r3, sl
 80009e8:	1a8a      	subs	r2, r1, r2
 80009ea:	4093      	lsls	r3, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	431a      	orrs	r2, r3
 80009f0:	4694      	mov	ip, r2
 80009f2:	4665      	mov	r5, ip
 80009f4:	1e6b      	subs	r3, r5, #1
 80009f6:	419d      	sbcs	r5, r3
 80009f8:	464b      	mov	r3, r9
 80009fa:	431d      	orrs	r5, r3
 80009fc:	e659      	b.n	80006b2 <__aeabi_dadd+0x20a>
 80009fe:	0762      	lsls	r2, r4, #29
 8000a00:	08c0      	lsrs	r0, r0, #3
 8000a02:	4302      	orrs	r2, r0
 8000a04:	08e4      	lsrs	r4, r4, #3
 8000a06:	e70d      	b.n	8000824 <__aeabi_dadd+0x37c>
 8000a08:	4653      	mov	r3, sl
 8000a0a:	075a      	lsls	r2, r3, #29
 8000a0c:	4663      	mov	r3, ip
 8000a0e:	08d8      	lsrs	r0, r3, #3
 8000a10:	4653      	mov	r3, sl
 8000a12:	000e      	movs	r6, r1
 8000a14:	4302      	orrs	r2, r0
 8000a16:	08dc      	lsrs	r4, r3, #3
 8000a18:	e714      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000a1a:	0015      	movs	r5, r2
 8000a1c:	0026      	movs	r6, r4
 8000a1e:	3d20      	subs	r5, #32
 8000a20:	40ee      	lsrs	r6, r5
 8000a22:	2a20      	cmp	r2, #32
 8000a24:	d003      	beq.n	8000a2e <__aeabi_dadd+0x586>
 8000a26:	2540      	movs	r5, #64	@ 0x40
 8000a28:	1aaa      	subs	r2, r5, r2
 8000a2a:	4094      	lsls	r4, r2
 8000a2c:	4320      	orrs	r0, r4
 8000a2e:	1e42      	subs	r2, r0, #1
 8000a30:	4190      	sbcs	r0, r2
 8000a32:	0005      	movs	r5, r0
 8000a34:	4335      	orrs	r5, r6
 8000a36:	e606      	b.n	8000646 <__aeabi_dadd+0x19e>
 8000a38:	2a00      	cmp	r2, #0
 8000a3a:	d07c      	beq.n	8000b36 <__aeabi_dadd+0x68e>
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	4653      	mov	r3, sl
 8000a40:	08c0      	lsrs	r0, r0, #3
 8000a42:	431a      	orrs	r2, r3
 8000a44:	d100      	bne.n	8000a48 <__aeabi_dadd+0x5a0>
 8000a46:	e6fa      	b.n	800083e <__aeabi_dadd+0x396>
 8000a48:	0762      	lsls	r2, r4, #29
 8000a4a:	4310      	orrs	r0, r2
 8000a4c:	2280      	movs	r2, #128	@ 0x80
 8000a4e:	08e4      	lsrs	r4, r4, #3
 8000a50:	0312      	lsls	r2, r2, #12
 8000a52:	4214      	tst	r4, r2
 8000a54:	d008      	beq.n	8000a68 <__aeabi_dadd+0x5c0>
 8000a56:	08d9      	lsrs	r1, r3, #3
 8000a58:	4211      	tst	r1, r2
 8000a5a:	d105      	bne.n	8000a68 <__aeabi_dadd+0x5c0>
 8000a5c:	4663      	mov	r3, ip
 8000a5e:	08d8      	lsrs	r0, r3, #3
 8000a60:	4653      	mov	r3, sl
 8000a62:	000c      	movs	r4, r1
 8000a64:	075b      	lsls	r3, r3, #29
 8000a66:	4318      	orrs	r0, r3
 8000a68:	0f42      	lsrs	r2, r0, #29
 8000a6a:	00c0      	lsls	r0, r0, #3
 8000a6c:	08c0      	lsrs	r0, r0, #3
 8000a6e:	0752      	lsls	r2, r2, #29
 8000a70:	4302      	orrs	r2, r0
 8000a72:	e6e7      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000a74:	2a00      	cmp	r2, #0
 8000a76:	d100      	bne.n	8000a7a <__aeabi_dadd+0x5d2>
 8000a78:	e72d      	b.n	80008d6 <__aeabi_dadd+0x42e>
 8000a7a:	4663      	mov	r3, ip
 8000a7c:	08d8      	lsrs	r0, r3, #3
 8000a7e:	4653      	mov	r3, sl
 8000a80:	075a      	lsls	r2, r3, #29
 8000a82:	000e      	movs	r6, r1
 8000a84:	4302      	orrs	r2, r0
 8000a86:	08dc      	lsrs	r4, r3, #3
 8000a88:	e6cc      	b.n	8000824 <__aeabi_dadd+0x37c>
 8000a8a:	4663      	mov	r3, ip
 8000a8c:	1a1d      	subs	r5, r3, r0
 8000a8e:	45ac      	cmp	ip, r5
 8000a90:	4192      	sbcs	r2, r2
 8000a92:	4653      	mov	r3, sl
 8000a94:	4252      	negs	r2, r2
 8000a96:	1b1c      	subs	r4, r3, r4
 8000a98:	000e      	movs	r6, r1
 8000a9a:	4688      	mov	r8, r1
 8000a9c:	1aa4      	subs	r4, r4, r2
 8000a9e:	3701      	adds	r7, #1
 8000aa0:	e555      	b.n	800054e <__aeabi_dadd+0xa6>
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	08d9      	lsrs	r1, r3, #3
 8000aa6:	4653      	mov	r3, sl
 8000aa8:	075a      	lsls	r2, r3, #29
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	08dc      	lsrs	r4, r3, #3
 8000aae:	e6c9      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000ab0:	4660      	mov	r0, ip
 8000ab2:	4654      	mov	r4, sl
 8000ab4:	e6d4      	b.n	8000860 <__aeabi_dadd+0x3b8>
 8000ab6:	08c0      	lsrs	r0, r0, #3
 8000ab8:	2a00      	cmp	r2, #0
 8000aba:	d100      	bne.n	8000abe <__aeabi_dadd+0x616>
 8000abc:	e6bf      	b.n	800083e <__aeabi_dadd+0x396>
 8000abe:	0762      	lsls	r2, r4, #29
 8000ac0:	4310      	orrs	r0, r2
 8000ac2:	2280      	movs	r2, #128	@ 0x80
 8000ac4:	08e4      	lsrs	r4, r4, #3
 8000ac6:	0312      	lsls	r2, r2, #12
 8000ac8:	4214      	tst	r4, r2
 8000aca:	d0cd      	beq.n	8000a68 <__aeabi_dadd+0x5c0>
 8000acc:	08dd      	lsrs	r5, r3, #3
 8000ace:	4215      	tst	r5, r2
 8000ad0:	d1ca      	bne.n	8000a68 <__aeabi_dadd+0x5c0>
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	08d8      	lsrs	r0, r3, #3
 8000ad6:	4653      	mov	r3, sl
 8000ad8:	075b      	lsls	r3, r3, #29
 8000ada:	000e      	movs	r6, r1
 8000adc:	002c      	movs	r4, r5
 8000ade:	4318      	orrs	r0, r3
 8000ae0:	e7c2      	b.n	8000a68 <__aeabi_dadd+0x5c0>
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	08d9      	lsrs	r1, r3, #3
 8000ae6:	4653      	mov	r3, sl
 8000ae8:	075a      	lsls	r2, r3, #29
 8000aea:	430a      	orrs	r2, r1
 8000aec:	08dc      	lsrs	r4, r3, #3
 8000aee:	e699      	b.n	8000824 <__aeabi_dadd+0x37c>
 8000af0:	4663      	mov	r3, ip
 8000af2:	08d8      	lsrs	r0, r3, #3
 8000af4:	4653      	mov	r3, sl
 8000af6:	075a      	lsls	r2, r3, #29
 8000af8:	000e      	movs	r6, r1
 8000afa:	4302      	orrs	r2, r0
 8000afc:	08dc      	lsrs	r4, r3, #3
 8000afe:	e6a1      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000b00:	0011      	movs	r1, r2
 8000b02:	0027      	movs	r7, r4
 8000b04:	3920      	subs	r1, #32
 8000b06:	40cf      	lsrs	r7, r1
 8000b08:	2a20      	cmp	r2, #32
 8000b0a:	d003      	beq.n	8000b14 <__aeabi_dadd+0x66c>
 8000b0c:	2140      	movs	r1, #64	@ 0x40
 8000b0e:	1a8a      	subs	r2, r1, r2
 8000b10:	4094      	lsls	r4, r2
 8000b12:	4320      	orrs	r0, r4
 8000b14:	1e42      	subs	r2, r0, #1
 8000b16:	4190      	sbcs	r0, r2
 8000b18:	0005      	movs	r5, r0
 8000b1a:	433d      	orrs	r5, r7
 8000b1c:	e651      	b.n	80007c2 <__aeabi_dadd+0x31a>
 8000b1e:	000c      	movs	r4, r1
 8000b20:	2500      	movs	r5, #0
 8000b22:	2200      	movs	r2, #0
 8000b24:	e558      	b.n	80005d8 <__aeabi_dadd+0x130>
 8000b26:	4460      	add	r0, ip
 8000b28:	4560      	cmp	r0, ip
 8000b2a:	4192      	sbcs	r2, r2
 8000b2c:	4454      	add	r4, sl
 8000b2e:	4252      	negs	r2, r2
 8000b30:	0005      	movs	r5, r0
 8000b32:	18a4      	adds	r4, r4, r2
 8000b34:	e73a      	b.n	80009ac <__aeabi_dadd+0x504>
 8000b36:	4653      	mov	r3, sl
 8000b38:	075a      	lsls	r2, r3, #29
 8000b3a:	4663      	mov	r3, ip
 8000b3c:	08d9      	lsrs	r1, r3, #3
 8000b3e:	4653      	mov	r3, sl
 8000b40:	430a      	orrs	r2, r1
 8000b42:	08dc      	lsrs	r4, r3, #3
 8000b44:	e67e      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000b46:	001a      	movs	r2, r3
 8000b48:	001c      	movs	r4, r3
 8000b4a:	432a      	orrs	r2, r5
 8000b4c:	d000      	beq.n	8000b50 <__aeabi_dadd+0x6a8>
 8000b4e:	e6ab      	b.n	80008a8 <__aeabi_dadd+0x400>
 8000b50:	e6c1      	b.n	80008d6 <__aeabi_dadd+0x42e>
 8000b52:	2120      	movs	r1, #32
 8000b54:	2500      	movs	r5, #0
 8000b56:	1a09      	subs	r1, r1, r0
 8000b58:	e519      	b.n	800058e <__aeabi_dadd+0xe6>
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2500      	movs	r5, #0
 8000b5e:	4c01      	ldr	r4, [pc, #4]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000b60:	e53a      	b.n	80005d8 <__aeabi_dadd+0x130>
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	000007ff 	.word	0x000007ff
 8000b68:	ff7fffff 	.word	0xff7fffff
 8000b6c:	000007fe 	.word	0x000007fe

08000b70 <__aeabi_ddiv>:
 8000b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b72:	46de      	mov	lr, fp
 8000b74:	4645      	mov	r5, r8
 8000b76:	4657      	mov	r7, sl
 8000b78:	464e      	mov	r6, r9
 8000b7a:	b5e0      	push	{r5, r6, r7, lr}
 8000b7c:	b087      	sub	sp, #28
 8000b7e:	9200      	str	r2, [sp, #0]
 8000b80:	9301      	str	r3, [sp, #4]
 8000b82:	030b      	lsls	r3, r1, #12
 8000b84:	0b1b      	lsrs	r3, r3, #12
 8000b86:	469b      	mov	fp, r3
 8000b88:	0fca      	lsrs	r2, r1, #31
 8000b8a:	004b      	lsls	r3, r1, #1
 8000b8c:	0004      	movs	r4, r0
 8000b8e:	4680      	mov	r8, r0
 8000b90:	0d5b      	lsrs	r3, r3, #21
 8000b92:	9202      	str	r2, [sp, #8]
 8000b94:	d100      	bne.n	8000b98 <__aeabi_ddiv+0x28>
 8000b96:	e16a      	b.n	8000e6e <__aeabi_ddiv+0x2fe>
 8000b98:	4ad4      	ldr	r2, [pc, #848]	@ (8000eec <__aeabi_ddiv+0x37c>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_ddiv+0x30>
 8000b9e:	e18c      	b.n	8000eba <__aeabi_ddiv+0x34a>
 8000ba0:	4659      	mov	r1, fp
 8000ba2:	0f42      	lsrs	r2, r0, #29
 8000ba4:	00c9      	lsls	r1, r1, #3
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	2180      	movs	r1, #128	@ 0x80
 8000baa:	0409      	lsls	r1, r1, #16
 8000bac:	4311      	orrs	r1, r2
 8000bae:	00c2      	lsls	r2, r0, #3
 8000bb0:	4690      	mov	r8, r2
 8000bb2:	4acf      	ldr	r2, [pc, #828]	@ (8000ef0 <__aeabi_ddiv+0x380>)
 8000bb4:	4689      	mov	r9, r1
 8000bb6:	4692      	mov	sl, r2
 8000bb8:	449a      	add	sl, r3
 8000bba:	2300      	movs	r3, #0
 8000bbc:	2400      	movs	r4, #0
 8000bbe:	9303      	str	r3, [sp, #12]
 8000bc0:	9e00      	ldr	r6, [sp, #0]
 8000bc2:	9f01      	ldr	r7, [sp, #4]
 8000bc4:	033b      	lsls	r3, r7, #12
 8000bc6:	0b1b      	lsrs	r3, r3, #12
 8000bc8:	469b      	mov	fp, r3
 8000bca:	007b      	lsls	r3, r7, #1
 8000bcc:	0030      	movs	r0, r6
 8000bce:	0d5b      	lsrs	r3, r3, #21
 8000bd0:	0ffd      	lsrs	r5, r7, #31
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_ddiv+0x68>
 8000bd6:	e128      	b.n	8000e2a <__aeabi_ddiv+0x2ba>
 8000bd8:	4ac4      	ldr	r2, [pc, #784]	@ (8000eec <__aeabi_ddiv+0x37c>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_ddiv+0x70>
 8000bde:	e177      	b.n	8000ed0 <__aeabi_ddiv+0x360>
 8000be0:	4659      	mov	r1, fp
 8000be2:	0f72      	lsrs	r2, r6, #29
 8000be4:	00c9      	lsls	r1, r1, #3
 8000be6:	430a      	orrs	r2, r1
 8000be8:	2180      	movs	r1, #128	@ 0x80
 8000bea:	0409      	lsls	r1, r1, #16
 8000bec:	4311      	orrs	r1, r2
 8000bee:	468b      	mov	fp, r1
 8000bf0:	49bf      	ldr	r1, [pc, #764]	@ (8000ef0 <__aeabi_ddiv+0x380>)
 8000bf2:	00f2      	lsls	r2, r6, #3
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	4651      	mov	r1, sl
 8000bf8:	4463      	add	r3, ip
 8000bfa:	1acb      	subs	r3, r1, r3
 8000bfc:	469a      	mov	sl, r3
 8000bfe:	2300      	movs	r3, #0
 8000c00:	9e02      	ldr	r6, [sp, #8]
 8000c02:	406e      	eors	r6, r5
 8000c04:	2c0f      	cmp	r4, #15
 8000c06:	d827      	bhi.n	8000c58 <__aeabi_ddiv+0xe8>
 8000c08:	49ba      	ldr	r1, [pc, #744]	@ (8000ef4 <__aeabi_ddiv+0x384>)
 8000c0a:	00a4      	lsls	r4, r4, #2
 8000c0c:	5909      	ldr	r1, [r1, r4]
 8000c0e:	468f      	mov	pc, r1
 8000c10:	46cb      	mov	fp, r9
 8000c12:	4642      	mov	r2, r8
 8000c14:	9e02      	ldr	r6, [sp, #8]
 8000c16:	9b03      	ldr	r3, [sp, #12]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d016      	beq.n	8000c4a <__aeabi_ddiv+0xda>
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_ddiv+0xb2>
 8000c20:	e2a6      	b.n	8001170 <__aeabi_ddiv+0x600>
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d000      	beq.n	8000c28 <__aeabi_ddiv+0xb8>
 8000c26:	e0df      	b.n	8000de8 <__aeabi_ddiv+0x278>
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	2400      	movs	r4, #0
 8000c2e:	4690      	mov	r8, r2
 8000c30:	051b      	lsls	r3, r3, #20
 8000c32:	4323      	orrs	r3, r4
 8000c34:	07f6      	lsls	r6, r6, #31
 8000c36:	4333      	orrs	r3, r6
 8000c38:	4640      	mov	r0, r8
 8000c3a:	0019      	movs	r1, r3
 8000c3c:	b007      	add	sp, #28
 8000c3e:	bcf0      	pop	{r4, r5, r6, r7}
 8000c40:	46bb      	mov	fp, r7
 8000c42:	46b2      	mov	sl, r6
 8000c44:	46a9      	mov	r9, r5
 8000c46:	46a0      	mov	r8, r4
 8000c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2400      	movs	r4, #0
 8000c4e:	4690      	mov	r8, r2
 8000c50:	4ba6      	ldr	r3, [pc, #664]	@ (8000eec <__aeabi_ddiv+0x37c>)
 8000c52:	e7ed      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000c54:	002e      	movs	r6, r5
 8000c56:	e7df      	b.n	8000c18 <__aeabi_ddiv+0xa8>
 8000c58:	45cb      	cmp	fp, r9
 8000c5a:	d200      	bcs.n	8000c5e <__aeabi_ddiv+0xee>
 8000c5c:	e1d4      	b.n	8001008 <__aeabi_ddiv+0x498>
 8000c5e:	d100      	bne.n	8000c62 <__aeabi_ddiv+0xf2>
 8000c60:	e1cf      	b.n	8001002 <__aeabi_ddiv+0x492>
 8000c62:	2301      	movs	r3, #1
 8000c64:	425b      	negs	r3, r3
 8000c66:	469c      	mov	ip, r3
 8000c68:	4644      	mov	r4, r8
 8000c6a:	4648      	mov	r0, r9
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	44e2      	add	sl, ip
 8000c70:	465b      	mov	r3, fp
 8000c72:	0e15      	lsrs	r5, r2, #24
 8000c74:	021b      	lsls	r3, r3, #8
 8000c76:	431d      	orrs	r5, r3
 8000c78:	0c19      	lsrs	r1, r3, #16
 8000c7a:	042b      	lsls	r3, r5, #16
 8000c7c:	0212      	lsls	r2, r2, #8
 8000c7e:	9500      	str	r5, [sp, #0]
 8000c80:	0c1d      	lsrs	r5, r3, #16
 8000c82:	4691      	mov	r9, r2
 8000c84:	9102      	str	r1, [sp, #8]
 8000c86:	9503      	str	r5, [sp, #12]
 8000c88:	f7ff fae0 	bl	800024c <__aeabi_uidivmod>
 8000c8c:	0002      	movs	r2, r0
 8000c8e:	436a      	muls	r2, r5
 8000c90:	040b      	lsls	r3, r1, #16
 8000c92:	0c21      	lsrs	r1, r4, #16
 8000c94:	4680      	mov	r8, r0
 8000c96:	4319      	orrs	r1, r3
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	d909      	bls.n	8000cb0 <__aeabi_ddiv+0x140>
 8000c9c:	9d00      	ldr	r5, [sp, #0]
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	46ac      	mov	ip, r5
 8000ca2:	425b      	negs	r3, r3
 8000ca4:	4461      	add	r1, ip
 8000ca6:	469c      	mov	ip, r3
 8000ca8:	44e0      	add	r8, ip
 8000caa:	428d      	cmp	r5, r1
 8000cac:	d800      	bhi.n	8000cb0 <__aeabi_ddiv+0x140>
 8000cae:	e1fb      	b.n	80010a8 <__aeabi_ddiv+0x538>
 8000cb0:	1a88      	subs	r0, r1, r2
 8000cb2:	9902      	ldr	r1, [sp, #8]
 8000cb4:	f7ff faca 	bl	800024c <__aeabi_uidivmod>
 8000cb8:	9a03      	ldr	r2, [sp, #12]
 8000cba:	0424      	lsls	r4, r4, #16
 8000cbc:	4342      	muls	r2, r0
 8000cbe:	0409      	lsls	r1, r1, #16
 8000cc0:	0c24      	lsrs	r4, r4, #16
 8000cc2:	0003      	movs	r3, r0
 8000cc4:	430c      	orrs	r4, r1
 8000cc6:	42a2      	cmp	r2, r4
 8000cc8:	d906      	bls.n	8000cd8 <__aeabi_ddiv+0x168>
 8000cca:	9900      	ldr	r1, [sp, #0]
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	468c      	mov	ip, r1
 8000cd0:	4464      	add	r4, ip
 8000cd2:	42a1      	cmp	r1, r4
 8000cd4:	d800      	bhi.n	8000cd8 <__aeabi_ddiv+0x168>
 8000cd6:	e1e1      	b.n	800109c <__aeabi_ddiv+0x52c>
 8000cd8:	1aa0      	subs	r0, r4, r2
 8000cda:	4642      	mov	r2, r8
 8000cdc:	0412      	lsls	r2, r2, #16
 8000cde:	431a      	orrs	r2, r3
 8000ce0:	4693      	mov	fp, r2
 8000ce2:	464b      	mov	r3, r9
 8000ce4:	4659      	mov	r1, fp
 8000ce6:	0c1b      	lsrs	r3, r3, #16
 8000ce8:	001d      	movs	r5, r3
 8000cea:	9304      	str	r3, [sp, #16]
 8000cec:	040b      	lsls	r3, r1, #16
 8000cee:	4649      	mov	r1, r9
 8000cf0:	0409      	lsls	r1, r1, #16
 8000cf2:	0c09      	lsrs	r1, r1, #16
 8000cf4:	000c      	movs	r4, r1
 8000cf6:	0c1b      	lsrs	r3, r3, #16
 8000cf8:	435c      	muls	r4, r3
 8000cfa:	0c12      	lsrs	r2, r2, #16
 8000cfc:	436b      	muls	r3, r5
 8000cfe:	4688      	mov	r8, r1
 8000d00:	4351      	muls	r1, r2
 8000d02:	436a      	muls	r2, r5
 8000d04:	0c25      	lsrs	r5, r4, #16
 8000d06:	46ac      	mov	ip, r5
 8000d08:	185b      	adds	r3, r3, r1
 8000d0a:	4463      	add	r3, ip
 8000d0c:	4299      	cmp	r1, r3
 8000d0e:	d903      	bls.n	8000d18 <__aeabi_ddiv+0x1a8>
 8000d10:	2180      	movs	r1, #128	@ 0x80
 8000d12:	0249      	lsls	r1, r1, #9
 8000d14:	468c      	mov	ip, r1
 8000d16:	4462      	add	r2, ip
 8000d18:	0c19      	lsrs	r1, r3, #16
 8000d1a:	0424      	lsls	r4, r4, #16
 8000d1c:	041b      	lsls	r3, r3, #16
 8000d1e:	0c24      	lsrs	r4, r4, #16
 8000d20:	188a      	adds	r2, r1, r2
 8000d22:	191c      	adds	r4, r3, r4
 8000d24:	4290      	cmp	r0, r2
 8000d26:	d302      	bcc.n	8000d2e <__aeabi_ddiv+0x1be>
 8000d28:	d116      	bne.n	8000d58 <__aeabi_ddiv+0x1e8>
 8000d2a:	42a7      	cmp	r7, r4
 8000d2c:	d214      	bcs.n	8000d58 <__aeabi_ddiv+0x1e8>
 8000d2e:	465b      	mov	r3, fp
 8000d30:	9d00      	ldr	r5, [sp, #0]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	444f      	add	r7, r9
 8000d36:	9305      	str	r3, [sp, #20]
 8000d38:	454f      	cmp	r7, r9
 8000d3a:	419b      	sbcs	r3, r3
 8000d3c:	46ac      	mov	ip, r5
 8000d3e:	425b      	negs	r3, r3
 8000d40:	4463      	add	r3, ip
 8000d42:	18c0      	adds	r0, r0, r3
 8000d44:	4285      	cmp	r5, r0
 8000d46:	d300      	bcc.n	8000d4a <__aeabi_ddiv+0x1da>
 8000d48:	e1a1      	b.n	800108e <__aeabi_ddiv+0x51e>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	d900      	bls.n	8000d50 <__aeabi_ddiv+0x1e0>
 8000d4e:	e1f6      	b.n	800113e <__aeabi_ddiv+0x5ce>
 8000d50:	d100      	bne.n	8000d54 <__aeabi_ddiv+0x1e4>
 8000d52:	e1f1      	b.n	8001138 <__aeabi_ddiv+0x5c8>
 8000d54:	9b05      	ldr	r3, [sp, #20]
 8000d56:	469b      	mov	fp, r3
 8000d58:	1b3c      	subs	r4, r7, r4
 8000d5a:	42a7      	cmp	r7, r4
 8000d5c:	41bf      	sbcs	r7, r7
 8000d5e:	9d00      	ldr	r5, [sp, #0]
 8000d60:	1a80      	subs	r0, r0, r2
 8000d62:	427f      	negs	r7, r7
 8000d64:	1bc0      	subs	r0, r0, r7
 8000d66:	4285      	cmp	r5, r0
 8000d68:	d100      	bne.n	8000d6c <__aeabi_ddiv+0x1fc>
 8000d6a:	e1d0      	b.n	800110e <__aeabi_ddiv+0x59e>
 8000d6c:	9902      	ldr	r1, [sp, #8]
 8000d6e:	f7ff fa6d 	bl	800024c <__aeabi_uidivmod>
 8000d72:	9a03      	ldr	r2, [sp, #12]
 8000d74:	040b      	lsls	r3, r1, #16
 8000d76:	4342      	muls	r2, r0
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	0007      	movs	r7, r0
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	428a      	cmp	r2, r1
 8000d80:	d900      	bls.n	8000d84 <__aeabi_ddiv+0x214>
 8000d82:	e178      	b.n	8001076 <__aeabi_ddiv+0x506>
 8000d84:	1a88      	subs	r0, r1, r2
 8000d86:	9902      	ldr	r1, [sp, #8]
 8000d88:	f7ff fa60 	bl	800024c <__aeabi_uidivmod>
 8000d8c:	9a03      	ldr	r2, [sp, #12]
 8000d8e:	0424      	lsls	r4, r4, #16
 8000d90:	4342      	muls	r2, r0
 8000d92:	0409      	lsls	r1, r1, #16
 8000d94:	0c24      	lsrs	r4, r4, #16
 8000d96:	0003      	movs	r3, r0
 8000d98:	430c      	orrs	r4, r1
 8000d9a:	42a2      	cmp	r2, r4
 8000d9c:	d900      	bls.n	8000da0 <__aeabi_ddiv+0x230>
 8000d9e:	e15d      	b.n	800105c <__aeabi_ddiv+0x4ec>
 8000da0:	4641      	mov	r1, r8
 8000da2:	1aa4      	subs	r4, r4, r2
 8000da4:	043a      	lsls	r2, r7, #16
 8000da6:	431a      	orrs	r2, r3
 8000da8:	9d04      	ldr	r5, [sp, #16]
 8000daa:	0413      	lsls	r3, r2, #16
 8000dac:	0c1b      	lsrs	r3, r3, #16
 8000dae:	4359      	muls	r1, r3
 8000db0:	4647      	mov	r7, r8
 8000db2:	436b      	muls	r3, r5
 8000db4:	469c      	mov	ip, r3
 8000db6:	0c10      	lsrs	r0, r2, #16
 8000db8:	4347      	muls	r7, r0
 8000dba:	0c0b      	lsrs	r3, r1, #16
 8000dbc:	44bc      	add	ip, r7
 8000dbe:	4463      	add	r3, ip
 8000dc0:	4368      	muls	r0, r5
 8000dc2:	429f      	cmp	r7, r3
 8000dc4:	d903      	bls.n	8000dce <__aeabi_ddiv+0x25e>
 8000dc6:	2580      	movs	r5, #128	@ 0x80
 8000dc8:	026d      	lsls	r5, r5, #9
 8000dca:	46ac      	mov	ip, r5
 8000dcc:	4460      	add	r0, ip
 8000dce:	0c1f      	lsrs	r7, r3, #16
 8000dd0:	0409      	lsls	r1, r1, #16
 8000dd2:	041b      	lsls	r3, r3, #16
 8000dd4:	0c09      	lsrs	r1, r1, #16
 8000dd6:	183f      	adds	r7, r7, r0
 8000dd8:	185b      	adds	r3, r3, r1
 8000dda:	42bc      	cmp	r4, r7
 8000ddc:	d200      	bcs.n	8000de0 <__aeabi_ddiv+0x270>
 8000dde:	e102      	b.n	8000fe6 <__aeabi_ddiv+0x476>
 8000de0:	d100      	bne.n	8000de4 <__aeabi_ddiv+0x274>
 8000de2:	e0fd      	b.n	8000fe0 <__aeabi_ddiv+0x470>
 8000de4:	2301      	movs	r3, #1
 8000de6:	431a      	orrs	r2, r3
 8000de8:	4b43      	ldr	r3, [pc, #268]	@ (8000ef8 <__aeabi_ddiv+0x388>)
 8000dea:	4453      	add	r3, sl
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	dc00      	bgt.n	8000df2 <__aeabi_ddiv+0x282>
 8000df0:	e0ae      	b.n	8000f50 <__aeabi_ddiv+0x3e0>
 8000df2:	0751      	lsls	r1, r2, #29
 8000df4:	d000      	beq.n	8000df8 <__aeabi_ddiv+0x288>
 8000df6:	e198      	b.n	800112a <__aeabi_ddiv+0x5ba>
 8000df8:	4659      	mov	r1, fp
 8000dfa:	01c9      	lsls	r1, r1, #7
 8000dfc:	d506      	bpl.n	8000e0c <__aeabi_ddiv+0x29c>
 8000dfe:	4659      	mov	r1, fp
 8000e00:	4b3e      	ldr	r3, [pc, #248]	@ (8000efc <__aeabi_ddiv+0x38c>)
 8000e02:	4019      	ands	r1, r3
 8000e04:	2380      	movs	r3, #128	@ 0x80
 8000e06:	468b      	mov	fp, r1
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	4453      	add	r3, sl
 8000e0c:	493c      	ldr	r1, [pc, #240]	@ (8000f00 <__aeabi_ddiv+0x390>)
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	dd00      	ble.n	8000e14 <__aeabi_ddiv+0x2a4>
 8000e12:	e71a      	b.n	8000c4a <__aeabi_ddiv+0xda>
 8000e14:	4659      	mov	r1, fp
 8000e16:	08d2      	lsrs	r2, r2, #3
 8000e18:	0749      	lsls	r1, r1, #29
 8000e1a:	4311      	orrs	r1, r2
 8000e1c:	465a      	mov	r2, fp
 8000e1e:	055b      	lsls	r3, r3, #21
 8000e20:	0254      	lsls	r4, r2, #9
 8000e22:	4688      	mov	r8, r1
 8000e24:	0b24      	lsrs	r4, r4, #12
 8000e26:	0d5b      	lsrs	r3, r3, #21
 8000e28:	e702      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000e2a:	465a      	mov	r2, fp
 8000e2c:	9b00      	ldr	r3, [sp, #0]
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	d100      	bne.n	8000e34 <__aeabi_ddiv+0x2c4>
 8000e32:	e07e      	b.n	8000f32 <__aeabi_ddiv+0x3c2>
 8000e34:	465b      	mov	r3, fp
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d100      	bne.n	8000e3c <__aeabi_ddiv+0x2cc>
 8000e3a:	e100      	b.n	800103e <__aeabi_ddiv+0x4ce>
 8000e3c:	4658      	mov	r0, fp
 8000e3e:	f001 f9ef 	bl	8002220 <__clzsi2>
 8000e42:	0002      	movs	r2, r0
 8000e44:	0003      	movs	r3, r0
 8000e46:	3a0b      	subs	r2, #11
 8000e48:	271d      	movs	r7, #29
 8000e4a:	9e00      	ldr	r6, [sp, #0]
 8000e4c:	1aba      	subs	r2, r7, r2
 8000e4e:	0019      	movs	r1, r3
 8000e50:	4658      	mov	r0, fp
 8000e52:	40d6      	lsrs	r6, r2
 8000e54:	3908      	subs	r1, #8
 8000e56:	4088      	lsls	r0, r1
 8000e58:	0032      	movs	r2, r6
 8000e5a:	4302      	orrs	r2, r0
 8000e5c:	4693      	mov	fp, r2
 8000e5e:	9a00      	ldr	r2, [sp, #0]
 8000e60:	408a      	lsls	r2, r1
 8000e62:	4928      	ldr	r1, [pc, #160]	@ (8000f04 <__aeabi_ddiv+0x394>)
 8000e64:	4453      	add	r3, sl
 8000e66:	468a      	mov	sl, r1
 8000e68:	449a      	add	sl, r3
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e6c8      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000e6e:	465b      	mov	r3, fp
 8000e70:	4303      	orrs	r3, r0
 8000e72:	4699      	mov	r9, r3
 8000e74:	d056      	beq.n	8000f24 <__aeabi_ddiv+0x3b4>
 8000e76:	465b      	mov	r3, fp
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d100      	bne.n	8000e7e <__aeabi_ddiv+0x30e>
 8000e7c:	e0cd      	b.n	800101a <__aeabi_ddiv+0x4aa>
 8000e7e:	4658      	mov	r0, fp
 8000e80:	f001 f9ce 	bl	8002220 <__clzsi2>
 8000e84:	230b      	movs	r3, #11
 8000e86:	425b      	negs	r3, r3
 8000e88:	469c      	mov	ip, r3
 8000e8a:	0002      	movs	r2, r0
 8000e8c:	4484      	add	ip, r0
 8000e8e:	4666      	mov	r6, ip
 8000e90:	231d      	movs	r3, #29
 8000e92:	1b9b      	subs	r3, r3, r6
 8000e94:	0026      	movs	r6, r4
 8000e96:	0011      	movs	r1, r2
 8000e98:	4658      	mov	r0, fp
 8000e9a:	40de      	lsrs	r6, r3
 8000e9c:	3908      	subs	r1, #8
 8000e9e:	4088      	lsls	r0, r1
 8000ea0:	0033      	movs	r3, r6
 8000ea2:	4303      	orrs	r3, r0
 8000ea4:	4699      	mov	r9, r3
 8000ea6:	0023      	movs	r3, r4
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	4698      	mov	r8, r3
 8000eac:	4b16      	ldr	r3, [pc, #88]	@ (8000f08 <__aeabi_ddiv+0x398>)
 8000eae:	2400      	movs	r4, #0
 8000eb0:	1a9b      	subs	r3, r3, r2
 8000eb2:	469a      	mov	sl, r3
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	9303      	str	r3, [sp, #12]
 8000eb8:	e682      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000eba:	465a      	mov	r2, fp
 8000ebc:	4302      	orrs	r2, r0
 8000ebe:	4691      	mov	r9, r2
 8000ec0:	d12a      	bne.n	8000f18 <__aeabi_ddiv+0x3a8>
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	469a      	mov	sl, r3
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	4690      	mov	r8, r2
 8000eca:	2408      	movs	r4, #8
 8000ecc:	9303      	str	r3, [sp, #12]
 8000ece:	e677      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000ed0:	465a      	mov	r2, fp
 8000ed2:	9b00      	ldr	r3, [sp, #0]
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f0c <__aeabi_ddiv+0x39c>)
 8000ed8:	469c      	mov	ip, r3
 8000eda:	44e2      	add	sl, ip
 8000edc:	2a00      	cmp	r2, #0
 8000ede:	d117      	bne.n	8000f10 <__aeabi_ddiv+0x3a0>
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	431c      	orrs	r4, r3
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	469b      	mov	fp, r3
 8000ee8:	3302      	adds	r3, #2
 8000eea:	e689      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000eec:	000007ff 	.word	0x000007ff
 8000ef0:	fffffc01 	.word	0xfffffc01
 8000ef4:	08009060 	.word	0x08009060
 8000ef8:	000003ff 	.word	0x000003ff
 8000efc:	feffffff 	.word	0xfeffffff
 8000f00:	000007fe 	.word	0x000007fe
 8000f04:	000003f3 	.word	0x000003f3
 8000f08:	fffffc0d 	.word	0xfffffc0d
 8000f0c:	fffff801 	.word	0xfffff801
 8000f10:	2303      	movs	r3, #3
 8000f12:	0032      	movs	r2, r6
 8000f14:	431c      	orrs	r4, r3
 8000f16:	e673      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000f18:	469a      	mov	sl, r3
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	46d9      	mov	r9, fp
 8000f1e:	240c      	movs	r4, #12
 8000f20:	9303      	str	r3, [sp, #12]
 8000f22:	e64d      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000f24:	2300      	movs	r3, #0
 8000f26:	4698      	mov	r8, r3
 8000f28:	469a      	mov	sl, r3
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	2404      	movs	r4, #4
 8000f2e:	9303      	str	r3, [sp, #12]
 8000f30:	e646      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000f32:	2301      	movs	r3, #1
 8000f34:	431c      	orrs	r4, r3
 8000f36:	2300      	movs	r3, #0
 8000f38:	469b      	mov	fp, r3
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	e660      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000f3e:	2300      	movs	r3, #0
 8000f40:	2480      	movs	r4, #128	@ 0x80
 8000f42:	4698      	mov	r8, r3
 8000f44:	2600      	movs	r6, #0
 8000f46:	4b92      	ldr	r3, [pc, #584]	@ (8001190 <__aeabi_ddiv+0x620>)
 8000f48:	0324      	lsls	r4, r4, #12
 8000f4a:	e671      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4252      	negs	r2, r2
 8000f50:	2101      	movs	r1, #1
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	2938      	cmp	r1, #56	@ 0x38
 8000f56:	dd00      	ble.n	8000f5a <__aeabi_ddiv+0x3ea>
 8000f58:	e666      	b.n	8000c28 <__aeabi_ddiv+0xb8>
 8000f5a:	291f      	cmp	r1, #31
 8000f5c:	dc00      	bgt.n	8000f60 <__aeabi_ddiv+0x3f0>
 8000f5e:	e0ab      	b.n	80010b8 <__aeabi_ddiv+0x548>
 8000f60:	201f      	movs	r0, #31
 8000f62:	4240      	negs	r0, r0
 8000f64:	1ac3      	subs	r3, r0, r3
 8000f66:	4658      	mov	r0, fp
 8000f68:	40d8      	lsrs	r0, r3
 8000f6a:	0003      	movs	r3, r0
 8000f6c:	2920      	cmp	r1, #32
 8000f6e:	d004      	beq.n	8000f7a <__aeabi_ddiv+0x40a>
 8000f70:	4658      	mov	r0, fp
 8000f72:	4988      	ldr	r1, [pc, #544]	@ (8001194 <__aeabi_ddiv+0x624>)
 8000f74:	4451      	add	r1, sl
 8000f76:	4088      	lsls	r0, r1
 8000f78:	4302      	orrs	r2, r0
 8000f7a:	1e51      	subs	r1, r2, #1
 8000f7c:	418a      	sbcs	r2, r1
 8000f7e:	431a      	orrs	r2, r3
 8000f80:	2307      	movs	r3, #7
 8000f82:	0019      	movs	r1, r3
 8000f84:	2400      	movs	r4, #0
 8000f86:	4011      	ands	r1, r2
 8000f88:	4213      	tst	r3, r2
 8000f8a:	d00c      	beq.n	8000fa6 <__aeabi_ddiv+0x436>
 8000f8c:	230f      	movs	r3, #15
 8000f8e:	4013      	ands	r3, r2
 8000f90:	2b04      	cmp	r3, #4
 8000f92:	d100      	bne.n	8000f96 <__aeabi_ddiv+0x426>
 8000f94:	e0f9      	b.n	800118a <__aeabi_ddiv+0x61a>
 8000f96:	1d11      	adds	r1, r2, #4
 8000f98:	4291      	cmp	r1, r2
 8000f9a:	419b      	sbcs	r3, r3
 8000f9c:	000a      	movs	r2, r1
 8000f9e:	425b      	negs	r3, r3
 8000fa0:	0759      	lsls	r1, r3, #29
 8000fa2:	025b      	lsls	r3, r3, #9
 8000fa4:	0b1c      	lsrs	r4, r3, #12
 8000fa6:	08d2      	lsrs	r2, r2, #3
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	4690      	mov	r8, r2
 8000fac:	2300      	movs	r3, #0
 8000fae:	e63f      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000fb0:	2480      	movs	r4, #128	@ 0x80
 8000fb2:	464b      	mov	r3, r9
 8000fb4:	0324      	lsls	r4, r4, #12
 8000fb6:	4223      	tst	r3, r4
 8000fb8:	d009      	beq.n	8000fce <__aeabi_ddiv+0x45e>
 8000fba:	465b      	mov	r3, fp
 8000fbc:	4223      	tst	r3, r4
 8000fbe:	d106      	bne.n	8000fce <__aeabi_ddiv+0x45e>
 8000fc0:	431c      	orrs	r4, r3
 8000fc2:	0324      	lsls	r4, r4, #12
 8000fc4:	002e      	movs	r6, r5
 8000fc6:	4690      	mov	r8, r2
 8000fc8:	4b71      	ldr	r3, [pc, #452]	@ (8001190 <__aeabi_ddiv+0x620>)
 8000fca:	0b24      	lsrs	r4, r4, #12
 8000fcc:	e630      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000fce:	2480      	movs	r4, #128	@ 0x80
 8000fd0:	464b      	mov	r3, r9
 8000fd2:	0324      	lsls	r4, r4, #12
 8000fd4:	431c      	orrs	r4, r3
 8000fd6:	0324      	lsls	r4, r4, #12
 8000fd8:	9e02      	ldr	r6, [sp, #8]
 8000fda:	4b6d      	ldr	r3, [pc, #436]	@ (8001190 <__aeabi_ddiv+0x620>)
 8000fdc:	0b24      	lsrs	r4, r4, #12
 8000fde:	e627      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d100      	bne.n	8000fe6 <__aeabi_ddiv+0x476>
 8000fe4:	e700      	b.n	8000de8 <__aeabi_ddiv+0x278>
 8000fe6:	9800      	ldr	r0, [sp, #0]
 8000fe8:	1e51      	subs	r1, r2, #1
 8000fea:	4684      	mov	ip, r0
 8000fec:	4464      	add	r4, ip
 8000fee:	4284      	cmp	r4, r0
 8000ff0:	d200      	bcs.n	8000ff4 <__aeabi_ddiv+0x484>
 8000ff2:	e084      	b.n	80010fe <__aeabi_ddiv+0x58e>
 8000ff4:	42bc      	cmp	r4, r7
 8000ff6:	d200      	bcs.n	8000ffa <__aeabi_ddiv+0x48a>
 8000ff8:	e0ae      	b.n	8001158 <__aeabi_ddiv+0x5e8>
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_ddiv+0x48e>
 8000ffc:	e0c1      	b.n	8001182 <__aeabi_ddiv+0x612>
 8000ffe:	000a      	movs	r2, r1
 8001000:	e6f0      	b.n	8000de4 <__aeabi_ddiv+0x274>
 8001002:	4542      	cmp	r2, r8
 8001004:	d900      	bls.n	8001008 <__aeabi_ddiv+0x498>
 8001006:	e62c      	b.n	8000c62 <__aeabi_ddiv+0xf2>
 8001008:	464b      	mov	r3, r9
 800100a:	07dc      	lsls	r4, r3, #31
 800100c:	0858      	lsrs	r0, r3, #1
 800100e:	4643      	mov	r3, r8
 8001010:	085b      	lsrs	r3, r3, #1
 8001012:	431c      	orrs	r4, r3
 8001014:	4643      	mov	r3, r8
 8001016:	07df      	lsls	r7, r3, #31
 8001018:	e62a      	b.n	8000c70 <__aeabi_ddiv+0x100>
 800101a:	f001 f901 	bl	8002220 <__clzsi2>
 800101e:	2315      	movs	r3, #21
 8001020:	469c      	mov	ip, r3
 8001022:	4484      	add	ip, r0
 8001024:	0002      	movs	r2, r0
 8001026:	4663      	mov	r3, ip
 8001028:	3220      	adds	r2, #32
 800102a:	2b1c      	cmp	r3, #28
 800102c:	dc00      	bgt.n	8001030 <__aeabi_ddiv+0x4c0>
 800102e:	e72e      	b.n	8000e8e <__aeabi_ddiv+0x31e>
 8001030:	0023      	movs	r3, r4
 8001032:	3808      	subs	r0, #8
 8001034:	4083      	lsls	r3, r0
 8001036:	4699      	mov	r9, r3
 8001038:	2300      	movs	r3, #0
 800103a:	4698      	mov	r8, r3
 800103c:	e736      	b.n	8000eac <__aeabi_ddiv+0x33c>
 800103e:	f001 f8ef 	bl	8002220 <__clzsi2>
 8001042:	0002      	movs	r2, r0
 8001044:	0003      	movs	r3, r0
 8001046:	3215      	adds	r2, #21
 8001048:	3320      	adds	r3, #32
 800104a:	2a1c      	cmp	r2, #28
 800104c:	dc00      	bgt.n	8001050 <__aeabi_ddiv+0x4e0>
 800104e:	e6fb      	b.n	8000e48 <__aeabi_ddiv+0x2d8>
 8001050:	9900      	ldr	r1, [sp, #0]
 8001052:	3808      	subs	r0, #8
 8001054:	4081      	lsls	r1, r0
 8001056:	2200      	movs	r2, #0
 8001058:	468b      	mov	fp, r1
 800105a:	e702      	b.n	8000e62 <__aeabi_ddiv+0x2f2>
 800105c:	9900      	ldr	r1, [sp, #0]
 800105e:	3b01      	subs	r3, #1
 8001060:	468c      	mov	ip, r1
 8001062:	4464      	add	r4, ip
 8001064:	42a1      	cmp	r1, r4
 8001066:	d900      	bls.n	800106a <__aeabi_ddiv+0x4fa>
 8001068:	e69a      	b.n	8000da0 <__aeabi_ddiv+0x230>
 800106a:	42a2      	cmp	r2, r4
 800106c:	d800      	bhi.n	8001070 <__aeabi_ddiv+0x500>
 800106e:	e697      	b.n	8000da0 <__aeabi_ddiv+0x230>
 8001070:	1e83      	subs	r3, r0, #2
 8001072:	4464      	add	r4, ip
 8001074:	e694      	b.n	8000da0 <__aeabi_ddiv+0x230>
 8001076:	46ac      	mov	ip, r5
 8001078:	4461      	add	r1, ip
 800107a:	3f01      	subs	r7, #1
 800107c:	428d      	cmp	r5, r1
 800107e:	d900      	bls.n	8001082 <__aeabi_ddiv+0x512>
 8001080:	e680      	b.n	8000d84 <__aeabi_ddiv+0x214>
 8001082:	428a      	cmp	r2, r1
 8001084:	d800      	bhi.n	8001088 <__aeabi_ddiv+0x518>
 8001086:	e67d      	b.n	8000d84 <__aeabi_ddiv+0x214>
 8001088:	1e87      	subs	r7, r0, #2
 800108a:	4461      	add	r1, ip
 800108c:	e67a      	b.n	8000d84 <__aeabi_ddiv+0x214>
 800108e:	4285      	cmp	r5, r0
 8001090:	d000      	beq.n	8001094 <__aeabi_ddiv+0x524>
 8001092:	e65f      	b.n	8000d54 <__aeabi_ddiv+0x1e4>
 8001094:	45b9      	cmp	r9, r7
 8001096:	d900      	bls.n	800109a <__aeabi_ddiv+0x52a>
 8001098:	e65c      	b.n	8000d54 <__aeabi_ddiv+0x1e4>
 800109a:	e656      	b.n	8000d4a <__aeabi_ddiv+0x1da>
 800109c:	42a2      	cmp	r2, r4
 800109e:	d800      	bhi.n	80010a2 <__aeabi_ddiv+0x532>
 80010a0:	e61a      	b.n	8000cd8 <__aeabi_ddiv+0x168>
 80010a2:	1e83      	subs	r3, r0, #2
 80010a4:	4464      	add	r4, ip
 80010a6:	e617      	b.n	8000cd8 <__aeabi_ddiv+0x168>
 80010a8:	428a      	cmp	r2, r1
 80010aa:	d800      	bhi.n	80010ae <__aeabi_ddiv+0x53e>
 80010ac:	e600      	b.n	8000cb0 <__aeabi_ddiv+0x140>
 80010ae:	46ac      	mov	ip, r5
 80010b0:	1e83      	subs	r3, r0, #2
 80010b2:	4698      	mov	r8, r3
 80010b4:	4461      	add	r1, ip
 80010b6:	e5fb      	b.n	8000cb0 <__aeabi_ddiv+0x140>
 80010b8:	4837      	ldr	r0, [pc, #220]	@ (8001198 <__aeabi_ddiv+0x628>)
 80010ba:	0014      	movs	r4, r2
 80010bc:	4450      	add	r0, sl
 80010be:	4082      	lsls	r2, r0
 80010c0:	465b      	mov	r3, fp
 80010c2:	0017      	movs	r7, r2
 80010c4:	4083      	lsls	r3, r0
 80010c6:	40cc      	lsrs	r4, r1
 80010c8:	1e7a      	subs	r2, r7, #1
 80010ca:	4197      	sbcs	r7, r2
 80010cc:	4323      	orrs	r3, r4
 80010ce:	433b      	orrs	r3, r7
 80010d0:	001a      	movs	r2, r3
 80010d2:	465b      	mov	r3, fp
 80010d4:	40cb      	lsrs	r3, r1
 80010d6:	0751      	lsls	r1, r2, #29
 80010d8:	d009      	beq.n	80010ee <__aeabi_ddiv+0x57e>
 80010da:	210f      	movs	r1, #15
 80010dc:	4011      	ands	r1, r2
 80010de:	2904      	cmp	r1, #4
 80010e0:	d005      	beq.n	80010ee <__aeabi_ddiv+0x57e>
 80010e2:	1d11      	adds	r1, r2, #4
 80010e4:	4291      	cmp	r1, r2
 80010e6:	4192      	sbcs	r2, r2
 80010e8:	4252      	negs	r2, r2
 80010ea:	189b      	adds	r3, r3, r2
 80010ec:	000a      	movs	r2, r1
 80010ee:	0219      	lsls	r1, r3, #8
 80010f0:	d400      	bmi.n	80010f4 <__aeabi_ddiv+0x584>
 80010f2:	e755      	b.n	8000fa0 <__aeabi_ddiv+0x430>
 80010f4:	2200      	movs	r2, #0
 80010f6:	2301      	movs	r3, #1
 80010f8:	2400      	movs	r4, #0
 80010fa:	4690      	mov	r8, r2
 80010fc:	e598      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 80010fe:	000a      	movs	r2, r1
 8001100:	42bc      	cmp	r4, r7
 8001102:	d000      	beq.n	8001106 <__aeabi_ddiv+0x596>
 8001104:	e66e      	b.n	8000de4 <__aeabi_ddiv+0x274>
 8001106:	454b      	cmp	r3, r9
 8001108:	d000      	beq.n	800110c <__aeabi_ddiv+0x59c>
 800110a:	e66b      	b.n	8000de4 <__aeabi_ddiv+0x274>
 800110c:	e66c      	b.n	8000de8 <__aeabi_ddiv+0x278>
 800110e:	4b23      	ldr	r3, [pc, #140]	@ (800119c <__aeabi_ddiv+0x62c>)
 8001110:	4a23      	ldr	r2, [pc, #140]	@ (80011a0 <__aeabi_ddiv+0x630>)
 8001112:	4453      	add	r3, sl
 8001114:	4592      	cmp	sl, r2
 8001116:	da00      	bge.n	800111a <__aeabi_ddiv+0x5aa>
 8001118:	e718      	b.n	8000f4c <__aeabi_ddiv+0x3dc>
 800111a:	2101      	movs	r1, #1
 800111c:	4249      	negs	r1, r1
 800111e:	1d0a      	adds	r2, r1, #4
 8001120:	428a      	cmp	r2, r1
 8001122:	4189      	sbcs	r1, r1
 8001124:	4249      	negs	r1, r1
 8001126:	448b      	add	fp, r1
 8001128:	e666      	b.n	8000df8 <__aeabi_ddiv+0x288>
 800112a:	210f      	movs	r1, #15
 800112c:	4011      	ands	r1, r2
 800112e:	2904      	cmp	r1, #4
 8001130:	d100      	bne.n	8001134 <__aeabi_ddiv+0x5c4>
 8001132:	e661      	b.n	8000df8 <__aeabi_ddiv+0x288>
 8001134:	0011      	movs	r1, r2
 8001136:	e7f2      	b.n	800111e <__aeabi_ddiv+0x5ae>
 8001138:	42bc      	cmp	r4, r7
 800113a:	d800      	bhi.n	800113e <__aeabi_ddiv+0x5ce>
 800113c:	e60a      	b.n	8000d54 <__aeabi_ddiv+0x1e4>
 800113e:	2302      	movs	r3, #2
 8001140:	425b      	negs	r3, r3
 8001142:	469c      	mov	ip, r3
 8001144:	9900      	ldr	r1, [sp, #0]
 8001146:	444f      	add	r7, r9
 8001148:	454f      	cmp	r7, r9
 800114a:	419b      	sbcs	r3, r3
 800114c:	44e3      	add	fp, ip
 800114e:	468c      	mov	ip, r1
 8001150:	425b      	negs	r3, r3
 8001152:	4463      	add	r3, ip
 8001154:	18c0      	adds	r0, r0, r3
 8001156:	e5ff      	b.n	8000d58 <__aeabi_ddiv+0x1e8>
 8001158:	4649      	mov	r1, r9
 800115a:	9d00      	ldr	r5, [sp, #0]
 800115c:	0048      	lsls	r0, r1, #1
 800115e:	4548      	cmp	r0, r9
 8001160:	4189      	sbcs	r1, r1
 8001162:	46ac      	mov	ip, r5
 8001164:	4249      	negs	r1, r1
 8001166:	4461      	add	r1, ip
 8001168:	4681      	mov	r9, r0
 800116a:	3a02      	subs	r2, #2
 800116c:	1864      	adds	r4, r4, r1
 800116e:	e7c7      	b.n	8001100 <__aeabi_ddiv+0x590>
 8001170:	2480      	movs	r4, #128	@ 0x80
 8001172:	465b      	mov	r3, fp
 8001174:	0324      	lsls	r4, r4, #12
 8001176:	431c      	orrs	r4, r3
 8001178:	0324      	lsls	r4, r4, #12
 800117a:	4690      	mov	r8, r2
 800117c:	4b04      	ldr	r3, [pc, #16]	@ (8001190 <__aeabi_ddiv+0x620>)
 800117e:	0b24      	lsrs	r4, r4, #12
 8001180:	e556      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8001182:	4599      	cmp	r9, r3
 8001184:	d3e8      	bcc.n	8001158 <__aeabi_ddiv+0x5e8>
 8001186:	000a      	movs	r2, r1
 8001188:	e7bd      	b.n	8001106 <__aeabi_ddiv+0x596>
 800118a:	2300      	movs	r3, #0
 800118c:	e708      	b.n	8000fa0 <__aeabi_ddiv+0x430>
 800118e:	46c0      	nop			@ (mov r8, r8)
 8001190:	000007ff 	.word	0x000007ff
 8001194:	0000043e 	.word	0x0000043e
 8001198:	0000041e 	.word	0x0000041e
 800119c:	000003ff 	.word	0x000003ff
 80011a0:	fffffc02 	.word	0xfffffc02

080011a4 <__eqdf2>:
 80011a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a6:	4657      	mov	r7, sl
 80011a8:	46de      	mov	lr, fp
 80011aa:	464e      	mov	r6, r9
 80011ac:	4645      	mov	r5, r8
 80011ae:	b5e0      	push	{r5, r6, r7, lr}
 80011b0:	000d      	movs	r5, r1
 80011b2:	0004      	movs	r4, r0
 80011b4:	0fe8      	lsrs	r0, r5, #31
 80011b6:	4683      	mov	fp, r0
 80011b8:	0309      	lsls	r1, r1, #12
 80011ba:	0fd8      	lsrs	r0, r3, #31
 80011bc:	0b09      	lsrs	r1, r1, #12
 80011be:	4682      	mov	sl, r0
 80011c0:	4819      	ldr	r0, [pc, #100]	@ (8001228 <__eqdf2+0x84>)
 80011c2:	468c      	mov	ip, r1
 80011c4:	031f      	lsls	r7, r3, #12
 80011c6:	0069      	lsls	r1, r5, #1
 80011c8:	005e      	lsls	r6, r3, #1
 80011ca:	0d49      	lsrs	r1, r1, #21
 80011cc:	0b3f      	lsrs	r7, r7, #12
 80011ce:	0d76      	lsrs	r6, r6, #21
 80011d0:	4281      	cmp	r1, r0
 80011d2:	d018      	beq.n	8001206 <__eqdf2+0x62>
 80011d4:	4286      	cmp	r6, r0
 80011d6:	d00f      	beq.n	80011f8 <__eqdf2+0x54>
 80011d8:	2001      	movs	r0, #1
 80011da:	42b1      	cmp	r1, r6
 80011dc:	d10d      	bne.n	80011fa <__eqdf2+0x56>
 80011de:	45bc      	cmp	ip, r7
 80011e0:	d10b      	bne.n	80011fa <__eqdf2+0x56>
 80011e2:	4294      	cmp	r4, r2
 80011e4:	d109      	bne.n	80011fa <__eqdf2+0x56>
 80011e6:	45d3      	cmp	fp, sl
 80011e8:	d01c      	beq.n	8001224 <__eqdf2+0x80>
 80011ea:	2900      	cmp	r1, #0
 80011ec:	d105      	bne.n	80011fa <__eqdf2+0x56>
 80011ee:	4660      	mov	r0, ip
 80011f0:	4320      	orrs	r0, r4
 80011f2:	1e43      	subs	r3, r0, #1
 80011f4:	4198      	sbcs	r0, r3
 80011f6:	e000      	b.n	80011fa <__eqdf2+0x56>
 80011f8:	2001      	movs	r0, #1
 80011fa:	bcf0      	pop	{r4, r5, r6, r7}
 80011fc:	46bb      	mov	fp, r7
 80011fe:	46b2      	mov	sl, r6
 8001200:	46a9      	mov	r9, r5
 8001202:	46a0      	mov	r8, r4
 8001204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001206:	2001      	movs	r0, #1
 8001208:	428e      	cmp	r6, r1
 800120a:	d1f6      	bne.n	80011fa <__eqdf2+0x56>
 800120c:	4661      	mov	r1, ip
 800120e:	4339      	orrs	r1, r7
 8001210:	000f      	movs	r7, r1
 8001212:	4317      	orrs	r7, r2
 8001214:	4327      	orrs	r7, r4
 8001216:	d1f0      	bne.n	80011fa <__eqdf2+0x56>
 8001218:	465b      	mov	r3, fp
 800121a:	4652      	mov	r2, sl
 800121c:	1a98      	subs	r0, r3, r2
 800121e:	1e43      	subs	r3, r0, #1
 8001220:	4198      	sbcs	r0, r3
 8001222:	e7ea      	b.n	80011fa <__eqdf2+0x56>
 8001224:	2000      	movs	r0, #0
 8001226:	e7e8      	b.n	80011fa <__eqdf2+0x56>
 8001228:	000007ff 	.word	0x000007ff

0800122c <__gedf2>:
 800122c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800122e:	4657      	mov	r7, sl
 8001230:	464e      	mov	r6, r9
 8001232:	4645      	mov	r5, r8
 8001234:	46de      	mov	lr, fp
 8001236:	b5e0      	push	{r5, r6, r7, lr}
 8001238:	000d      	movs	r5, r1
 800123a:	030f      	lsls	r7, r1, #12
 800123c:	0b39      	lsrs	r1, r7, #12
 800123e:	b083      	sub	sp, #12
 8001240:	0004      	movs	r4, r0
 8001242:	4680      	mov	r8, r0
 8001244:	9101      	str	r1, [sp, #4]
 8001246:	0058      	lsls	r0, r3, #1
 8001248:	0fe9      	lsrs	r1, r5, #31
 800124a:	4f31      	ldr	r7, [pc, #196]	@ (8001310 <__gedf2+0xe4>)
 800124c:	0d40      	lsrs	r0, r0, #21
 800124e:	468c      	mov	ip, r1
 8001250:	006e      	lsls	r6, r5, #1
 8001252:	0319      	lsls	r1, r3, #12
 8001254:	4682      	mov	sl, r0
 8001256:	4691      	mov	r9, r2
 8001258:	0d76      	lsrs	r6, r6, #21
 800125a:	0b09      	lsrs	r1, r1, #12
 800125c:	0fd8      	lsrs	r0, r3, #31
 800125e:	42be      	cmp	r6, r7
 8001260:	d01f      	beq.n	80012a2 <__gedf2+0x76>
 8001262:	45ba      	cmp	sl, r7
 8001264:	d00f      	beq.n	8001286 <__gedf2+0x5a>
 8001266:	2e00      	cmp	r6, #0
 8001268:	d12f      	bne.n	80012ca <__gedf2+0x9e>
 800126a:	4655      	mov	r5, sl
 800126c:	9e01      	ldr	r6, [sp, #4]
 800126e:	4334      	orrs	r4, r6
 8001270:	2d00      	cmp	r5, #0
 8001272:	d127      	bne.n	80012c4 <__gedf2+0x98>
 8001274:	430a      	orrs	r2, r1
 8001276:	d03a      	beq.n	80012ee <__gedf2+0xc2>
 8001278:	2c00      	cmp	r4, #0
 800127a:	d145      	bne.n	8001308 <__gedf2+0xdc>
 800127c:	2800      	cmp	r0, #0
 800127e:	d11a      	bne.n	80012b6 <__gedf2+0x8a>
 8001280:	2001      	movs	r0, #1
 8001282:	4240      	negs	r0, r0
 8001284:	e017      	b.n	80012b6 <__gedf2+0x8a>
 8001286:	4311      	orrs	r1, r2
 8001288:	d13b      	bne.n	8001302 <__gedf2+0xd6>
 800128a:	2e00      	cmp	r6, #0
 800128c:	d102      	bne.n	8001294 <__gedf2+0x68>
 800128e:	9f01      	ldr	r7, [sp, #4]
 8001290:	4327      	orrs	r7, r4
 8001292:	d0f3      	beq.n	800127c <__gedf2+0x50>
 8001294:	4584      	cmp	ip, r0
 8001296:	d109      	bne.n	80012ac <__gedf2+0x80>
 8001298:	4663      	mov	r3, ip
 800129a:	2b00      	cmp	r3, #0
 800129c:	d0f0      	beq.n	8001280 <__gedf2+0x54>
 800129e:	4660      	mov	r0, ip
 80012a0:	e009      	b.n	80012b6 <__gedf2+0x8a>
 80012a2:	9f01      	ldr	r7, [sp, #4]
 80012a4:	4327      	orrs	r7, r4
 80012a6:	d12c      	bne.n	8001302 <__gedf2+0xd6>
 80012a8:	45b2      	cmp	sl, r6
 80012aa:	d024      	beq.n	80012f6 <__gedf2+0xca>
 80012ac:	4663      	mov	r3, ip
 80012ae:	2002      	movs	r0, #2
 80012b0:	3b01      	subs	r3, #1
 80012b2:	4018      	ands	r0, r3
 80012b4:	3801      	subs	r0, #1
 80012b6:	b003      	add	sp, #12
 80012b8:	bcf0      	pop	{r4, r5, r6, r7}
 80012ba:	46bb      	mov	fp, r7
 80012bc:	46b2      	mov	sl, r6
 80012be:	46a9      	mov	r9, r5
 80012c0:	46a0      	mov	r8, r4
 80012c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c4:	2c00      	cmp	r4, #0
 80012c6:	d0d9      	beq.n	800127c <__gedf2+0x50>
 80012c8:	e7e4      	b.n	8001294 <__gedf2+0x68>
 80012ca:	4654      	mov	r4, sl
 80012cc:	2c00      	cmp	r4, #0
 80012ce:	d0ed      	beq.n	80012ac <__gedf2+0x80>
 80012d0:	4584      	cmp	ip, r0
 80012d2:	d1eb      	bne.n	80012ac <__gedf2+0x80>
 80012d4:	4556      	cmp	r6, sl
 80012d6:	dce9      	bgt.n	80012ac <__gedf2+0x80>
 80012d8:	dbde      	blt.n	8001298 <__gedf2+0x6c>
 80012da:	9b01      	ldr	r3, [sp, #4]
 80012dc:	428b      	cmp	r3, r1
 80012de:	d8e5      	bhi.n	80012ac <__gedf2+0x80>
 80012e0:	d1da      	bne.n	8001298 <__gedf2+0x6c>
 80012e2:	45c8      	cmp	r8, r9
 80012e4:	d8e2      	bhi.n	80012ac <__gedf2+0x80>
 80012e6:	2000      	movs	r0, #0
 80012e8:	45c8      	cmp	r8, r9
 80012ea:	d2e4      	bcs.n	80012b6 <__gedf2+0x8a>
 80012ec:	e7d4      	b.n	8001298 <__gedf2+0x6c>
 80012ee:	2000      	movs	r0, #0
 80012f0:	2c00      	cmp	r4, #0
 80012f2:	d0e0      	beq.n	80012b6 <__gedf2+0x8a>
 80012f4:	e7da      	b.n	80012ac <__gedf2+0x80>
 80012f6:	4311      	orrs	r1, r2
 80012f8:	d103      	bne.n	8001302 <__gedf2+0xd6>
 80012fa:	4584      	cmp	ip, r0
 80012fc:	d1d6      	bne.n	80012ac <__gedf2+0x80>
 80012fe:	2000      	movs	r0, #0
 8001300:	e7d9      	b.n	80012b6 <__gedf2+0x8a>
 8001302:	2002      	movs	r0, #2
 8001304:	4240      	negs	r0, r0
 8001306:	e7d6      	b.n	80012b6 <__gedf2+0x8a>
 8001308:	4584      	cmp	ip, r0
 800130a:	d0e6      	beq.n	80012da <__gedf2+0xae>
 800130c:	e7ce      	b.n	80012ac <__gedf2+0x80>
 800130e:	46c0      	nop			@ (mov r8, r8)
 8001310:	000007ff 	.word	0x000007ff

08001314 <__ledf2>:
 8001314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001316:	4657      	mov	r7, sl
 8001318:	464e      	mov	r6, r9
 800131a:	4645      	mov	r5, r8
 800131c:	46de      	mov	lr, fp
 800131e:	b5e0      	push	{r5, r6, r7, lr}
 8001320:	000d      	movs	r5, r1
 8001322:	030f      	lsls	r7, r1, #12
 8001324:	0004      	movs	r4, r0
 8001326:	4680      	mov	r8, r0
 8001328:	0fe8      	lsrs	r0, r5, #31
 800132a:	0b39      	lsrs	r1, r7, #12
 800132c:	4684      	mov	ip, r0
 800132e:	b083      	sub	sp, #12
 8001330:	0058      	lsls	r0, r3, #1
 8001332:	4f30      	ldr	r7, [pc, #192]	@ (80013f4 <__ledf2+0xe0>)
 8001334:	0d40      	lsrs	r0, r0, #21
 8001336:	9101      	str	r1, [sp, #4]
 8001338:	031e      	lsls	r6, r3, #12
 800133a:	0069      	lsls	r1, r5, #1
 800133c:	4682      	mov	sl, r0
 800133e:	4691      	mov	r9, r2
 8001340:	0d49      	lsrs	r1, r1, #21
 8001342:	0b36      	lsrs	r6, r6, #12
 8001344:	0fd8      	lsrs	r0, r3, #31
 8001346:	42b9      	cmp	r1, r7
 8001348:	d020      	beq.n	800138c <__ledf2+0x78>
 800134a:	45ba      	cmp	sl, r7
 800134c:	d00f      	beq.n	800136e <__ledf2+0x5a>
 800134e:	2900      	cmp	r1, #0
 8001350:	d12b      	bne.n	80013aa <__ledf2+0x96>
 8001352:	9901      	ldr	r1, [sp, #4]
 8001354:	430c      	orrs	r4, r1
 8001356:	4651      	mov	r1, sl
 8001358:	2900      	cmp	r1, #0
 800135a:	d137      	bne.n	80013cc <__ledf2+0xb8>
 800135c:	4332      	orrs	r2, r6
 800135e:	d038      	beq.n	80013d2 <__ledf2+0xbe>
 8001360:	2c00      	cmp	r4, #0
 8001362:	d144      	bne.n	80013ee <__ledf2+0xda>
 8001364:	2800      	cmp	r0, #0
 8001366:	d119      	bne.n	800139c <__ledf2+0x88>
 8001368:	2001      	movs	r0, #1
 800136a:	4240      	negs	r0, r0
 800136c:	e016      	b.n	800139c <__ledf2+0x88>
 800136e:	4316      	orrs	r6, r2
 8001370:	d113      	bne.n	800139a <__ledf2+0x86>
 8001372:	2900      	cmp	r1, #0
 8001374:	d102      	bne.n	800137c <__ledf2+0x68>
 8001376:	9f01      	ldr	r7, [sp, #4]
 8001378:	4327      	orrs	r7, r4
 800137a:	d0f3      	beq.n	8001364 <__ledf2+0x50>
 800137c:	4584      	cmp	ip, r0
 800137e:	d020      	beq.n	80013c2 <__ledf2+0xae>
 8001380:	4663      	mov	r3, ip
 8001382:	2002      	movs	r0, #2
 8001384:	3b01      	subs	r3, #1
 8001386:	4018      	ands	r0, r3
 8001388:	3801      	subs	r0, #1
 800138a:	e007      	b.n	800139c <__ledf2+0x88>
 800138c:	9f01      	ldr	r7, [sp, #4]
 800138e:	4327      	orrs	r7, r4
 8001390:	d103      	bne.n	800139a <__ledf2+0x86>
 8001392:	458a      	cmp	sl, r1
 8001394:	d1f4      	bne.n	8001380 <__ledf2+0x6c>
 8001396:	4316      	orrs	r6, r2
 8001398:	d01f      	beq.n	80013da <__ledf2+0xc6>
 800139a:	2002      	movs	r0, #2
 800139c:	b003      	add	sp, #12
 800139e:	bcf0      	pop	{r4, r5, r6, r7}
 80013a0:	46bb      	mov	fp, r7
 80013a2:	46b2      	mov	sl, r6
 80013a4:	46a9      	mov	r9, r5
 80013a6:	46a0      	mov	r8, r4
 80013a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013aa:	4654      	mov	r4, sl
 80013ac:	2c00      	cmp	r4, #0
 80013ae:	d0e7      	beq.n	8001380 <__ledf2+0x6c>
 80013b0:	4584      	cmp	ip, r0
 80013b2:	d1e5      	bne.n	8001380 <__ledf2+0x6c>
 80013b4:	4551      	cmp	r1, sl
 80013b6:	dce3      	bgt.n	8001380 <__ledf2+0x6c>
 80013b8:	db03      	blt.n	80013c2 <__ledf2+0xae>
 80013ba:	9b01      	ldr	r3, [sp, #4]
 80013bc:	42b3      	cmp	r3, r6
 80013be:	d8df      	bhi.n	8001380 <__ledf2+0x6c>
 80013c0:	d00f      	beq.n	80013e2 <__ledf2+0xce>
 80013c2:	4663      	mov	r3, ip
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0cf      	beq.n	8001368 <__ledf2+0x54>
 80013c8:	4660      	mov	r0, ip
 80013ca:	e7e7      	b.n	800139c <__ledf2+0x88>
 80013cc:	2c00      	cmp	r4, #0
 80013ce:	d0c9      	beq.n	8001364 <__ledf2+0x50>
 80013d0:	e7d4      	b.n	800137c <__ledf2+0x68>
 80013d2:	2000      	movs	r0, #0
 80013d4:	2c00      	cmp	r4, #0
 80013d6:	d0e1      	beq.n	800139c <__ledf2+0x88>
 80013d8:	e7d2      	b.n	8001380 <__ledf2+0x6c>
 80013da:	4584      	cmp	ip, r0
 80013dc:	d1d0      	bne.n	8001380 <__ledf2+0x6c>
 80013de:	2000      	movs	r0, #0
 80013e0:	e7dc      	b.n	800139c <__ledf2+0x88>
 80013e2:	45c8      	cmp	r8, r9
 80013e4:	d8cc      	bhi.n	8001380 <__ledf2+0x6c>
 80013e6:	2000      	movs	r0, #0
 80013e8:	45c8      	cmp	r8, r9
 80013ea:	d2d7      	bcs.n	800139c <__ledf2+0x88>
 80013ec:	e7e9      	b.n	80013c2 <__ledf2+0xae>
 80013ee:	4584      	cmp	ip, r0
 80013f0:	d0e3      	beq.n	80013ba <__ledf2+0xa6>
 80013f2:	e7c5      	b.n	8001380 <__ledf2+0x6c>
 80013f4:	000007ff 	.word	0x000007ff

080013f8 <__aeabi_dmul>:
 80013f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fa:	4657      	mov	r7, sl
 80013fc:	46de      	mov	lr, fp
 80013fe:	464e      	mov	r6, r9
 8001400:	4645      	mov	r5, r8
 8001402:	b5e0      	push	{r5, r6, r7, lr}
 8001404:	001f      	movs	r7, r3
 8001406:	030b      	lsls	r3, r1, #12
 8001408:	0b1b      	lsrs	r3, r3, #12
 800140a:	0016      	movs	r6, r2
 800140c:	469a      	mov	sl, r3
 800140e:	0fca      	lsrs	r2, r1, #31
 8001410:	004b      	lsls	r3, r1, #1
 8001412:	0004      	movs	r4, r0
 8001414:	4693      	mov	fp, r2
 8001416:	b087      	sub	sp, #28
 8001418:	0d5b      	lsrs	r3, r3, #21
 800141a:	d100      	bne.n	800141e <__aeabi_dmul+0x26>
 800141c:	e0d5      	b.n	80015ca <__aeabi_dmul+0x1d2>
 800141e:	4abb      	ldr	r2, [pc, #748]	@ (800170c <__aeabi_dmul+0x314>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d100      	bne.n	8001426 <__aeabi_dmul+0x2e>
 8001424:	e0f8      	b.n	8001618 <__aeabi_dmul+0x220>
 8001426:	4651      	mov	r1, sl
 8001428:	0f42      	lsrs	r2, r0, #29
 800142a:	00c9      	lsls	r1, r1, #3
 800142c:	430a      	orrs	r2, r1
 800142e:	2180      	movs	r1, #128	@ 0x80
 8001430:	0409      	lsls	r1, r1, #16
 8001432:	4311      	orrs	r1, r2
 8001434:	00c2      	lsls	r2, r0, #3
 8001436:	4691      	mov	r9, r2
 8001438:	4ab5      	ldr	r2, [pc, #724]	@ (8001710 <__aeabi_dmul+0x318>)
 800143a:	468a      	mov	sl, r1
 800143c:	189d      	adds	r5, r3, r2
 800143e:	2300      	movs	r3, #0
 8001440:	4698      	mov	r8, r3
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	033c      	lsls	r4, r7, #12
 8001446:	007b      	lsls	r3, r7, #1
 8001448:	0ffa      	lsrs	r2, r7, #31
 800144a:	0030      	movs	r0, r6
 800144c:	0b24      	lsrs	r4, r4, #12
 800144e:	0d5b      	lsrs	r3, r3, #21
 8001450:	9200      	str	r2, [sp, #0]
 8001452:	d100      	bne.n	8001456 <__aeabi_dmul+0x5e>
 8001454:	e096      	b.n	8001584 <__aeabi_dmul+0x18c>
 8001456:	4aad      	ldr	r2, [pc, #692]	@ (800170c <__aeabi_dmul+0x314>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d031      	beq.n	80014c0 <__aeabi_dmul+0xc8>
 800145c:	0f72      	lsrs	r2, r6, #29
 800145e:	00e4      	lsls	r4, r4, #3
 8001460:	4322      	orrs	r2, r4
 8001462:	2480      	movs	r4, #128	@ 0x80
 8001464:	0424      	lsls	r4, r4, #16
 8001466:	4314      	orrs	r4, r2
 8001468:	4aa9      	ldr	r2, [pc, #676]	@ (8001710 <__aeabi_dmul+0x318>)
 800146a:	00f0      	lsls	r0, r6, #3
 800146c:	4694      	mov	ip, r2
 800146e:	4463      	add	r3, ip
 8001470:	195b      	adds	r3, r3, r5
 8001472:	1c5a      	adds	r2, r3, #1
 8001474:	9201      	str	r2, [sp, #4]
 8001476:	4642      	mov	r2, r8
 8001478:	2600      	movs	r6, #0
 800147a:	2a0a      	cmp	r2, #10
 800147c:	dc42      	bgt.n	8001504 <__aeabi_dmul+0x10c>
 800147e:	465a      	mov	r2, fp
 8001480:	9900      	ldr	r1, [sp, #0]
 8001482:	404a      	eors	r2, r1
 8001484:	4693      	mov	fp, r2
 8001486:	4642      	mov	r2, r8
 8001488:	2a02      	cmp	r2, #2
 800148a:	dc32      	bgt.n	80014f2 <__aeabi_dmul+0xfa>
 800148c:	3a01      	subs	r2, #1
 800148e:	2a01      	cmp	r2, #1
 8001490:	d900      	bls.n	8001494 <__aeabi_dmul+0x9c>
 8001492:	e149      	b.n	8001728 <__aeabi_dmul+0x330>
 8001494:	2e02      	cmp	r6, #2
 8001496:	d100      	bne.n	800149a <__aeabi_dmul+0xa2>
 8001498:	e0ca      	b.n	8001630 <__aeabi_dmul+0x238>
 800149a:	2e01      	cmp	r6, #1
 800149c:	d13d      	bne.n	800151a <__aeabi_dmul+0x122>
 800149e:	2300      	movs	r3, #0
 80014a0:	2400      	movs	r4, #0
 80014a2:	2200      	movs	r2, #0
 80014a4:	0010      	movs	r0, r2
 80014a6:	465a      	mov	r2, fp
 80014a8:	051b      	lsls	r3, r3, #20
 80014aa:	4323      	orrs	r3, r4
 80014ac:	07d2      	lsls	r2, r2, #31
 80014ae:	4313      	orrs	r3, r2
 80014b0:	0019      	movs	r1, r3
 80014b2:	b007      	add	sp, #28
 80014b4:	bcf0      	pop	{r4, r5, r6, r7}
 80014b6:	46bb      	mov	fp, r7
 80014b8:	46b2      	mov	sl, r6
 80014ba:	46a9      	mov	r9, r5
 80014bc:	46a0      	mov	r8, r4
 80014be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014c0:	4b92      	ldr	r3, [pc, #584]	@ (800170c <__aeabi_dmul+0x314>)
 80014c2:	4326      	orrs	r6, r4
 80014c4:	18eb      	adds	r3, r5, r3
 80014c6:	2e00      	cmp	r6, #0
 80014c8:	d100      	bne.n	80014cc <__aeabi_dmul+0xd4>
 80014ca:	e0bb      	b.n	8001644 <__aeabi_dmul+0x24c>
 80014cc:	2203      	movs	r2, #3
 80014ce:	4641      	mov	r1, r8
 80014d0:	4311      	orrs	r1, r2
 80014d2:	465a      	mov	r2, fp
 80014d4:	4688      	mov	r8, r1
 80014d6:	9900      	ldr	r1, [sp, #0]
 80014d8:	404a      	eors	r2, r1
 80014da:	2180      	movs	r1, #128	@ 0x80
 80014dc:	0109      	lsls	r1, r1, #4
 80014de:	468c      	mov	ip, r1
 80014e0:	0029      	movs	r1, r5
 80014e2:	4461      	add	r1, ip
 80014e4:	9101      	str	r1, [sp, #4]
 80014e6:	4641      	mov	r1, r8
 80014e8:	290a      	cmp	r1, #10
 80014ea:	dd00      	ble.n	80014ee <__aeabi_dmul+0xf6>
 80014ec:	e233      	b.n	8001956 <__aeabi_dmul+0x55e>
 80014ee:	4693      	mov	fp, r2
 80014f0:	2603      	movs	r6, #3
 80014f2:	4642      	mov	r2, r8
 80014f4:	2701      	movs	r7, #1
 80014f6:	4097      	lsls	r7, r2
 80014f8:	21a6      	movs	r1, #166	@ 0xa6
 80014fa:	003a      	movs	r2, r7
 80014fc:	00c9      	lsls	r1, r1, #3
 80014fe:	400a      	ands	r2, r1
 8001500:	420f      	tst	r7, r1
 8001502:	d031      	beq.n	8001568 <__aeabi_dmul+0x170>
 8001504:	9e02      	ldr	r6, [sp, #8]
 8001506:	2e02      	cmp	r6, #2
 8001508:	d100      	bne.n	800150c <__aeabi_dmul+0x114>
 800150a:	e235      	b.n	8001978 <__aeabi_dmul+0x580>
 800150c:	2e03      	cmp	r6, #3
 800150e:	d100      	bne.n	8001512 <__aeabi_dmul+0x11a>
 8001510:	e1d2      	b.n	80018b8 <__aeabi_dmul+0x4c0>
 8001512:	4654      	mov	r4, sl
 8001514:	4648      	mov	r0, r9
 8001516:	2e01      	cmp	r6, #1
 8001518:	d0c1      	beq.n	800149e <__aeabi_dmul+0xa6>
 800151a:	9a01      	ldr	r2, [sp, #4]
 800151c:	4b7d      	ldr	r3, [pc, #500]	@ (8001714 <__aeabi_dmul+0x31c>)
 800151e:	4694      	mov	ip, r2
 8001520:	4463      	add	r3, ip
 8001522:	2b00      	cmp	r3, #0
 8001524:	dc00      	bgt.n	8001528 <__aeabi_dmul+0x130>
 8001526:	e0c0      	b.n	80016aa <__aeabi_dmul+0x2b2>
 8001528:	0742      	lsls	r2, r0, #29
 800152a:	d009      	beq.n	8001540 <__aeabi_dmul+0x148>
 800152c:	220f      	movs	r2, #15
 800152e:	4002      	ands	r2, r0
 8001530:	2a04      	cmp	r2, #4
 8001532:	d005      	beq.n	8001540 <__aeabi_dmul+0x148>
 8001534:	1d02      	adds	r2, r0, #4
 8001536:	4282      	cmp	r2, r0
 8001538:	4180      	sbcs	r0, r0
 800153a:	4240      	negs	r0, r0
 800153c:	1824      	adds	r4, r4, r0
 800153e:	0010      	movs	r0, r2
 8001540:	01e2      	lsls	r2, r4, #7
 8001542:	d506      	bpl.n	8001552 <__aeabi_dmul+0x15a>
 8001544:	4b74      	ldr	r3, [pc, #464]	@ (8001718 <__aeabi_dmul+0x320>)
 8001546:	9a01      	ldr	r2, [sp, #4]
 8001548:	401c      	ands	r4, r3
 800154a:	2380      	movs	r3, #128	@ 0x80
 800154c:	4694      	mov	ip, r2
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	4463      	add	r3, ip
 8001552:	4a72      	ldr	r2, [pc, #456]	@ (800171c <__aeabi_dmul+0x324>)
 8001554:	4293      	cmp	r3, r2
 8001556:	dc6b      	bgt.n	8001630 <__aeabi_dmul+0x238>
 8001558:	0762      	lsls	r2, r4, #29
 800155a:	08c0      	lsrs	r0, r0, #3
 800155c:	0264      	lsls	r4, r4, #9
 800155e:	055b      	lsls	r3, r3, #21
 8001560:	4302      	orrs	r2, r0
 8001562:	0b24      	lsrs	r4, r4, #12
 8001564:	0d5b      	lsrs	r3, r3, #21
 8001566:	e79d      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001568:	2190      	movs	r1, #144	@ 0x90
 800156a:	0089      	lsls	r1, r1, #2
 800156c:	420f      	tst	r7, r1
 800156e:	d163      	bne.n	8001638 <__aeabi_dmul+0x240>
 8001570:	2288      	movs	r2, #136	@ 0x88
 8001572:	423a      	tst	r2, r7
 8001574:	d100      	bne.n	8001578 <__aeabi_dmul+0x180>
 8001576:	e0d7      	b.n	8001728 <__aeabi_dmul+0x330>
 8001578:	9b00      	ldr	r3, [sp, #0]
 800157a:	46a2      	mov	sl, r4
 800157c:	469b      	mov	fp, r3
 800157e:	4681      	mov	r9, r0
 8001580:	9602      	str	r6, [sp, #8]
 8001582:	e7bf      	b.n	8001504 <__aeabi_dmul+0x10c>
 8001584:	0023      	movs	r3, r4
 8001586:	4333      	orrs	r3, r6
 8001588:	d100      	bne.n	800158c <__aeabi_dmul+0x194>
 800158a:	e07f      	b.n	800168c <__aeabi_dmul+0x294>
 800158c:	2c00      	cmp	r4, #0
 800158e:	d100      	bne.n	8001592 <__aeabi_dmul+0x19a>
 8001590:	e1ad      	b.n	80018ee <__aeabi_dmul+0x4f6>
 8001592:	0020      	movs	r0, r4
 8001594:	f000 fe44 	bl	8002220 <__clzsi2>
 8001598:	0002      	movs	r2, r0
 800159a:	0003      	movs	r3, r0
 800159c:	3a0b      	subs	r2, #11
 800159e:	201d      	movs	r0, #29
 80015a0:	0019      	movs	r1, r3
 80015a2:	1a82      	subs	r2, r0, r2
 80015a4:	0030      	movs	r0, r6
 80015a6:	3908      	subs	r1, #8
 80015a8:	40d0      	lsrs	r0, r2
 80015aa:	408c      	lsls	r4, r1
 80015ac:	4304      	orrs	r4, r0
 80015ae:	0030      	movs	r0, r6
 80015b0:	4088      	lsls	r0, r1
 80015b2:	4a5b      	ldr	r2, [pc, #364]	@ (8001720 <__aeabi_dmul+0x328>)
 80015b4:	1aeb      	subs	r3, r5, r3
 80015b6:	4694      	mov	ip, r2
 80015b8:	4463      	add	r3, ip
 80015ba:	1c5a      	adds	r2, r3, #1
 80015bc:	9201      	str	r2, [sp, #4]
 80015be:	4642      	mov	r2, r8
 80015c0:	2600      	movs	r6, #0
 80015c2:	2a0a      	cmp	r2, #10
 80015c4:	dc00      	bgt.n	80015c8 <__aeabi_dmul+0x1d0>
 80015c6:	e75a      	b.n	800147e <__aeabi_dmul+0x86>
 80015c8:	e79c      	b.n	8001504 <__aeabi_dmul+0x10c>
 80015ca:	4653      	mov	r3, sl
 80015cc:	4303      	orrs	r3, r0
 80015ce:	4699      	mov	r9, r3
 80015d0:	d054      	beq.n	800167c <__aeabi_dmul+0x284>
 80015d2:	4653      	mov	r3, sl
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d100      	bne.n	80015da <__aeabi_dmul+0x1e2>
 80015d8:	e177      	b.n	80018ca <__aeabi_dmul+0x4d2>
 80015da:	4650      	mov	r0, sl
 80015dc:	f000 fe20 	bl	8002220 <__clzsi2>
 80015e0:	230b      	movs	r3, #11
 80015e2:	425b      	negs	r3, r3
 80015e4:	469c      	mov	ip, r3
 80015e6:	0002      	movs	r2, r0
 80015e8:	4484      	add	ip, r0
 80015ea:	0011      	movs	r1, r2
 80015ec:	4650      	mov	r0, sl
 80015ee:	3908      	subs	r1, #8
 80015f0:	4088      	lsls	r0, r1
 80015f2:	231d      	movs	r3, #29
 80015f4:	4680      	mov	r8, r0
 80015f6:	4660      	mov	r0, ip
 80015f8:	1a1b      	subs	r3, r3, r0
 80015fa:	0020      	movs	r0, r4
 80015fc:	40d8      	lsrs	r0, r3
 80015fe:	0003      	movs	r3, r0
 8001600:	4640      	mov	r0, r8
 8001602:	4303      	orrs	r3, r0
 8001604:	469a      	mov	sl, r3
 8001606:	0023      	movs	r3, r4
 8001608:	408b      	lsls	r3, r1
 800160a:	4699      	mov	r9, r3
 800160c:	2300      	movs	r3, #0
 800160e:	4d44      	ldr	r5, [pc, #272]	@ (8001720 <__aeabi_dmul+0x328>)
 8001610:	4698      	mov	r8, r3
 8001612:	1aad      	subs	r5, r5, r2
 8001614:	9302      	str	r3, [sp, #8]
 8001616:	e715      	b.n	8001444 <__aeabi_dmul+0x4c>
 8001618:	4652      	mov	r2, sl
 800161a:	4302      	orrs	r2, r0
 800161c:	4691      	mov	r9, r2
 800161e:	d126      	bne.n	800166e <__aeabi_dmul+0x276>
 8001620:	2200      	movs	r2, #0
 8001622:	001d      	movs	r5, r3
 8001624:	2302      	movs	r3, #2
 8001626:	4692      	mov	sl, r2
 8001628:	3208      	adds	r2, #8
 800162a:	4690      	mov	r8, r2
 800162c:	9302      	str	r3, [sp, #8]
 800162e:	e709      	b.n	8001444 <__aeabi_dmul+0x4c>
 8001630:	2400      	movs	r4, #0
 8001632:	2200      	movs	r2, #0
 8001634:	4b35      	ldr	r3, [pc, #212]	@ (800170c <__aeabi_dmul+0x314>)
 8001636:	e735      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001638:	2300      	movs	r3, #0
 800163a:	2480      	movs	r4, #128	@ 0x80
 800163c:	469b      	mov	fp, r3
 800163e:	0324      	lsls	r4, r4, #12
 8001640:	4b32      	ldr	r3, [pc, #200]	@ (800170c <__aeabi_dmul+0x314>)
 8001642:	e72f      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001644:	2202      	movs	r2, #2
 8001646:	4641      	mov	r1, r8
 8001648:	4311      	orrs	r1, r2
 800164a:	2280      	movs	r2, #128	@ 0x80
 800164c:	0112      	lsls	r2, r2, #4
 800164e:	4694      	mov	ip, r2
 8001650:	002a      	movs	r2, r5
 8001652:	4462      	add	r2, ip
 8001654:	4688      	mov	r8, r1
 8001656:	9201      	str	r2, [sp, #4]
 8001658:	290a      	cmp	r1, #10
 800165a:	dd00      	ble.n	800165e <__aeabi_dmul+0x266>
 800165c:	e752      	b.n	8001504 <__aeabi_dmul+0x10c>
 800165e:	465a      	mov	r2, fp
 8001660:	2000      	movs	r0, #0
 8001662:	9900      	ldr	r1, [sp, #0]
 8001664:	0004      	movs	r4, r0
 8001666:	404a      	eors	r2, r1
 8001668:	4693      	mov	fp, r2
 800166a:	2602      	movs	r6, #2
 800166c:	e70b      	b.n	8001486 <__aeabi_dmul+0x8e>
 800166e:	220c      	movs	r2, #12
 8001670:	001d      	movs	r5, r3
 8001672:	2303      	movs	r3, #3
 8001674:	4681      	mov	r9, r0
 8001676:	4690      	mov	r8, r2
 8001678:	9302      	str	r3, [sp, #8]
 800167a:	e6e3      	b.n	8001444 <__aeabi_dmul+0x4c>
 800167c:	2300      	movs	r3, #0
 800167e:	469a      	mov	sl, r3
 8001680:	3304      	adds	r3, #4
 8001682:	4698      	mov	r8, r3
 8001684:	3b03      	subs	r3, #3
 8001686:	2500      	movs	r5, #0
 8001688:	9302      	str	r3, [sp, #8]
 800168a:	e6db      	b.n	8001444 <__aeabi_dmul+0x4c>
 800168c:	4642      	mov	r2, r8
 800168e:	3301      	adds	r3, #1
 8001690:	431a      	orrs	r2, r3
 8001692:	002b      	movs	r3, r5
 8001694:	4690      	mov	r8, r2
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	9201      	str	r2, [sp, #4]
 800169a:	4642      	mov	r2, r8
 800169c:	2400      	movs	r4, #0
 800169e:	2000      	movs	r0, #0
 80016a0:	2601      	movs	r6, #1
 80016a2:	2a0a      	cmp	r2, #10
 80016a4:	dc00      	bgt.n	80016a8 <__aeabi_dmul+0x2b0>
 80016a6:	e6ea      	b.n	800147e <__aeabi_dmul+0x86>
 80016a8:	e72c      	b.n	8001504 <__aeabi_dmul+0x10c>
 80016aa:	2201      	movs	r2, #1
 80016ac:	1ad2      	subs	r2, r2, r3
 80016ae:	2a38      	cmp	r2, #56	@ 0x38
 80016b0:	dd00      	ble.n	80016b4 <__aeabi_dmul+0x2bc>
 80016b2:	e6f4      	b.n	800149e <__aeabi_dmul+0xa6>
 80016b4:	2a1f      	cmp	r2, #31
 80016b6:	dc00      	bgt.n	80016ba <__aeabi_dmul+0x2c2>
 80016b8:	e12a      	b.n	8001910 <__aeabi_dmul+0x518>
 80016ba:	211f      	movs	r1, #31
 80016bc:	4249      	negs	r1, r1
 80016be:	1acb      	subs	r3, r1, r3
 80016c0:	0021      	movs	r1, r4
 80016c2:	40d9      	lsrs	r1, r3
 80016c4:	000b      	movs	r3, r1
 80016c6:	2a20      	cmp	r2, #32
 80016c8:	d005      	beq.n	80016d6 <__aeabi_dmul+0x2de>
 80016ca:	4a16      	ldr	r2, [pc, #88]	@ (8001724 <__aeabi_dmul+0x32c>)
 80016cc:	9d01      	ldr	r5, [sp, #4]
 80016ce:	4694      	mov	ip, r2
 80016d0:	4465      	add	r5, ip
 80016d2:	40ac      	lsls	r4, r5
 80016d4:	4320      	orrs	r0, r4
 80016d6:	1e42      	subs	r2, r0, #1
 80016d8:	4190      	sbcs	r0, r2
 80016da:	4318      	orrs	r0, r3
 80016dc:	2307      	movs	r3, #7
 80016de:	0019      	movs	r1, r3
 80016e0:	2400      	movs	r4, #0
 80016e2:	4001      	ands	r1, r0
 80016e4:	4203      	tst	r3, r0
 80016e6:	d00c      	beq.n	8001702 <__aeabi_dmul+0x30a>
 80016e8:	230f      	movs	r3, #15
 80016ea:	4003      	ands	r3, r0
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d100      	bne.n	80016f2 <__aeabi_dmul+0x2fa>
 80016f0:	e140      	b.n	8001974 <__aeabi_dmul+0x57c>
 80016f2:	1d03      	adds	r3, r0, #4
 80016f4:	4283      	cmp	r3, r0
 80016f6:	41a4      	sbcs	r4, r4
 80016f8:	0018      	movs	r0, r3
 80016fa:	4264      	negs	r4, r4
 80016fc:	0761      	lsls	r1, r4, #29
 80016fe:	0264      	lsls	r4, r4, #9
 8001700:	0b24      	lsrs	r4, r4, #12
 8001702:	08c2      	lsrs	r2, r0, #3
 8001704:	2300      	movs	r3, #0
 8001706:	430a      	orrs	r2, r1
 8001708:	e6cc      	b.n	80014a4 <__aeabi_dmul+0xac>
 800170a:	46c0      	nop			@ (mov r8, r8)
 800170c:	000007ff 	.word	0x000007ff
 8001710:	fffffc01 	.word	0xfffffc01
 8001714:	000003ff 	.word	0x000003ff
 8001718:	feffffff 	.word	0xfeffffff
 800171c:	000007fe 	.word	0x000007fe
 8001720:	fffffc0d 	.word	0xfffffc0d
 8001724:	0000043e 	.word	0x0000043e
 8001728:	4649      	mov	r1, r9
 800172a:	464a      	mov	r2, r9
 800172c:	0409      	lsls	r1, r1, #16
 800172e:	0c09      	lsrs	r1, r1, #16
 8001730:	000d      	movs	r5, r1
 8001732:	0c16      	lsrs	r6, r2, #16
 8001734:	0c02      	lsrs	r2, r0, #16
 8001736:	0400      	lsls	r0, r0, #16
 8001738:	0c00      	lsrs	r0, r0, #16
 800173a:	4345      	muls	r5, r0
 800173c:	46ac      	mov	ip, r5
 800173e:	0005      	movs	r5, r0
 8001740:	4375      	muls	r5, r6
 8001742:	46a8      	mov	r8, r5
 8001744:	0015      	movs	r5, r2
 8001746:	000f      	movs	r7, r1
 8001748:	4375      	muls	r5, r6
 800174a:	9200      	str	r2, [sp, #0]
 800174c:	9502      	str	r5, [sp, #8]
 800174e:	002a      	movs	r2, r5
 8001750:	9d00      	ldr	r5, [sp, #0]
 8001752:	436f      	muls	r7, r5
 8001754:	4665      	mov	r5, ip
 8001756:	0c2d      	lsrs	r5, r5, #16
 8001758:	46a9      	mov	r9, r5
 800175a:	4447      	add	r7, r8
 800175c:	444f      	add	r7, r9
 800175e:	45b8      	cmp	r8, r7
 8001760:	d905      	bls.n	800176e <__aeabi_dmul+0x376>
 8001762:	0015      	movs	r5, r2
 8001764:	2280      	movs	r2, #128	@ 0x80
 8001766:	0252      	lsls	r2, r2, #9
 8001768:	4690      	mov	r8, r2
 800176a:	4445      	add	r5, r8
 800176c:	9502      	str	r5, [sp, #8]
 800176e:	0c3d      	lsrs	r5, r7, #16
 8001770:	9503      	str	r5, [sp, #12]
 8001772:	4665      	mov	r5, ip
 8001774:	042d      	lsls	r5, r5, #16
 8001776:	043f      	lsls	r7, r7, #16
 8001778:	0c2d      	lsrs	r5, r5, #16
 800177a:	46ac      	mov	ip, r5
 800177c:	003d      	movs	r5, r7
 800177e:	4465      	add	r5, ip
 8001780:	9504      	str	r5, [sp, #16]
 8001782:	0c25      	lsrs	r5, r4, #16
 8001784:	0424      	lsls	r4, r4, #16
 8001786:	0c24      	lsrs	r4, r4, #16
 8001788:	46ac      	mov	ip, r5
 800178a:	0025      	movs	r5, r4
 800178c:	4375      	muls	r5, r6
 800178e:	46a8      	mov	r8, r5
 8001790:	4665      	mov	r5, ip
 8001792:	000f      	movs	r7, r1
 8001794:	4369      	muls	r1, r5
 8001796:	4441      	add	r1, r8
 8001798:	4689      	mov	r9, r1
 800179a:	4367      	muls	r7, r4
 800179c:	0c39      	lsrs	r1, r7, #16
 800179e:	4449      	add	r1, r9
 80017a0:	436e      	muls	r6, r5
 80017a2:	4588      	cmp	r8, r1
 80017a4:	d903      	bls.n	80017ae <__aeabi_dmul+0x3b6>
 80017a6:	2280      	movs	r2, #128	@ 0x80
 80017a8:	0252      	lsls	r2, r2, #9
 80017aa:	4690      	mov	r8, r2
 80017ac:	4446      	add	r6, r8
 80017ae:	0c0d      	lsrs	r5, r1, #16
 80017b0:	46a8      	mov	r8, r5
 80017b2:	0035      	movs	r5, r6
 80017b4:	4445      	add	r5, r8
 80017b6:	9505      	str	r5, [sp, #20]
 80017b8:	9d03      	ldr	r5, [sp, #12]
 80017ba:	043f      	lsls	r7, r7, #16
 80017bc:	46a8      	mov	r8, r5
 80017be:	0c3f      	lsrs	r7, r7, #16
 80017c0:	0409      	lsls	r1, r1, #16
 80017c2:	19c9      	adds	r1, r1, r7
 80017c4:	4488      	add	r8, r1
 80017c6:	4645      	mov	r5, r8
 80017c8:	9503      	str	r5, [sp, #12]
 80017ca:	4655      	mov	r5, sl
 80017cc:	042e      	lsls	r6, r5, #16
 80017ce:	0c36      	lsrs	r6, r6, #16
 80017d0:	0c2f      	lsrs	r7, r5, #16
 80017d2:	0035      	movs	r5, r6
 80017d4:	4345      	muls	r5, r0
 80017d6:	4378      	muls	r0, r7
 80017d8:	4681      	mov	r9, r0
 80017da:	0038      	movs	r0, r7
 80017dc:	46a8      	mov	r8, r5
 80017de:	0c2d      	lsrs	r5, r5, #16
 80017e0:	46aa      	mov	sl, r5
 80017e2:	9a00      	ldr	r2, [sp, #0]
 80017e4:	4350      	muls	r0, r2
 80017e6:	4372      	muls	r2, r6
 80017e8:	444a      	add	r2, r9
 80017ea:	4452      	add	r2, sl
 80017ec:	4591      	cmp	r9, r2
 80017ee:	d903      	bls.n	80017f8 <__aeabi_dmul+0x400>
 80017f0:	2580      	movs	r5, #128	@ 0x80
 80017f2:	026d      	lsls	r5, r5, #9
 80017f4:	46a9      	mov	r9, r5
 80017f6:	4448      	add	r0, r9
 80017f8:	0c15      	lsrs	r5, r2, #16
 80017fa:	46a9      	mov	r9, r5
 80017fc:	4645      	mov	r5, r8
 80017fe:	042d      	lsls	r5, r5, #16
 8001800:	0c2d      	lsrs	r5, r5, #16
 8001802:	46a8      	mov	r8, r5
 8001804:	4665      	mov	r5, ip
 8001806:	437d      	muls	r5, r7
 8001808:	0412      	lsls	r2, r2, #16
 800180a:	4448      	add	r0, r9
 800180c:	4490      	add	r8, r2
 800180e:	46a9      	mov	r9, r5
 8001810:	0032      	movs	r2, r6
 8001812:	4665      	mov	r5, ip
 8001814:	4362      	muls	r2, r4
 8001816:	436e      	muls	r6, r5
 8001818:	437c      	muls	r4, r7
 800181a:	0c17      	lsrs	r7, r2, #16
 800181c:	1936      	adds	r6, r6, r4
 800181e:	19bf      	adds	r7, r7, r6
 8001820:	42bc      	cmp	r4, r7
 8001822:	d903      	bls.n	800182c <__aeabi_dmul+0x434>
 8001824:	2480      	movs	r4, #128	@ 0x80
 8001826:	0264      	lsls	r4, r4, #9
 8001828:	46a4      	mov	ip, r4
 800182a:	44e1      	add	r9, ip
 800182c:	9c02      	ldr	r4, [sp, #8]
 800182e:	9e03      	ldr	r6, [sp, #12]
 8001830:	46a4      	mov	ip, r4
 8001832:	9d05      	ldr	r5, [sp, #20]
 8001834:	4466      	add	r6, ip
 8001836:	428e      	cmp	r6, r1
 8001838:	4189      	sbcs	r1, r1
 800183a:	46ac      	mov	ip, r5
 800183c:	0412      	lsls	r2, r2, #16
 800183e:	043c      	lsls	r4, r7, #16
 8001840:	0c12      	lsrs	r2, r2, #16
 8001842:	18a2      	adds	r2, r4, r2
 8001844:	4462      	add	r2, ip
 8001846:	4249      	negs	r1, r1
 8001848:	1854      	adds	r4, r2, r1
 800184a:	4446      	add	r6, r8
 800184c:	46a4      	mov	ip, r4
 800184e:	4546      	cmp	r6, r8
 8001850:	41a4      	sbcs	r4, r4
 8001852:	4682      	mov	sl, r0
 8001854:	4264      	negs	r4, r4
 8001856:	46a0      	mov	r8, r4
 8001858:	42aa      	cmp	r2, r5
 800185a:	4192      	sbcs	r2, r2
 800185c:	458c      	cmp	ip, r1
 800185e:	4189      	sbcs	r1, r1
 8001860:	44e2      	add	sl, ip
 8001862:	44d0      	add	r8, sl
 8001864:	4249      	negs	r1, r1
 8001866:	4252      	negs	r2, r2
 8001868:	430a      	orrs	r2, r1
 800186a:	45a0      	cmp	r8, r4
 800186c:	41a4      	sbcs	r4, r4
 800186e:	4582      	cmp	sl, r0
 8001870:	4189      	sbcs	r1, r1
 8001872:	4264      	negs	r4, r4
 8001874:	4249      	negs	r1, r1
 8001876:	430c      	orrs	r4, r1
 8001878:	4641      	mov	r1, r8
 800187a:	0c3f      	lsrs	r7, r7, #16
 800187c:	19d2      	adds	r2, r2, r7
 800187e:	1912      	adds	r2, r2, r4
 8001880:	0dcc      	lsrs	r4, r1, #23
 8001882:	9904      	ldr	r1, [sp, #16]
 8001884:	0270      	lsls	r0, r6, #9
 8001886:	4308      	orrs	r0, r1
 8001888:	1e41      	subs	r1, r0, #1
 800188a:	4188      	sbcs	r0, r1
 800188c:	4641      	mov	r1, r8
 800188e:	444a      	add	r2, r9
 8001890:	0df6      	lsrs	r6, r6, #23
 8001892:	0252      	lsls	r2, r2, #9
 8001894:	4330      	orrs	r0, r6
 8001896:	0249      	lsls	r1, r1, #9
 8001898:	4314      	orrs	r4, r2
 800189a:	4308      	orrs	r0, r1
 800189c:	01d2      	lsls	r2, r2, #7
 800189e:	d535      	bpl.n	800190c <__aeabi_dmul+0x514>
 80018a0:	2201      	movs	r2, #1
 80018a2:	0843      	lsrs	r3, r0, #1
 80018a4:	4002      	ands	r2, r0
 80018a6:	4313      	orrs	r3, r2
 80018a8:	07e0      	lsls	r0, r4, #31
 80018aa:	4318      	orrs	r0, r3
 80018ac:	0864      	lsrs	r4, r4, #1
 80018ae:	e634      	b.n	800151a <__aeabi_dmul+0x122>
 80018b0:	9b00      	ldr	r3, [sp, #0]
 80018b2:	46a2      	mov	sl, r4
 80018b4:	469b      	mov	fp, r3
 80018b6:	4681      	mov	r9, r0
 80018b8:	2480      	movs	r4, #128	@ 0x80
 80018ba:	4653      	mov	r3, sl
 80018bc:	0324      	lsls	r4, r4, #12
 80018be:	431c      	orrs	r4, r3
 80018c0:	0324      	lsls	r4, r4, #12
 80018c2:	464a      	mov	r2, r9
 80018c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001980 <__aeabi_dmul+0x588>)
 80018c6:	0b24      	lsrs	r4, r4, #12
 80018c8:	e5ec      	b.n	80014a4 <__aeabi_dmul+0xac>
 80018ca:	f000 fca9 	bl	8002220 <__clzsi2>
 80018ce:	2315      	movs	r3, #21
 80018d0:	469c      	mov	ip, r3
 80018d2:	4484      	add	ip, r0
 80018d4:	0002      	movs	r2, r0
 80018d6:	4663      	mov	r3, ip
 80018d8:	3220      	adds	r2, #32
 80018da:	2b1c      	cmp	r3, #28
 80018dc:	dc00      	bgt.n	80018e0 <__aeabi_dmul+0x4e8>
 80018de:	e684      	b.n	80015ea <__aeabi_dmul+0x1f2>
 80018e0:	2300      	movs	r3, #0
 80018e2:	4699      	mov	r9, r3
 80018e4:	0023      	movs	r3, r4
 80018e6:	3808      	subs	r0, #8
 80018e8:	4083      	lsls	r3, r0
 80018ea:	469a      	mov	sl, r3
 80018ec:	e68e      	b.n	800160c <__aeabi_dmul+0x214>
 80018ee:	f000 fc97 	bl	8002220 <__clzsi2>
 80018f2:	0002      	movs	r2, r0
 80018f4:	0003      	movs	r3, r0
 80018f6:	3215      	adds	r2, #21
 80018f8:	3320      	adds	r3, #32
 80018fa:	2a1c      	cmp	r2, #28
 80018fc:	dc00      	bgt.n	8001900 <__aeabi_dmul+0x508>
 80018fe:	e64e      	b.n	800159e <__aeabi_dmul+0x1a6>
 8001900:	0002      	movs	r2, r0
 8001902:	0034      	movs	r4, r6
 8001904:	3a08      	subs	r2, #8
 8001906:	2000      	movs	r0, #0
 8001908:	4094      	lsls	r4, r2
 800190a:	e652      	b.n	80015b2 <__aeabi_dmul+0x1ba>
 800190c:	9301      	str	r3, [sp, #4]
 800190e:	e604      	b.n	800151a <__aeabi_dmul+0x122>
 8001910:	4b1c      	ldr	r3, [pc, #112]	@ (8001984 <__aeabi_dmul+0x58c>)
 8001912:	0021      	movs	r1, r4
 8001914:	469c      	mov	ip, r3
 8001916:	0003      	movs	r3, r0
 8001918:	9d01      	ldr	r5, [sp, #4]
 800191a:	40d3      	lsrs	r3, r2
 800191c:	4465      	add	r5, ip
 800191e:	40a9      	lsls	r1, r5
 8001920:	4319      	orrs	r1, r3
 8001922:	0003      	movs	r3, r0
 8001924:	40ab      	lsls	r3, r5
 8001926:	1e58      	subs	r0, r3, #1
 8001928:	4183      	sbcs	r3, r0
 800192a:	4319      	orrs	r1, r3
 800192c:	0008      	movs	r0, r1
 800192e:	40d4      	lsrs	r4, r2
 8001930:	074b      	lsls	r3, r1, #29
 8001932:	d009      	beq.n	8001948 <__aeabi_dmul+0x550>
 8001934:	230f      	movs	r3, #15
 8001936:	400b      	ands	r3, r1
 8001938:	2b04      	cmp	r3, #4
 800193a:	d005      	beq.n	8001948 <__aeabi_dmul+0x550>
 800193c:	1d0b      	adds	r3, r1, #4
 800193e:	428b      	cmp	r3, r1
 8001940:	4180      	sbcs	r0, r0
 8001942:	4240      	negs	r0, r0
 8001944:	1824      	adds	r4, r4, r0
 8001946:	0018      	movs	r0, r3
 8001948:	0223      	lsls	r3, r4, #8
 800194a:	d400      	bmi.n	800194e <__aeabi_dmul+0x556>
 800194c:	e6d6      	b.n	80016fc <__aeabi_dmul+0x304>
 800194e:	2301      	movs	r3, #1
 8001950:	2400      	movs	r4, #0
 8001952:	2200      	movs	r2, #0
 8001954:	e5a6      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001956:	290f      	cmp	r1, #15
 8001958:	d1aa      	bne.n	80018b0 <__aeabi_dmul+0x4b8>
 800195a:	2380      	movs	r3, #128	@ 0x80
 800195c:	4652      	mov	r2, sl
 800195e:	031b      	lsls	r3, r3, #12
 8001960:	421a      	tst	r2, r3
 8001962:	d0a9      	beq.n	80018b8 <__aeabi_dmul+0x4c0>
 8001964:	421c      	tst	r4, r3
 8001966:	d1a7      	bne.n	80018b8 <__aeabi_dmul+0x4c0>
 8001968:	431c      	orrs	r4, r3
 800196a:	9b00      	ldr	r3, [sp, #0]
 800196c:	0002      	movs	r2, r0
 800196e:	469b      	mov	fp, r3
 8001970:	4b03      	ldr	r3, [pc, #12]	@ (8001980 <__aeabi_dmul+0x588>)
 8001972:	e597      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001974:	2400      	movs	r4, #0
 8001976:	e6c1      	b.n	80016fc <__aeabi_dmul+0x304>
 8001978:	2400      	movs	r4, #0
 800197a:	4b01      	ldr	r3, [pc, #4]	@ (8001980 <__aeabi_dmul+0x588>)
 800197c:	0022      	movs	r2, r4
 800197e:	e591      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001980:	000007ff 	.word	0x000007ff
 8001984:	0000041e 	.word	0x0000041e

08001988 <__aeabi_dsub>:
 8001988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800198a:	464e      	mov	r6, r9
 800198c:	4645      	mov	r5, r8
 800198e:	46de      	mov	lr, fp
 8001990:	4657      	mov	r7, sl
 8001992:	b5e0      	push	{r5, r6, r7, lr}
 8001994:	b085      	sub	sp, #20
 8001996:	9000      	str	r0, [sp, #0]
 8001998:	9101      	str	r1, [sp, #4]
 800199a:	030c      	lsls	r4, r1, #12
 800199c:	004f      	lsls	r7, r1, #1
 800199e:	0fce      	lsrs	r6, r1, #31
 80019a0:	0a61      	lsrs	r1, r4, #9
 80019a2:	9c00      	ldr	r4, [sp, #0]
 80019a4:	46b0      	mov	r8, r6
 80019a6:	0f64      	lsrs	r4, r4, #29
 80019a8:	430c      	orrs	r4, r1
 80019aa:	9900      	ldr	r1, [sp, #0]
 80019ac:	0d7f      	lsrs	r7, r7, #21
 80019ae:	00c8      	lsls	r0, r1, #3
 80019b0:	0011      	movs	r1, r2
 80019b2:	001a      	movs	r2, r3
 80019b4:	031b      	lsls	r3, r3, #12
 80019b6:	469c      	mov	ip, r3
 80019b8:	9100      	str	r1, [sp, #0]
 80019ba:	9201      	str	r2, [sp, #4]
 80019bc:	0051      	lsls	r1, r2, #1
 80019be:	0d4b      	lsrs	r3, r1, #21
 80019c0:	4699      	mov	r9, r3
 80019c2:	9b01      	ldr	r3, [sp, #4]
 80019c4:	9d00      	ldr	r5, [sp, #0]
 80019c6:	0fd9      	lsrs	r1, r3, #31
 80019c8:	4663      	mov	r3, ip
 80019ca:	0f6a      	lsrs	r2, r5, #29
 80019cc:	0a5b      	lsrs	r3, r3, #9
 80019ce:	4313      	orrs	r3, r2
 80019d0:	00ea      	lsls	r2, r5, #3
 80019d2:	4694      	mov	ip, r2
 80019d4:	4693      	mov	fp, r2
 80019d6:	4ac1      	ldr	r2, [pc, #772]	@ (8001cdc <__aeabi_dsub+0x354>)
 80019d8:	9003      	str	r0, [sp, #12]
 80019da:	9302      	str	r3, [sp, #8]
 80019dc:	4591      	cmp	r9, r2
 80019de:	d100      	bne.n	80019e2 <__aeabi_dsub+0x5a>
 80019e0:	e0cd      	b.n	8001b7e <__aeabi_dsub+0x1f6>
 80019e2:	2501      	movs	r5, #1
 80019e4:	4069      	eors	r1, r5
 80019e6:	464d      	mov	r5, r9
 80019e8:	1b7d      	subs	r5, r7, r5
 80019ea:	46aa      	mov	sl, r5
 80019ec:	428e      	cmp	r6, r1
 80019ee:	d100      	bne.n	80019f2 <__aeabi_dsub+0x6a>
 80019f0:	e080      	b.n	8001af4 <__aeabi_dsub+0x16c>
 80019f2:	2d00      	cmp	r5, #0
 80019f4:	dc00      	bgt.n	80019f8 <__aeabi_dsub+0x70>
 80019f6:	e335      	b.n	8002064 <__aeabi_dsub+0x6dc>
 80019f8:	4649      	mov	r1, r9
 80019fa:	2900      	cmp	r1, #0
 80019fc:	d100      	bne.n	8001a00 <__aeabi_dsub+0x78>
 80019fe:	e0df      	b.n	8001bc0 <__aeabi_dsub+0x238>
 8001a00:	4297      	cmp	r7, r2
 8001a02:	d100      	bne.n	8001a06 <__aeabi_dsub+0x7e>
 8001a04:	e194      	b.n	8001d30 <__aeabi_dsub+0x3a8>
 8001a06:	4652      	mov	r2, sl
 8001a08:	2501      	movs	r5, #1
 8001a0a:	2a38      	cmp	r2, #56	@ 0x38
 8001a0c:	dc19      	bgt.n	8001a42 <__aeabi_dsub+0xba>
 8001a0e:	2280      	movs	r2, #128	@ 0x80
 8001a10:	9b02      	ldr	r3, [sp, #8]
 8001a12:	0412      	lsls	r2, r2, #16
 8001a14:	4313      	orrs	r3, r2
 8001a16:	9302      	str	r3, [sp, #8]
 8001a18:	4652      	mov	r2, sl
 8001a1a:	2a1f      	cmp	r2, #31
 8001a1c:	dd00      	ble.n	8001a20 <__aeabi_dsub+0x98>
 8001a1e:	e1e3      	b.n	8001de8 <__aeabi_dsub+0x460>
 8001a20:	4653      	mov	r3, sl
 8001a22:	2220      	movs	r2, #32
 8001a24:	4661      	mov	r1, ip
 8001a26:	9d02      	ldr	r5, [sp, #8]
 8001a28:	1ad2      	subs	r2, r2, r3
 8001a2a:	4095      	lsls	r5, r2
 8001a2c:	40d9      	lsrs	r1, r3
 8001a2e:	430d      	orrs	r5, r1
 8001a30:	4661      	mov	r1, ip
 8001a32:	4091      	lsls	r1, r2
 8001a34:	000a      	movs	r2, r1
 8001a36:	1e51      	subs	r1, r2, #1
 8001a38:	418a      	sbcs	r2, r1
 8001a3a:	4315      	orrs	r5, r2
 8001a3c:	9a02      	ldr	r2, [sp, #8]
 8001a3e:	40da      	lsrs	r2, r3
 8001a40:	1aa4      	subs	r4, r4, r2
 8001a42:	1b45      	subs	r5, r0, r5
 8001a44:	42a8      	cmp	r0, r5
 8001a46:	4180      	sbcs	r0, r0
 8001a48:	4240      	negs	r0, r0
 8001a4a:	1a24      	subs	r4, r4, r0
 8001a4c:	0223      	lsls	r3, r4, #8
 8001a4e:	d400      	bmi.n	8001a52 <__aeabi_dsub+0xca>
 8001a50:	e13d      	b.n	8001cce <__aeabi_dsub+0x346>
 8001a52:	0264      	lsls	r4, r4, #9
 8001a54:	0a64      	lsrs	r4, r4, #9
 8001a56:	2c00      	cmp	r4, #0
 8001a58:	d100      	bne.n	8001a5c <__aeabi_dsub+0xd4>
 8001a5a:	e147      	b.n	8001cec <__aeabi_dsub+0x364>
 8001a5c:	0020      	movs	r0, r4
 8001a5e:	f000 fbdf 	bl	8002220 <__clzsi2>
 8001a62:	0003      	movs	r3, r0
 8001a64:	3b08      	subs	r3, #8
 8001a66:	2120      	movs	r1, #32
 8001a68:	0028      	movs	r0, r5
 8001a6a:	1aca      	subs	r2, r1, r3
 8001a6c:	40d0      	lsrs	r0, r2
 8001a6e:	409c      	lsls	r4, r3
 8001a70:	0002      	movs	r2, r0
 8001a72:	409d      	lsls	r5, r3
 8001a74:	4322      	orrs	r2, r4
 8001a76:	429f      	cmp	r7, r3
 8001a78:	dd00      	ble.n	8001a7c <__aeabi_dsub+0xf4>
 8001a7a:	e177      	b.n	8001d6c <__aeabi_dsub+0x3e4>
 8001a7c:	1bd8      	subs	r0, r3, r7
 8001a7e:	3001      	adds	r0, #1
 8001a80:	1a09      	subs	r1, r1, r0
 8001a82:	002c      	movs	r4, r5
 8001a84:	408d      	lsls	r5, r1
 8001a86:	40c4      	lsrs	r4, r0
 8001a88:	1e6b      	subs	r3, r5, #1
 8001a8a:	419d      	sbcs	r5, r3
 8001a8c:	0013      	movs	r3, r2
 8001a8e:	40c2      	lsrs	r2, r0
 8001a90:	408b      	lsls	r3, r1
 8001a92:	4325      	orrs	r5, r4
 8001a94:	2700      	movs	r7, #0
 8001a96:	0014      	movs	r4, r2
 8001a98:	431d      	orrs	r5, r3
 8001a9a:	076b      	lsls	r3, r5, #29
 8001a9c:	d009      	beq.n	8001ab2 <__aeabi_dsub+0x12a>
 8001a9e:	230f      	movs	r3, #15
 8001aa0:	402b      	ands	r3, r5
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d005      	beq.n	8001ab2 <__aeabi_dsub+0x12a>
 8001aa6:	1d2b      	adds	r3, r5, #4
 8001aa8:	42ab      	cmp	r3, r5
 8001aaa:	41ad      	sbcs	r5, r5
 8001aac:	426d      	negs	r5, r5
 8001aae:	1964      	adds	r4, r4, r5
 8001ab0:	001d      	movs	r5, r3
 8001ab2:	0223      	lsls	r3, r4, #8
 8001ab4:	d400      	bmi.n	8001ab8 <__aeabi_dsub+0x130>
 8001ab6:	e140      	b.n	8001d3a <__aeabi_dsub+0x3b2>
 8001ab8:	4a88      	ldr	r2, [pc, #544]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001aba:	3701      	adds	r7, #1
 8001abc:	4297      	cmp	r7, r2
 8001abe:	d100      	bne.n	8001ac2 <__aeabi_dsub+0x13a>
 8001ac0:	e101      	b.n	8001cc6 <__aeabi_dsub+0x33e>
 8001ac2:	2601      	movs	r6, #1
 8001ac4:	4643      	mov	r3, r8
 8001ac6:	4986      	ldr	r1, [pc, #536]	@ (8001ce0 <__aeabi_dsub+0x358>)
 8001ac8:	08ed      	lsrs	r5, r5, #3
 8001aca:	4021      	ands	r1, r4
 8001acc:	074a      	lsls	r2, r1, #29
 8001ace:	432a      	orrs	r2, r5
 8001ad0:	057c      	lsls	r4, r7, #21
 8001ad2:	024d      	lsls	r5, r1, #9
 8001ad4:	0b2d      	lsrs	r5, r5, #12
 8001ad6:	0d64      	lsrs	r4, r4, #21
 8001ad8:	401e      	ands	r6, r3
 8001ada:	0524      	lsls	r4, r4, #20
 8001adc:	432c      	orrs	r4, r5
 8001ade:	07f6      	lsls	r6, r6, #31
 8001ae0:	4334      	orrs	r4, r6
 8001ae2:	0010      	movs	r0, r2
 8001ae4:	0021      	movs	r1, r4
 8001ae6:	b005      	add	sp, #20
 8001ae8:	bcf0      	pop	{r4, r5, r6, r7}
 8001aea:	46bb      	mov	fp, r7
 8001aec:	46b2      	mov	sl, r6
 8001aee:	46a9      	mov	r9, r5
 8001af0:	46a0      	mov	r8, r4
 8001af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001af4:	2d00      	cmp	r5, #0
 8001af6:	dc00      	bgt.n	8001afa <__aeabi_dsub+0x172>
 8001af8:	e2d0      	b.n	800209c <__aeabi_dsub+0x714>
 8001afa:	4649      	mov	r1, r9
 8001afc:	2900      	cmp	r1, #0
 8001afe:	d000      	beq.n	8001b02 <__aeabi_dsub+0x17a>
 8001b00:	e0d4      	b.n	8001cac <__aeabi_dsub+0x324>
 8001b02:	4661      	mov	r1, ip
 8001b04:	9b02      	ldr	r3, [sp, #8]
 8001b06:	4319      	orrs	r1, r3
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dsub+0x184>
 8001b0a:	e12b      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001b0c:	1e69      	subs	r1, r5, #1
 8001b0e:	2d01      	cmp	r5, #1
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dsub+0x18c>
 8001b12:	e1d9      	b.n	8001ec8 <__aeabi_dsub+0x540>
 8001b14:	4295      	cmp	r5, r2
 8001b16:	d100      	bne.n	8001b1a <__aeabi_dsub+0x192>
 8001b18:	e10a      	b.n	8001d30 <__aeabi_dsub+0x3a8>
 8001b1a:	2501      	movs	r5, #1
 8001b1c:	2938      	cmp	r1, #56	@ 0x38
 8001b1e:	dc17      	bgt.n	8001b50 <__aeabi_dsub+0x1c8>
 8001b20:	468a      	mov	sl, r1
 8001b22:	4653      	mov	r3, sl
 8001b24:	2b1f      	cmp	r3, #31
 8001b26:	dd00      	ble.n	8001b2a <__aeabi_dsub+0x1a2>
 8001b28:	e1e7      	b.n	8001efa <__aeabi_dsub+0x572>
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	1ad2      	subs	r2, r2, r3
 8001b2e:	9b02      	ldr	r3, [sp, #8]
 8001b30:	4661      	mov	r1, ip
 8001b32:	4093      	lsls	r3, r2
 8001b34:	001d      	movs	r5, r3
 8001b36:	4653      	mov	r3, sl
 8001b38:	40d9      	lsrs	r1, r3
 8001b3a:	4663      	mov	r3, ip
 8001b3c:	4093      	lsls	r3, r2
 8001b3e:	001a      	movs	r2, r3
 8001b40:	430d      	orrs	r5, r1
 8001b42:	1e51      	subs	r1, r2, #1
 8001b44:	418a      	sbcs	r2, r1
 8001b46:	4653      	mov	r3, sl
 8001b48:	4315      	orrs	r5, r2
 8001b4a:	9a02      	ldr	r2, [sp, #8]
 8001b4c:	40da      	lsrs	r2, r3
 8001b4e:	18a4      	adds	r4, r4, r2
 8001b50:	182d      	adds	r5, r5, r0
 8001b52:	4285      	cmp	r5, r0
 8001b54:	4180      	sbcs	r0, r0
 8001b56:	4240      	negs	r0, r0
 8001b58:	1824      	adds	r4, r4, r0
 8001b5a:	0223      	lsls	r3, r4, #8
 8001b5c:	d400      	bmi.n	8001b60 <__aeabi_dsub+0x1d8>
 8001b5e:	e0b6      	b.n	8001cce <__aeabi_dsub+0x346>
 8001b60:	4b5e      	ldr	r3, [pc, #376]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001b62:	3701      	adds	r7, #1
 8001b64:	429f      	cmp	r7, r3
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dsub+0x1e2>
 8001b68:	e0ad      	b.n	8001cc6 <__aeabi_dsub+0x33e>
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	4b5c      	ldr	r3, [pc, #368]	@ (8001ce0 <__aeabi_dsub+0x358>)
 8001b6e:	086a      	lsrs	r2, r5, #1
 8001b70:	401c      	ands	r4, r3
 8001b72:	4029      	ands	r1, r5
 8001b74:	430a      	orrs	r2, r1
 8001b76:	07e5      	lsls	r5, r4, #31
 8001b78:	4315      	orrs	r5, r2
 8001b7a:	0864      	lsrs	r4, r4, #1
 8001b7c:	e78d      	b.n	8001a9a <__aeabi_dsub+0x112>
 8001b7e:	4a59      	ldr	r2, [pc, #356]	@ (8001ce4 <__aeabi_dsub+0x35c>)
 8001b80:	9b02      	ldr	r3, [sp, #8]
 8001b82:	4692      	mov	sl, r2
 8001b84:	4662      	mov	r2, ip
 8001b86:	44ba      	add	sl, r7
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	d02c      	beq.n	8001be6 <__aeabi_dsub+0x25e>
 8001b8c:	428e      	cmp	r6, r1
 8001b8e:	d02e      	beq.n	8001bee <__aeabi_dsub+0x266>
 8001b90:	4652      	mov	r2, sl
 8001b92:	2a00      	cmp	r2, #0
 8001b94:	d060      	beq.n	8001c58 <__aeabi_dsub+0x2d0>
 8001b96:	2f00      	cmp	r7, #0
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x214>
 8001b9a:	e0db      	b.n	8001d54 <__aeabi_dsub+0x3cc>
 8001b9c:	4663      	mov	r3, ip
 8001b9e:	000e      	movs	r6, r1
 8001ba0:	9c02      	ldr	r4, [sp, #8]
 8001ba2:	08d8      	lsrs	r0, r3, #3
 8001ba4:	0762      	lsls	r2, r4, #29
 8001ba6:	4302      	orrs	r2, r0
 8001ba8:	08e4      	lsrs	r4, r4, #3
 8001baa:	0013      	movs	r3, r2
 8001bac:	4323      	orrs	r3, r4
 8001bae:	d100      	bne.n	8001bb2 <__aeabi_dsub+0x22a>
 8001bb0:	e254      	b.n	800205c <__aeabi_dsub+0x6d4>
 8001bb2:	2580      	movs	r5, #128	@ 0x80
 8001bb4:	032d      	lsls	r5, r5, #12
 8001bb6:	4325      	orrs	r5, r4
 8001bb8:	032d      	lsls	r5, r5, #12
 8001bba:	4c48      	ldr	r4, [pc, #288]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001bbc:	0b2d      	lsrs	r5, r5, #12
 8001bbe:	e78c      	b.n	8001ada <__aeabi_dsub+0x152>
 8001bc0:	4661      	mov	r1, ip
 8001bc2:	9b02      	ldr	r3, [sp, #8]
 8001bc4:	4319      	orrs	r1, r3
 8001bc6:	d100      	bne.n	8001bca <__aeabi_dsub+0x242>
 8001bc8:	e0cc      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001bca:	0029      	movs	r1, r5
 8001bcc:	3901      	subs	r1, #1
 8001bce:	2d01      	cmp	r5, #1
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dsub+0x24c>
 8001bd2:	e188      	b.n	8001ee6 <__aeabi_dsub+0x55e>
 8001bd4:	4295      	cmp	r5, r2
 8001bd6:	d100      	bne.n	8001bda <__aeabi_dsub+0x252>
 8001bd8:	e0aa      	b.n	8001d30 <__aeabi_dsub+0x3a8>
 8001bda:	2501      	movs	r5, #1
 8001bdc:	2938      	cmp	r1, #56	@ 0x38
 8001bde:	dd00      	ble.n	8001be2 <__aeabi_dsub+0x25a>
 8001be0:	e72f      	b.n	8001a42 <__aeabi_dsub+0xba>
 8001be2:	468a      	mov	sl, r1
 8001be4:	e718      	b.n	8001a18 <__aeabi_dsub+0x90>
 8001be6:	2201      	movs	r2, #1
 8001be8:	4051      	eors	r1, r2
 8001bea:	428e      	cmp	r6, r1
 8001bec:	d1d0      	bne.n	8001b90 <__aeabi_dsub+0x208>
 8001bee:	4653      	mov	r3, sl
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d100      	bne.n	8001bf6 <__aeabi_dsub+0x26e>
 8001bf4:	e0be      	b.n	8001d74 <__aeabi_dsub+0x3ec>
 8001bf6:	2f00      	cmp	r7, #0
 8001bf8:	d000      	beq.n	8001bfc <__aeabi_dsub+0x274>
 8001bfa:	e138      	b.n	8001e6e <__aeabi_dsub+0x4e6>
 8001bfc:	46ca      	mov	sl, r9
 8001bfe:	0022      	movs	r2, r4
 8001c00:	4302      	orrs	r2, r0
 8001c02:	d100      	bne.n	8001c06 <__aeabi_dsub+0x27e>
 8001c04:	e1e2      	b.n	8001fcc <__aeabi_dsub+0x644>
 8001c06:	4653      	mov	r3, sl
 8001c08:	1e59      	subs	r1, r3, #1
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d100      	bne.n	8001c10 <__aeabi_dsub+0x288>
 8001c0e:	e20d      	b.n	800202c <__aeabi_dsub+0x6a4>
 8001c10:	4a32      	ldr	r2, [pc, #200]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001c12:	4592      	cmp	sl, r2
 8001c14:	d100      	bne.n	8001c18 <__aeabi_dsub+0x290>
 8001c16:	e1d2      	b.n	8001fbe <__aeabi_dsub+0x636>
 8001c18:	2701      	movs	r7, #1
 8001c1a:	2938      	cmp	r1, #56	@ 0x38
 8001c1c:	dc13      	bgt.n	8001c46 <__aeabi_dsub+0x2be>
 8001c1e:	291f      	cmp	r1, #31
 8001c20:	dd00      	ble.n	8001c24 <__aeabi_dsub+0x29c>
 8001c22:	e1ee      	b.n	8002002 <__aeabi_dsub+0x67a>
 8001c24:	2220      	movs	r2, #32
 8001c26:	9b02      	ldr	r3, [sp, #8]
 8001c28:	1a52      	subs	r2, r2, r1
 8001c2a:	0025      	movs	r5, r4
 8001c2c:	0007      	movs	r7, r0
 8001c2e:	469a      	mov	sl, r3
 8001c30:	40cc      	lsrs	r4, r1
 8001c32:	4090      	lsls	r0, r2
 8001c34:	4095      	lsls	r5, r2
 8001c36:	40cf      	lsrs	r7, r1
 8001c38:	44a2      	add	sl, r4
 8001c3a:	1e42      	subs	r2, r0, #1
 8001c3c:	4190      	sbcs	r0, r2
 8001c3e:	4653      	mov	r3, sl
 8001c40:	432f      	orrs	r7, r5
 8001c42:	4307      	orrs	r7, r0
 8001c44:	9302      	str	r3, [sp, #8]
 8001c46:	003d      	movs	r5, r7
 8001c48:	4465      	add	r5, ip
 8001c4a:	4565      	cmp	r5, ip
 8001c4c:	4192      	sbcs	r2, r2
 8001c4e:	9b02      	ldr	r3, [sp, #8]
 8001c50:	4252      	negs	r2, r2
 8001c52:	464f      	mov	r7, r9
 8001c54:	18d4      	adds	r4, r2, r3
 8001c56:	e780      	b.n	8001b5a <__aeabi_dsub+0x1d2>
 8001c58:	4a23      	ldr	r2, [pc, #140]	@ (8001ce8 <__aeabi_dsub+0x360>)
 8001c5a:	1c7d      	adds	r5, r7, #1
 8001c5c:	4215      	tst	r5, r2
 8001c5e:	d000      	beq.n	8001c62 <__aeabi_dsub+0x2da>
 8001c60:	e0aa      	b.n	8001db8 <__aeabi_dsub+0x430>
 8001c62:	4662      	mov	r2, ip
 8001c64:	0025      	movs	r5, r4
 8001c66:	9b02      	ldr	r3, [sp, #8]
 8001c68:	4305      	orrs	r5, r0
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	2f00      	cmp	r7, #0
 8001c6e:	d000      	beq.n	8001c72 <__aeabi_dsub+0x2ea>
 8001c70:	e0f5      	b.n	8001e5e <__aeabi_dsub+0x4d6>
 8001c72:	2d00      	cmp	r5, #0
 8001c74:	d100      	bne.n	8001c78 <__aeabi_dsub+0x2f0>
 8001c76:	e16b      	b.n	8001f50 <__aeabi_dsub+0x5c8>
 8001c78:	2a00      	cmp	r2, #0
 8001c7a:	d100      	bne.n	8001c7e <__aeabi_dsub+0x2f6>
 8001c7c:	e152      	b.n	8001f24 <__aeabi_dsub+0x59c>
 8001c7e:	4663      	mov	r3, ip
 8001c80:	1ac5      	subs	r5, r0, r3
 8001c82:	9b02      	ldr	r3, [sp, #8]
 8001c84:	1ae2      	subs	r2, r4, r3
 8001c86:	42a8      	cmp	r0, r5
 8001c88:	419b      	sbcs	r3, r3
 8001c8a:	425b      	negs	r3, r3
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	021a      	lsls	r2, r3, #8
 8001c90:	d400      	bmi.n	8001c94 <__aeabi_dsub+0x30c>
 8001c92:	e1d5      	b.n	8002040 <__aeabi_dsub+0x6b8>
 8001c94:	4663      	mov	r3, ip
 8001c96:	1a1d      	subs	r5, r3, r0
 8001c98:	45ac      	cmp	ip, r5
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	2601      	movs	r6, #1
 8001c9e:	9b02      	ldr	r3, [sp, #8]
 8001ca0:	4252      	negs	r2, r2
 8001ca2:	1b1c      	subs	r4, r3, r4
 8001ca4:	4688      	mov	r8, r1
 8001ca6:	1aa4      	subs	r4, r4, r2
 8001ca8:	400e      	ands	r6, r1
 8001caa:	e6f6      	b.n	8001a9a <__aeabi_dsub+0x112>
 8001cac:	4297      	cmp	r7, r2
 8001cae:	d03f      	beq.n	8001d30 <__aeabi_dsub+0x3a8>
 8001cb0:	4652      	mov	r2, sl
 8001cb2:	2501      	movs	r5, #1
 8001cb4:	2a38      	cmp	r2, #56	@ 0x38
 8001cb6:	dd00      	ble.n	8001cba <__aeabi_dsub+0x332>
 8001cb8:	e74a      	b.n	8001b50 <__aeabi_dsub+0x1c8>
 8001cba:	2280      	movs	r2, #128	@ 0x80
 8001cbc:	9b02      	ldr	r3, [sp, #8]
 8001cbe:	0412      	lsls	r2, r2, #16
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	9302      	str	r3, [sp, #8]
 8001cc4:	e72d      	b.n	8001b22 <__aeabi_dsub+0x19a>
 8001cc6:	003c      	movs	r4, r7
 8001cc8:	2500      	movs	r5, #0
 8001cca:	2200      	movs	r2, #0
 8001ccc:	e705      	b.n	8001ada <__aeabi_dsub+0x152>
 8001cce:	2307      	movs	r3, #7
 8001cd0:	402b      	ands	r3, r5
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d000      	beq.n	8001cd8 <__aeabi_dsub+0x350>
 8001cd6:	e6e2      	b.n	8001a9e <__aeabi_dsub+0x116>
 8001cd8:	e06b      	b.n	8001db2 <__aeabi_dsub+0x42a>
 8001cda:	46c0      	nop			@ (mov r8, r8)
 8001cdc:	000007ff 	.word	0x000007ff
 8001ce0:	ff7fffff 	.word	0xff7fffff
 8001ce4:	fffff801 	.word	0xfffff801
 8001ce8:	000007fe 	.word	0x000007fe
 8001cec:	0028      	movs	r0, r5
 8001cee:	f000 fa97 	bl	8002220 <__clzsi2>
 8001cf2:	0003      	movs	r3, r0
 8001cf4:	3318      	adds	r3, #24
 8001cf6:	2b1f      	cmp	r3, #31
 8001cf8:	dc00      	bgt.n	8001cfc <__aeabi_dsub+0x374>
 8001cfa:	e6b4      	b.n	8001a66 <__aeabi_dsub+0xde>
 8001cfc:	002a      	movs	r2, r5
 8001cfe:	3808      	subs	r0, #8
 8001d00:	4082      	lsls	r2, r0
 8001d02:	429f      	cmp	r7, r3
 8001d04:	dd00      	ble.n	8001d08 <__aeabi_dsub+0x380>
 8001d06:	e0b9      	b.n	8001e7c <__aeabi_dsub+0x4f4>
 8001d08:	1bdb      	subs	r3, r3, r7
 8001d0a:	1c58      	adds	r0, r3, #1
 8001d0c:	281f      	cmp	r0, #31
 8001d0e:	dc00      	bgt.n	8001d12 <__aeabi_dsub+0x38a>
 8001d10:	e1a0      	b.n	8002054 <__aeabi_dsub+0x6cc>
 8001d12:	0015      	movs	r5, r2
 8001d14:	3b1f      	subs	r3, #31
 8001d16:	40dd      	lsrs	r5, r3
 8001d18:	2820      	cmp	r0, #32
 8001d1a:	d005      	beq.n	8001d28 <__aeabi_dsub+0x3a0>
 8001d1c:	2340      	movs	r3, #64	@ 0x40
 8001d1e:	1a1b      	subs	r3, r3, r0
 8001d20:	409a      	lsls	r2, r3
 8001d22:	1e53      	subs	r3, r2, #1
 8001d24:	419a      	sbcs	r2, r3
 8001d26:	4315      	orrs	r5, r2
 8001d28:	2307      	movs	r3, #7
 8001d2a:	2700      	movs	r7, #0
 8001d2c:	402b      	ands	r3, r5
 8001d2e:	e7d0      	b.n	8001cd2 <__aeabi_dsub+0x34a>
 8001d30:	08c0      	lsrs	r0, r0, #3
 8001d32:	0762      	lsls	r2, r4, #29
 8001d34:	4302      	orrs	r2, r0
 8001d36:	08e4      	lsrs	r4, r4, #3
 8001d38:	e737      	b.n	8001baa <__aeabi_dsub+0x222>
 8001d3a:	08ea      	lsrs	r2, r5, #3
 8001d3c:	0763      	lsls	r3, r4, #29
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	4bd3      	ldr	r3, [pc, #844]	@ (8002090 <__aeabi_dsub+0x708>)
 8001d42:	08e4      	lsrs	r4, r4, #3
 8001d44:	429f      	cmp	r7, r3
 8001d46:	d100      	bne.n	8001d4a <__aeabi_dsub+0x3c2>
 8001d48:	e72f      	b.n	8001baa <__aeabi_dsub+0x222>
 8001d4a:	0324      	lsls	r4, r4, #12
 8001d4c:	0b25      	lsrs	r5, r4, #12
 8001d4e:	057c      	lsls	r4, r7, #21
 8001d50:	0d64      	lsrs	r4, r4, #21
 8001d52:	e6c2      	b.n	8001ada <__aeabi_dsub+0x152>
 8001d54:	46ca      	mov	sl, r9
 8001d56:	0022      	movs	r2, r4
 8001d58:	4302      	orrs	r2, r0
 8001d5a:	d158      	bne.n	8001e0e <__aeabi_dsub+0x486>
 8001d5c:	4663      	mov	r3, ip
 8001d5e:	000e      	movs	r6, r1
 8001d60:	9c02      	ldr	r4, [sp, #8]
 8001d62:	9303      	str	r3, [sp, #12]
 8001d64:	9b03      	ldr	r3, [sp, #12]
 8001d66:	4657      	mov	r7, sl
 8001d68:	08da      	lsrs	r2, r3, #3
 8001d6a:	e7e7      	b.n	8001d3c <__aeabi_dsub+0x3b4>
 8001d6c:	4cc9      	ldr	r4, [pc, #804]	@ (8002094 <__aeabi_dsub+0x70c>)
 8001d6e:	1aff      	subs	r7, r7, r3
 8001d70:	4014      	ands	r4, r2
 8001d72:	e692      	b.n	8001a9a <__aeabi_dsub+0x112>
 8001d74:	4dc8      	ldr	r5, [pc, #800]	@ (8002098 <__aeabi_dsub+0x710>)
 8001d76:	1c7a      	adds	r2, r7, #1
 8001d78:	422a      	tst	r2, r5
 8001d7a:	d000      	beq.n	8001d7e <__aeabi_dsub+0x3f6>
 8001d7c:	e084      	b.n	8001e88 <__aeabi_dsub+0x500>
 8001d7e:	0022      	movs	r2, r4
 8001d80:	4302      	orrs	r2, r0
 8001d82:	2f00      	cmp	r7, #0
 8001d84:	d000      	beq.n	8001d88 <__aeabi_dsub+0x400>
 8001d86:	e0ef      	b.n	8001f68 <__aeabi_dsub+0x5e0>
 8001d88:	2a00      	cmp	r2, #0
 8001d8a:	d100      	bne.n	8001d8e <__aeabi_dsub+0x406>
 8001d8c:	e0e5      	b.n	8001f5a <__aeabi_dsub+0x5d2>
 8001d8e:	4662      	mov	r2, ip
 8001d90:	9902      	ldr	r1, [sp, #8]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	d100      	bne.n	8001d98 <__aeabi_dsub+0x410>
 8001d96:	e0c5      	b.n	8001f24 <__aeabi_dsub+0x59c>
 8001d98:	4663      	mov	r3, ip
 8001d9a:	18c5      	adds	r5, r0, r3
 8001d9c:	468c      	mov	ip, r1
 8001d9e:	4285      	cmp	r5, r0
 8001da0:	4180      	sbcs	r0, r0
 8001da2:	4464      	add	r4, ip
 8001da4:	4240      	negs	r0, r0
 8001da6:	1824      	adds	r4, r4, r0
 8001da8:	0223      	lsls	r3, r4, #8
 8001daa:	d502      	bpl.n	8001db2 <__aeabi_dsub+0x42a>
 8001dac:	4bb9      	ldr	r3, [pc, #740]	@ (8002094 <__aeabi_dsub+0x70c>)
 8001dae:	3701      	adds	r7, #1
 8001db0:	401c      	ands	r4, r3
 8001db2:	46ba      	mov	sl, r7
 8001db4:	9503      	str	r5, [sp, #12]
 8001db6:	e7d5      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001db8:	4662      	mov	r2, ip
 8001dba:	1a85      	subs	r5, r0, r2
 8001dbc:	42a8      	cmp	r0, r5
 8001dbe:	4192      	sbcs	r2, r2
 8001dc0:	4252      	negs	r2, r2
 8001dc2:	4691      	mov	r9, r2
 8001dc4:	9b02      	ldr	r3, [sp, #8]
 8001dc6:	1ae3      	subs	r3, r4, r3
 8001dc8:	001a      	movs	r2, r3
 8001dca:	464b      	mov	r3, r9
 8001dcc:	1ad2      	subs	r2, r2, r3
 8001dce:	0013      	movs	r3, r2
 8001dd0:	4691      	mov	r9, r2
 8001dd2:	021a      	lsls	r2, r3, #8
 8001dd4:	d46c      	bmi.n	8001eb0 <__aeabi_dsub+0x528>
 8001dd6:	464a      	mov	r2, r9
 8001dd8:	464c      	mov	r4, r9
 8001dda:	432a      	orrs	r2, r5
 8001ddc:	d000      	beq.n	8001de0 <__aeabi_dsub+0x458>
 8001dde:	e63a      	b.n	8001a56 <__aeabi_dsub+0xce>
 8001de0:	2600      	movs	r6, #0
 8001de2:	2400      	movs	r4, #0
 8001de4:	2500      	movs	r5, #0
 8001de6:	e678      	b.n	8001ada <__aeabi_dsub+0x152>
 8001de8:	9902      	ldr	r1, [sp, #8]
 8001dea:	4653      	mov	r3, sl
 8001dec:	000d      	movs	r5, r1
 8001dee:	3a20      	subs	r2, #32
 8001df0:	40d5      	lsrs	r5, r2
 8001df2:	2b20      	cmp	r3, #32
 8001df4:	d006      	beq.n	8001e04 <__aeabi_dsub+0x47c>
 8001df6:	2240      	movs	r2, #64	@ 0x40
 8001df8:	1ad2      	subs	r2, r2, r3
 8001dfa:	000b      	movs	r3, r1
 8001dfc:	4093      	lsls	r3, r2
 8001dfe:	4662      	mov	r2, ip
 8001e00:	431a      	orrs	r2, r3
 8001e02:	4693      	mov	fp, r2
 8001e04:	465b      	mov	r3, fp
 8001e06:	1e5a      	subs	r2, r3, #1
 8001e08:	4193      	sbcs	r3, r2
 8001e0a:	431d      	orrs	r5, r3
 8001e0c:	e619      	b.n	8001a42 <__aeabi_dsub+0xba>
 8001e0e:	4653      	mov	r3, sl
 8001e10:	1e5a      	subs	r2, r3, #1
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d100      	bne.n	8001e18 <__aeabi_dsub+0x490>
 8001e16:	e0c6      	b.n	8001fa6 <__aeabi_dsub+0x61e>
 8001e18:	4e9d      	ldr	r6, [pc, #628]	@ (8002090 <__aeabi_dsub+0x708>)
 8001e1a:	45b2      	cmp	sl, r6
 8001e1c:	d100      	bne.n	8001e20 <__aeabi_dsub+0x498>
 8001e1e:	e6bd      	b.n	8001b9c <__aeabi_dsub+0x214>
 8001e20:	4688      	mov	r8, r1
 8001e22:	000e      	movs	r6, r1
 8001e24:	2501      	movs	r5, #1
 8001e26:	2a38      	cmp	r2, #56	@ 0x38
 8001e28:	dc10      	bgt.n	8001e4c <__aeabi_dsub+0x4c4>
 8001e2a:	2a1f      	cmp	r2, #31
 8001e2c:	dc7f      	bgt.n	8001f2e <__aeabi_dsub+0x5a6>
 8001e2e:	2120      	movs	r1, #32
 8001e30:	0025      	movs	r5, r4
 8001e32:	1a89      	subs	r1, r1, r2
 8001e34:	0007      	movs	r7, r0
 8001e36:	4088      	lsls	r0, r1
 8001e38:	408d      	lsls	r5, r1
 8001e3a:	40d7      	lsrs	r7, r2
 8001e3c:	40d4      	lsrs	r4, r2
 8001e3e:	1e41      	subs	r1, r0, #1
 8001e40:	4188      	sbcs	r0, r1
 8001e42:	9b02      	ldr	r3, [sp, #8]
 8001e44:	433d      	orrs	r5, r7
 8001e46:	1b1b      	subs	r3, r3, r4
 8001e48:	4305      	orrs	r5, r0
 8001e4a:	9302      	str	r3, [sp, #8]
 8001e4c:	4662      	mov	r2, ip
 8001e4e:	1b55      	subs	r5, r2, r5
 8001e50:	45ac      	cmp	ip, r5
 8001e52:	4192      	sbcs	r2, r2
 8001e54:	9b02      	ldr	r3, [sp, #8]
 8001e56:	4252      	negs	r2, r2
 8001e58:	464f      	mov	r7, r9
 8001e5a:	1a9c      	subs	r4, r3, r2
 8001e5c:	e5f6      	b.n	8001a4c <__aeabi_dsub+0xc4>
 8001e5e:	2d00      	cmp	r5, #0
 8001e60:	d000      	beq.n	8001e64 <__aeabi_dsub+0x4dc>
 8001e62:	e0b7      	b.n	8001fd4 <__aeabi_dsub+0x64c>
 8001e64:	2a00      	cmp	r2, #0
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dsub+0x4e2>
 8001e68:	e0f0      	b.n	800204c <__aeabi_dsub+0x6c4>
 8001e6a:	2601      	movs	r6, #1
 8001e6c:	400e      	ands	r6, r1
 8001e6e:	4663      	mov	r3, ip
 8001e70:	9802      	ldr	r0, [sp, #8]
 8001e72:	08d9      	lsrs	r1, r3, #3
 8001e74:	0742      	lsls	r2, r0, #29
 8001e76:	430a      	orrs	r2, r1
 8001e78:	08c4      	lsrs	r4, r0, #3
 8001e7a:	e696      	b.n	8001baa <__aeabi_dsub+0x222>
 8001e7c:	4c85      	ldr	r4, [pc, #532]	@ (8002094 <__aeabi_dsub+0x70c>)
 8001e7e:	1aff      	subs	r7, r7, r3
 8001e80:	4014      	ands	r4, r2
 8001e82:	0762      	lsls	r2, r4, #29
 8001e84:	08e4      	lsrs	r4, r4, #3
 8001e86:	e760      	b.n	8001d4a <__aeabi_dsub+0x3c2>
 8001e88:	4981      	ldr	r1, [pc, #516]	@ (8002090 <__aeabi_dsub+0x708>)
 8001e8a:	428a      	cmp	r2, r1
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dsub+0x508>
 8001e8e:	e0c9      	b.n	8002024 <__aeabi_dsub+0x69c>
 8001e90:	4663      	mov	r3, ip
 8001e92:	18c1      	adds	r1, r0, r3
 8001e94:	4281      	cmp	r1, r0
 8001e96:	4180      	sbcs	r0, r0
 8001e98:	9b02      	ldr	r3, [sp, #8]
 8001e9a:	4240      	negs	r0, r0
 8001e9c:	18e3      	adds	r3, r4, r3
 8001e9e:	181b      	adds	r3, r3, r0
 8001ea0:	07dd      	lsls	r5, r3, #31
 8001ea2:	085c      	lsrs	r4, r3, #1
 8001ea4:	2307      	movs	r3, #7
 8001ea6:	0849      	lsrs	r1, r1, #1
 8001ea8:	430d      	orrs	r5, r1
 8001eaa:	0017      	movs	r7, r2
 8001eac:	402b      	ands	r3, r5
 8001eae:	e710      	b.n	8001cd2 <__aeabi_dsub+0x34a>
 8001eb0:	4663      	mov	r3, ip
 8001eb2:	1a1d      	subs	r5, r3, r0
 8001eb4:	45ac      	cmp	ip, r5
 8001eb6:	4192      	sbcs	r2, r2
 8001eb8:	2601      	movs	r6, #1
 8001eba:	9b02      	ldr	r3, [sp, #8]
 8001ebc:	4252      	negs	r2, r2
 8001ebe:	1b1c      	subs	r4, r3, r4
 8001ec0:	4688      	mov	r8, r1
 8001ec2:	1aa4      	subs	r4, r4, r2
 8001ec4:	400e      	ands	r6, r1
 8001ec6:	e5c6      	b.n	8001a56 <__aeabi_dsub+0xce>
 8001ec8:	4663      	mov	r3, ip
 8001eca:	18c5      	adds	r5, r0, r3
 8001ecc:	9b02      	ldr	r3, [sp, #8]
 8001ece:	4285      	cmp	r5, r0
 8001ed0:	4180      	sbcs	r0, r0
 8001ed2:	469c      	mov	ip, r3
 8001ed4:	4240      	negs	r0, r0
 8001ed6:	4464      	add	r4, ip
 8001ed8:	1824      	adds	r4, r4, r0
 8001eda:	2701      	movs	r7, #1
 8001edc:	0223      	lsls	r3, r4, #8
 8001ede:	d400      	bmi.n	8001ee2 <__aeabi_dsub+0x55a>
 8001ee0:	e6f5      	b.n	8001cce <__aeabi_dsub+0x346>
 8001ee2:	2702      	movs	r7, #2
 8001ee4:	e641      	b.n	8001b6a <__aeabi_dsub+0x1e2>
 8001ee6:	4663      	mov	r3, ip
 8001ee8:	1ac5      	subs	r5, r0, r3
 8001eea:	42a8      	cmp	r0, r5
 8001eec:	4180      	sbcs	r0, r0
 8001eee:	9b02      	ldr	r3, [sp, #8]
 8001ef0:	4240      	negs	r0, r0
 8001ef2:	1ae4      	subs	r4, r4, r3
 8001ef4:	2701      	movs	r7, #1
 8001ef6:	1a24      	subs	r4, r4, r0
 8001ef8:	e5a8      	b.n	8001a4c <__aeabi_dsub+0xc4>
 8001efa:	9d02      	ldr	r5, [sp, #8]
 8001efc:	4652      	mov	r2, sl
 8001efe:	002b      	movs	r3, r5
 8001f00:	3a20      	subs	r2, #32
 8001f02:	40d3      	lsrs	r3, r2
 8001f04:	0019      	movs	r1, r3
 8001f06:	4653      	mov	r3, sl
 8001f08:	2b20      	cmp	r3, #32
 8001f0a:	d006      	beq.n	8001f1a <__aeabi_dsub+0x592>
 8001f0c:	2240      	movs	r2, #64	@ 0x40
 8001f0e:	1ad2      	subs	r2, r2, r3
 8001f10:	002b      	movs	r3, r5
 8001f12:	4093      	lsls	r3, r2
 8001f14:	4662      	mov	r2, ip
 8001f16:	431a      	orrs	r2, r3
 8001f18:	4693      	mov	fp, r2
 8001f1a:	465d      	mov	r5, fp
 8001f1c:	1e6b      	subs	r3, r5, #1
 8001f1e:	419d      	sbcs	r5, r3
 8001f20:	430d      	orrs	r5, r1
 8001f22:	e615      	b.n	8001b50 <__aeabi_dsub+0x1c8>
 8001f24:	0762      	lsls	r2, r4, #29
 8001f26:	08c0      	lsrs	r0, r0, #3
 8001f28:	4302      	orrs	r2, r0
 8001f2a:	08e4      	lsrs	r4, r4, #3
 8001f2c:	e70d      	b.n	8001d4a <__aeabi_dsub+0x3c2>
 8001f2e:	0011      	movs	r1, r2
 8001f30:	0027      	movs	r7, r4
 8001f32:	3920      	subs	r1, #32
 8001f34:	40cf      	lsrs	r7, r1
 8001f36:	2a20      	cmp	r2, #32
 8001f38:	d005      	beq.n	8001f46 <__aeabi_dsub+0x5be>
 8001f3a:	2140      	movs	r1, #64	@ 0x40
 8001f3c:	1a8a      	subs	r2, r1, r2
 8001f3e:	4094      	lsls	r4, r2
 8001f40:	0025      	movs	r5, r4
 8001f42:	4305      	orrs	r5, r0
 8001f44:	9503      	str	r5, [sp, #12]
 8001f46:	9d03      	ldr	r5, [sp, #12]
 8001f48:	1e6a      	subs	r2, r5, #1
 8001f4a:	4195      	sbcs	r5, r2
 8001f4c:	433d      	orrs	r5, r7
 8001f4e:	e77d      	b.n	8001e4c <__aeabi_dsub+0x4c4>
 8001f50:	2a00      	cmp	r2, #0
 8001f52:	d100      	bne.n	8001f56 <__aeabi_dsub+0x5ce>
 8001f54:	e744      	b.n	8001de0 <__aeabi_dsub+0x458>
 8001f56:	2601      	movs	r6, #1
 8001f58:	400e      	ands	r6, r1
 8001f5a:	4663      	mov	r3, ip
 8001f5c:	08d9      	lsrs	r1, r3, #3
 8001f5e:	9b02      	ldr	r3, [sp, #8]
 8001f60:	075a      	lsls	r2, r3, #29
 8001f62:	430a      	orrs	r2, r1
 8001f64:	08dc      	lsrs	r4, r3, #3
 8001f66:	e6f0      	b.n	8001d4a <__aeabi_dsub+0x3c2>
 8001f68:	2a00      	cmp	r2, #0
 8001f6a:	d028      	beq.n	8001fbe <__aeabi_dsub+0x636>
 8001f6c:	4662      	mov	r2, ip
 8001f6e:	9f02      	ldr	r7, [sp, #8]
 8001f70:	08c0      	lsrs	r0, r0, #3
 8001f72:	433a      	orrs	r2, r7
 8001f74:	d100      	bne.n	8001f78 <__aeabi_dsub+0x5f0>
 8001f76:	e6dc      	b.n	8001d32 <__aeabi_dsub+0x3aa>
 8001f78:	0762      	lsls	r2, r4, #29
 8001f7a:	4310      	orrs	r0, r2
 8001f7c:	2280      	movs	r2, #128	@ 0x80
 8001f7e:	08e4      	lsrs	r4, r4, #3
 8001f80:	0312      	lsls	r2, r2, #12
 8001f82:	4214      	tst	r4, r2
 8001f84:	d009      	beq.n	8001f9a <__aeabi_dsub+0x612>
 8001f86:	08fd      	lsrs	r5, r7, #3
 8001f88:	4215      	tst	r5, r2
 8001f8a:	d106      	bne.n	8001f9a <__aeabi_dsub+0x612>
 8001f8c:	4663      	mov	r3, ip
 8001f8e:	2601      	movs	r6, #1
 8001f90:	002c      	movs	r4, r5
 8001f92:	08d8      	lsrs	r0, r3, #3
 8001f94:	077b      	lsls	r3, r7, #29
 8001f96:	4318      	orrs	r0, r3
 8001f98:	400e      	ands	r6, r1
 8001f9a:	0f42      	lsrs	r2, r0, #29
 8001f9c:	00c0      	lsls	r0, r0, #3
 8001f9e:	08c0      	lsrs	r0, r0, #3
 8001fa0:	0752      	lsls	r2, r2, #29
 8001fa2:	4302      	orrs	r2, r0
 8001fa4:	e601      	b.n	8001baa <__aeabi_dsub+0x222>
 8001fa6:	4663      	mov	r3, ip
 8001fa8:	1a1d      	subs	r5, r3, r0
 8001faa:	45ac      	cmp	ip, r5
 8001fac:	4192      	sbcs	r2, r2
 8001fae:	9b02      	ldr	r3, [sp, #8]
 8001fb0:	4252      	negs	r2, r2
 8001fb2:	1b1c      	subs	r4, r3, r4
 8001fb4:	000e      	movs	r6, r1
 8001fb6:	4688      	mov	r8, r1
 8001fb8:	2701      	movs	r7, #1
 8001fba:	1aa4      	subs	r4, r4, r2
 8001fbc:	e546      	b.n	8001a4c <__aeabi_dsub+0xc4>
 8001fbe:	4663      	mov	r3, ip
 8001fc0:	08d9      	lsrs	r1, r3, #3
 8001fc2:	9b02      	ldr	r3, [sp, #8]
 8001fc4:	075a      	lsls	r2, r3, #29
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	08dc      	lsrs	r4, r3, #3
 8001fca:	e5ee      	b.n	8001baa <__aeabi_dsub+0x222>
 8001fcc:	4663      	mov	r3, ip
 8001fce:	9c02      	ldr	r4, [sp, #8]
 8001fd0:	9303      	str	r3, [sp, #12]
 8001fd2:	e6c7      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001fd4:	08c0      	lsrs	r0, r0, #3
 8001fd6:	2a00      	cmp	r2, #0
 8001fd8:	d100      	bne.n	8001fdc <__aeabi_dsub+0x654>
 8001fda:	e6aa      	b.n	8001d32 <__aeabi_dsub+0x3aa>
 8001fdc:	0762      	lsls	r2, r4, #29
 8001fde:	4310      	orrs	r0, r2
 8001fe0:	2280      	movs	r2, #128	@ 0x80
 8001fe2:	08e4      	lsrs	r4, r4, #3
 8001fe4:	0312      	lsls	r2, r2, #12
 8001fe6:	4214      	tst	r4, r2
 8001fe8:	d0d7      	beq.n	8001f9a <__aeabi_dsub+0x612>
 8001fea:	9f02      	ldr	r7, [sp, #8]
 8001fec:	08fd      	lsrs	r5, r7, #3
 8001fee:	4215      	tst	r5, r2
 8001ff0:	d1d3      	bne.n	8001f9a <__aeabi_dsub+0x612>
 8001ff2:	4663      	mov	r3, ip
 8001ff4:	2601      	movs	r6, #1
 8001ff6:	08d8      	lsrs	r0, r3, #3
 8001ff8:	077b      	lsls	r3, r7, #29
 8001ffa:	002c      	movs	r4, r5
 8001ffc:	4318      	orrs	r0, r3
 8001ffe:	400e      	ands	r6, r1
 8002000:	e7cb      	b.n	8001f9a <__aeabi_dsub+0x612>
 8002002:	000a      	movs	r2, r1
 8002004:	0027      	movs	r7, r4
 8002006:	3a20      	subs	r2, #32
 8002008:	40d7      	lsrs	r7, r2
 800200a:	2920      	cmp	r1, #32
 800200c:	d005      	beq.n	800201a <__aeabi_dsub+0x692>
 800200e:	2240      	movs	r2, #64	@ 0x40
 8002010:	1a52      	subs	r2, r2, r1
 8002012:	4094      	lsls	r4, r2
 8002014:	0025      	movs	r5, r4
 8002016:	4305      	orrs	r5, r0
 8002018:	9503      	str	r5, [sp, #12]
 800201a:	9d03      	ldr	r5, [sp, #12]
 800201c:	1e6a      	subs	r2, r5, #1
 800201e:	4195      	sbcs	r5, r2
 8002020:	432f      	orrs	r7, r5
 8002022:	e610      	b.n	8001c46 <__aeabi_dsub+0x2be>
 8002024:	0014      	movs	r4, r2
 8002026:	2500      	movs	r5, #0
 8002028:	2200      	movs	r2, #0
 800202a:	e556      	b.n	8001ada <__aeabi_dsub+0x152>
 800202c:	9b02      	ldr	r3, [sp, #8]
 800202e:	4460      	add	r0, ip
 8002030:	4699      	mov	r9, r3
 8002032:	4560      	cmp	r0, ip
 8002034:	4192      	sbcs	r2, r2
 8002036:	444c      	add	r4, r9
 8002038:	4252      	negs	r2, r2
 800203a:	0005      	movs	r5, r0
 800203c:	18a4      	adds	r4, r4, r2
 800203e:	e74c      	b.n	8001eda <__aeabi_dsub+0x552>
 8002040:	001a      	movs	r2, r3
 8002042:	001c      	movs	r4, r3
 8002044:	432a      	orrs	r2, r5
 8002046:	d000      	beq.n	800204a <__aeabi_dsub+0x6c2>
 8002048:	e6b3      	b.n	8001db2 <__aeabi_dsub+0x42a>
 800204a:	e6c9      	b.n	8001de0 <__aeabi_dsub+0x458>
 800204c:	2480      	movs	r4, #128	@ 0x80
 800204e:	2600      	movs	r6, #0
 8002050:	0324      	lsls	r4, r4, #12
 8002052:	e5ae      	b.n	8001bb2 <__aeabi_dsub+0x22a>
 8002054:	2120      	movs	r1, #32
 8002056:	2500      	movs	r5, #0
 8002058:	1a09      	subs	r1, r1, r0
 800205a:	e517      	b.n	8001a8c <__aeabi_dsub+0x104>
 800205c:	2200      	movs	r2, #0
 800205e:	2500      	movs	r5, #0
 8002060:	4c0b      	ldr	r4, [pc, #44]	@ (8002090 <__aeabi_dsub+0x708>)
 8002062:	e53a      	b.n	8001ada <__aeabi_dsub+0x152>
 8002064:	2d00      	cmp	r5, #0
 8002066:	d100      	bne.n	800206a <__aeabi_dsub+0x6e2>
 8002068:	e5f6      	b.n	8001c58 <__aeabi_dsub+0x2d0>
 800206a:	464b      	mov	r3, r9
 800206c:	1bda      	subs	r2, r3, r7
 800206e:	4692      	mov	sl, r2
 8002070:	2f00      	cmp	r7, #0
 8002072:	d100      	bne.n	8002076 <__aeabi_dsub+0x6ee>
 8002074:	e66f      	b.n	8001d56 <__aeabi_dsub+0x3ce>
 8002076:	2a38      	cmp	r2, #56	@ 0x38
 8002078:	dc05      	bgt.n	8002086 <__aeabi_dsub+0x6fe>
 800207a:	2680      	movs	r6, #128	@ 0x80
 800207c:	0436      	lsls	r6, r6, #16
 800207e:	4334      	orrs	r4, r6
 8002080:	4688      	mov	r8, r1
 8002082:	000e      	movs	r6, r1
 8002084:	e6d1      	b.n	8001e2a <__aeabi_dsub+0x4a2>
 8002086:	4688      	mov	r8, r1
 8002088:	000e      	movs	r6, r1
 800208a:	2501      	movs	r5, #1
 800208c:	e6de      	b.n	8001e4c <__aeabi_dsub+0x4c4>
 800208e:	46c0      	nop			@ (mov r8, r8)
 8002090:	000007ff 	.word	0x000007ff
 8002094:	ff7fffff 	.word	0xff7fffff
 8002098:	000007fe 	.word	0x000007fe
 800209c:	2d00      	cmp	r5, #0
 800209e:	d100      	bne.n	80020a2 <__aeabi_dsub+0x71a>
 80020a0:	e668      	b.n	8001d74 <__aeabi_dsub+0x3ec>
 80020a2:	464b      	mov	r3, r9
 80020a4:	1bd9      	subs	r1, r3, r7
 80020a6:	2f00      	cmp	r7, #0
 80020a8:	d101      	bne.n	80020ae <__aeabi_dsub+0x726>
 80020aa:	468a      	mov	sl, r1
 80020ac:	e5a7      	b.n	8001bfe <__aeabi_dsub+0x276>
 80020ae:	2701      	movs	r7, #1
 80020b0:	2938      	cmp	r1, #56	@ 0x38
 80020b2:	dd00      	ble.n	80020b6 <__aeabi_dsub+0x72e>
 80020b4:	e5c7      	b.n	8001c46 <__aeabi_dsub+0x2be>
 80020b6:	2280      	movs	r2, #128	@ 0x80
 80020b8:	0412      	lsls	r2, r2, #16
 80020ba:	4314      	orrs	r4, r2
 80020bc:	e5af      	b.n	8001c1e <__aeabi_dsub+0x296>
 80020be:	46c0      	nop			@ (mov r8, r8)

080020c0 <__aeabi_dcmpun>:
 80020c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020c2:	46c6      	mov	lr, r8
 80020c4:	031e      	lsls	r6, r3, #12
 80020c6:	0b36      	lsrs	r6, r6, #12
 80020c8:	46b0      	mov	r8, r6
 80020ca:	4e0d      	ldr	r6, [pc, #52]	@ (8002100 <__aeabi_dcmpun+0x40>)
 80020cc:	030c      	lsls	r4, r1, #12
 80020ce:	004d      	lsls	r5, r1, #1
 80020d0:	005f      	lsls	r7, r3, #1
 80020d2:	b500      	push	{lr}
 80020d4:	0b24      	lsrs	r4, r4, #12
 80020d6:	0d6d      	lsrs	r5, r5, #21
 80020d8:	0d7f      	lsrs	r7, r7, #21
 80020da:	42b5      	cmp	r5, r6
 80020dc:	d00b      	beq.n	80020f6 <__aeabi_dcmpun+0x36>
 80020de:	4908      	ldr	r1, [pc, #32]	@ (8002100 <__aeabi_dcmpun+0x40>)
 80020e0:	2000      	movs	r0, #0
 80020e2:	428f      	cmp	r7, r1
 80020e4:	d104      	bne.n	80020f0 <__aeabi_dcmpun+0x30>
 80020e6:	4646      	mov	r6, r8
 80020e8:	4316      	orrs	r6, r2
 80020ea:	0030      	movs	r0, r6
 80020ec:	1e43      	subs	r3, r0, #1
 80020ee:	4198      	sbcs	r0, r3
 80020f0:	bc80      	pop	{r7}
 80020f2:	46b8      	mov	r8, r7
 80020f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020f6:	4304      	orrs	r4, r0
 80020f8:	2001      	movs	r0, #1
 80020fa:	2c00      	cmp	r4, #0
 80020fc:	d1f8      	bne.n	80020f0 <__aeabi_dcmpun+0x30>
 80020fe:	e7ee      	b.n	80020de <__aeabi_dcmpun+0x1e>
 8002100:	000007ff 	.word	0x000007ff

08002104 <__aeabi_d2iz>:
 8002104:	000b      	movs	r3, r1
 8002106:	0002      	movs	r2, r0
 8002108:	b570      	push	{r4, r5, r6, lr}
 800210a:	4d16      	ldr	r5, [pc, #88]	@ (8002164 <__aeabi_d2iz+0x60>)
 800210c:	030c      	lsls	r4, r1, #12
 800210e:	b082      	sub	sp, #8
 8002110:	0049      	lsls	r1, r1, #1
 8002112:	2000      	movs	r0, #0
 8002114:	9200      	str	r2, [sp, #0]
 8002116:	9301      	str	r3, [sp, #4]
 8002118:	0b24      	lsrs	r4, r4, #12
 800211a:	0d49      	lsrs	r1, r1, #21
 800211c:	0fde      	lsrs	r6, r3, #31
 800211e:	42a9      	cmp	r1, r5
 8002120:	dd04      	ble.n	800212c <__aeabi_d2iz+0x28>
 8002122:	4811      	ldr	r0, [pc, #68]	@ (8002168 <__aeabi_d2iz+0x64>)
 8002124:	4281      	cmp	r1, r0
 8002126:	dd03      	ble.n	8002130 <__aeabi_d2iz+0x2c>
 8002128:	4b10      	ldr	r3, [pc, #64]	@ (800216c <__aeabi_d2iz+0x68>)
 800212a:	18f0      	adds	r0, r6, r3
 800212c:	b002      	add	sp, #8
 800212e:	bd70      	pop	{r4, r5, r6, pc}
 8002130:	2080      	movs	r0, #128	@ 0x80
 8002132:	0340      	lsls	r0, r0, #13
 8002134:	4320      	orrs	r0, r4
 8002136:	4c0e      	ldr	r4, [pc, #56]	@ (8002170 <__aeabi_d2iz+0x6c>)
 8002138:	1a64      	subs	r4, r4, r1
 800213a:	2c1f      	cmp	r4, #31
 800213c:	dd08      	ble.n	8002150 <__aeabi_d2iz+0x4c>
 800213e:	4b0d      	ldr	r3, [pc, #52]	@ (8002174 <__aeabi_d2iz+0x70>)
 8002140:	1a5b      	subs	r3, r3, r1
 8002142:	40d8      	lsrs	r0, r3
 8002144:	0003      	movs	r3, r0
 8002146:	4258      	negs	r0, r3
 8002148:	2e00      	cmp	r6, #0
 800214a:	d1ef      	bne.n	800212c <__aeabi_d2iz+0x28>
 800214c:	0018      	movs	r0, r3
 800214e:	e7ed      	b.n	800212c <__aeabi_d2iz+0x28>
 8002150:	4b09      	ldr	r3, [pc, #36]	@ (8002178 <__aeabi_d2iz+0x74>)
 8002152:	9a00      	ldr	r2, [sp, #0]
 8002154:	469c      	mov	ip, r3
 8002156:	0003      	movs	r3, r0
 8002158:	4461      	add	r1, ip
 800215a:	408b      	lsls	r3, r1
 800215c:	40e2      	lsrs	r2, r4
 800215e:	4313      	orrs	r3, r2
 8002160:	e7f1      	b.n	8002146 <__aeabi_d2iz+0x42>
 8002162:	46c0      	nop			@ (mov r8, r8)
 8002164:	000003fe 	.word	0x000003fe
 8002168:	0000041d 	.word	0x0000041d
 800216c:	7fffffff 	.word	0x7fffffff
 8002170:	00000433 	.word	0x00000433
 8002174:	00000413 	.word	0x00000413
 8002178:	fffffbed 	.word	0xfffffbed

0800217c <__aeabi_i2d>:
 800217c:	b570      	push	{r4, r5, r6, lr}
 800217e:	2800      	cmp	r0, #0
 8002180:	d016      	beq.n	80021b0 <__aeabi_i2d+0x34>
 8002182:	17c3      	asrs	r3, r0, #31
 8002184:	18c5      	adds	r5, r0, r3
 8002186:	405d      	eors	r5, r3
 8002188:	0fc4      	lsrs	r4, r0, #31
 800218a:	0028      	movs	r0, r5
 800218c:	f000 f848 	bl	8002220 <__clzsi2>
 8002190:	4b10      	ldr	r3, [pc, #64]	@ (80021d4 <__aeabi_i2d+0x58>)
 8002192:	1a1b      	subs	r3, r3, r0
 8002194:	055b      	lsls	r3, r3, #21
 8002196:	0d5b      	lsrs	r3, r3, #21
 8002198:	280a      	cmp	r0, #10
 800219a:	dc14      	bgt.n	80021c6 <__aeabi_i2d+0x4a>
 800219c:	0002      	movs	r2, r0
 800219e:	002e      	movs	r6, r5
 80021a0:	3215      	adds	r2, #21
 80021a2:	4096      	lsls	r6, r2
 80021a4:	220b      	movs	r2, #11
 80021a6:	1a12      	subs	r2, r2, r0
 80021a8:	40d5      	lsrs	r5, r2
 80021aa:	032d      	lsls	r5, r5, #12
 80021ac:	0b2d      	lsrs	r5, r5, #12
 80021ae:	e003      	b.n	80021b8 <__aeabi_i2d+0x3c>
 80021b0:	2400      	movs	r4, #0
 80021b2:	2300      	movs	r3, #0
 80021b4:	2500      	movs	r5, #0
 80021b6:	2600      	movs	r6, #0
 80021b8:	051b      	lsls	r3, r3, #20
 80021ba:	432b      	orrs	r3, r5
 80021bc:	07e4      	lsls	r4, r4, #31
 80021be:	4323      	orrs	r3, r4
 80021c0:	0030      	movs	r0, r6
 80021c2:	0019      	movs	r1, r3
 80021c4:	bd70      	pop	{r4, r5, r6, pc}
 80021c6:	380b      	subs	r0, #11
 80021c8:	4085      	lsls	r5, r0
 80021ca:	032d      	lsls	r5, r5, #12
 80021cc:	2600      	movs	r6, #0
 80021ce:	0b2d      	lsrs	r5, r5, #12
 80021d0:	e7f2      	b.n	80021b8 <__aeabi_i2d+0x3c>
 80021d2:	46c0      	nop			@ (mov r8, r8)
 80021d4:	0000041e 	.word	0x0000041e

080021d8 <__aeabi_ui2d>:
 80021d8:	b510      	push	{r4, lr}
 80021da:	1e04      	subs	r4, r0, #0
 80021dc:	d010      	beq.n	8002200 <__aeabi_ui2d+0x28>
 80021de:	f000 f81f 	bl	8002220 <__clzsi2>
 80021e2:	4b0e      	ldr	r3, [pc, #56]	@ (800221c <__aeabi_ui2d+0x44>)
 80021e4:	1a1b      	subs	r3, r3, r0
 80021e6:	055b      	lsls	r3, r3, #21
 80021e8:	0d5b      	lsrs	r3, r3, #21
 80021ea:	280a      	cmp	r0, #10
 80021ec:	dc0f      	bgt.n	800220e <__aeabi_ui2d+0x36>
 80021ee:	220b      	movs	r2, #11
 80021f0:	0021      	movs	r1, r4
 80021f2:	1a12      	subs	r2, r2, r0
 80021f4:	40d1      	lsrs	r1, r2
 80021f6:	3015      	adds	r0, #21
 80021f8:	030a      	lsls	r2, r1, #12
 80021fa:	4084      	lsls	r4, r0
 80021fc:	0b12      	lsrs	r2, r2, #12
 80021fe:	e001      	b.n	8002204 <__aeabi_ui2d+0x2c>
 8002200:	2300      	movs	r3, #0
 8002202:	2200      	movs	r2, #0
 8002204:	051b      	lsls	r3, r3, #20
 8002206:	4313      	orrs	r3, r2
 8002208:	0020      	movs	r0, r4
 800220a:	0019      	movs	r1, r3
 800220c:	bd10      	pop	{r4, pc}
 800220e:	0022      	movs	r2, r4
 8002210:	380b      	subs	r0, #11
 8002212:	4082      	lsls	r2, r0
 8002214:	0312      	lsls	r2, r2, #12
 8002216:	2400      	movs	r4, #0
 8002218:	0b12      	lsrs	r2, r2, #12
 800221a:	e7f3      	b.n	8002204 <__aeabi_ui2d+0x2c>
 800221c:	0000041e 	.word	0x0000041e

08002220 <__clzsi2>:
 8002220:	211c      	movs	r1, #28
 8002222:	2301      	movs	r3, #1
 8002224:	041b      	lsls	r3, r3, #16
 8002226:	4298      	cmp	r0, r3
 8002228:	d301      	bcc.n	800222e <__clzsi2+0xe>
 800222a:	0c00      	lsrs	r0, r0, #16
 800222c:	3910      	subs	r1, #16
 800222e:	0a1b      	lsrs	r3, r3, #8
 8002230:	4298      	cmp	r0, r3
 8002232:	d301      	bcc.n	8002238 <__clzsi2+0x18>
 8002234:	0a00      	lsrs	r0, r0, #8
 8002236:	3908      	subs	r1, #8
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	4298      	cmp	r0, r3
 800223c:	d301      	bcc.n	8002242 <__clzsi2+0x22>
 800223e:	0900      	lsrs	r0, r0, #4
 8002240:	3904      	subs	r1, #4
 8002242:	a202      	add	r2, pc, #8	@ (adr r2, 800224c <__clzsi2+0x2c>)
 8002244:	5c10      	ldrb	r0, [r2, r0]
 8002246:	1840      	adds	r0, r0, r1
 8002248:	4770      	bx	lr
 800224a:	46c0      	nop			@ (mov r8, r8)
 800224c:	02020304 	.word	0x02020304
 8002250:	01010101 	.word	0x01010101
	...

0800225c <is_ack_packet>:
// TODO: Find a way to test if the buffer is working correctly
static void comms_buffer_write(comms_packet_t packet);
uint8_t crc8(uint8_t *data, size_t len);

uint8_t is_ack_packet(comms_packet_t *packet)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
	return (packet->identifier == 0 && packet->length == 1 && packet->data[0] == 0);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d109      	bne.n	8002280 <is_ack_packet+0x24>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	785b      	ldrb	r3, [r3, #1]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d105      	bne.n	8002280 <is_ack_packet+0x24>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	789b      	ldrb	r3, [r3, #2]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <is_ack_packet+0x24>
 800227c:	2301      	movs	r3, #1
 800227e:	e000      	b.n	8002282 <is_ack_packet+0x26>
 8002280:	2300      	movs	r3, #0
 8002282:	b2db      	uxtb	r3, r3
}
 8002284:	0018      	movs	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	b002      	add	sp, #8
 800228a:	bd80      	pop	{r7, pc}

0800228c <is_ret_packet>:

uint8_t is_ret_packet(comms_packet_t *packet)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
	return (packet->identifier == 0 && packet->length == 1 && packet->data[0] == 1);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d109      	bne.n	80022b0 <is_ret_packet+0x24>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	785b      	ldrb	r3, [r3, #1]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d105      	bne.n	80022b0 <is_ret_packet+0x24>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	789b      	ldrb	r3, [r3, #2]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d101      	bne.n	80022b0 <is_ret_packet+0x24>
 80022ac:	2301      	movs	r3, #1
 80022ae:	e000      	b.n	80022b2 <is_ret_packet+0x26>
 80022b0:	2300      	movs	r3, #0
 80022b2:	b2db      	uxtb	r3, r3
}
 80022b4:	0018      	movs	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	b002      	add	sp, #8
 80022ba:	bd80      	pop	{r7, pc}

080022bc <comms_create_packet>:
{
	return (packet->identifier == 0 && packet->length == 1 && packet->data[0] == 255);
}

void comms_create_packet(comms_packet_t *packet, uint8_t packet_identifier, uint8_t data_length, uint8_t data[PACKET_DATA_MAX_LENGTH])
{
 80022bc:	b590      	push	{r4, r7, lr}
 80022be:	b087      	sub	sp, #28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	0008      	movs	r0, r1
 80022c6:	0011      	movs	r1, r2
 80022c8:	607b      	str	r3, [r7, #4]
 80022ca:	240b      	movs	r4, #11
 80022cc:	193b      	adds	r3, r7, r4
 80022ce:	1c02      	adds	r2, r0, #0
 80022d0:	701a      	strb	r2, [r3, #0]
 80022d2:	200a      	movs	r0, #10
 80022d4:	183b      	adds	r3, r7, r0
 80022d6:	1c0a      	adds	r2, r1, #0
 80022d8:	701a      	strb	r2, [r3, #0]
	packet->identifier = packet_identifier;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	193a      	adds	r2, r7, r4
 80022de:	7812      	ldrb	r2, [r2, #0]
 80022e0:	701a      	strb	r2, [r3, #0]
	packet->length = data_length;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	183a      	adds	r2, r7, r0
 80022e6:	7812      	ldrb	r2, [r2, #0]
 80022e8:	705a      	strb	r2, [r3, #1]
	for (int i = 0; i < data_length; i++)
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	e00c      	b.n	800230a <comms_create_packet+0x4e>
	{
		packet->data[i] = data[i];
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	18d3      	adds	r3, r2, r3
 80022f6:	7819      	ldrb	r1, [r3, #0]
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	18d3      	adds	r3, r2, r3
 80022fe:	3302      	adds	r3, #2
 8002300:	1c0a      	adds	r2, r1, #0
 8002302:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < data_length; i++)
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	3301      	adds	r3, #1
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	210a      	movs	r1, #10
 800230c:	187b      	adds	r3, r7, r1
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	429a      	cmp	r2, r3
 8002314:	dbec      	blt.n	80022f0 <comms_create_packet+0x34>
	}
	packet->crc = crc8((uint8_t *)packet, (data_length + 2));
 8002316:	187b      	adds	r3, r7, r1
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	3302      	adds	r3, #2
 800231c:	001a      	movs	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	0011      	movs	r1, r2
 8002322:	0018      	movs	r0, r3
 8002324:	f000 f98a 	bl	800263c <crc8>
 8002328:	0003      	movs	r3, r0
 800232a:	0019      	movs	r1, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2222      	movs	r2, #34	@ 0x22
 8002330:	5499      	strb	r1, [r3, r2]
}
 8002332:	46c0      	nop			@ (mov r8, r8)
 8002334:	46bd      	mov	sp, r7
 8002336:	b007      	add	sp, #28
 8002338:	bd90      	pop	{r4, r7, pc}
	...

0800233c <comms_init>:

void comms_init(UART_HandleTypeDef *huart1)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
	comms.huart = huart1;
 8002344:	4b11      	ldr	r3, [pc, #68]	@ (800238c <comms_init+0x50>)
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	601a      	str	r2, [r3, #0]
	comms.state = COMMS_ID_STATE;
 800234a:	4b10      	ldr	r3, [pc, #64]	@ (800238c <comms_init+0x50>)
 800234c:	2200      	movs	r2, #0
 800234e:	721a      	strb	r2, [r3, #8]

	// Create comms buffer
	comms_packet_buffer *rb = (comms_packet_buffer *)malloc(sizeof(comms_packet_buffer));
 8002350:	2008      	movs	r0, #8
 8002352:	f004 f90f 	bl	8006574 <malloc>
 8002356:	0003      	movs	r3, r0
 8002358:	60fb      	str	r3, [r7, #12]
	rb->buffer = (comms_packet_t *)malloc(COMMS_BUFFER_CAPACITY * sizeof(comms_packet_t));
 800235a:	23af      	movs	r3, #175	@ 0xaf
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	0018      	movs	r0, r3
 8002360:	f004 f908 	bl	8006574 <malloc>
 8002364:	0003      	movs	r3, r0
 8002366:	001a      	movs	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	601a      	str	r2, [r3, #0]
	rb->size = 0;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	711a      	strb	r2, [r3, #4]
	rb->head = 0;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	715a      	strb	r2, [r3, #5]
	rb->tail = 0;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	719a      	strb	r2, [r3, #6]
	comms.buffer = rb;
 800237e:	4b03      	ldr	r3, [pc, #12]	@ (800238c <comms_init+0x50>)
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	605a      	str	r2, [r3, #4]
}
 8002384:	46c0      	nop			@ (mov r8, r8)
 8002386:	46bd      	mov	sp, r7
 8002388:	b004      	add	sp, #16
 800238a:	bd80      	pop	{r7, pc}
 800238c:	2000023c 	.word	0x2000023c

08002390 <comms_state_machine>:

// TODO: UART receive error handing
void comms_state_machine()
{
 8002390:	b590      	push	{r4, r7, lr}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
	switch (comms.state)
 8002396:	4b48      	ldr	r3, [pc, #288]	@ (80024b8 <comms_state_machine+0x128>)
 8002398:	7a1b      	ldrb	r3, [r3, #8]
 800239a:	2b03      	cmp	r3, #3
 800239c:	d037      	beq.n	800240e <comms_state_machine+0x7e>
 800239e:	dd00      	ble.n	80023a2 <comms_state_machine+0x12>
 80023a0:	e07d      	b.n	800249e <comms_state_machine+0x10e>
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d023      	beq.n	80023ee <comms_state_machine+0x5e>
 80023a6:	dd00      	ble.n	80023aa <comms_state_machine+0x1a>
 80023a8:	e079      	b.n	800249e <comms_state_machine+0x10e>
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d002      	beq.n	80023b4 <comms_state_machine+0x24>
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d00f      	beq.n	80023d2 <comms_state_machine+0x42>
			}
			comms.state = COMMS_ID_STATE;
		}
		break;
	default:
		break;
 80023b2:	e074      	b.n	800249e <comms_state_machine+0x10e>
		if (HAL_UART_Receive(comms.huart, &(temporary_packet.identifier), 1, 1000) == HAL_OK)
 80023b4:	4b40      	ldr	r3, [pc, #256]	@ (80024b8 <comms_state_machine+0x128>)
 80023b6:	6818      	ldr	r0, [r3, #0]
 80023b8:	23fa      	movs	r3, #250	@ 0xfa
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	493f      	ldr	r1, [pc, #252]	@ (80024bc <comms_state_machine+0x12c>)
 80023be:	2201      	movs	r2, #1
 80023c0:	f002 fbca 	bl	8004b58 <HAL_UART_Receive>
 80023c4:	1e03      	subs	r3, r0, #0
 80023c6:	d000      	beq.n	80023ca <comms_state_machine+0x3a>
 80023c8:	e06b      	b.n	80024a2 <comms_state_machine+0x112>
			comms.state = COMMS_LENGTH_STATE;
 80023ca:	4b3b      	ldr	r3, [pc, #236]	@ (80024b8 <comms_state_machine+0x128>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	721a      	strb	r2, [r3, #8]
		break;
 80023d0:	e067      	b.n	80024a2 <comms_state_machine+0x112>
		if (HAL_UART_Receive(comms.huart, &(temporary_packet.length), 1, 1000) == HAL_OK)
 80023d2:	4b39      	ldr	r3, [pc, #228]	@ (80024b8 <comms_state_machine+0x128>)
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	23fa      	movs	r3, #250	@ 0xfa
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4939      	ldr	r1, [pc, #228]	@ (80024c0 <comms_state_machine+0x130>)
 80023dc:	2201      	movs	r2, #1
 80023de:	f002 fbbb 	bl	8004b58 <HAL_UART_Receive>
 80023e2:	1e03      	subs	r3, r0, #0
 80023e4:	d15f      	bne.n	80024a6 <comms_state_machine+0x116>
			comms.state = COMMS_DATA_STATE;
 80023e6:	4b34      	ldr	r3, [pc, #208]	@ (80024b8 <comms_state_machine+0x128>)
 80023e8:	2202      	movs	r2, #2
 80023ea:	721a      	strb	r2, [r3, #8]
		break;
 80023ec:	e05b      	b.n	80024a6 <comms_state_machine+0x116>
		if (HAL_UART_Receive(comms.huart, (temporary_packet.data), (temporary_packet.length), 1000) == HAL_OK)
 80023ee:	4b32      	ldr	r3, [pc, #200]	@ (80024b8 <comms_state_machine+0x128>)
 80023f0:	6818      	ldr	r0, [r3, #0]
 80023f2:	4b32      	ldr	r3, [pc, #200]	@ (80024bc <comms_state_machine+0x12c>)
 80023f4:	785b      	ldrb	r3, [r3, #1]
 80023f6:	001a      	movs	r2, r3
 80023f8:	23fa      	movs	r3, #250	@ 0xfa
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4931      	ldr	r1, [pc, #196]	@ (80024c4 <comms_state_machine+0x134>)
 80023fe:	f002 fbab 	bl	8004b58 <HAL_UART_Receive>
 8002402:	1e03      	subs	r3, r0, #0
 8002404:	d151      	bne.n	80024aa <comms_state_machine+0x11a>
			comms.state = COMMS_CRC_STATE;
 8002406:	4b2c      	ldr	r3, [pc, #176]	@ (80024b8 <comms_state_machine+0x128>)
 8002408:	2203      	movs	r2, #3
 800240a:	721a      	strb	r2, [r3, #8]
		break;
 800240c:	e04d      	b.n	80024aa <comms_state_machine+0x11a>
		if (HAL_UART_Receive(comms.huart, &(temporary_packet.crc), 1, 1000) == HAL_OK)
 800240e:	4b2a      	ldr	r3, [pc, #168]	@ (80024b8 <comms_state_machine+0x128>)
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	23fa      	movs	r3, #250	@ 0xfa
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	492c      	ldr	r1, [pc, #176]	@ (80024c8 <comms_state_machine+0x138>)
 8002418:	2201      	movs	r2, #1
 800241a:	f002 fb9d 	bl	8004b58 <HAL_UART_Receive>
 800241e:	1e03      	subs	r3, r0, #0
 8002420:	d145      	bne.n	80024ae <comms_state_machine+0x11e>
			uint8_t crc = crc8((uint8_t *)&temporary_packet, (temporary_packet.length + 2)); // Add 2 to the data length to accommodate the identifier byte and length byte
 8002422:	4b26      	ldr	r3, [pc, #152]	@ (80024bc <comms_state_machine+0x12c>)
 8002424:	785b      	ldrb	r3, [r3, #1]
 8002426:	3302      	adds	r3, #2
 8002428:	001a      	movs	r2, r3
 800242a:	1dfc      	adds	r4, r7, #7
 800242c:	4b23      	ldr	r3, [pc, #140]	@ (80024bc <comms_state_machine+0x12c>)
 800242e:	0011      	movs	r1, r2
 8002430:	0018      	movs	r0, r3
 8002432:	f000 f903 	bl	800263c <crc8>
 8002436:	0003      	movs	r3, r0
 8002438:	7023      	strb	r3, [r4, #0]
			if (crc == temporary_packet.crc)
 800243a:	4b20      	ldr	r3, [pc, #128]	@ (80024bc <comms_state_machine+0x12c>)
 800243c:	2222      	movs	r2, #34	@ 0x22
 800243e:	5c9b      	ldrb	r3, [r3, r2]
 8002440:	1dfa      	adds	r2, r7, #7
 8002442:	7812      	ldrb	r2, [r2, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d122      	bne.n	800248e <comms_state_machine+0xfe>
				if (!is_ack_packet(&temporary_packet))
 8002448:	4b1c      	ldr	r3, [pc, #112]	@ (80024bc <comms_state_machine+0x12c>)
 800244a:	0018      	movs	r0, r3
 800244c:	f7ff ff06 	bl	800225c <is_ack_packet>
 8002450:	1e03      	subs	r3, r0, #0
 8002452:	d120      	bne.n	8002496 <comms_state_machine+0x106>
					if (is_ret_packet(&temporary_packet))
 8002454:	4b19      	ldr	r3, [pc, #100]	@ (80024bc <comms_state_machine+0x12c>)
 8002456:	0018      	movs	r0, r3
 8002458:	f7ff ff18 	bl	800228c <is_ret_packet>
 800245c:	1e03      	subs	r3, r0, #0
 800245e:	d01a      	beq.n	8002496 <comms_state_machine+0x106>
						if (retries < 5)
 8002460:	4b1a      	ldr	r3, [pc, #104]	@ (80024cc <comms_state_machine+0x13c>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b04      	cmp	r3, #4
 8002466:	d80a      	bhi.n	800247e <comms_state_machine+0xee>
							comms_send_packet(&previous_packet);
 8002468:	4b19      	ldr	r3, [pc, #100]	@ (80024d0 <comms_state_machine+0x140>)
 800246a:	0018      	movs	r0, r3
 800246c:	f000 f836 	bl	80024dc <comms_send_packet>
							retries = retries + 1;
 8002470:	4b16      	ldr	r3, [pc, #88]	@ (80024cc <comms_state_machine+0x13c>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	3301      	adds	r3, #1
 8002476:	b2da      	uxtb	r2, r3
 8002478:	4b14      	ldr	r3, [pc, #80]	@ (80024cc <comms_state_machine+0x13c>)
 800247a:	701a      	strb	r2, [r3, #0]
 800247c:	e00b      	b.n	8002496 <comms_state_machine+0x106>
							comms_send_packet(&acknowledge_packet);
 800247e:	4b15      	ldr	r3, [pc, #84]	@ (80024d4 <comms_state_machine+0x144>)
 8002480:	0018      	movs	r0, r3
 8002482:	f000 f82b 	bl	80024dc <comms_send_packet>
							retries = 0;
 8002486:	4b11      	ldr	r3, [pc, #68]	@ (80024cc <comms_state_machine+0x13c>)
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]
 800248c:	e003      	b.n	8002496 <comms_state_machine+0x106>
				comms_send_packet(&retransmit_packet);
 800248e:	4b12      	ldr	r3, [pc, #72]	@ (80024d8 <comms_state_machine+0x148>)
 8002490:	0018      	movs	r0, r3
 8002492:	f000 f823 	bl	80024dc <comms_send_packet>
			comms.state = COMMS_ID_STATE;
 8002496:	4b08      	ldr	r3, [pc, #32]	@ (80024b8 <comms_state_machine+0x128>)
 8002498:	2200      	movs	r2, #0
 800249a:	721a      	strb	r2, [r3, #8]
		break;
 800249c:	e007      	b.n	80024ae <comms_state_machine+0x11e>
		break;
 800249e:	46c0      	nop			@ (mov r8, r8)
 80024a0:	e006      	b.n	80024b0 <comms_state_machine+0x120>
		break;
 80024a2:	46c0      	nop			@ (mov r8, r8)
 80024a4:	e004      	b.n	80024b0 <comms_state_machine+0x120>
		break;
 80024a6:	46c0      	nop			@ (mov r8, r8)
 80024a8:	e002      	b.n	80024b0 <comms_state_machine+0x120>
		break;
 80024aa:	46c0      	nop			@ (mov r8, r8)
 80024ac:	e000      	b.n	80024b0 <comms_state_machine+0x120>
		break;
 80024ae:	46c0      	nop			@ (mov r8, r8)
	}
}
 80024b0:	46c0      	nop			@ (mov r8, r8)
 80024b2:	46bd      	mov	sp, r7
 80024b4:	b003      	add	sp, #12
 80024b6:	bd90      	pop	{r4, r7, pc}
 80024b8:	2000023c 	.word	0x2000023c
 80024bc:	20000248 	.word	0x20000248
 80024c0:	20000249 	.word	0x20000249
 80024c4:	2000024a 	.word	0x2000024a
 80024c8:	2000026a 	.word	0x2000026a
 80024cc:	2000028f 	.word	0x2000028f
 80024d0:	2000026c 	.word	0x2000026c
 80024d4:	20000024 	.word	0x20000024
 80024d8:	20000000 	.word	0x20000000

080024dc <comms_send_packet>:

void comms_send_packet(comms_packet_t *packet)
{
 80024dc:	b590      	push	{r4, r7, lr}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
	uint8_t i;
	HAL_UART_Transmit(comms.huart, &(packet->identifier), 1, 100);
 80024e4:	4b23      	ldr	r3, [pc, #140]	@ (8002574 <comms_send_packet+0x98>)
 80024e6:	6818      	ldr	r0, [r3, #0]
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	2364      	movs	r3, #100	@ 0x64
 80024ec:	2201      	movs	r2, #1
 80024ee:	f002 fa93 	bl	8004a18 <HAL_UART_Transmit>
	HAL_UART_Transmit(comms.huart, &(packet->length), 1, 100);
 80024f2:	4b20      	ldr	r3, [pc, #128]	@ (8002574 <comms_send_packet+0x98>)
 80024f4:	6818      	ldr	r0, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	1c59      	adds	r1, r3, #1
 80024fa:	2364      	movs	r3, #100	@ 0x64
 80024fc:	2201      	movs	r2, #1
 80024fe:	f002 fa8b 	bl	8004a18 <HAL_UART_Transmit>
	for (i = 0; i < packet->length; ++i)
 8002502:	230f      	movs	r3, #15
 8002504:	18fb      	adds	r3, r7, r3
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]
 800250a:	e010      	b.n	800252e <comms_send_packet+0x52>
	{
		HAL_UART_Transmit(comms.huart, &(packet->data[i]), 1, 100);
 800250c:	4b19      	ldr	r3, [pc, #100]	@ (8002574 <comms_send_packet+0x98>)
 800250e:	6818      	ldr	r0, [r3, #0]
 8002510:	240f      	movs	r4, #15
 8002512:	193b      	adds	r3, r7, r4
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	18d3      	adds	r3, r2, r3
 800251a:	1c99      	adds	r1, r3, #2
 800251c:	2364      	movs	r3, #100	@ 0x64
 800251e:	2201      	movs	r2, #1
 8002520:	f002 fa7a 	bl	8004a18 <HAL_UART_Transmit>
	for (i = 0; i < packet->length; ++i)
 8002524:	193b      	adds	r3, r7, r4
 8002526:	193a      	adds	r2, r7, r4
 8002528:	7812      	ldrb	r2, [r2, #0]
 800252a:	3201      	adds	r2, #1
 800252c:	701a      	strb	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	785b      	ldrb	r3, [r3, #1]
 8002532:	220f      	movs	r2, #15
 8002534:	18ba      	adds	r2, r7, r2
 8002536:	7812      	ldrb	r2, [r2, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d3e7      	bcc.n	800250c <comms_send_packet+0x30>
	}
	HAL_UART_Transmit(comms.huart, &(packet->crc), 1, 100);
 800253c:	4b0d      	ldr	r3, [pc, #52]	@ (8002574 <comms_send_packet+0x98>)
 800253e:	6818      	ldr	r0, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3322      	adds	r3, #34	@ 0x22
 8002544:	0019      	movs	r1, r3
 8002546:	2364      	movs	r3, #100	@ 0x64
 8002548:	2201      	movs	r2, #1
 800254a:	f002 fa65 	bl	8004a18 <HAL_UART_Transmit>

	// TODO: Question this decision
	if (!is_ret_packet(packet))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	0018      	movs	r0, r3
 8002552:	f7ff fe9b 	bl	800228c <is_ret_packet>
 8002556:	1e03      	subs	r3, r0, #0
 8002558:	d107      	bne.n	800256a <comms_send_packet+0x8e>
	{
		memcpy(&previous_packet, packet, sizeof(comms_packet_t));
 800255a:	4a07      	ldr	r2, [pc, #28]	@ (8002578 <comms_send_packet+0x9c>)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	0010      	movs	r0, r2
 8002560:	0019      	movs	r1, r3
 8002562:	2323      	movs	r3, #35	@ 0x23
 8002564:	001a      	movs	r2, r3
 8002566:	f004 fed7 	bl	8007318 <memcpy>
	}
}
 800256a:	46c0      	nop			@ (mov r8, r8)
 800256c:	46bd      	mov	sp, r7
 800256e:	b005      	add	sp, #20
 8002570:	bd90      	pop	{r4, r7, pc}
 8002572:	46c0      	nop			@ (mov r8, r8)
 8002574:	2000023c 	.word	0x2000023c
 8002578:	2000026c 	.word	0x2000026c

0800257c <comms_buffer_read>:
	// Update previous packet
	// memcpy(&previous_packet, &temporary_packet, sizeof(comms_packet_t));
}

comms_packet_t comms_buffer_read()
{
 800257c:	b590      	push	{r4, r7, lr}
 800257e:	b08d      	sub	sp, #52	@ 0x34
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
	comms_packet_t packet = {0}; // Empty packet
 8002584:	240c      	movs	r4, #12
 8002586:	193b      	adds	r3, r7, r4
 8002588:	0018      	movs	r0, r3
 800258a:	2323      	movs	r3, #35	@ 0x23
 800258c:	001a      	movs	r2, r3
 800258e:	2100      	movs	r1, #0
 8002590:	f004 fe1e 	bl	80071d0 <memset>
	if (comms.buffer->size == 0)
 8002594:	4b21      	ldr	r3, [pc, #132]	@ (800261c <comms_buffer_read+0xa0>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	791b      	ldrb	r3, [r3, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d108      	bne.n	80025b0 <comms_buffer_read+0x34>
	{
		// TODO: Think of a way to handle this
		return packet; // Buffer is empty
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	193b      	adds	r3, r7, r4
 80025a2:	0010      	movs	r0, r2
 80025a4:	0019      	movs	r1, r3
 80025a6:	2323      	movs	r3, #35	@ 0x23
 80025a8:	001a      	movs	r2, r3
 80025aa:	f004 feb5 	bl	8007318 <memcpy>
 80025ae:	e030      	b.n	8002612 <comms_buffer_read+0x96>
	}

	packet = comms.buffer->buffer[comms.buffer->tail];
 80025b0:	4b1a      	ldr	r3, [pc, #104]	@ (800261c <comms_buffer_read+0xa0>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	4b19      	ldr	r3, [pc, #100]	@ (800261c <comms_buffer_read+0xa0>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	799b      	ldrb	r3, [r3, #6]
 80025bc:	0019      	movs	r1, r3
 80025be:	000b      	movs	r3, r1
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	185b      	adds	r3, r3, r1
 80025c4:	00d9      	lsls	r1, r3, #3
 80025c6:	1acb      	subs	r3, r1, r3
 80025c8:	18d3      	adds	r3, r2, r3
 80025ca:	240c      	movs	r4, #12
 80025cc:	193a      	adds	r2, r7, r4
 80025ce:	0010      	movs	r0, r2
 80025d0:	0019      	movs	r1, r3
 80025d2:	2323      	movs	r3, #35	@ 0x23
 80025d4:	001a      	movs	r2, r3
 80025d6:	f004 fe9f 	bl	8007318 <memcpy>
	comms.buffer->tail = (comms.buffer->tail + 1) % COMMS_BUFFER_CAPACITY;
 80025da:	4b10      	ldr	r3, [pc, #64]	@ (800261c <comms_buffer_read+0xa0>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	799b      	ldrb	r3, [r3, #6]
 80025e0:	3301      	adds	r3, #1
 80025e2:	210a      	movs	r1, #10
 80025e4:	0018      	movs	r0, r3
 80025e6:	f7fd ff1b 	bl	8000420 <__aeabi_idivmod>
 80025ea:	000b      	movs	r3, r1
 80025ec:	001a      	movs	r2, r3
 80025ee:	4b0b      	ldr	r3, [pc, #44]	@ (800261c <comms_buffer_read+0xa0>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	719a      	strb	r2, [r3, #6]
	comms.buffer->size++;
 80025f6:	4b09      	ldr	r3, [pc, #36]	@ (800261c <comms_buffer_read+0xa0>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	791a      	ldrb	r2, [r3, #4]
 80025fc:	3201      	adds	r2, #1
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	711a      	strb	r2, [r3, #4]
	return packet;
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	193b      	adds	r3, r7, r4
 8002606:	0010      	movs	r0, r2
 8002608:	0019      	movs	r1, r3
 800260a:	2323      	movs	r3, #35	@ 0x23
 800260c:	001a      	movs	r2, r3
 800260e:	f004 fe83 	bl	8007318 <memcpy>
}
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	46bd      	mov	sp, r7
 8002616:	b00d      	add	sp, #52	@ 0x34
 8002618:	bd90      	pop	{r4, r7, pc}
 800261a:	46c0      	nop			@ (mov r8, r8)
 800261c:	2000023c 	.word	0x2000023c

08002620 <comms_buffer_is_empty>:
{
	return comms.buffer->size == COMMS_BUFFER_CAPACITY;
}

uint8_t comms_buffer_is_empty()
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
	return comms.buffer->size == 0;
 8002624:	4b04      	ldr	r3, [pc, #16]	@ (8002638 <comms_buffer_is_empty+0x18>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	791b      	ldrb	r3, [r3, #4]
 800262a:	425a      	negs	r2, r3
 800262c:	4153      	adcs	r3, r2
 800262e:	b2db      	uxtb	r3, r3
}
 8002630:	0018      	movs	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	46c0      	nop			@ (mov r8, r8)
 8002638:	2000023c 	.word	0x2000023c

0800263c <crc8>:

uint8_t crc8(uint8_t *data, size_t len)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0x00;
 8002646:	2317      	movs	r3, #23
 8002648:	18fb      	adds	r3, r7, r3
 800264a:	2200      	movs	r2, #0
 800264c:	701a      	strb	r2, [r3, #0]
	size_t i, j;

	for (i = 0; i < len; ++i)
 800264e:	2300      	movs	r3, #0
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	e02b      	b.n	80026ac <crc8+0x70>
	{
		crc ^= data[i];
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	18d3      	adds	r3, r2, r3
 800265a:	7819      	ldrb	r1, [r3, #0]
 800265c:	2217      	movs	r2, #23
 800265e:	18bb      	adds	r3, r7, r2
 8002660:	18ba      	adds	r2, r7, r2
 8002662:	7812      	ldrb	r2, [r2, #0]
 8002664:	404a      	eors	r2, r1
 8002666:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < 8; ++j)
 8002668:	2300      	movs	r3, #0
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	e018      	b.n	80026a0 <crc8+0x64>
		{
			if (crc & 0x80)
 800266e:	2117      	movs	r1, #23
 8002670:	187b      	adds	r3, r7, r1
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	b25b      	sxtb	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	da09      	bge.n	800268e <crc8+0x52>
			{
				crc = (crc << 1) ^ 0x07;
 800267a:	187b      	adds	r3, r7, r1
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	b25b      	sxtb	r3, r3
 8002682:	2207      	movs	r2, #7
 8002684:	4053      	eors	r3, r2
 8002686:	b25a      	sxtb	r2, r3
 8002688:	187b      	adds	r3, r7, r1
 800268a:	701a      	strb	r2, [r3, #0]
 800268c:	e005      	b.n	800269a <crc8+0x5e>
			}
			else
			{
				crc <<= 1;
 800268e:	2317      	movs	r3, #23
 8002690:	18fa      	adds	r2, r7, r3
 8002692:	18fb      	adds	r3, r7, r3
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	18db      	adds	r3, r3, r3
 8002698:	7013      	strb	r3, [r2, #0]
		for (j = 0; j < 8; ++j)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	3301      	adds	r3, #1
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2b07      	cmp	r3, #7
 80026a4:	d9e3      	bls.n	800266e <crc8+0x32>
	for (i = 0; i < len; ++i)
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	3301      	adds	r3, #1
 80026aa:	613b      	str	r3, [r7, #16]
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d3cf      	bcc.n	8002654 <crc8+0x18>
			}
		}
	}
	return crc;
 80026b4:	2317      	movs	r3, #23
 80026b6:	18fb      	adds	r3, r7, r3
 80026b8:	781b      	ldrb	r3, [r3, #0]
}
 80026ba:	0018      	movs	r0, r3
 80026bc:	46bd      	mov	sp, r7
 80026be:	b006      	add	sp, #24
 80026c0:	bd80      	pop	{r7, pc}
	...

080026c4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4a06      	ldr	r2, [pc, #24]	@ (80026ec <vApplicationGetIdleTaskMemory+0x28>)
 80026d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	4a05      	ldr	r2, [pc, #20]	@ (80026f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80026da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2280      	movs	r2, #128	@ 0x80
 80026e0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80026e2:	46c0      	nop			@ (mov r8, r8)
 80026e4:	46bd      	mov	sp, r7
 80026e6:	b004      	add	sp, #16
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	46c0      	nop			@ (mov r8, r8)
 80026ec:	20000290 	.word	0x20000290
 80026f0:	200002e4 	.word	0x200002e4

080026f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026f4:	b5b0      	push	{r4, r5, r7, lr}
 80026f6:	b08e      	sub	sp, #56	@ 0x38
 80026f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026fa:	f000 fc57 	bl	8002fac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026fe:	f000 f83d 	bl	800277c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002702:	f000 f995 	bl	8002a30 <MX_GPIO_Init>
  MX_TIM6_Init();
 8002706:	f000 f927 	bl	8002958 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 800270a:	f000 f961 	bl	80029d0 <MX_USART2_UART_Init>
  MX_ADC_Init();
 800270e:	f000 f8a1 	bl	8002854 <MX_ADC_Init>
  MX_RTC_Init();
 8002712:	f000 f8fb 	bl	800290c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 8002716:	4b14      	ldr	r3, [pc, #80]	@ (8002768 <main+0x74>)
 8002718:	0018      	movs	r0, r3
 800271a:	f001 fff3 	bl	8004704 <HAL_TIM_Base_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800271e:	251c      	movs	r5, #28
 8002720:	197b      	adds	r3, r7, r5
 8002722:	4a12      	ldr	r2, [pc, #72]	@ (800276c <main+0x78>)
 8002724:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002726:	c313      	stmia	r3!, {r0, r1, r4}
 8002728:	ca13      	ldmia	r2!, {r0, r1, r4}
 800272a:	c313      	stmia	r3!, {r0, r1, r4}
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002730:	197b      	adds	r3, r7, r5
 8002732:	2100      	movs	r1, #0
 8002734:	0018      	movs	r0, r3
 8002736:	f002 fe74 	bl	8005422 <osThreadCreate>
 800273a:	0002      	movs	r2, r0
 800273c:	4b0c      	ldr	r3, [pc, #48]	@ (8002770 <main+0x7c>)
 800273e:	601a      	str	r2, [r3, #0]

  /* definition and creation of commsTask */
  osThreadDef(commsTask, StartCommsTask, osPriorityIdle, 0, 128);
 8002740:	003b      	movs	r3, r7
 8002742:	4a0c      	ldr	r2, [pc, #48]	@ (8002774 <main+0x80>)
 8002744:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002746:	c313      	stmia	r3!, {r0, r1, r4}
 8002748:	ca13      	ldmia	r2!, {r0, r1, r4}
 800274a:	c313      	stmia	r3!, {r0, r1, r4}
 800274c:	6812      	ldr	r2, [r2, #0]
 800274e:	601a      	str	r2, [r3, #0]
  commsTaskHandle = osThreadCreate(osThread(commsTask), NULL);
 8002750:	003b      	movs	r3, r7
 8002752:	2100      	movs	r1, #0
 8002754:	0018      	movs	r0, r3
 8002756:	f002 fe64 	bl	8005422 <osThreadCreate>
 800275a:	0002      	movs	r2, r0
 800275c:	4b06      	ldr	r3, [pc, #24]	@ (8002778 <main+0x84>)
 800275e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002760:	f002 fe57 	bl	8005412 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002764:	46c0      	nop			@ (mov r8, r8)
 8002766:	e7fd      	b.n	8002764 <main+0x70>
 8002768:	20000544 	.word	0x20000544
 800276c:	08009014 	.word	0x08009014
 8002770:	20000614 	.word	0x20000614
 8002774:	0800903c 	.word	0x0800903c
 8002778:	20000618 	.word	0x20000618

0800277c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800277c:	b590      	push	{r4, r7, lr}
 800277e:	b097      	sub	sp, #92	@ 0x5c
 8002780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002782:	2428      	movs	r4, #40	@ 0x28
 8002784:	193b      	adds	r3, r7, r4
 8002786:	0018      	movs	r0, r3
 8002788:	2330      	movs	r3, #48	@ 0x30
 800278a:	001a      	movs	r2, r3
 800278c:	2100      	movs	r1, #0
 800278e:	f004 fd1f 	bl	80071d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002792:	2318      	movs	r3, #24
 8002794:	18fb      	adds	r3, r7, r3
 8002796:	0018      	movs	r0, r3
 8002798:	2310      	movs	r3, #16
 800279a:	001a      	movs	r2, r3
 800279c:	2100      	movs	r1, #0
 800279e:	f004 fd17 	bl	80071d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027a2:	1d3b      	adds	r3, r7, #4
 80027a4:	0018      	movs	r0, r3
 80027a6:	2314      	movs	r3, #20
 80027a8:	001a      	movs	r2, r3
 80027aa:	2100      	movs	r1, #0
 80027ac:	f004 fd10 	bl	80071d0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 80027b0:	0021      	movs	r1, r4
 80027b2:	187b      	adds	r3, r7, r1
 80027b4:	221a      	movs	r2, #26
 80027b6:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027b8:	187b      	adds	r3, r7, r1
 80027ba:	2201      	movs	r2, #1
 80027bc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80027be:	187b      	adds	r3, r7, r1
 80027c0:	2201      	movs	r2, #1
 80027c2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027c4:	187b      	adds	r3, r7, r1
 80027c6:	2210      	movs	r2, #16
 80027c8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80027ca:	187b      	adds	r3, r7, r1
 80027cc:	2210      	movs	r2, #16
 80027ce:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80027d0:	187b      	adds	r3, r7, r1
 80027d2:	2201      	movs	r2, #1
 80027d4:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027d6:	187b      	adds	r3, r7, r1
 80027d8:	2202      	movs	r2, #2
 80027da:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027dc:	187b      	adds	r3, r7, r1
 80027de:	2200      	movs	r2, #0
 80027e0:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80027e2:	187b      	adds	r3, r7, r1
 80027e4:	22a0      	movs	r2, #160	@ 0xa0
 80027e6:	0392      	lsls	r2, r2, #14
 80027e8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80027ea:	187b      	adds	r3, r7, r1
 80027ec:	2200      	movs	r2, #0
 80027ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027f0:	187b      	adds	r3, r7, r1
 80027f2:	0018      	movs	r0, r3
 80027f4:	f001 f8ce 	bl	8003994 <HAL_RCC_OscConfig>
 80027f8:	1e03      	subs	r3, r0, #0
 80027fa:	d001      	beq.n	8002800 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80027fc:	f000 f9d8 	bl	8002bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002800:	2118      	movs	r1, #24
 8002802:	187b      	adds	r3, r7, r1
 8002804:	2207      	movs	r2, #7
 8002806:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002808:	187b      	adds	r3, r7, r1
 800280a:	2202      	movs	r2, #2
 800280c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800280e:	187b      	adds	r3, r7, r1
 8002810:	2200      	movs	r2, #0
 8002812:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002814:	187b      	adds	r3, r7, r1
 8002816:	2200      	movs	r2, #0
 8002818:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800281a:	187b      	adds	r3, r7, r1
 800281c:	2101      	movs	r1, #1
 800281e:	0018      	movs	r0, r3
 8002820:	f001 fbd2 	bl	8003fc8 <HAL_RCC_ClockConfig>
 8002824:	1e03      	subs	r3, r0, #0
 8002826:	d001      	beq.n	800282c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002828:	f000 f9c2 	bl	8002bb0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800282c:	1d3b      	adds	r3, r7, #4
 800282e:	2280      	movs	r2, #128	@ 0x80
 8002830:	0252      	lsls	r2, r2, #9
 8002832:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002834:	1d3b      	adds	r3, r7, #4
 8002836:	2280      	movs	r2, #128	@ 0x80
 8002838:	0092      	lsls	r2, r2, #2
 800283a:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800283c:	1d3b      	adds	r3, r7, #4
 800283e:	0018      	movs	r0, r3
 8002840:	f001 fd06 	bl	8004250 <HAL_RCCEx_PeriphCLKConfig>
 8002844:	1e03      	subs	r3, r0, #0
 8002846:	d001      	beq.n	800284c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002848:	f000 f9b2 	bl	8002bb0 <Error_Handler>
  }
}
 800284c:	46c0      	nop			@ (mov r8, r8)
 800284e:	46bd      	mov	sp, r7
 8002850:	b017      	add	sp, #92	@ 0x5c
 8002852:	bd90      	pop	{r4, r7, pc}

08002854 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800285a:	1d3b      	adds	r3, r7, #4
 800285c:	0018      	movs	r0, r3
 800285e:	230c      	movs	r3, #12
 8002860:	001a      	movs	r2, r3
 8002862:	2100      	movs	r1, #0
 8002864:	f004 fcb4 	bl	80071d0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002868:	4b26      	ldr	r3, [pc, #152]	@ (8002904 <MX_ADC_Init+0xb0>)
 800286a:	4a27      	ldr	r2, [pc, #156]	@ (8002908 <MX_ADC_Init+0xb4>)
 800286c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800286e:	4b25      	ldr	r3, [pc, #148]	@ (8002904 <MX_ADC_Init+0xb0>)
 8002870:	2200      	movs	r2, #0
 8002872:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002874:	4b23      	ldr	r3, [pc, #140]	@ (8002904 <MX_ADC_Init+0xb0>)
 8002876:	2200      	movs	r2, #0
 8002878:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800287a:	4b22      	ldr	r3, [pc, #136]	@ (8002904 <MX_ADC_Init+0xb0>)
 800287c:	2200      	movs	r2, #0
 800287e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002880:	4b20      	ldr	r3, [pc, #128]	@ (8002904 <MX_ADC_Init+0xb0>)
 8002882:	2201      	movs	r2, #1
 8002884:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002886:	4b1f      	ldr	r3, [pc, #124]	@ (8002904 <MX_ADC_Init+0xb0>)
 8002888:	2204      	movs	r2, #4
 800288a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800288c:	4b1d      	ldr	r3, [pc, #116]	@ (8002904 <MX_ADC_Init+0xb0>)
 800288e:	2200      	movs	r2, #0
 8002890:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002892:	4b1c      	ldr	r3, [pc, #112]	@ (8002904 <MX_ADC_Init+0xb0>)
 8002894:	2200      	movs	r2, #0
 8002896:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002898:	4b1a      	ldr	r3, [pc, #104]	@ (8002904 <MX_ADC_Init+0xb0>)
 800289a:	2200      	movs	r2, #0
 800289c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800289e:	4b19      	ldr	r3, [pc, #100]	@ (8002904 <MX_ADC_Init+0xb0>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80028a4:	4b17      	ldr	r3, [pc, #92]	@ (8002904 <MX_ADC_Init+0xb0>)
 80028a6:	22c2      	movs	r2, #194	@ 0xc2
 80028a8:	32ff      	adds	r2, #255	@ 0xff
 80028aa:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80028ac:	4b15      	ldr	r3, [pc, #84]	@ (8002904 <MX_ADC_Init+0xb0>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80028b2:	4b14      	ldr	r3, [pc, #80]	@ (8002904 <MX_ADC_Init+0xb0>)
 80028b4:	2224      	movs	r2, #36	@ 0x24
 80028b6:	2100      	movs	r1, #0
 80028b8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80028ba:	4b12      	ldr	r3, [pc, #72]	@ (8002904 <MX_ADC_Init+0xb0>)
 80028bc:	2201      	movs	r2, #1
 80028be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80028c0:	4b10      	ldr	r3, [pc, #64]	@ (8002904 <MX_ADC_Init+0xb0>)
 80028c2:	0018      	movs	r0, r3
 80028c4:	f000 fbd6 	bl	8003074 <HAL_ADC_Init>
 80028c8:	1e03      	subs	r3, r0, #0
 80028ca:	d001      	beq.n	80028d0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80028cc:	f000 f970 	bl	8002bb0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80028d0:	1d3b      	adds	r3, r7, #4
 80028d2:	220b      	movs	r2, #11
 80028d4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80028d6:	1d3b      	adds	r3, r7, #4
 80028d8:	2280      	movs	r2, #128	@ 0x80
 80028da:	0152      	lsls	r2, r2, #5
 80028dc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80028de:	1d3b      	adds	r3, r7, #4
 80028e0:	2280      	movs	r2, #128	@ 0x80
 80028e2:	0552      	lsls	r2, r2, #21
 80028e4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80028e6:	1d3a      	adds	r2, r7, #4
 80028e8:	4b06      	ldr	r3, [pc, #24]	@ (8002904 <MX_ADC_Init+0xb0>)
 80028ea:	0011      	movs	r1, r2
 80028ec:	0018      	movs	r0, r3
 80028ee:	f000 fd01 	bl	80032f4 <HAL_ADC_ConfigChannel>
 80028f2:	1e03      	subs	r3, r0, #0
 80028f4:	d001      	beq.n	80028fa <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80028f6:	f000 f95b 	bl	8002bb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80028fa:	46c0      	nop			@ (mov r8, r8)
 80028fc:	46bd      	mov	sp, r7
 80028fe:	b004      	add	sp, #16
 8002900:	bd80      	pop	{r7, pc}
 8002902:	46c0      	nop			@ (mov r8, r8)
 8002904:	200004e4 	.word	0x200004e4
 8002908:	40012400 	.word	0x40012400

0800290c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002910:	4b0f      	ldr	r3, [pc, #60]	@ (8002950 <MX_RTC_Init+0x44>)
 8002912:	4a10      	ldr	r2, [pc, #64]	@ (8002954 <MX_RTC_Init+0x48>)
 8002914:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002916:	4b0e      	ldr	r3, [pc, #56]	@ (8002950 <MX_RTC_Init+0x44>)
 8002918:	2200      	movs	r2, #0
 800291a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800291c:	4b0c      	ldr	r3, [pc, #48]	@ (8002950 <MX_RTC_Init+0x44>)
 800291e:	227f      	movs	r2, #127	@ 0x7f
 8002920:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002922:	4b0b      	ldr	r3, [pc, #44]	@ (8002950 <MX_RTC_Init+0x44>)
 8002924:	22ff      	movs	r2, #255	@ 0xff
 8002926:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002928:	4b09      	ldr	r3, [pc, #36]	@ (8002950 <MX_RTC_Init+0x44>)
 800292a:	2200      	movs	r2, #0
 800292c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800292e:	4b08      	ldr	r3, [pc, #32]	@ (8002950 <MX_RTC_Init+0x44>)
 8002930:	2200      	movs	r2, #0
 8002932:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002934:	4b06      	ldr	r3, [pc, #24]	@ (8002950 <MX_RTC_Init+0x44>)
 8002936:	2200      	movs	r2, #0
 8002938:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800293a:	4b05      	ldr	r3, [pc, #20]	@ (8002950 <MX_RTC_Init+0x44>)
 800293c:	0018      	movs	r0, r3
 800293e:	f001 fd65 	bl	800440c <HAL_RTC_Init>
 8002942:	1e03      	subs	r3, r0, #0
 8002944:	d001      	beq.n	800294a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002946:	f000 f933 	bl	8002bb0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800294a:	46c0      	nop			@ (mov r8, r8)
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	20000524 	.word	0x20000524
 8002954:	40002800 	.word	0x40002800

08002958 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800295e:	003b      	movs	r3, r7
 8002960:	0018      	movs	r0, r3
 8002962:	2308      	movs	r3, #8
 8002964:	001a      	movs	r2, r3
 8002966:	2100      	movs	r1, #0
 8002968:	f004 fc32 	bl	80071d0 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800296c:	4b15      	ldr	r3, [pc, #84]	@ (80029c4 <MX_TIM6_Init+0x6c>)
 800296e:	4a16      	ldr	r2, [pc, #88]	@ (80029c8 <MX_TIM6_Init+0x70>)
 8002970:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 47;
 8002972:	4b14      	ldr	r3, [pc, #80]	@ (80029c4 <MX_TIM6_Init+0x6c>)
 8002974:	222f      	movs	r2, #47	@ 0x2f
 8002976:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002978:	4b12      	ldr	r3, [pc, #72]	@ (80029c4 <MX_TIM6_Init+0x6c>)
 800297a:	2200      	movs	r2, #0
 800297c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800297e:	4b11      	ldr	r3, [pc, #68]	@ (80029c4 <MX_TIM6_Init+0x6c>)
 8002980:	4a12      	ldr	r2, [pc, #72]	@ (80029cc <MX_TIM6_Init+0x74>)
 8002982:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002984:	4b0f      	ldr	r3, [pc, #60]	@ (80029c4 <MX_TIM6_Init+0x6c>)
 8002986:	2200      	movs	r2, #0
 8002988:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800298a:	4b0e      	ldr	r3, [pc, #56]	@ (80029c4 <MX_TIM6_Init+0x6c>)
 800298c:	0018      	movs	r0, r3
 800298e:	f001 fe69 	bl	8004664 <HAL_TIM_Base_Init>
 8002992:	1e03      	subs	r3, r0, #0
 8002994:	d001      	beq.n	800299a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002996:	f000 f90b 	bl	8002bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800299a:	003b      	movs	r3, r7
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029a0:	003b      	movs	r3, r7
 80029a2:	2200      	movs	r2, #0
 80029a4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80029a6:	003a      	movs	r2, r7
 80029a8:	4b06      	ldr	r3, [pc, #24]	@ (80029c4 <MX_TIM6_Init+0x6c>)
 80029aa:	0011      	movs	r1, r2
 80029ac:	0018      	movs	r0, r3
 80029ae:	f001 ff81 	bl	80048b4 <HAL_TIMEx_MasterConfigSynchronization>
 80029b2:	1e03      	subs	r3, r0, #0
 80029b4:	d001      	beq.n	80029ba <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80029b6:	f000 f8fb 	bl	8002bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80029ba:	46c0      	nop			@ (mov r8, r8)
 80029bc:	46bd      	mov	sp, r7
 80029be:	b002      	add	sp, #8
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	46c0      	nop			@ (mov r8, r8)
 80029c4:	20000544 	.word	0x20000544
 80029c8:	40001000 	.word	0x40001000
 80029cc:	0000ffff 	.word	0x0000ffff

080029d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029d4:	4b14      	ldr	r3, [pc, #80]	@ (8002a28 <MX_USART2_UART_Init+0x58>)
 80029d6:	4a15      	ldr	r2, [pc, #84]	@ (8002a2c <MX_USART2_UART_Init+0x5c>)
 80029d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80029da:	4b13      	ldr	r3, [pc, #76]	@ (8002a28 <MX_USART2_UART_Init+0x58>)
 80029dc:	22e1      	movs	r2, #225	@ 0xe1
 80029de:	0252      	lsls	r2, r2, #9
 80029e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029e2:	4b11      	ldr	r3, [pc, #68]	@ (8002a28 <MX_USART2_UART_Init+0x58>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002a28 <MX_USART2_UART_Init+0x58>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002a28 <MX_USART2_UART_Init+0x58>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002a28 <MX_USART2_UART_Init+0x58>)
 80029f6:	220c      	movs	r2, #12
 80029f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002a28 <MX_USART2_UART_Init+0x58>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a00:	4b09      	ldr	r3, [pc, #36]	@ (8002a28 <MX_USART2_UART_Init+0x58>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a06:	4b08      	ldr	r3, [pc, #32]	@ (8002a28 <MX_USART2_UART_Init+0x58>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a0c:	4b06      	ldr	r3, [pc, #24]	@ (8002a28 <MX_USART2_UART_Init+0x58>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a12:	4b05      	ldr	r3, [pc, #20]	@ (8002a28 <MX_USART2_UART_Init+0x58>)
 8002a14:	0018      	movs	r0, r3
 8002a16:	f001 ffab 	bl	8004970 <HAL_UART_Init>
 8002a1a:	1e03      	subs	r3, r0, #0
 8002a1c:	d001      	beq.n	8002a22 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002a1e:	f000 f8c7 	bl	8002bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a22:	46c0      	nop			@ (mov r8, r8)
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	2000058c 	.word	0x2000058c
 8002a2c:	40004400 	.word	0x40004400

08002a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a30:	b590      	push	{r4, r7, lr}
 8002a32:	b089      	sub	sp, #36	@ 0x24
 8002a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a36:	240c      	movs	r4, #12
 8002a38:	193b      	adds	r3, r7, r4
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	2314      	movs	r3, #20
 8002a3e:	001a      	movs	r2, r3
 8002a40:	2100      	movs	r1, #0
 8002a42:	f004 fbc5 	bl	80071d0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a46:	4b33      	ldr	r3, [pc, #204]	@ (8002b14 <MX_GPIO_Init+0xe4>)
 8002a48:	695a      	ldr	r2, [r3, #20]
 8002a4a:	4b32      	ldr	r3, [pc, #200]	@ (8002b14 <MX_GPIO_Init+0xe4>)
 8002a4c:	2180      	movs	r1, #128	@ 0x80
 8002a4e:	0309      	lsls	r1, r1, #12
 8002a50:	430a      	orrs	r2, r1
 8002a52:	615a      	str	r2, [r3, #20]
 8002a54:	4b2f      	ldr	r3, [pc, #188]	@ (8002b14 <MX_GPIO_Init+0xe4>)
 8002a56:	695a      	ldr	r2, [r3, #20]
 8002a58:	2380      	movs	r3, #128	@ 0x80
 8002a5a:	031b      	lsls	r3, r3, #12
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	60bb      	str	r3, [r7, #8]
 8002a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a62:	4b2c      	ldr	r3, [pc, #176]	@ (8002b14 <MX_GPIO_Init+0xe4>)
 8002a64:	695a      	ldr	r2, [r3, #20]
 8002a66:	4b2b      	ldr	r3, [pc, #172]	@ (8002b14 <MX_GPIO_Init+0xe4>)
 8002a68:	2180      	movs	r1, #128	@ 0x80
 8002a6a:	0289      	lsls	r1, r1, #10
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	615a      	str	r2, [r3, #20]
 8002a70:	4b28      	ldr	r3, [pc, #160]	@ (8002b14 <MX_GPIO_Init+0xe4>)
 8002a72:	695a      	ldr	r2, [r3, #20]
 8002a74:	2380      	movs	r3, #128	@ 0x80
 8002a76:	029b      	lsls	r3, r3, #10
 8002a78:	4013      	ands	r3, r2
 8002a7a:	607b      	str	r3, [r7, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8002a7e:	2390      	movs	r3, #144	@ 0x90
 8002a80:	05db      	lsls	r3, r3, #23
 8002a82:	2200      	movs	r2, #0
 8002a84:	2102      	movs	r1, #2
 8002a86:	0018      	movs	r0, r3
 8002a88:	f000 ff66 	bl	8003958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8002a8c:	23c0      	movs	r3, #192	@ 0xc0
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4821      	ldr	r0, [pc, #132]	@ (8002b18 <MX_GPIO_Init+0xe8>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	0019      	movs	r1, r3
 8002a96:	f000 ff5f 	bl	8003958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002a9a:	193b      	adds	r3, r7, r4
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002aa0:	193b      	adds	r3, r7, r4
 8002aa2:	2290      	movs	r2, #144	@ 0x90
 8002aa4:	0352      	lsls	r2, r2, #13
 8002aa6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa8:	193b      	adds	r3, r7, r4
 8002aaa:	2200      	movs	r2, #0
 8002aac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002aae:	193a      	adds	r2, r7, r4
 8002ab0:	2390      	movs	r3, #144	@ 0x90
 8002ab2:	05db      	lsls	r3, r3, #23
 8002ab4:	0011      	movs	r1, r2
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f000 fdde 	bl	8003678 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002abc:	193b      	adds	r3, r7, r4
 8002abe:	2202      	movs	r2, #2
 8002ac0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ac2:	193b      	adds	r3, r7, r4
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac8:	193b      	adds	r3, r7, r4
 8002aca:	2200      	movs	r2, #0
 8002acc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ace:	193b      	adds	r3, r7, r4
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad4:	193a      	adds	r2, r7, r4
 8002ad6:	2390      	movs	r3, #144	@ 0x90
 8002ad8:	05db      	lsls	r3, r3, #23
 8002ada:	0011      	movs	r1, r2
 8002adc:	0018      	movs	r0, r3
 8002ade:	f000 fdcb 	bl	8003678 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8002ae2:	0021      	movs	r1, r4
 8002ae4:	187b      	adds	r3, r7, r1
 8002ae6:	22c0      	movs	r2, #192	@ 0xc0
 8002ae8:	0092      	lsls	r2, r2, #2
 8002aea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aec:	187b      	adds	r3, r7, r1
 8002aee:	2201      	movs	r2, #1
 8002af0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af2:	187b      	adds	r3, r7, r1
 8002af4:	2200      	movs	r2, #0
 8002af6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af8:	187b      	adds	r3, r7, r1
 8002afa:	2200      	movs	r2, #0
 8002afc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002afe:	187b      	adds	r3, r7, r1
 8002b00:	4a05      	ldr	r2, [pc, #20]	@ (8002b18 <MX_GPIO_Init+0xe8>)
 8002b02:	0019      	movs	r1, r3
 8002b04:	0010      	movs	r0, r2
 8002b06:	f000 fdb7 	bl	8003678 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b0a:	46c0      	nop			@ (mov r8, r8)
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	b009      	add	sp, #36	@ 0x24
 8002b10:	bd90      	pop	{r4, r7, pc}
 8002b12:	46c0      	nop			@ (mov r8, r8)
 8002b14:	40021000 	.word	0x40021000
 8002b18:	48000800 	.word	0x48000800

08002b1c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002b24:	2001      	movs	r0, #1
 8002b26:	f002 fcc9 	bl	80054bc <osDelay>
 8002b2a:	e7fb      	b.n	8002b24 <StartDefaultTask+0x8>

08002b2c <StartCommsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommsTask */
void StartCommsTask(void const * argument)
{
 8002b2c:	b590      	push	{r4, r7, lr}
 8002b2e:	b097      	sub	sp, #92	@ 0x5c
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	62f8      	str	r0, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN StartCommsTask */
	comms_init(&huart2);
 8002b34:	4b1c      	ldr	r3, [pc, #112]	@ (8002ba8 <StartCommsTask+0x7c>)
 8002b36:	0018      	movs	r0, r3
 8002b38:	f7ff fc00 	bl	800233c <comms_init>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002b3c:	2380      	movs	r3, #128	@ 0x80
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	481a      	ldr	r0, [pc, #104]	@ (8002bac <StartCommsTask+0x80>)
 8002b42:	2201      	movs	r2, #1
 8002b44:	0019      	movs	r1, r3
 8002b46:	f000 ff07 	bl	8003958 <HAL_GPIO_WritePin>
	uint8_t data[2] = {10, 0};
 8002b4a:	2154      	movs	r1, #84	@ 0x54
 8002b4c:	187b      	adds	r3, r7, r1
 8002b4e:	220a      	movs	r2, #10
 8002b50:	801a      	strh	r2, [r3, #0]
	comms_packet_t packet;
	comms_create_packet(&packet, SYSTEM_COMMAND_PACKET, 1, data);
 8002b52:	187b      	adds	r3, r7, r1
 8002b54:	2430      	movs	r4, #48	@ 0x30
 8002b56:	1938      	adds	r0, r7, r4
 8002b58:	2201      	movs	r2, #1
 8002b5a:	2102      	movs	r1, #2
 8002b5c:	f7ff fbae 	bl	80022bc <comms_create_packet>
	comms_send_packet(&packet);
 8002b60:	193b      	adds	r3, r7, r4
 8002b62:	0018      	movs	r0, r3
 8002b64:	f7ff fcba 	bl	80024dc <comms_send_packet>
  /* Infinite loop */
  for(;;)
  {
	  comms_state_machine();
 8002b68:	f7ff fc12 	bl	8002390 <comms_state_machine>
	  if(!comms_buffer_is_empty()){
 8002b6c:	f7ff fd58 	bl	8002620 <comms_buffer_is_empty>
 8002b70:	1e03      	subs	r3, r0, #0
 8002b72:	d1f9      	bne.n	8002b68 <StartCommsTask+0x3c>
		  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 1);
 8002b74:	2380      	movs	r3, #128	@ 0x80
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	480c      	ldr	r0, [pc, #48]	@ (8002bac <StartCommsTask+0x80>)
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	0019      	movs	r1, r3
 8002b7e:	f000 feeb 	bl	8003958 <HAL_GPIO_WritePin>
		  packet = comms_buffer_read();
 8002b82:	2330      	movs	r3, #48	@ 0x30
 8002b84:	18fc      	adds	r4, r7, r3
 8002b86:	003b      	movs	r3, r7
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f7ff fcf7 	bl	800257c <comms_buffer_read>
 8002b8e:	003b      	movs	r3, r7
 8002b90:	0020      	movs	r0, r4
 8002b92:	0019      	movs	r1, r3
 8002b94:	2323      	movs	r3, #35	@ 0x23
 8002b96:	001a      	movs	r2, r3
 8002b98:	f004 fbbe 	bl	8007318 <memcpy>
		  osDelay(1000);
 8002b9c:	23fa      	movs	r3, #250	@ 0xfa
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f002 fc8b 	bl	80054bc <osDelay>
	  comms_state_machine();
 8002ba6:	e7df      	b.n	8002b68 <StartCommsTask+0x3c>
 8002ba8:	2000058c 	.word	0x2000058c
 8002bac:	48000800 	.word	0x48000800

08002bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bb4:	b672      	cpsid	i
}
 8002bb6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bb8:	46c0      	nop			@ (mov r8, r8)
 8002bba:	e7fd      	b.n	8002bb8 <Error_Handler+0x8>

08002bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc2:	4b12      	ldr	r3, [pc, #72]	@ (8002c0c <HAL_MspInit+0x50>)
 8002bc4:	699a      	ldr	r2, [r3, #24]
 8002bc6:	4b11      	ldr	r3, [pc, #68]	@ (8002c0c <HAL_MspInit+0x50>)
 8002bc8:	2101      	movs	r1, #1
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	619a      	str	r2, [r3, #24]
 8002bce:	4b0f      	ldr	r3, [pc, #60]	@ (8002c0c <HAL_MspInit+0x50>)
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	607b      	str	r3, [r7, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bda:	4b0c      	ldr	r3, [pc, #48]	@ (8002c0c <HAL_MspInit+0x50>)
 8002bdc:	69da      	ldr	r2, [r3, #28]
 8002bde:	4b0b      	ldr	r3, [pc, #44]	@ (8002c0c <HAL_MspInit+0x50>)
 8002be0:	2180      	movs	r1, #128	@ 0x80
 8002be2:	0549      	lsls	r1, r1, #21
 8002be4:	430a      	orrs	r2, r1
 8002be6:	61da      	str	r2, [r3, #28]
 8002be8:	4b08      	ldr	r3, [pc, #32]	@ (8002c0c <HAL_MspInit+0x50>)
 8002bea:	69da      	ldr	r2, [r3, #28]
 8002bec:	2380      	movs	r3, #128	@ 0x80
 8002bee:	055b      	lsls	r3, r3, #21
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	603b      	str	r3, [r7, #0]
 8002bf4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	425b      	negs	r3, r3
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	2103      	movs	r1, #3
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f000 fd18 	bl	8003634 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c04:	46c0      	nop			@ (mov r8, r8)
 8002c06:	46bd      	mov	sp, r7
 8002c08:	b002      	add	sp, #8
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40021000 	.word	0x40021000

08002c10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c10:	b590      	push	{r4, r7, lr}
 8002c12:	b08b      	sub	sp, #44	@ 0x2c
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c18:	2414      	movs	r4, #20
 8002c1a:	193b      	adds	r3, r7, r4
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	2314      	movs	r3, #20
 8002c20:	001a      	movs	r2, r3
 8002c22:	2100      	movs	r1, #0
 8002c24:	f004 fad4 	bl	80071d0 <memset>
  if(hadc->Instance==ADC1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a18      	ldr	r2, [pc, #96]	@ (8002c90 <HAL_ADC_MspInit+0x80>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d12a      	bne.n	8002c88 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c32:	4b18      	ldr	r3, [pc, #96]	@ (8002c94 <HAL_ADC_MspInit+0x84>)
 8002c34:	699a      	ldr	r2, [r3, #24]
 8002c36:	4b17      	ldr	r3, [pc, #92]	@ (8002c94 <HAL_ADC_MspInit+0x84>)
 8002c38:	2180      	movs	r1, #128	@ 0x80
 8002c3a:	0089      	lsls	r1, r1, #2
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	619a      	str	r2, [r3, #24]
 8002c40:	4b14      	ldr	r3, [pc, #80]	@ (8002c94 <HAL_ADC_MspInit+0x84>)
 8002c42:	699a      	ldr	r2, [r3, #24]
 8002c44:	2380      	movs	r3, #128	@ 0x80
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4013      	ands	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
 8002c4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c4e:	4b11      	ldr	r3, [pc, #68]	@ (8002c94 <HAL_ADC_MspInit+0x84>)
 8002c50:	695a      	ldr	r2, [r3, #20]
 8002c52:	4b10      	ldr	r3, [pc, #64]	@ (8002c94 <HAL_ADC_MspInit+0x84>)
 8002c54:	2180      	movs	r1, #128	@ 0x80
 8002c56:	0309      	lsls	r1, r1, #12
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	615a      	str	r2, [r3, #20]
 8002c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8002c94 <HAL_ADC_MspInit+0x84>)
 8002c5e:	695a      	ldr	r2, [r3, #20]
 8002c60:	2380      	movs	r3, #128	@ 0x80
 8002c62:	031b      	lsls	r3, r3, #12
 8002c64:	4013      	ands	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PC1     ------> ADC_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002c6a:	193b      	adds	r3, r7, r4
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c70:	193b      	adds	r3, r7, r4
 8002c72:	2203      	movs	r2, #3
 8002c74:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c76:	193b      	adds	r3, r7, r4
 8002c78:	2200      	movs	r2, #0
 8002c7a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c7c:	193b      	adds	r3, r7, r4
 8002c7e:	4a06      	ldr	r2, [pc, #24]	@ (8002c98 <HAL_ADC_MspInit+0x88>)
 8002c80:	0019      	movs	r1, r3
 8002c82:	0010      	movs	r0, r2
 8002c84:	f000 fcf8 	bl	8003678 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002c88:	46c0      	nop			@ (mov r8, r8)
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	b00b      	add	sp, #44	@ 0x2c
 8002c8e:	bd90      	pop	{r4, r7, pc}
 8002c90:	40012400 	.word	0x40012400
 8002c94:	40021000 	.word	0x40021000
 8002c98:	48000800 	.word	0x48000800

08002c9c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a06      	ldr	r2, [pc, #24]	@ (8002cc4 <HAL_RTC_MspInit+0x28>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d106      	bne.n	8002cbc <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002cae:	4b06      	ldr	r3, [pc, #24]	@ (8002cc8 <HAL_RTC_MspInit+0x2c>)
 8002cb0:	6a1a      	ldr	r2, [r3, #32]
 8002cb2:	4b05      	ldr	r3, [pc, #20]	@ (8002cc8 <HAL_RTC_MspInit+0x2c>)
 8002cb4:	2180      	movs	r1, #128	@ 0x80
 8002cb6:	0209      	lsls	r1, r1, #8
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002cbc:	46c0      	nop			@ (mov r8, r8)
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	b002      	add	sp, #8
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40002800 	.word	0x40002800
 8002cc8:	40021000 	.word	0x40021000

08002ccc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a09      	ldr	r2, [pc, #36]	@ (8002d00 <HAL_TIM_Base_MspInit+0x34>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d10b      	bne.n	8002cf6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002cde:	4b09      	ldr	r3, [pc, #36]	@ (8002d04 <HAL_TIM_Base_MspInit+0x38>)
 8002ce0:	69da      	ldr	r2, [r3, #28]
 8002ce2:	4b08      	ldr	r3, [pc, #32]	@ (8002d04 <HAL_TIM_Base_MspInit+0x38>)
 8002ce4:	2110      	movs	r1, #16
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	61da      	str	r2, [r3, #28]
 8002cea:	4b06      	ldr	r3, [pc, #24]	@ (8002d04 <HAL_TIM_Base_MspInit+0x38>)
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	2210      	movs	r2, #16
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002cf6:	46c0      	nop			@ (mov r8, r8)
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	b004      	add	sp, #16
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	46c0      	nop			@ (mov r8, r8)
 8002d00:	40001000 	.word	0x40001000
 8002d04:	40021000 	.word	0x40021000

08002d08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d08:	b590      	push	{r4, r7, lr}
 8002d0a:	b08b      	sub	sp, #44	@ 0x2c
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d10:	2414      	movs	r4, #20
 8002d12:	193b      	adds	r3, r7, r4
 8002d14:	0018      	movs	r0, r3
 8002d16:	2314      	movs	r3, #20
 8002d18:	001a      	movs	r2, r3
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	f004 fa58 	bl	80071d0 <memset>
  if(huart->Instance==USART2)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a1c      	ldr	r2, [pc, #112]	@ (8002d98 <HAL_UART_MspInit+0x90>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d132      	bne.n	8002d90 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d2a:	4b1c      	ldr	r3, [pc, #112]	@ (8002d9c <HAL_UART_MspInit+0x94>)
 8002d2c:	69da      	ldr	r2, [r3, #28]
 8002d2e:	4b1b      	ldr	r3, [pc, #108]	@ (8002d9c <HAL_UART_MspInit+0x94>)
 8002d30:	2180      	movs	r1, #128	@ 0x80
 8002d32:	0289      	lsls	r1, r1, #10
 8002d34:	430a      	orrs	r2, r1
 8002d36:	61da      	str	r2, [r3, #28]
 8002d38:	4b18      	ldr	r3, [pc, #96]	@ (8002d9c <HAL_UART_MspInit+0x94>)
 8002d3a:	69da      	ldr	r2, [r3, #28]
 8002d3c:	2380      	movs	r3, #128	@ 0x80
 8002d3e:	029b      	lsls	r3, r3, #10
 8002d40:	4013      	ands	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d46:	4b15      	ldr	r3, [pc, #84]	@ (8002d9c <HAL_UART_MspInit+0x94>)
 8002d48:	695a      	ldr	r2, [r3, #20]
 8002d4a:	4b14      	ldr	r3, [pc, #80]	@ (8002d9c <HAL_UART_MspInit+0x94>)
 8002d4c:	2180      	movs	r1, #128	@ 0x80
 8002d4e:	0289      	lsls	r1, r1, #10
 8002d50:	430a      	orrs	r2, r1
 8002d52:	615a      	str	r2, [r3, #20]
 8002d54:	4b11      	ldr	r3, [pc, #68]	@ (8002d9c <HAL_UART_MspInit+0x94>)
 8002d56:	695a      	ldr	r2, [r3, #20]
 8002d58:	2380      	movs	r3, #128	@ 0x80
 8002d5a:	029b      	lsls	r3, r3, #10
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8002d62:	0021      	movs	r1, r4
 8002d64:	187b      	adds	r3, r7, r1
 8002d66:	4a0e      	ldr	r2, [pc, #56]	@ (8002da0 <HAL_UART_MspInit+0x98>)
 8002d68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6a:	187b      	adds	r3, r7, r1
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d70:	187b      	adds	r3, r7, r1
 8002d72:	2200      	movs	r2, #0
 8002d74:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d76:	187b      	adds	r3, r7, r1
 8002d78:	2203      	movs	r2, #3
 8002d7a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002d7c:	187b      	adds	r3, r7, r1
 8002d7e:	2201      	movs	r2, #1
 8002d80:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d82:	187a      	adds	r2, r7, r1
 8002d84:	2390      	movs	r3, #144	@ 0x90
 8002d86:	05db      	lsls	r3, r3, #23
 8002d88:	0011      	movs	r1, r2
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	f000 fc74 	bl	8003678 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d90:	46c0      	nop			@ (mov r8, r8)
 8002d92:	46bd      	mov	sp, r7
 8002d94:	b00b      	add	sp, #44	@ 0x2c
 8002d96:	bd90      	pop	{r4, r7, pc}
 8002d98:	40004400 	.word	0x40004400
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	00008004 	.word	0x00008004

08002da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002da8:	46c0      	nop			@ (mov r8, r8)
 8002daa:	e7fd      	b.n	8002da8 <NMI_Handler+0x4>

08002dac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002db0:	46c0      	nop			@ (mov r8, r8)
 8002db2:	e7fd      	b.n	8002db0 <HardFault_Handler+0x4>

08002db4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002db8:	f000 f940 	bl	800303c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002dbc:	f003 f890 	bl	8005ee0 <xTaskGetSchedulerState>
 8002dc0:	0003      	movs	r3, r0
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d001      	beq.n	8002dca <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002dc6:	f003 f9ef 	bl	80061a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dca:	46c0      	nop			@ (mov r8, r8)
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  return 1;
 8002dd4:	2301      	movs	r3, #1
}
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <_kill>:

int _kill(int pid, int sig)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002de6:	f004 fa5f 	bl	80072a8 <__errno>
 8002dea:	0003      	movs	r3, r0
 8002dec:	2216      	movs	r2, #22
 8002dee:	601a      	str	r2, [r3, #0]
  return -1;
 8002df0:	2301      	movs	r3, #1
 8002df2:	425b      	negs	r3, r3
}
 8002df4:	0018      	movs	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	b002      	add	sp, #8
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <_exit>:

void _exit (int status)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e04:	2301      	movs	r3, #1
 8002e06:	425a      	negs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	0011      	movs	r1, r2
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f7ff ffe5 	bl	8002ddc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e12:	46c0      	nop			@ (mov r8, r8)
 8002e14:	e7fd      	b.n	8002e12 <_exit+0x16>

08002e16 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b086      	sub	sp, #24
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	60f8      	str	r0, [r7, #12]
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e22:	2300      	movs	r3, #0
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	e00a      	b.n	8002e3e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e28:	e000      	b.n	8002e2c <_read+0x16>
 8002e2a:	bf00      	nop
 8002e2c:	0001      	movs	r1, r0
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	60ba      	str	r2, [r7, #8]
 8002e34:	b2ca      	uxtb	r2, r1
 8002e36:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	dbf0      	blt.n	8002e28 <_read+0x12>
  }

  return len;
 8002e46:	687b      	ldr	r3, [r7, #4]
}
 8002e48:	0018      	movs	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	b006      	add	sp, #24
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	617b      	str	r3, [r7, #20]
 8002e60:	e009      	b.n	8002e76 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	1c5a      	adds	r2, r3, #1
 8002e66:	60ba      	str	r2, [r7, #8]
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	e000      	b.n	8002e70 <_write+0x20>
 8002e6e:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	3301      	adds	r3, #1
 8002e74:	617b      	str	r3, [r7, #20]
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	dbf1      	blt.n	8002e62 <_write+0x12>
  }
  return len;
 8002e7e:	687b      	ldr	r3, [r7, #4]
}
 8002e80:	0018      	movs	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	b006      	add	sp, #24
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <_close>:

int _close(int file)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e90:	2301      	movs	r3, #1
 8002e92:	425b      	negs	r3, r3
}
 8002e94:	0018      	movs	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	b002      	add	sp, #8
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2280      	movs	r2, #128	@ 0x80
 8002eaa:	0192      	lsls	r2, r2, #6
 8002eac:	605a      	str	r2, [r3, #4]
  return 0;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	b002      	add	sp, #8
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <_isatty>:

int _isatty(int file)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ec0:	2301      	movs	r3, #1
}
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	b002      	add	sp, #8
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b084      	sub	sp, #16
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	60f8      	str	r0, [r7, #12]
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	0018      	movs	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	b004      	add	sp, #16
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ee8:	4a14      	ldr	r2, [pc, #80]	@ (8002f3c <_sbrk+0x5c>)
 8002eea:	4b15      	ldr	r3, [pc, #84]	@ (8002f40 <_sbrk+0x60>)
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ef4:	4b13      	ldr	r3, [pc, #76]	@ (8002f44 <_sbrk+0x64>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d102      	bne.n	8002f02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002efc:	4b11      	ldr	r3, [pc, #68]	@ (8002f44 <_sbrk+0x64>)
 8002efe:	4a12      	ldr	r2, [pc, #72]	@ (8002f48 <_sbrk+0x68>)
 8002f00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f02:	4b10      	ldr	r3, [pc, #64]	@ (8002f44 <_sbrk+0x64>)
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	18d3      	adds	r3, r2, r3
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d207      	bcs.n	8002f20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f10:	f004 f9ca 	bl	80072a8 <__errno>
 8002f14:	0003      	movs	r3, r0
 8002f16:	220c      	movs	r2, #12
 8002f18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	425b      	negs	r3, r3
 8002f1e:	e009      	b.n	8002f34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f20:	4b08      	ldr	r3, [pc, #32]	@ (8002f44 <_sbrk+0x64>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f26:	4b07      	ldr	r3, [pc, #28]	@ (8002f44 <_sbrk+0x64>)
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	18d2      	adds	r2, r2, r3
 8002f2e:	4b05      	ldr	r3, [pc, #20]	@ (8002f44 <_sbrk+0x64>)
 8002f30:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002f32:	68fb      	ldr	r3, [r7, #12]
}
 8002f34:	0018      	movs	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	b006      	add	sp, #24
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	20002000 	.word	0x20002000
 8002f40:	00000400 	.word	0x00000400
 8002f44:	2000061c 	.word	0x2000061c
 8002f48:	200014b8 	.word	0x200014b8

08002f4c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002f50:	46c0      	nop			@ (mov r8, r8)
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
	...

08002f58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f58:	480d      	ldr	r0, [pc, #52]	@ (8002f90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f5a:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8002f5c:	f7ff fff6 	bl	8002f4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f60:	480c      	ldr	r0, [pc, #48]	@ (8002f94 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f62:	490d      	ldr	r1, [pc, #52]	@ (8002f98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f64:	4a0d      	ldr	r2, [pc, #52]	@ (8002f9c <LoopForever+0xe>)
  movs r3, #0
 8002f66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f68:	e002      	b.n	8002f70 <LoopCopyDataInit>

08002f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f6e:	3304      	adds	r3, #4

08002f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f74:	d3f9      	bcc.n	8002f6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f76:	4a0a      	ldr	r2, [pc, #40]	@ (8002fa0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f78:	4c0a      	ldr	r4, [pc, #40]	@ (8002fa4 <LoopForever+0x16>)
  movs r3, #0
 8002f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f7c:	e001      	b.n	8002f82 <LoopFillZerobss>

08002f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f80:	3204      	adds	r2, #4

08002f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f84:	d3fb      	bcc.n	8002f7e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002f86:	f004 f995 	bl	80072b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f8a:	f7ff fbb3 	bl	80026f4 <main>

08002f8e <LoopForever>:

LoopForever:
    b LoopForever
 8002f8e:	e7fe      	b.n	8002f8e <LoopForever>
  ldr   r0, =_estack
 8002f90:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f98:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8002f9c:	08009450 	.word	0x08009450
  ldr r2, =_sbss
 8002fa0:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8002fa4:	200014b4 	.word	0x200014b4

08002fa8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002fa8:	e7fe      	b.n	8002fa8 <ADC1_COMP_IRQHandler>
	...

08002fac <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fb0:	4b07      	ldr	r3, [pc, #28]	@ (8002fd0 <HAL_Init+0x24>)
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	4b06      	ldr	r3, [pc, #24]	@ (8002fd0 <HAL_Init+0x24>)
 8002fb6:	2110      	movs	r1, #16
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002fbc:	2003      	movs	r0, #3
 8002fbe:	f000 f809 	bl	8002fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fc2:	f7ff fdfb 	bl	8002bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	0018      	movs	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	46c0      	nop			@ (mov r8, r8)
 8002fd0:	40022000 	.word	0x40022000

08002fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fd4:	b590      	push	{r4, r7, lr}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fdc:	4b14      	ldr	r3, [pc, #80]	@ (8003030 <HAL_InitTick+0x5c>)
 8002fde:	681c      	ldr	r4, [r3, #0]
 8002fe0:	4b14      	ldr	r3, [pc, #80]	@ (8003034 <HAL_InitTick+0x60>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	0019      	movs	r1, r3
 8002fe6:	23fa      	movs	r3, #250	@ 0xfa
 8002fe8:	0098      	lsls	r0, r3, #2
 8002fea:	f7fd f8a9 	bl	8000140 <__udivsi3>
 8002fee:	0003      	movs	r3, r0
 8002ff0:	0019      	movs	r1, r3
 8002ff2:	0020      	movs	r0, r4
 8002ff4:	f7fd f8a4 	bl	8000140 <__udivsi3>
 8002ff8:	0003      	movs	r3, r0
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f000 fb2f 	bl	800365e <HAL_SYSTICK_Config>
 8003000:	1e03      	subs	r3, r0, #0
 8003002:	d001      	beq.n	8003008 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e00f      	b.n	8003028 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b03      	cmp	r3, #3
 800300c:	d80b      	bhi.n	8003026 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	2301      	movs	r3, #1
 8003012:	425b      	negs	r3, r3
 8003014:	2200      	movs	r2, #0
 8003016:	0018      	movs	r0, r3
 8003018:	f000 fb0c 	bl	8003634 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800301c:	4b06      	ldr	r3, [pc, #24]	@ (8003038 <HAL_InitTick+0x64>)
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003022:	2300      	movs	r3, #0
 8003024:	e000      	b.n	8003028 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
}
 8003028:	0018      	movs	r0, r3
 800302a:	46bd      	mov	sp, r7
 800302c:	b003      	add	sp, #12
 800302e:	bd90      	pop	{r4, r7, pc}
 8003030:	20000048 	.word	0x20000048
 8003034:	20000050 	.word	0x20000050
 8003038:	2000004c 	.word	0x2000004c

0800303c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003040:	4b05      	ldr	r3, [pc, #20]	@ (8003058 <HAL_IncTick+0x1c>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	001a      	movs	r2, r3
 8003046:	4b05      	ldr	r3, [pc, #20]	@ (800305c <HAL_IncTick+0x20>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	18d2      	adds	r2, r2, r3
 800304c:	4b03      	ldr	r3, [pc, #12]	@ (800305c <HAL_IncTick+0x20>)
 800304e:	601a      	str	r2, [r3, #0]
}
 8003050:	46c0      	nop			@ (mov r8, r8)
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	46c0      	nop			@ (mov r8, r8)
 8003058:	20000050 	.word	0x20000050
 800305c:	20000620 	.word	0x20000620

08003060 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  return uwTick;
 8003064:	4b02      	ldr	r3, [pc, #8]	@ (8003070 <HAL_GetTick+0x10>)
 8003066:	681b      	ldr	r3, [r3, #0]
}
 8003068:	0018      	movs	r0, r3
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	46c0      	nop			@ (mov r8, r8)
 8003070:	20000620 	.word	0x20000620

08003074 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800307c:	230f      	movs	r3, #15
 800307e:	18fb      	adds	r3, r7, r3
 8003080:	2200      	movs	r2, #0
 8003082:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e125      	b.n	80032de <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10a      	bne.n	80030b0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2234      	movs	r2, #52	@ 0x34
 80030a4:	2100      	movs	r1, #0
 80030a6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	0018      	movs	r0, r3
 80030ac:	f7ff fdb0 	bl	8002c10 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b4:	2210      	movs	r2, #16
 80030b6:	4013      	ands	r3, r2
 80030b8:	d000      	beq.n	80030bc <HAL_ADC_Init+0x48>
 80030ba:	e103      	b.n	80032c4 <HAL_ADC_Init+0x250>
 80030bc:	230f      	movs	r3, #15
 80030be:	18fb      	adds	r3, r7, r3
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d000      	beq.n	80030c8 <HAL_ADC_Init+0x54>
 80030c6:	e0fd      	b.n	80032c4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	2204      	movs	r2, #4
 80030d0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80030d2:	d000      	beq.n	80030d6 <HAL_ADC_Init+0x62>
 80030d4:	e0f6      	b.n	80032c4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030da:	4a83      	ldr	r2, [pc, #524]	@ (80032e8 <HAL_ADC_Init+0x274>)
 80030dc:	4013      	ands	r3, r2
 80030de:	2202      	movs	r2, #2
 80030e0:	431a      	orrs	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	2203      	movs	r2, #3
 80030ee:	4013      	ands	r3, r2
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d112      	bne.n	800311a <HAL_ADC_Init+0xa6>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2201      	movs	r2, #1
 80030fc:	4013      	ands	r3, r2
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d009      	beq.n	8003116 <HAL_ADC_Init+0xa2>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68da      	ldr	r2, [r3, #12]
 8003108:	2380      	movs	r3, #128	@ 0x80
 800310a:	021b      	lsls	r3, r3, #8
 800310c:	401a      	ands	r2, r3
 800310e:	2380      	movs	r3, #128	@ 0x80
 8003110:	021b      	lsls	r3, r3, #8
 8003112:	429a      	cmp	r2, r3
 8003114:	d101      	bne.n	800311a <HAL_ADC_Init+0xa6>
 8003116:	2301      	movs	r3, #1
 8003118:	e000      	b.n	800311c <HAL_ADC_Init+0xa8>
 800311a:	2300      	movs	r3, #0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d116      	bne.n	800314e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	2218      	movs	r2, #24
 8003128:	4393      	bics	r3, r2
 800312a:	0019      	movs	r1, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	0899      	lsrs	r1, r3, #2
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68da      	ldr	r2, [r3, #12]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4964      	ldr	r1, [pc, #400]	@ (80032ec <HAL_ADC_Init+0x278>)
 800315a:	400a      	ands	r2, r1
 800315c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	7e1b      	ldrb	r3, [r3, #24]
 8003162:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	7e5b      	ldrb	r3, [r3, #25]
 8003168:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800316a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	7e9b      	ldrb	r3, [r3, #26]
 8003170:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003172:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003178:	2b01      	cmp	r3, #1
 800317a:	d002      	beq.n	8003182 <HAL_ADC_Init+0x10e>
 800317c:	2380      	movs	r3, #128	@ 0x80
 800317e:	015b      	lsls	r3, r3, #5
 8003180:	e000      	b.n	8003184 <HAL_ADC_Init+0x110>
 8003182:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003184:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800318a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	2b02      	cmp	r3, #2
 8003192:	d101      	bne.n	8003198 <HAL_ADC_Init+0x124>
 8003194:	2304      	movs	r3, #4
 8003196:	e000      	b.n	800319a <HAL_ADC_Init+0x126>
 8003198:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800319a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2124      	movs	r1, #36	@ 0x24
 80031a0:	5c5b      	ldrb	r3, [r3, r1]
 80031a2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80031a4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	7edb      	ldrb	r3, [r3, #27]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d115      	bne.n	80031e0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	7e9b      	ldrb	r3, [r3, #26]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d105      	bne.n	80031c8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2280      	movs	r2, #128	@ 0x80
 80031c0:	0252      	lsls	r2, r2, #9
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60bb      	str	r3, [r7, #8]
 80031c6:	e00b      	b.n	80031e0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031cc:	2220      	movs	r2, #32
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d8:	2201      	movs	r2, #1
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69da      	ldr	r2, [r3, #28]
 80031e4:	23c2      	movs	r3, #194	@ 0xc2
 80031e6:	33ff      	adds	r3, #255	@ 0xff
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d007      	beq.n	80031fc <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80031f4:	4313      	orrs	r3, r2
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68d9      	ldr	r1, [r3, #12]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	430a      	orrs	r2, r1
 800320a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003210:	2380      	movs	r3, #128	@ 0x80
 8003212:	055b      	lsls	r3, r3, #21
 8003214:	429a      	cmp	r2, r3
 8003216:	d01b      	beq.n	8003250 <HAL_ADC_Init+0x1dc>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800321c:	2b01      	cmp	r3, #1
 800321e:	d017      	beq.n	8003250 <HAL_ADC_Init+0x1dc>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003224:	2b02      	cmp	r3, #2
 8003226:	d013      	beq.n	8003250 <HAL_ADC_Init+0x1dc>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322c:	2b03      	cmp	r3, #3
 800322e:	d00f      	beq.n	8003250 <HAL_ADC_Init+0x1dc>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003234:	2b04      	cmp	r3, #4
 8003236:	d00b      	beq.n	8003250 <HAL_ADC_Init+0x1dc>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800323c:	2b05      	cmp	r3, #5
 800323e:	d007      	beq.n	8003250 <HAL_ADC_Init+0x1dc>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003244:	2b06      	cmp	r3, #6
 8003246:	d003      	beq.n	8003250 <HAL_ADC_Init+0x1dc>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800324c:	2b07      	cmp	r3, #7
 800324e:	d112      	bne.n	8003276 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	695a      	ldr	r2, [r3, #20]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2107      	movs	r1, #7
 800325c:	438a      	bics	r2, r1
 800325e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6959      	ldr	r1, [r3, #20]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800326a:	2207      	movs	r2, #7
 800326c:	401a      	ands	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	4a1c      	ldr	r2, [pc, #112]	@ (80032f0 <HAL_ADC_Init+0x27c>)
 800327e:	4013      	ands	r3, r2
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	429a      	cmp	r2, r3
 8003284:	d10b      	bne.n	800329e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003290:	2203      	movs	r2, #3
 8003292:	4393      	bics	r3, r2
 8003294:	2201      	movs	r2, #1
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800329c:	e01c      	b.n	80032d8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a2:	2212      	movs	r2, #18
 80032a4:	4393      	bics	r3, r2
 80032a6:	2210      	movs	r2, #16
 80032a8:	431a      	orrs	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b2:	2201      	movs	r2, #1
 80032b4:	431a      	orrs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80032ba:	230f      	movs	r3, #15
 80032bc:	18fb      	adds	r3, r7, r3
 80032be:	2201      	movs	r2, #1
 80032c0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80032c2:	e009      	b.n	80032d8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c8:	2210      	movs	r2, #16
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 80032d0:	230f      	movs	r3, #15
 80032d2:	18fb      	adds	r3, r7, r3
 80032d4:	2201      	movs	r2, #1
 80032d6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80032d8:	230f      	movs	r3, #15
 80032da:	18fb      	adds	r3, r7, r3
 80032dc:	781b      	ldrb	r3, [r3, #0]
}
 80032de:	0018      	movs	r0, r3
 80032e0:	46bd      	mov	sp, r7
 80032e2:	b004      	add	sp, #16
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	46c0      	nop			@ (mov r8, r8)
 80032e8:	fffffefd 	.word	0xfffffefd
 80032ec:	fffe0219 	.word	0xfffe0219
 80032f0:	833fffe7 	.word	0x833fffe7

080032f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032fe:	230f      	movs	r3, #15
 8003300:	18fb      	adds	r3, r7, r3
 8003302:	2200      	movs	r2, #0
 8003304:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003306:	2300      	movs	r3, #0
 8003308:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800330e:	2380      	movs	r3, #128	@ 0x80
 8003310:	055b      	lsls	r3, r3, #21
 8003312:	429a      	cmp	r2, r3
 8003314:	d011      	beq.n	800333a <HAL_ADC_ConfigChannel+0x46>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800331a:	2b01      	cmp	r3, #1
 800331c:	d00d      	beq.n	800333a <HAL_ADC_ConfigChannel+0x46>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003322:	2b02      	cmp	r3, #2
 8003324:	d009      	beq.n	800333a <HAL_ADC_ConfigChannel+0x46>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800332a:	2b03      	cmp	r3, #3
 800332c:	d005      	beq.n	800333a <HAL_ADC_ConfigChannel+0x46>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003332:	2b04      	cmp	r3, #4
 8003334:	d001      	beq.n	800333a <HAL_ADC_ConfigChannel+0x46>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2234      	movs	r2, #52	@ 0x34
 800333e:	5c9b      	ldrb	r3, [r3, r2]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d101      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x54>
 8003344:	2302      	movs	r3, #2
 8003346:	e0d0      	b.n	80034ea <HAL_ADC_ConfigChannel+0x1f6>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2234      	movs	r2, #52	@ 0x34
 800334c:	2101      	movs	r1, #1
 800334e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	2204      	movs	r2, #4
 8003358:	4013      	ands	r3, r2
 800335a:	d000      	beq.n	800335e <HAL_ADC_ConfigChannel+0x6a>
 800335c:	e0b4      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	4a64      	ldr	r2, [pc, #400]	@ (80034f4 <HAL_ADC_ConfigChannel+0x200>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d100      	bne.n	800336a <HAL_ADC_ConfigChannel+0x76>
 8003368:	e082      	b.n	8003470 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2201      	movs	r2, #1
 8003376:	409a      	lsls	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003384:	2380      	movs	r3, #128	@ 0x80
 8003386:	055b      	lsls	r3, r3, #21
 8003388:	429a      	cmp	r2, r3
 800338a:	d037      	beq.n	80033fc <HAL_ADC_ConfigChannel+0x108>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003390:	2b01      	cmp	r3, #1
 8003392:	d033      	beq.n	80033fc <HAL_ADC_ConfigChannel+0x108>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003398:	2b02      	cmp	r3, #2
 800339a:	d02f      	beq.n	80033fc <HAL_ADC_ConfigChannel+0x108>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a0:	2b03      	cmp	r3, #3
 80033a2:	d02b      	beq.n	80033fc <HAL_ADC_ConfigChannel+0x108>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a8:	2b04      	cmp	r3, #4
 80033aa:	d027      	beq.n	80033fc <HAL_ADC_ConfigChannel+0x108>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b0:	2b05      	cmp	r3, #5
 80033b2:	d023      	beq.n	80033fc <HAL_ADC_ConfigChannel+0x108>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b8:	2b06      	cmp	r3, #6
 80033ba:	d01f      	beq.n	80033fc <HAL_ADC_ConfigChannel+0x108>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c0:	2b07      	cmp	r3, #7
 80033c2:	d01b      	beq.n	80033fc <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	2107      	movs	r1, #7
 80033d0:	400b      	ands	r3, r1
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d012      	beq.n	80033fc <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	695a      	ldr	r2, [r3, #20]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2107      	movs	r1, #7
 80033e2:	438a      	bics	r2, r1
 80033e4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6959      	ldr	r1, [r3, #20]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	2207      	movs	r2, #7
 80033f2:	401a      	ands	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2b10      	cmp	r3, #16
 8003402:	d007      	beq.n	8003414 <HAL_ADC_ConfigChannel+0x120>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2b11      	cmp	r3, #17
 800340a:	d003      	beq.n	8003414 <HAL_ADC_ConfigChannel+0x120>
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b12      	cmp	r3, #18
 8003412:	d163      	bne.n	80034dc <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003414:	4b38      	ldr	r3, [pc, #224]	@ (80034f8 <HAL_ADC_ConfigChannel+0x204>)
 8003416:	6819      	ldr	r1, [r3, #0]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b10      	cmp	r3, #16
 800341e:	d009      	beq.n	8003434 <HAL_ADC_ConfigChannel+0x140>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b11      	cmp	r3, #17
 8003426:	d102      	bne.n	800342e <HAL_ADC_ConfigChannel+0x13a>
 8003428:	2380      	movs	r3, #128	@ 0x80
 800342a:	03db      	lsls	r3, r3, #15
 800342c:	e004      	b.n	8003438 <HAL_ADC_ConfigChannel+0x144>
 800342e:	2380      	movs	r3, #128	@ 0x80
 8003430:	045b      	lsls	r3, r3, #17
 8003432:	e001      	b.n	8003438 <HAL_ADC_ConfigChannel+0x144>
 8003434:	2380      	movs	r3, #128	@ 0x80
 8003436:	041b      	lsls	r3, r3, #16
 8003438:	4a2f      	ldr	r2, [pc, #188]	@ (80034f8 <HAL_ADC_ConfigChannel+0x204>)
 800343a:	430b      	orrs	r3, r1
 800343c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b10      	cmp	r3, #16
 8003444:	d14a      	bne.n	80034dc <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003446:	4b2d      	ldr	r3, [pc, #180]	@ (80034fc <HAL_ADC_ConfigChannel+0x208>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	492d      	ldr	r1, [pc, #180]	@ (8003500 <HAL_ADC_ConfigChannel+0x20c>)
 800344c:	0018      	movs	r0, r3
 800344e:	f7fc fe77 	bl	8000140 <__udivsi3>
 8003452:	0003      	movs	r3, r0
 8003454:	001a      	movs	r2, r3
 8003456:	0013      	movs	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	189b      	adds	r3, r3, r2
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003460:	e002      	b.n	8003468 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	3b01      	subs	r3, #1
 8003466:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f9      	bne.n	8003462 <HAL_ADC_ConfigChannel+0x16e>
 800346e:	e035      	b.n	80034dc <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2101      	movs	r1, #1
 800347c:	4099      	lsls	r1, r3
 800347e:	000b      	movs	r3, r1
 8003480:	43d9      	mvns	r1, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	400a      	ands	r2, r1
 8003488:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2b10      	cmp	r3, #16
 8003490:	d007      	beq.n	80034a2 <HAL_ADC_ConfigChannel+0x1ae>
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b11      	cmp	r3, #17
 8003498:	d003      	beq.n	80034a2 <HAL_ADC_ConfigChannel+0x1ae>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2b12      	cmp	r3, #18
 80034a0:	d11c      	bne.n	80034dc <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80034a2:	4b15      	ldr	r3, [pc, #84]	@ (80034f8 <HAL_ADC_ConfigChannel+0x204>)
 80034a4:	6819      	ldr	r1, [r3, #0]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2b10      	cmp	r3, #16
 80034ac:	d007      	beq.n	80034be <HAL_ADC_ConfigChannel+0x1ca>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2b11      	cmp	r3, #17
 80034b4:	d101      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x1c6>
 80034b6:	4b13      	ldr	r3, [pc, #76]	@ (8003504 <HAL_ADC_ConfigChannel+0x210>)
 80034b8:	e002      	b.n	80034c0 <HAL_ADC_ConfigChannel+0x1cc>
 80034ba:	4b13      	ldr	r3, [pc, #76]	@ (8003508 <HAL_ADC_ConfigChannel+0x214>)
 80034bc:	e000      	b.n	80034c0 <HAL_ADC_ConfigChannel+0x1cc>
 80034be:	4b13      	ldr	r3, [pc, #76]	@ (800350c <HAL_ADC_ConfigChannel+0x218>)
 80034c0:	4a0d      	ldr	r2, [pc, #52]	@ (80034f8 <HAL_ADC_ConfigChannel+0x204>)
 80034c2:	400b      	ands	r3, r1
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	e009      	b.n	80034dc <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034cc:	2220      	movs	r2, #32
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 80034d4:	230f      	movs	r3, #15
 80034d6:	18fb      	adds	r3, r7, r3
 80034d8:	2201      	movs	r2, #1
 80034da:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2234      	movs	r2, #52	@ 0x34
 80034e0:	2100      	movs	r1, #0
 80034e2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80034e4:	230f      	movs	r3, #15
 80034e6:	18fb      	adds	r3, r7, r3
 80034e8:	781b      	ldrb	r3, [r3, #0]
}
 80034ea:	0018      	movs	r0, r3
 80034ec:	46bd      	mov	sp, r7
 80034ee:	b004      	add	sp, #16
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	46c0      	nop			@ (mov r8, r8)
 80034f4:	00001001 	.word	0x00001001
 80034f8:	40012708 	.word	0x40012708
 80034fc:	20000048 	.word	0x20000048
 8003500:	000f4240 	.word	0x000f4240
 8003504:	ffbfffff 	.word	0xffbfffff
 8003508:	feffffff 	.word	0xfeffffff
 800350c:	ff7fffff 	.word	0xff7fffff

08003510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003510:	b590      	push	{r4, r7, lr}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	0002      	movs	r2, r0
 8003518:	6039      	str	r1, [r7, #0]
 800351a:	1dfb      	adds	r3, r7, #7
 800351c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800351e:	1dfb      	adds	r3, r7, #7
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b7f      	cmp	r3, #127	@ 0x7f
 8003524:	d828      	bhi.n	8003578 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003526:	4a2f      	ldr	r2, [pc, #188]	@ (80035e4 <__NVIC_SetPriority+0xd4>)
 8003528:	1dfb      	adds	r3, r7, #7
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	b25b      	sxtb	r3, r3
 800352e:	089b      	lsrs	r3, r3, #2
 8003530:	33c0      	adds	r3, #192	@ 0xc0
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	589b      	ldr	r3, [r3, r2]
 8003536:	1dfa      	adds	r2, r7, #7
 8003538:	7812      	ldrb	r2, [r2, #0]
 800353a:	0011      	movs	r1, r2
 800353c:	2203      	movs	r2, #3
 800353e:	400a      	ands	r2, r1
 8003540:	00d2      	lsls	r2, r2, #3
 8003542:	21ff      	movs	r1, #255	@ 0xff
 8003544:	4091      	lsls	r1, r2
 8003546:	000a      	movs	r2, r1
 8003548:	43d2      	mvns	r2, r2
 800354a:	401a      	ands	r2, r3
 800354c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	019b      	lsls	r3, r3, #6
 8003552:	22ff      	movs	r2, #255	@ 0xff
 8003554:	401a      	ands	r2, r3
 8003556:	1dfb      	adds	r3, r7, #7
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	0018      	movs	r0, r3
 800355c:	2303      	movs	r3, #3
 800355e:	4003      	ands	r3, r0
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003564:	481f      	ldr	r0, [pc, #124]	@ (80035e4 <__NVIC_SetPriority+0xd4>)
 8003566:	1dfb      	adds	r3, r7, #7
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	b25b      	sxtb	r3, r3
 800356c:	089b      	lsrs	r3, r3, #2
 800356e:	430a      	orrs	r2, r1
 8003570:	33c0      	adds	r3, #192	@ 0xc0
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003576:	e031      	b.n	80035dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003578:	4a1b      	ldr	r2, [pc, #108]	@ (80035e8 <__NVIC_SetPriority+0xd8>)
 800357a:	1dfb      	adds	r3, r7, #7
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	0019      	movs	r1, r3
 8003580:	230f      	movs	r3, #15
 8003582:	400b      	ands	r3, r1
 8003584:	3b08      	subs	r3, #8
 8003586:	089b      	lsrs	r3, r3, #2
 8003588:	3306      	adds	r3, #6
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	18d3      	adds	r3, r2, r3
 800358e:	3304      	adds	r3, #4
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	1dfa      	adds	r2, r7, #7
 8003594:	7812      	ldrb	r2, [r2, #0]
 8003596:	0011      	movs	r1, r2
 8003598:	2203      	movs	r2, #3
 800359a:	400a      	ands	r2, r1
 800359c:	00d2      	lsls	r2, r2, #3
 800359e:	21ff      	movs	r1, #255	@ 0xff
 80035a0:	4091      	lsls	r1, r2
 80035a2:	000a      	movs	r2, r1
 80035a4:	43d2      	mvns	r2, r2
 80035a6:	401a      	ands	r2, r3
 80035a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	019b      	lsls	r3, r3, #6
 80035ae:	22ff      	movs	r2, #255	@ 0xff
 80035b0:	401a      	ands	r2, r3
 80035b2:	1dfb      	adds	r3, r7, #7
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	0018      	movs	r0, r3
 80035b8:	2303      	movs	r3, #3
 80035ba:	4003      	ands	r3, r0
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035c0:	4809      	ldr	r0, [pc, #36]	@ (80035e8 <__NVIC_SetPriority+0xd8>)
 80035c2:	1dfb      	adds	r3, r7, #7
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	001c      	movs	r4, r3
 80035c8:	230f      	movs	r3, #15
 80035ca:	4023      	ands	r3, r4
 80035cc:	3b08      	subs	r3, #8
 80035ce:	089b      	lsrs	r3, r3, #2
 80035d0:	430a      	orrs	r2, r1
 80035d2:	3306      	adds	r3, #6
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	18c3      	adds	r3, r0, r3
 80035d8:	3304      	adds	r3, #4
 80035da:	601a      	str	r2, [r3, #0]
}
 80035dc:	46c0      	nop			@ (mov r8, r8)
 80035de:	46bd      	mov	sp, r7
 80035e0:	b003      	add	sp, #12
 80035e2:	bd90      	pop	{r4, r7, pc}
 80035e4:	e000e100 	.word	0xe000e100
 80035e8:	e000ed00 	.word	0xe000ed00

080035ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	1e5a      	subs	r2, r3, #1
 80035f8:	2380      	movs	r3, #128	@ 0x80
 80035fa:	045b      	lsls	r3, r3, #17
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d301      	bcc.n	8003604 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003600:	2301      	movs	r3, #1
 8003602:	e010      	b.n	8003626 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003604:	4b0a      	ldr	r3, [pc, #40]	@ (8003630 <SysTick_Config+0x44>)
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	3a01      	subs	r2, #1
 800360a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800360c:	2301      	movs	r3, #1
 800360e:	425b      	negs	r3, r3
 8003610:	2103      	movs	r1, #3
 8003612:	0018      	movs	r0, r3
 8003614:	f7ff ff7c 	bl	8003510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003618:	4b05      	ldr	r3, [pc, #20]	@ (8003630 <SysTick_Config+0x44>)
 800361a:	2200      	movs	r2, #0
 800361c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800361e:	4b04      	ldr	r3, [pc, #16]	@ (8003630 <SysTick_Config+0x44>)
 8003620:	2207      	movs	r2, #7
 8003622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003624:	2300      	movs	r3, #0
}
 8003626:	0018      	movs	r0, r3
 8003628:	46bd      	mov	sp, r7
 800362a:	b002      	add	sp, #8
 800362c:	bd80      	pop	{r7, pc}
 800362e:	46c0      	nop			@ (mov r8, r8)
 8003630:	e000e010 	.word	0xe000e010

08003634 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	60b9      	str	r1, [r7, #8]
 800363c:	607a      	str	r2, [r7, #4]
 800363e:	210f      	movs	r1, #15
 8003640:	187b      	adds	r3, r7, r1
 8003642:	1c02      	adds	r2, r0, #0
 8003644:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	187b      	adds	r3, r7, r1
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	b25b      	sxtb	r3, r3
 800364e:	0011      	movs	r1, r2
 8003650:	0018      	movs	r0, r3
 8003652:	f7ff ff5d 	bl	8003510 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8003656:	46c0      	nop			@ (mov r8, r8)
 8003658:	46bd      	mov	sp, r7
 800365a:	b004      	add	sp, #16
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b082      	sub	sp, #8
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	0018      	movs	r0, r3
 800366a:	f7ff ffbf 	bl	80035ec <SysTick_Config>
 800366e:	0003      	movs	r3, r0
}
 8003670:	0018      	movs	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	b002      	add	sp, #8
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003682:	2300      	movs	r3, #0
 8003684:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003686:	e14f      	b.n	8003928 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2101      	movs	r1, #1
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	4091      	lsls	r1, r2
 8003692:	000a      	movs	r2, r1
 8003694:	4013      	ands	r3, r2
 8003696:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d100      	bne.n	80036a0 <HAL_GPIO_Init+0x28>
 800369e:	e140      	b.n	8003922 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	2203      	movs	r2, #3
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d005      	beq.n	80036b8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	2203      	movs	r2, #3
 80036b2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d130      	bne.n	800371a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	2203      	movs	r2, #3
 80036c4:	409a      	lsls	r2, r3
 80036c6:	0013      	movs	r3, r2
 80036c8:	43da      	mvns	r2, r3
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	4013      	ands	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	68da      	ldr	r2, [r3, #12]
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	409a      	lsls	r2, r3
 80036da:	0013      	movs	r3, r2
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	4313      	orrs	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036ee:	2201      	movs	r2, #1
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	409a      	lsls	r2, r3
 80036f4:	0013      	movs	r3, r2
 80036f6:	43da      	mvns	r2, r3
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	4013      	ands	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	091b      	lsrs	r3, r3, #4
 8003704:	2201      	movs	r2, #1
 8003706:	401a      	ands	r2, r3
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	409a      	lsls	r2, r3
 800370c:	0013      	movs	r3, r2
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2203      	movs	r2, #3
 8003720:	4013      	ands	r3, r2
 8003722:	2b03      	cmp	r3, #3
 8003724:	d017      	beq.n	8003756 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	2203      	movs	r2, #3
 8003732:	409a      	lsls	r2, r3
 8003734:	0013      	movs	r3, r2
 8003736:	43da      	mvns	r2, r3
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	4013      	ands	r3, r2
 800373c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	689a      	ldr	r2, [r3, #8]
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	409a      	lsls	r2, r3
 8003748:	0013      	movs	r3, r2
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	4313      	orrs	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2203      	movs	r2, #3
 800375c:	4013      	ands	r3, r2
 800375e:	2b02      	cmp	r3, #2
 8003760:	d123      	bne.n	80037aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	08da      	lsrs	r2, r3, #3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	3208      	adds	r2, #8
 800376a:	0092      	lsls	r2, r2, #2
 800376c:	58d3      	ldr	r3, [r2, r3]
 800376e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	2207      	movs	r2, #7
 8003774:	4013      	ands	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	220f      	movs	r2, #15
 800377a:	409a      	lsls	r2, r3
 800377c:	0013      	movs	r3, r2
 800377e:	43da      	mvns	r2, r3
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	4013      	ands	r3, r2
 8003784:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	691a      	ldr	r2, [r3, #16]
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	2107      	movs	r1, #7
 800378e:	400b      	ands	r3, r1
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	409a      	lsls	r2, r3
 8003794:	0013      	movs	r3, r2
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	4313      	orrs	r3, r2
 800379a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	08da      	lsrs	r2, r3, #3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	3208      	adds	r2, #8
 80037a4:	0092      	lsls	r2, r2, #2
 80037a6:	6939      	ldr	r1, [r7, #16]
 80037a8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	2203      	movs	r2, #3
 80037b6:	409a      	lsls	r2, r3
 80037b8:	0013      	movs	r3, r2
 80037ba:	43da      	mvns	r2, r3
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	4013      	ands	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2203      	movs	r2, #3
 80037c8:	401a      	ands	r2, r3
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	409a      	lsls	r2, r3
 80037d0:	0013      	movs	r3, r2
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	23c0      	movs	r3, #192	@ 0xc0
 80037e4:	029b      	lsls	r3, r3, #10
 80037e6:	4013      	ands	r3, r2
 80037e8:	d100      	bne.n	80037ec <HAL_GPIO_Init+0x174>
 80037ea:	e09a      	b.n	8003922 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ec:	4b54      	ldr	r3, [pc, #336]	@ (8003940 <HAL_GPIO_Init+0x2c8>)
 80037ee:	699a      	ldr	r2, [r3, #24]
 80037f0:	4b53      	ldr	r3, [pc, #332]	@ (8003940 <HAL_GPIO_Init+0x2c8>)
 80037f2:	2101      	movs	r1, #1
 80037f4:	430a      	orrs	r2, r1
 80037f6:	619a      	str	r2, [r3, #24]
 80037f8:	4b51      	ldr	r3, [pc, #324]	@ (8003940 <HAL_GPIO_Init+0x2c8>)
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	2201      	movs	r2, #1
 80037fe:	4013      	ands	r3, r2
 8003800:	60bb      	str	r3, [r7, #8]
 8003802:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003804:	4a4f      	ldr	r2, [pc, #316]	@ (8003944 <HAL_GPIO_Init+0x2cc>)
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	089b      	lsrs	r3, r3, #2
 800380a:	3302      	adds	r3, #2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	589b      	ldr	r3, [r3, r2]
 8003810:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	2203      	movs	r2, #3
 8003816:	4013      	ands	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	220f      	movs	r2, #15
 800381c:	409a      	lsls	r2, r3
 800381e:	0013      	movs	r3, r2
 8003820:	43da      	mvns	r2, r3
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4013      	ands	r3, r2
 8003826:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	2390      	movs	r3, #144	@ 0x90
 800382c:	05db      	lsls	r3, r3, #23
 800382e:	429a      	cmp	r2, r3
 8003830:	d013      	beq.n	800385a <HAL_GPIO_Init+0x1e2>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a44      	ldr	r2, [pc, #272]	@ (8003948 <HAL_GPIO_Init+0x2d0>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d00d      	beq.n	8003856 <HAL_GPIO_Init+0x1de>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a43      	ldr	r2, [pc, #268]	@ (800394c <HAL_GPIO_Init+0x2d4>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d007      	beq.n	8003852 <HAL_GPIO_Init+0x1da>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a42      	ldr	r2, [pc, #264]	@ (8003950 <HAL_GPIO_Init+0x2d8>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d101      	bne.n	800384e <HAL_GPIO_Init+0x1d6>
 800384a:	2303      	movs	r3, #3
 800384c:	e006      	b.n	800385c <HAL_GPIO_Init+0x1e4>
 800384e:	2305      	movs	r3, #5
 8003850:	e004      	b.n	800385c <HAL_GPIO_Init+0x1e4>
 8003852:	2302      	movs	r3, #2
 8003854:	e002      	b.n	800385c <HAL_GPIO_Init+0x1e4>
 8003856:	2301      	movs	r3, #1
 8003858:	e000      	b.n	800385c <HAL_GPIO_Init+0x1e4>
 800385a:	2300      	movs	r3, #0
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	2103      	movs	r1, #3
 8003860:	400a      	ands	r2, r1
 8003862:	0092      	lsls	r2, r2, #2
 8003864:	4093      	lsls	r3, r2
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800386c:	4935      	ldr	r1, [pc, #212]	@ (8003944 <HAL_GPIO_Init+0x2cc>)
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	089b      	lsrs	r3, r3, #2
 8003872:	3302      	adds	r3, #2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800387a:	4b36      	ldr	r3, [pc, #216]	@ (8003954 <HAL_GPIO_Init+0x2dc>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	43da      	mvns	r2, r3
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	4013      	ands	r3, r2
 8003888:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	2380      	movs	r3, #128	@ 0x80
 8003890:	035b      	lsls	r3, r3, #13
 8003892:	4013      	ands	r3, r2
 8003894:	d003      	beq.n	800389e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800389e:	4b2d      	ldr	r3, [pc, #180]	@ (8003954 <HAL_GPIO_Init+0x2dc>)
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80038a4:	4b2b      	ldr	r3, [pc, #172]	@ (8003954 <HAL_GPIO_Init+0x2dc>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	43da      	mvns	r2, r3
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	4013      	ands	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	2380      	movs	r3, #128	@ 0x80
 80038ba:	039b      	lsls	r3, r3, #14
 80038bc:	4013      	ands	r3, r2
 80038be:	d003      	beq.n	80038c8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80038c8:	4b22      	ldr	r3, [pc, #136]	@ (8003954 <HAL_GPIO_Init+0x2dc>)
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80038ce:	4b21      	ldr	r3, [pc, #132]	@ (8003954 <HAL_GPIO_Init+0x2dc>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	43da      	mvns	r2, r3
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	4013      	ands	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	2380      	movs	r3, #128	@ 0x80
 80038e4:	029b      	lsls	r3, r3, #10
 80038e6:	4013      	ands	r3, r2
 80038e8:	d003      	beq.n	80038f2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80038f2:	4b18      	ldr	r3, [pc, #96]	@ (8003954 <HAL_GPIO_Init+0x2dc>)
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80038f8:	4b16      	ldr	r3, [pc, #88]	@ (8003954 <HAL_GPIO_Init+0x2dc>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	43da      	mvns	r2, r3
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	4013      	ands	r3, r2
 8003906:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	2380      	movs	r3, #128	@ 0x80
 800390e:	025b      	lsls	r3, r3, #9
 8003910:	4013      	ands	r3, r2
 8003912:	d003      	beq.n	800391c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4313      	orrs	r3, r2
 800391a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800391c:	4b0d      	ldr	r3, [pc, #52]	@ (8003954 <HAL_GPIO_Init+0x2dc>)
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	3301      	adds	r3, #1
 8003926:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	40da      	lsrs	r2, r3
 8003930:	1e13      	subs	r3, r2, #0
 8003932:	d000      	beq.n	8003936 <HAL_GPIO_Init+0x2be>
 8003934:	e6a8      	b.n	8003688 <HAL_GPIO_Init+0x10>
  } 
}
 8003936:	46c0      	nop			@ (mov r8, r8)
 8003938:	46c0      	nop			@ (mov r8, r8)
 800393a:	46bd      	mov	sp, r7
 800393c:	b006      	add	sp, #24
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40021000 	.word	0x40021000
 8003944:	40010000 	.word	0x40010000
 8003948:	48000400 	.word	0x48000400
 800394c:	48000800 	.word	0x48000800
 8003950:	48000c00 	.word	0x48000c00
 8003954:	40010400 	.word	0x40010400

08003958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	0008      	movs	r0, r1
 8003962:	0011      	movs	r1, r2
 8003964:	1cbb      	adds	r3, r7, #2
 8003966:	1c02      	adds	r2, r0, #0
 8003968:	801a      	strh	r2, [r3, #0]
 800396a:	1c7b      	adds	r3, r7, #1
 800396c:	1c0a      	adds	r2, r1, #0
 800396e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003970:	1c7b      	adds	r3, r7, #1
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d004      	beq.n	8003982 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003978:	1cbb      	adds	r3, r7, #2
 800397a:	881a      	ldrh	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003980:	e003      	b.n	800398a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003982:	1cbb      	adds	r3, r7, #2
 8003984:	881a      	ldrh	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800398a:	46c0      	nop			@ (mov r8, r8)
 800398c:	46bd      	mov	sp, r7
 800398e:	b002      	add	sp, #8
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b088      	sub	sp, #32
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e301      	b.n	8003faa <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2201      	movs	r2, #1
 80039ac:	4013      	ands	r3, r2
 80039ae:	d100      	bne.n	80039b2 <HAL_RCC_OscConfig+0x1e>
 80039b0:	e08d      	b.n	8003ace <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80039b2:	4bc3      	ldr	r3, [pc, #780]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	220c      	movs	r2, #12
 80039b8:	4013      	ands	r3, r2
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d00e      	beq.n	80039dc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039be:	4bc0      	ldr	r3, [pc, #768]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	220c      	movs	r2, #12
 80039c4:	4013      	ands	r3, r2
 80039c6:	2b08      	cmp	r3, #8
 80039c8:	d116      	bne.n	80039f8 <HAL_RCC_OscConfig+0x64>
 80039ca:	4bbd      	ldr	r3, [pc, #756]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	2380      	movs	r3, #128	@ 0x80
 80039d0:	025b      	lsls	r3, r3, #9
 80039d2:	401a      	ands	r2, r3
 80039d4:	2380      	movs	r3, #128	@ 0x80
 80039d6:	025b      	lsls	r3, r3, #9
 80039d8:	429a      	cmp	r2, r3
 80039da:	d10d      	bne.n	80039f8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039dc:	4bb8      	ldr	r3, [pc, #736]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	2380      	movs	r3, #128	@ 0x80
 80039e2:	029b      	lsls	r3, r3, #10
 80039e4:	4013      	ands	r3, r2
 80039e6:	d100      	bne.n	80039ea <HAL_RCC_OscConfig+0x56>
 80039e8:	e070      	b.n	8003acc <HAL_RCC_OscConfig+0x138>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d000      	beq.n	80039f4 <HAL_RCC_OscConfig+0x60>
 80039f2:	e06b      	b.n	8003acc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e2d8      	b.n	8003faa <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d107      	bne.n	8003a10 <HAL_RCC_OscConfig+0x7c>
 8003a00:	4baf      	ldr	r3, [pc, #700]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	4bae      	ldr	r3, [pc, #696]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003a06:	2180      	movs	r1, #128	@ 0x80
 8003a08:	0249      	lsls	r1, r1, #9
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	e02f      	b.n	8003a70 <HAL_RCC_OscConfig+0xdc>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10c      	bne.n	8003a32 <HAL_RCC_OscConfig+0x9e>
 8003a18:	4ba9      	ldr	r3, [pc, #676]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	4ba8      	ldr	r3, [pc, #672]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003a1e:	49a9      	ldr	r1, [pc, #676]	@ (8003cc4 <HAL_RCC_OscConfig+0x330>)
 8003a20:	400a      	ands	r2, r1
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	4ba6      	ldr	r3, [pc, #664]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	4ba5      	ldr	r3, [pc, #660]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003a2a:	49a7      	ldr	r1, [pc, #668]	@ (8003cc8 <HAL_RCC_OscConfig+0x334>)
 8003a2c:	400a      	ands	r2, r1
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	e01e      	b.n	8003a70 <HAL_RCC_OscConfig+0xdc>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b05      	cmp	r3, #5
 8003a38:	d10e      	bne.n	8003a58 <HAL_RCC_OscConfig+0xc4>
 8003a3a:	4ba1      	ldr	r3, [pc, #644]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	4ba0      	ldr	r3, [pc, #640]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003a40:	2180      	movs	r1, #128	@ 0x80
 8003a42:	02c9      	lsls	r1, r1, #11
 8003a44:	430a      	orrs	r2, r1
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	4b9d      	ldr	r3, [pc, #628]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	4b9c      	ldr	r3, [pc, #624]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003a4e:	2180      	movs	r1, #128	@ 0x80
 8003a50:	0249      	lsls	r1, r1, #9
 8003a52:	430a      	orrs	r2, r1
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	e00b      	b.n	8003a70 <HAL_RCC_OscConfig+0xdc>
 8003a58:	4b99      	ldr	r3, [pc, #612]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	4b98      	ldr	r3, [pc, #608]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003a5e:	4999      	ldr	r1, [pc, #612]	@ (8003cc4 <HAL_RCC_OscConfig+0x330>)
 8003a60:	400a      	ands	r2, r1
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	4b96      	ldr	r3, [pc, #600]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	4b95      	ldr	r3, [pc, #596]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003a6a:	4997      	ldr	r1, [pc, #604]	@ (8003cc8 <HAL_RCC_OscConfig+0x334>)
 8003a6c:	400a      	ands	r2, r1
 8003a6e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d014      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a78:	f7ff faf2 	bl	8003060 <HAL_GetTick>
 8003a7c:	0003      	movs	r3, r0
 8003a7e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a80:	e008      	b.n	8003a94 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a82:	f7ff faed 	bl	8003060 <HAL_GetTick>
 8003a86:	0002      	movs	r2, r0
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b64      	cmp	r3, #100	@ 0x64
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e28a      	b.n	8003faa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a94:	4b8a      	ldr	r3, [pc, #552]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	2380      	movs	r3, #128	@ 0x80
 8003a9a:	029b      	lsls	r3, r3, #10
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	d0f0      	beq.n	8003a82 <HAL_RCC_OscConfig+0xee>
 8003aa0:	e015      	b.n	8003ace <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa2:	f7ff fadd 	bl	8003060 <HAL_GetTick>
 8003aa6:	0003      	movs	r3, r0
 8003aa8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aac:	f7ff fad8 	bl	8003060 <HAL_GetTick>
 8003ab0:	0002      	movs	r2, r0
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b64      	cmp	r3, #100	@ 0x64
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e275      	b.n	8003faa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003abe:	4b80      	ldr	r3, [pc, #512]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	2380      	movs	r3, #128	@ 0x80
 8003ac4:	029b      	lsls	r3, r3, #10
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	d1f0      	bne.n	8003aac <HAL_RCC_OscConfig+0x118>
 8003aca:	e000      	b.n	8003ace <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003acc:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	d100      	bne.n	8003ada <HAL_RCC_OscConfig+0x146>
 8003ad8:	e069      	b.n	8003bae <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003ada:	4b79      	ldr	r3, [pc, #484]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	220c      	movs	r2, #12
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	d00b      	beq.n	8003afc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003ae4:	4b76      	ldr	r3, [pc, #472]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	220c      	movs	r2, #12
 8003aea:	4013      	ands	r3, r2
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d11c      	bne.n	8003b2a <HAL_RCC_OscConfig+0x196>
 8003af0:	4b73      	ldr	r3, [pc, #460]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	2380      	movs	r3, #128	@ 0x80
 8003af6:	025b      	lsls	r3, r3, #9
 8003af8:	4013      	ands	r3, r2
 8003afa:	d116      	bne.n	8003b2a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003afc:	4b70      	ldr	r3, [pc, #448]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2202      	movs	r2, #2
 8003b02:	4013      	ands	r3, r2
 8003b04:	d005      	beq.n	8003b12 <HAL_RCC_OscConfig+0x17e>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d001      	beq.n	8003b12 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e24b      	b.n	8003faa <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b12:	4b6b      	ldr	r3, [pc, #428]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	22f8      	movs	r2, #248	@ 0xf8
 8003b18:	4393      	bics	r3, r2
 8003b1a:	0019      	movs	r1, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	00da      	lsls	r2, r3, #3
 8003b22:	4b67      	ldr	r3, [pc, #412]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003b24:	430a      	orrs	r2, r1
 8003b26:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b28:	e041      	b.n	8003bae <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d024      	beq.n	8003b7c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b32:	4b63      	ldr	r3, [pc, #396]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	4b62      	ldr	r3, [pc, #392]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003b38:	2101      	movs	r1, #1
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3e:	f7ff fa8f 	bl	8003060 <HAL_GetTick>
 8003b42:	0003      	movs	r3, r0
 8003b44:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b48:	f7ff fa8a 	bl	8003060 <HAL_GetTick>
 8003b4c:	0002      	movs	r2, r0
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e227      	b.n	8003faa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5a:	4b59      	ldr	r3, [pc, #356]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	4013      	ands	r3, r2
 8003b62:	d0f1      	beq.n	8003b48 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b64:	4b56      	ldr	r3, [pc, #344]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	22f8      	movs	r2, #248	@ 0xf8
 8003b6a:	4393      	bics	r3, r2
 8003b6c:	0019      	movs	r1, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	00da      	lsls	r2, r3, #3
 8003b74:	4b52      	ldr	r3, [pc, #328]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003b76:	430a      	orrs	r2, r1
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	e018      	b.n	8003bae <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b7c:	4b50      	ldr	r3, [pc, #320]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	4b4f      	ldr	r3, [pc, #316]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003b82:	2101      	movs	r1, #1
 8003b84:	438a      	bics	r2, r1
 8003b86:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b88:	f7ff fa6a 	bl	8003060 <HAL_GetTick>
 8003b8c:	0003      	movs	r3, r0
 8003b8e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b90:	e008      	b.n	8003ba4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b92:	f7ff fa65 	bl	8003060 <HAL_GetTick>
 8003b96:	0002      	movs	r2, r0
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e202      	b.n	8003faa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ba4:	4b46      	ldr	r3, [pc, #280]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2202      	movs	r2, #2
 8003baa:	4013      	ands	r3, r2
 8003bac:	d1f1      	bne.n	8003b92 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2208      	movs	r2, #8
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	d036      	beq.n	8003c26 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d019      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bc0:	4b3f      	ldr	r3, [pc, #252]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003bc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003bc4:	4b3e      	ldr	r3, [pc, #248]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bcc:	f7ff fa48 	bl	8003060 <HAL_GetTick>
 8003bd0:	0003      	movs	r3, r0
 8003bd2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bd6:	f7ff fa43 	bl	8003060 <HAL_GetTick>
 8003bda:	0002      	movs	r2, r0
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e1e0      	b.n	8003faa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003be8:	4b35      	ldr	r3, [pc, #212]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bec:	2202      	movs	r2, #2
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d0f1      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x242>
 8003bf2:	e018      	b.n	8003c26 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bf4:	4b32      	ldr	r3, [pc, #200]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003bf6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003bf8:	4b31      	ldr	r3, [pc, #196]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	438a      	bics	r2, r1
 8003bfe:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c00:	f7ff fa2e 	bl	8003060 <HAL_GetTick>
 8003c04:	0003      	movs	r3, r0
 8003c06:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c08:	e008      	b.n	8003c1c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c0a:	f7ff fa29 	bl	8003060 <HAL_GetTick>
 8003c0e:	0002      	movs	r2, r0
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e1c6      	b.n	8003faa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c1c:	4b28      	ldr	r3, [pc, #160]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c20:	2202      	movs	r2, #2
 8003c22:	4013      	ands	r3, r2
 8003c24:	d1f1      	bne.n	8003c0a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2204      	movs	r2, #4
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	d100      	bne.n	8003c32 <HAL_RCC_OscConfig+0x29e>
 8003c30:	e0b4      	b.n	8003d9c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c32:	201f      	movs	r0, #31
 8003c34:	183b      	adds	r3, r7, r0
 8003c36:	2200      	movs	r2, #0
 8003c38:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c3a:	4b21      	ldr	r3, [pc, #132]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003c3c:	69da      	ldr	r2, [r3, #28]
 8003c3e:	2380      	movs	r3, #128	@ 0x80
 8003c40:	055b      	lsls	r3, r3, #21
 8003c42:	4013      	ands	r3, r2
 8003c44:	d110      	bne.n	8003c68 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c46:	4b1e      	ldr	r3, [pc, #120]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003c48:	69da      	ldr	r2, [r3, #28]
 8003c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003c4c:	2180      	movs	r1, #128	@ 0x80
 8003c4e:	0549      	lsls	r1, r1, #21
 8003c50:	430a      	orrs	r2, r1
 8003c52:	61da      	str	r2, [r3, #28]
 8003c54:	4b1a      	ldr	r3, [pc, #104]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003c56:	69da      	ldr	r2, [r3, #28]
 8003c58:	2380      	movs	r3, #128	@ 0x80
 8003c5a:	055b      	lsls	r3, r3, #21
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c62:	183b      	adds	r3, r7, r0
 8003c64:	2201      	movs	r2, #1
 8003c66:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c68:	4b18      	ldr	r3, [pc, #96]	@ (8003ccc <HAL_RCC_OscConfig+0x338>)
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	2380      	movs	r3, #128	@ 0x80
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	4013      	ands	r3, r2
 8003c72:	d11a      	bne.n	8003caa <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c74:	4b15      	ldr	r3, [pc, #84]	@ (8003ccc <HAL_RCC_OscConfig+0x338>)
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	4b14      	ldr	r3, [pc, #80]	@ (8003ccc <HAL_RCC_OscConfig+0x338>)
 8003c7a:	2180      	movs	r1, #128	@ 0x80
 8003c7c:	0049      	lsls	r1, r1, #1
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c82:	f7ff f9ed 	bl	8003060 <HAL_GetTick>
 8003c86:	0003      	movs	r3, r0
 8003c88:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c8c:	f7ff f9e8 	bl	8003060 <HAL_GetTick>
 8003c90:	0002      	movs	r2, r0
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b64      	cmp	r3, #100	@ 0x64
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e185      	b.n	8003faa <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8003ccc <HAL_RCC_OscConfig+0x338>)
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	2380      	movs	r3, #128	@ 0x80
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	d0f0      	beq.n	8003c8c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d10e      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x33c>
 8003cb2:	4b03      	ldr	r3, [pc, #12]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003cb4:	6a1a      	ldr	r2, [r3, #32]
 8003cb6:	4b02      	ldr	r3, [pc, #8]	@ (8003cc0 <HAL_RCC_OscConfig+0x32c>)
 8003cb8:	2101      	movs	r1, #1
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	621a      	str	r2, [r3, #32]
 8003cbe:	e035      	b.n	8003d2c <HAL_RCC_OscConfig+0x398>
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	fffeffff 	.word	0xfffeffff
 8003cc8:	fffbffff 	.word	0xfffbffff
 8003ccc:	40007000 	.word	0x40007000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d10c      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x35e>
 8003cd8:	4bb6      	ldr	r3, [pc, #728]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003cda:	6a1a      	ldr	r2, [r3, #32]
 8003cdc:	4bb5      	ldr	r3, [pc, #724]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003cde:	2101      	movs	r1, #1
 8003ce0:	438a      	bics	r2, r1
 8003ce2:	621a      	str	r2, [r3, #32]
 8003ce4:	4bb3      	ldr	r3, [pc, #716]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003ce6:	6a1a      	ldr	r2, [r3, #32]
 8003ce8:	4bb2      	ldr	r3, [pc, #712]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003cea:	2104      	movs	r1, #4
 8003cec:	438a      	bics	r2, r1
 8003cee:	621a      	str	r2, [r3, #32]
 8003cf0:	e01c      	b.n	8003d2c <HAL_RCC_OscConfig+0x398>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	2b05      	cmp	r3, #5
 8003cf8:	d10c      	bne.n	8003d14 <HAL_RCC_OscConfig+0x380>
 8003cfa:	4bae      	ldr	r3, [pc, #696]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003cfc:	6a1a      	ldr	r2, [r3, #32]
 8003cfe:	4bad      	ldr	r3, [pc, #692]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003d00:	2104      	movs	r1, #4
 8003d02:	430a      	orrs	r2, r1
 8003d04:	621a      	str	r2, [r3, #32]
 8003d06:	4bab      	ldr	r3, [pc, #684]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003d08:	6a1a      	ldr	r2, [r3, #32]
 8003d0a:	4baa      	ldr	r3, [pc, #680]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	621a      	str	r2, [r3, #32]
 8003d12:	e00b      	b.n	8003d2c <HAL_RCC_OscConfig+0x398>
 8003d14:	4ba7      	ldr	r3, [pc, #668]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003d16:	6a1a      	ldr	r2, [r3, #32]
 8003d18:	4ba6      	ldr	r3, [pc, #664]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	438a      	bics	r2, r1
 8003d1e:	621a      	str	r2, [r3, #32]
 8003d20:	4ba4      	ldr	r3, [pc, #656]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003d22:	6a1a      	ldr	r2, [r3, #32]
 8003d24:	4ba3      	ldr	r3, [pc, #652]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003d26:	2104      	movs	r1, #4
 8003d28:	438a      	bics	r2, r1
 8003d2a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d014      	beq.n	8003d5e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d34:	f7ff f994 	bl	8003060 <HAL_GetTick>
 8003d38:	0003      	movs	r3, r0
 8003d3a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d3c:	e009      	b.n	8003d52 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d3e:	f7ff f98f 	bl	8003060 <HAL_GetTick>
 8003d42:	0002      	movs	r2, r0
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	4a9b      	ldr	r2, [pc, #620]	@ (8003fb8 <HAL_RCC_OscConfig+0x624>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e12b      	b.n	8003faa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d52:	4b98      	ldr	r3, [pc, #608]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	2202      	movs	r2, #2
 8003d58:	4013      	ands	r3, r2
 8003d5a:	d0f0      	beq.n	8003d3e <HAL_RCC_OscConfig+0x3aa>
 8003d5c:	e013      	b.n	8003d86 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d5e:	f7ff f97f 	bl	8003060 <HAL_GetTick>
 8003d62:	0003      	movs	r3, r0
 8003d64:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d66:	e009      	b.n	8003d7c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d68:	f7ff f97a 	bl	8003060 <HAL_GetTick>
 8003d6c:	0002      	movs	r2, r0
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	4a91      	ldr	r2, [pc, #580]	@ (8003fb8 <HAL_RCC_OscConfig+0x624>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e116      	b.n	8003faa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d7c:	4b8d      	ldr	r3, [pc, #564]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	2202      	movs	r2, #2
 8003d82:	4013      	ands	r3, r2
 8003d84:	d1f0      	bne.n	8003d68 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d86:	231f      	movs	r3, #31
 8003d88:	18fb      	adds	r3, r7, r3
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d105      	bne.n	8003d9c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d90:	4b88      	ldr	r3, [pc, #544]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003d92:	69da      	ldr	r2, [r3, #28]
 8003d94:	4b87      	ldr	r3, [pc, #540]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003d96:	4989      	ldr	r1, [pc, #548]	@ (8003fbc <HAL_RCC_OscConfig+0x628>)
 8003d98:	400a      	ands	r2, r1
 8003d9a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2210      	movs	r2, #16
 8003da2:	4013      	ands	r3, r2
 8003da4:	d063      	beq.n	8003e6e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d12a      	bne.n	8003e04 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003dae:	4b81      	ldr	r3, [pc, #516]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003db0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003db2:	4b80      	ldr	r3, [pc, #512]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003db4:	2104      	movs	r1, #4
 8003db6:	430a      	orrs	r2, r1
 8003db8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003dba:	4b7e      	ldr	r3, [pc, #504]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003dbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003dbe:	4b7d      	ldr	r3, [pc, #500]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dc6:	f7ff f94b 	bl	8003060 <HAL_GetTick>
 8003dca:	0003      	movs	r3, r0
 8003dcc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003dd0:	f7ff f946 	bl	8003060 <HAL_GetTick>
 8003dd4:	0002      	movs	r2, r0
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e0e3      	b.n	8003faa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003de2:	4b74      	ldr	r3, [pc, #464]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003de6:	2202      	movs	r2, #2
 8003de8:	4013      	ands	r3, r2
 8003dea:	d0f1      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003dec:	4b71      	ldr	r3, [pc, #452]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003dee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003df0:	22f8      	movs	r2, #248	@ 0xf8
 8003df2:	4393      	bics	r3, r2
 8003df4:	0019      	movs	r1, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	00da      	lsls	r2, r3, #3
 8003dfc:	4b6d      	ldr	r3, [pc, #436]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	635a      	str	r2, [r3, #52]	@ 0x34
 8003e02:	e034      	b.n	8003e6e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	3305      	adds	r3, #5
 8003e0a:	d111      	bne.n	8003e30 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003e0c:	4b69      	ldr	r3, [pc, #420]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003e0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e10:	4b68      	ldr	r3, [pc, #416]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003e12:	2104      	movs	r1, #4
 8003e14:	438a      	bics	r2, r1
 8003e16:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003e18:	4b66      	ldr	r3, [pc, #408]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003e1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e1c:	22f8      	movs	r2, #248	@ 0xf8
 8003e1e:	4393      	bics	r3, r2
 8003e20:	0019      	movs	r1, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	00da      	lsls	r2, r3, #3
 8003e28:	4b62      	ldr	r3, [pc, #392]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003e2e:	e01e      	b.n	8003e6e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003e30:	4b60      	ldr	r3, [pc, #384]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003e32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e34:	4b5f      	ldr	r3, [pc, #380]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003e36:	2104      	movs	r1, #4
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003e3c:	4b5d      	ldr	r3, [pc, #372]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003e3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e40:	4b5c      	ldr	r3, [pc, #368]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003e42:	2101      	movs	r1, #1
 8003e44:	438a      	bics	r2, r1
 8003e46:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e48:	f7ff f90a 	bl	8003060 <HAL_GetTick>
 8003e4c:	0003      	movs	r3, r0
 8003e4e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003e52:	f7ff f905 	bl	8003060 <HAL_GetTick>
 8003e56:	0002      	movs	r2, r0
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e0a2      	b.n	8003faa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003e64:	4b53      	ldr	r3, [pc, #332]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003e66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e68:	2202      	movs	r2, #2
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	d1f1      	bne.n	8003e52 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d100      	bne.n	8003e78 <HAL_RCC_OscConfig+0x4e4>
 8003e76:	e097      	b.n	8003fa8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e78:	4b4e      	ldr	r3, [pc, #312]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	220c      	movs	r2, #12
 8003e7e:	4013      	ands	r3, r2
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d100      	bne.n	8003e86 <HAL_RCC_OscConfig+0x4f2>
 8003e84:	e06b      	b.n	8003f5e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d14c      	bne.n	8003f28 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e8e:	4b49      	ldr	r3, [pc, #292]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	4b48      	ldr	r3, [pc, #288]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003e94:	494a      	ldr	r1, [pc, #296]	@ (8003fc0 <HAL_RCC_OscConfig+0x62c>)
 8003e96:	400a      	ands	r2, r1
 8003e98:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9a:	f7ff f8e1 	bl	8003060 <HAL_GetTick>
 8003e9e:	0003      	movs	r3, r0
 8003ea0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ea4:	f7ff f8dc 	bl	8003060 <HAL_GetTick>
 8003ea8:	0002      	movs	r2, r0
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e079      	b.n	8003faa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eb6:	4b3f      	ldr	r3, [pc, #252]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	2380      	movs	r3, #128	@ 0x80
 8003ebc:	049b      	lsls	r3, r3, #18
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	d1f0      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ec2:	4b3c      	ldr	r3, [pc, #240]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec6:	220f      	movs	r2, #15
 8003ec8:	4393      	bics	r3, r2
 8003eca:	0019      	movs	r1, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ed0:	4b38      	ldr	r3, [pc, #224]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003ed6:	4b37      	ldr	r3, [pc, #220]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	4a3a      	ldr	r2, [pc, #232]	@ (8003fc4 <HAL_RCC_OscConfig+0x630>)
 8003edc:	4013      	ands	r3, r2
 8003ede:	0019      	movs	r1, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	4b32      	ldr	r3, [pc, #200]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003eec:	430a      	orrs	r2, r1
 8003eee:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ef0:	4b30      	ldr	r3, [pc, #192]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	4b2f      	ldr	r3, [pc, #188]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003ef6:	2180      	movs	r1, #128	@ 0x80
 8003ef8:	0449      	lsls	r1, r1, #17
 8003efa:	430a      	orrs	r2, r1
 8003efc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003efe:	f7ff f8af 	bl	8003060 <HAL_GetTick>
 8003f02:	0003      	movs	r3, r0
 8003f04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f08:	f7ff f8aa 	bl	8003060 <HAL_GetTick>
 8003f0c:	0002      	movs	r2, r0
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e047      	b.n	8003faa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f1a:	4b26      	ldr	r3, [pc, #152]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	2380      	movs	r3, #128	@ 0x80
 8003f20:	049b      	lsls	r3, r3, #18
 8003f22:	4013      	ands	r3, r2
 8003f24:	d0f0      	beq.n	8003f08 <HAL_RCC_OscConfig+0x574>
 8003f26:	e03f      	b.n	8003fa8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f28:	4b22      	ldr	r3, [pc, #136]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	4b21      	ldr	r3, [pc, #132]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003f2e:	4924      	ldr	r1, [pc, #144]	@ (8003fc0 <HAL_RCC_OscConfig+0x62c>)
 8003f30:	400a      	ands	r2, r1
 8003f32:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f34:	f7ff f894 	bl	8003060 <HAL_GetTick>
 8003f38:	0003      	movs	r3, r0
 8003f3a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f3c:	e008      	b.n	8003f50 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f3e:	f7ff f88f 	bl	8003060 <HAL_GetTick>
 8003f42:	0002      	movs	r2, r0
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e02c      	b.n	8003faa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f50:	4b18      	ldr	r3, [pc, #96]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	2380      	movs	r3, #128	@ 0x80
 8003f56:	049b      	lsls	r3, r3, #18
 8003f58:	4013      	ands	r3, r2
 8003f5a:	d1f0      	bne.n	8003f3e <HAL_RCC_OscConfig+0x5aa>
 8003f5c:	e024      	b.n	8003fa8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d101      	bne.n	8003f6a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e01f      	b.n	8003faa <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003f6a:	4b12      	ldr	r3, [pc, #72]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003f70:	4b10      	ldr	r3, [pc, #64]	@ (8003fb4 <HAL_RCC_OscConfig+0x620>)
 8003f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f74:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	2380      	movs	r3, #128	@ 0x80
 8003f7a:	025b      	lsls	r3, r3, #9
 8003f7c:	401a      	ands	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d10e      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	220f      	movs	r2, #15
 8003f8a:	401a      	ands	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d107      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	23f0      	movs	r3, #240	@ 0xf0
 8003f98:	039b      	lsls	r3, r3, #14
 8003f9a:	401a      	ands	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d001      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e000      	b.n	8003faa <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	0018      	movs	r0, r3
 8003fac:	46bd      	mov	sp, r7
 8003fae:	b008      	add	sp, #32
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	46c0      	nop			@ (mov r8, r8)
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	00001388 	.word	0x00001388
 8003fbc:	efffffff 	.word	0xefffffff
 8003fc0:	feffffff 	.word	0xfeffffff
 8003fc4:	ffc2ffff 	.word	0xffc2ffff

08003fc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d101      	bne.n	8003fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e0b3      	b.n	8004144 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fdc:	4b5b      	ldr	r3, [pc, #364]	@ (800414c <HAL_RCC_ClockConfig+0x184>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d911      	bls.n	800400e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fea:	4b58      	ldr	r3, [pc, #352]	@ (800414c <HAL_RCC_ClockConfig+0x184>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	4393      	bics	r3, r2
 8003ff2:	0019      	movs	r1, r3
 8003ff4:	4b55      	ldr	r3, [pc, #340]	@ (800414c <HAL_RCC_ClockConfig+0x184>)
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ffc:	4b53      	ldr	r3, [pc, #332]	@ (800414c <HAL_RCC_ClockConfig+0x184>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2201      	movs	r2, #1
 8004002:	4013      	ands	r3, r2
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	429a      	cmp	r2, r3
 8004008:	d001      	beq.n	800400e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e09a      	b.n	8004144 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2202      	movs	r2, #2
 8004014:	4013      	ands	r3, r2
 8004016:	d015      	beq.n	8004044 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2204      	movs	r2, #4
 800401e:	4013      	ands	r3, r2
 8004020:	d006      	beq.n	8004030 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004022:	4b4b      	ldr	r3, [pc, #300]	@ (8004150 <HAL_RCC_ClockConfig+0x188>)
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	4b4a      	ldr	r3, [pc, #296]	@ (8004150 <HAL_RCC_ClockConfig+0x188>)
 8004028:	21e0      	movs	r1, #224	@ 0xe0
 800402a:	00c9      	lsls	r1, r1, #3
 800402c:	430a      	orrs	r2, r1
 800402e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004030:	4b47      	ldr	r3, [pc, #284]	@ (8004150 <HAL_RCC_ClockConfig+0x188>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	22f0      	movs	r2, #240	@ 0xf0
 8004036:	4393      	bics	r3, r2
 8004038:	0019      	movs	r1, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	4b44      	ldr	r3, [pc, #272]	@ (8004150 <HAL_RCC_ClockConfig+0x188>)
 8004040:	430a      	orrs	r2, r1
 8004042:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2201      	movs	r2, #1
 800404a:	4013      	ands	r3, r2
 800404c:	d040      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d107      	bne.n	8004066 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004056:	4b3e      	ldr	r3, [pc, #248]	@ (8004150 <HAL_RCC_ClockConfig+0x188>)
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	2380      	movs	r3, #128	@ 0x80
 800405c:	029b      	lsls	r3, r3, #10
 800405e:	4013      	ands	r3, r2
 8004060:	d114      	bne.n	800408c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e06e      	b.n	8004144 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2b02      	cmp	r3, #2
 800406c:	d107      	bne.n	800407e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800406e:	4b38      	ldr	r3, [pc, #224]	@ (8004150 <HAL_RCC_ClockConfig+0x188>)
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	2380      	movs	r3, #128	@ 0x80
 8004074:	049b      	lsls	r3, r3, #18
 8004076:	4013      	ands	r3, r2
 8004078:	d108      	bne.n	800408c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e062      	b.n	8004144 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800407e:	4b34      	ldr	r3, [pc, #208]	@ (8004150 <HAL_RCC_ClockConfig+0x188>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2202      	movs	r2, #2
 8004084:	4013      	ands	r3, r2
 8004086:	d101      	bne.n	800408c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e05b      	b.n	8004144 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800408c:	4b30      	ldr	r3, [pc, #192]	@ (8004150 <HAL_RCC_ClockConfig+0x188>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	2203      	movs	r2, #3
 8004092:	4393      	bics	r3, r2
 8004094:	0019      	movs	r1, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	4b2d      	ldr	r3, [pc, #180]	@ (8004150 <HAL_RCC_ClockConfig+0x188>)
 800409c:	430a      	orrs	r2, r1
 800409e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040a0:	f7fe ffde 	bl	8003060 <HAL_GetTick>
 80040a4:	0003      	movs	r3, r0
 80040a6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040a8:	e009      	b.n	80040be <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040aa:	f7fe ffd9 	bl	8003060 <HAL_GetTick>
 80040ae:	0002      	movs	r2, r0
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	4a27      	ldr	r2, [pc, #156]	@ (8004154 <HAL_RCC_ClockConfig+0x18c>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e042      	b.n	8004144 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040be:	4b24      	ldr	r3, [pc, #144]	@ (8004150 <HAL_RCC_ClockConfig+0x188>)
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	220c      	movs	r2, #12
 80040c4:	401a      	ands	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d1ec      	bne.n	80040aa <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040d0:	4b1e      	ldr	r3, [pc, #120]	@ (800414c <HAL_RCC_ClockConfig+0x184>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2201      	movs	r2, #1
 80040d6:	4013      	ands	r3, r2
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d211      	bcs.n	8004102 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040de:	4b1b      	ldr	r3, [pc, #108]	@ (800414c <HAL_RCC_ClockConfig+0x184>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2201      	movs	r2, #1
 80040e4:	4393      	bics	r3, r2
 80040e6:	0019      	movs	r1, r3
 80040e8:	4b18      	ldr	r3, [pc, #96]	@ (800414c <HAL_RCC_ClockConfig+0x184>)
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f0:	4b16      	ldr	r3, [pc, #88]	@ (800414c <HAL_RCC_ClockConfig+0x184>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2201      	movs	r2, #1
 80040f6:	4013      	ands	r3, r2
 80040f8:	683a      	ldr	r2, [r7, #0]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d001      	beq.n	8004102 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e020      	b.n	8004144 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2204      	movs	r2, #4
 8004108:	4013      	ands	r3, r2
 800410a:	d009      	beq.n	8004120 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800410c:	4b10      	ldr	r3, [pc, #64]	@ (8004150 <HAL_RCC_ClockConfig+0x188>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	4a11      	ldr	r2, [pc, #68]	@ (8004158 <HAL_RCC_ClockConfig+0x190>)
 8004112:	4013      	ands	r3, r2
 8004114:	0019      	movs	r1, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	4b0d      	ldr	r3, [pc, #52]	@ (8004150 <HAL_RCC_ClockConfig+0x188>)
 800411c:	430a      	orrs	r2, r1
 800411e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004120:	f000 f820 	bl	8004164 <HAL_RCC_GetSysClockFreq>
 8004124:	0001      	movs	r1, r0
 8004126:	4b0a      	ldr	r3, [pc, #40]	@ (8004150 <HAL_RCC_ClockConfig+0x188>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	091b      	lsrs	r3, r3, #4
 800412c:	220f      	movs	r2, #15
 800412e:	4013      	ands	r3, r2
 8004130:	4a0a      	ldr	r2, [pc, #40]	@ (800415c <HAL_RCC_ClockConfig+0x194>)
 8004132:	5cd3      	ldrb	r3, [r2, r3]
 8004134:	000a      	movs	r2, r1
 8004136:	40da      	lsrs	r2, r3
 8004138:	4b09      	ldr	r3, [pc, #36]	@ (8004160 <HAL_RCC_ClockConfig+0x198>)
 800413a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800413c:	2003      	movs	r0, #3
 800413e:	f7fe ff49 	bl	8002fd4 <HAL_InitTick>
  
  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	0018      	movs	r0, r3
 8004146:	46bd      	mov	sp, r7
 8004148:	b004      	add	sp, #16
 800414a:	bd80      	pop	{r7, pc}
 800414c:	40022000 	.word	0x40022000
 8004150:	40021000 	.word	0x40021000
 8004154:	00001388 	.word	0x00001388
 8004158:	fffff8ff 	.word	0xfffff8ff
 800415c:	080090a0 	.word	0x080090a0
 8004160:	20000048 	.word	0x20000048

08004164 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800416a:	2300      	movs	r3, #0
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	2300      	movs	r3, #0
 8004170:	60bb      	str	r3, [r7, #8]
 8004172:	2300      	movs	r3, #0
 8004174:	617b      	str	r3, [r7, #20]
 8004176:	2300      	movs	r3, #0
 8004178:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800417a:	2300      	movs	r3, #0
 800417c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800417e:	4b20      	ldr	r3, [pc, #128]	@ (8004200 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	220c      	movs	r2, #12
 8004188:	4013      	ands	r3, r2
 800418a:	2b04      	cmp	r3, #4
 800418c:	d002      	beq.n	8004194 <HAL_RCC_GetSysClockFreq+0x30>
 800418e:	2b08      	cmp	r3, #8
 8004190:	d003      	beq.n	800419a <HAL_RCC_GetSysClockFreq+0x36>
 8004192:	e02c      	b.n	80041ee <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004194:	4b1b      	ldr	r3, [pc, #108]	@ (8004204 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004196:	613b      	str	r3, [r7, #16]
      break;
 8004198:	e02c      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	0c9b      	lsrs	r3, r3, #18
 800419e:	220f      	movs	r2, #15
 80041a0:	4013      	ands	r3, r2
 80041a2:	4a19      	ldr	r2, [pc, #100]	@ (8004208 <HAL_RCC_GetSysClockFreq+0xa4>)
 80041a4:	5cd3      	ldrb	r3, [r2, r3]
 80041a6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80041a8:	4b15      	ldr	r3, [pc, #84]	@ (8004200 <HAL_RCC_GetSysClockFreq+0x9c>)
 80041aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ac:	220f      	movs	r2, #15
 80041ae:	4013      	ands	r3, r2
 80041b0:	4a16      	ldr	r2, [pc, #88]	@ (800420c <HAL_RCC_GetSysClockFreq+0xa8>)
 80041b2:	5cd3      	ldrb	r3, [r2, r3]
 80041b4:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	2380      	movs	r3, #128	@ 0x80
 80041ba:	025b      	lsls	r3, r3, #9
 80041bc:	4013      	ands	r3, r2
 80041be:	d009      	beq.n	80041d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041c0:	68b9      	ldr	r1, [r7, #8]
 80041c2:	4810      	ldr	r0, [pc, #64]	@ (8004204 <HAL_RCC_GetSysClockFreq+0xa0>)
 80041c4:	f7fb ffbc 	bl	8000140 <__udivsi3>
 80041c8:	0003      	movs	r3, r0
 80041ca:	001a      	movs	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4353      	muls	r3, r2
 80041d0:	617b      	str	r3, [r7, #20]
 80041d2:	e009      	b.n	80041e8 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80041d4:	6879      	ldr	r1, [r7, #4]
 80041d6:	000a      	movs	r2, r1
 80041d8:	0152      	lsls	r2, r2, #5
 80041da:	1a52      	subs	r2, r2, r1
 80041dc:	0193      	lsls	r3, r2, #6
 80041de:	1a9b      	subs	r3, r3, r2
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	185b      	adds	r3, r3, r1
 80041e4:	021b      	lsls	r3, r3, #8
 80041e6:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	613b      	str	r3, [r7, #16]
      break;
 80041ec:	e002      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041ee:	4b05      	ldr	r3, [pc, #20]	@ (8004204 <HAL_RCC_GetSysClockFreq+0xa0>)
 80041f0:	613b      	str	r3, [r7, #16]
      break;
 80041f2:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80041f4:	693b      	ldr	r3, [r7, #16]
}
 80041f6:	0018      	movs	r0, r3
 80041f8:	46bd      	mov	sp, r7
 80041fa:	b006      	add	sp, #24
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	46c0      	nop			@ (mov r8, r8)
 8004200:	40021000 	.word	0x40021000
 8004204:	007a1200 	.word	0x007a1200
 8004208:	080090b8 	.word	0x080090b8
 800420c:	080090c8 	.word	0x080090c8

08004210 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004214:	4b02      	ldr	r3, [pc, #8]	@ (8004220 <HAL_RCC_GetHCLKFreq+0x10>)
 8004216:	681b      	ldr	r3, [r3, #0]
}
 8004218:	0018      	movs	r0, r3
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	46c0      	nop			@ (mov r8, r8)
 8004220:	20000048 	.word	0x20000048

08004224 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004228:	f7ff fff2 	bl	8004210 <HAL_RCC_GetHCLKFreq>
 800422c:	0001      	movs	r1, r0
 800422e:	4b06      	ldr	r3, [pc, #24]	@ (8004248 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	0a1b      	lsrs	r3, r3, #8
 8004234:	2207      	movs	r2, #7
 8004236:	4013      	ands	r3, r2
 8004238:	4a04      	ldr	r2, [pc, #16]	@ (800424c <HAL_RCC_GetPCLK1Freq+0x28>)
 800423a:	5cd3      	ldrb	r3, [r2, r3]
 800423c:	40d9      	lsrs	r1, r3
 800423e:	000b      	movs	r3, r1
}    
 8004240:	0018      	movs	r0, r3
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	46c0      	nop			@ (mov r8, r8)
 8004248:	40021000 	.word	0x40021000
 800424c:	080090b0 	.word	0x080090b0

08004250 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004258:	2300      	movs	r3, #0
 800425a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	2380      	movs	r3, #128	@ 0x80
 8004266:	025b      	lsls	r3, r3, #9
 8004268:	4013      	ands	r3, r2
 800426a:	d100      	bne.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800426c:	e08e      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800426e:	2017      	movs	r0, #23
 8004270:	183b      	adds	r3, r7, r0
 8004272:	2200      	movs	r2, #0
 8004274:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004276:	4b5f      	ldr	r3, [pc, #380]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004278:	69da      	ldr	r2, [r3, #28]
 800427a:	2380      	movs	r3, #128	@ 0x80
 800427c:	055b      	lsls	r3, r3, #21
 800427e:	4013      	ands	r3, r2
 8004280:	d110      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004282:	4b5c      	ldr	r3, [pc, #368]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004284:	69da      	ldr	r2, [r3, #28]
 8004286:	4b5b      	ldr	r3, [pc, #364]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004288:	2180      	movs	r1, #128	@ 0x80
 800428a:	0549      	lsls	r1, r1, #21
 800428c:	430a      	orrs	r2, r1
 800428e:	61da      	str	r2, [r3, #28]
 8004290:	4b58      	ldr	r3, [pc, #352]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004292:	69da      	ldr	r2, [r3, #28]
 8004294:	2380      	movs	r3, #128	@ 0x80
 8004296:	055b      	lsls	r3, r3, #21
 8004298:	4013      	ands	r3, r2
 800429a:	60bb      	str	r3, [r7, #8]
 800429c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800429e:	183b      	adds	r3, r7, r0
 80042a0:	2201      	movs	r2, #1
 80042a2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a4:	4b54      	ldr	r3, [pc, #336]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	2380      	movs	r3, #128	@ 0x80
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	4013      	ands	r3, r2
 80042ae:	d11a      	bne.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042b0:	4b51      	ldr	r3, [pc, #324]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	4b50      	ldr	r3, [pc, #320]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80042b6:	2180      	movs	r1, #128	@ 0x80
 80042b8:	0049      	lsls	r1, r1, #1
 80042ba:	430a      	orrs	r2, r1
 80042bc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042be:	f7fe fecf 	bl	8003060 <HAL_GetTick>
 80042c2:	0003      	movs	r3, r0
 80042c4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c6:	e008      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042c8:	f7fe feca 	bl	8003060 <HAL_GetTick>
 80042cc:	0002      	movs	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b64      	cmp	r3, #100	@ 0x64
 80042d4:	d901      	bls.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e087      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042da:	4b47      	ldr	r3, [pc, #284]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	2380      	movs	r3, #128	@ 0x80
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	4013      	ands	r3, r2
 80042e4:	d0f0      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042e6:	4b43      	ldr	r3, [pc, #268]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042e8:	6a1a      	ldr	r2, [r3, #32]
 80042ea:	23c0      	movs	r3, #192	@ 0xc0
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4013      	ands	r3, r2
 80042f0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d034      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	23c0      	movs	r3, #192	@ 0xc0
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4013      	ands	r3, r2
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	429a      	cmp	r2, r3
 8004306:	d02c      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004308:	4b3a      	ldr	r3, [pc, #232]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	4a3b      	ldr	r2, [pc, #236]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800430e:	4013      	ands	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004312:	4b38      	ldr	r3, [pc, #224]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004314:	6a1a      	ldr	r2, [r3, #32]
 8004316:	4b37      	ldr	r3, [pc, #220]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004318:	2180      	movs	r1, #128	@ 0x80
 800431a:	0249      	lsls	r1, r1, #9
 800431c:	430a      	orrs	r2, r1
 800431e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004320:	4b34      	ldr	r3, [pc, #208]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004322:	6a1a      	ldr	r2, [r3, #32]
 8004324:	4b33      	ldr	r3, [pc, #204]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004326:	4936      	ldr	r1, [pc, #216]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004328:	400a      	ands	r2, r1
 800432a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800432c:	4b31      	ldr	r3, [pc, #196]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2201      	movs	r2, #1
 8004336:	4013      	ands	r3, r2
 8004338:	d013      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433a:	f7fe fe91 	bl	8003060 <HAL_GetTick>
 800433e:	0003      	movs	r3, r0
 8004340:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004342:	e009      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004344:	f7fe fe8c 	bl	8003060 <HAL_GetTick>
 8004348:	0002      	movs	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	4a2d      	ldr	r2, [pc, #180]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d901      	bls.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e048      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004358:	4b26      	ldr	r3, [pc, #152]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	2202      	movs	r2, #2
 800435e:	4013      	ands	r3, r2
 8004360:	d0f0      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004362:	4b24      	ldr	r3, [pc, #144]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	4a25      	ldr	r2, [pc, #148]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004368:	4013      	ands	r3, r2
 800436a:	0019      	movs	r1, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	4b20      	ldr	r3, [pc, #128]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004372:	430a      	orrs	r2, r1
 8004374:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004376:	2317      	movs	r3, #23
 8004378:	18fb      	adds	r3, r7, r3
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d105      	bne.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004380:	4b1c      	ldr	r3, [pc, #112]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004382:	69da      	ldr	r2, [r3, #28]
 8004384:	4b1b      	ldr	r3, [pc, #108]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004386:	4920      	ldr	r1, [pc, #128]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004388:	400a      	ands	r2, r1
 800438a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2201      	movs	r2, #1
 8004392:	4013      	ands	r3, r2
 8004394:	d009      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004396:	4b17      	ldr	r3, [pc, #92]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800439a:	2203      	movs	r2, #3
 800439c:	4393      	bics	r3, r2
 800439e:	0019      	movs	r1, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	4b13      	ldr	r3, [pc, #76]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043a6:	430a      	orrs	r2, r1
 80043a8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2220      	movs	r2, #32
 80043b0:	4013      	ands	r3, r2
 80043b2:	d009      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043b4:	4b0f      	ldr	r3, [pc, #60]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b8:	2210      	movs	r2, #16
 80043ba:	4393      	bics	r3, r2
 80043bc:	0019      	movs	r1, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68da      	ldr	r2, [r3, #12]
 80043c2:	4b0c      	ldr	r3, [pc, #48]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043c4:	430a      	orrs	r2, r1
 80043c6:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	2380      	movs	r3, #128	@ 0x80
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	4013      	ands	r3, r2
 80043d2:	d009      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80043d4:	4b07      	ldr	r3, [pc, #28]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d8:	2240      	movs	r2, #64	@ 0x40
 80043da:	4393      	bics	r3, r2
 80043dc:	0019      	movs	r1, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691a      	ldr	r2, [r3, #16]
 80043e2:	4b04      	ldr	r3, [pc, #16]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043e4:	430a      	orrs	r2, r1
 80043e6:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	0018      	movs	r0, r3
 80043ec:	46bd      	mov	sp, r7
 80043ee:	b006      	add	sp, #24
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	46c0      	nop			@ (mov r8, r8)
 80043f4:	40021000 	.word	0x40021000
 80043f8:	40007000 	.word	0x40007000
 80043fc:	fffffcff 	.word	0xfffffcff
 8004400:	fffeffff 	.word	0xfffeffff
 8004404:	00001388 	.word	0x00001388
 8004408:	efffffff 	.word	0xefffffff

0800440c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800440c:	b5b0      	push	{r4, r5, r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004414:	230f      	movs	r3, #15
 8004416:	18fb      	adds	r3, r7, r3
 8004418:	2201      	movs	r2, #1
 800441a:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e081      	b.n	800452a <HAL_RTC_Init+0x11e>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	7f5b      	ldrb	r3, [r3, #29]
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	d106      	bne.n	800443e <HAL_RTC_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	0018      	movs	r0, r3
 800443a:	f7fe fc2f 	bl	8002c9c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2202      	movs	r2, #2
 8004442:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	2210      	movs	r2, #16
 800444c:	4013      	ands	r3, r2
 800444e:	2b10      	cmp	r3, #16
 8004450:	d05c      	beq.n	800450c <HAL_RTC_Init+0x100>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	22ca      	movs	r2, #202	@ 0xca
 8004458:	625a      	str	r2, [r3, #36]	@ 0x24
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2253      	movs	r2, #83	@ 0x53
 8004460:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004462:	250f      	movs	r5, #15
 8004464:	197c      	adds	r4, r7, r5
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	0018      	movs	r0, r3
 800446a:	f000 f88f 	bl	800458c <RTC_EnterInitMode>
 800446e:	0003      	movs	r3, r0
 8004470:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8004472:	0028      	movs	r0, r5
 8004474:	183b      	adds	r3, r7, r0
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d12c      	bne.n	80044d6 <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689a      	ldr	r2, [r3, #8]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	492b      	ldr	r1, [pc, #172]	@ (8004534 <HAL_RTC_Init+0x128>)
 8004488:	400a      	ands	r2, r1
 800448a:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6899      	ldr	r1, [r3, #8]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	431a      	orrs	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	68d2      	ldr	r2, [r2, #12]
 80044b2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6919      	ldr	r1, [r3, #16]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	041a      	lsls	r2, r3, #16
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80044c8:	183c      	adds	r4, r7, r0
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	0018      	movs	r0, r3
 80044ce:	f000 f8a0 	bl	8004612 <RTC_ExitInitMode>
 80044d2:	0003      	movs	r3, r0
 80044d4:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80044d6:	230f      	movs	r3, #15
 80044d8:	18fb      	adds	r3, r7, r3
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d110      	bne.n	8004502 <HAL_RTC_Init+0xf6>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4913      	ldr	r1, [pc, #76]	@ (8004538 <HAL_RTC_Init+0x12c>)
 80044ec:	400a      	ands	r2, r1
 80044ee:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	699a      	ldr	r2, [r3, #24]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	22ff      	movs	r2, #255	@ 0xff
 8004508:	625a      	str	r2, [r3, #36]	@ 0x24
 800450a:	e003      	b.n	8004514 <HAL_RTC_Init+0x108>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800450c:	230f      	movs	r3, #15
 800450e:	18fb      	adds	r3, r7, r3
 8004510:	2200      	movs	r2, #0
 8004512:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8004514:	230f      	movs	r3, #15
 8004516:	18fb      	adds	r3, r7, r3
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d102      	bne.n	8004524 <HAL_RTC_Init+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2201      	movs	r2, #1
 8004522:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004524:	230f      	movs	r3, #15
 8004526:	18fb      	adds	r3, r7, r3
 8004528:	781b      	ldrb	r3, [r3, #0]
}
 800452a:	0018      	movs	r0, r3
 800452c:	46bd      	mov	sp, r7
 800452e:	b004      	add	sp, #16
 8004530:	bdb0      	pop	{r4, r5, r7, pc}
 8004532:	46c0      	nop			@ (mov r8, r8)
 8004534:	ff8fffbf 	.word	0xff8fffbf
 8004538:	fffbffff 	.word	0xfffbffff

0800453c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a0e      	ldr	r2, [pc, #56]	@ (8004588 <HAL_RTC_WaitForSynchro+0x4c>)
 800454e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004550:	f7fe fd86 	bl	8003060 <HAL_GetTick>
 8004554:	0003      	movs	r3, r0
 8004556:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004558:	e00a      	b.n	8004570 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800455a:	f7fe fd81 	bl	8003060 <HAL_GetTick>
 800455e:	0002      	movs	r2, r0
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	1ad2      	subs	r2, r2, r3
 8004564:	23fa      	movs	r3, #250	@ 0xfa
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	429a      	cmp	r2, r3
 800456a:	d901      	bls.n	8004570 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e006      	b.n	800457e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	2220      	movs	r2, #32
 8004578:	4013      	ands	r3, r2
 800457a:	d0ee      	beq.n	800455a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	0018      	movs	r0, r3
 8004580:	46bd      	mov	sp, r7
 8004582:	b004      	add	sp, #16
 8004584:	bd80      	pop	{r7, pc}
 8004586:	46c0      	nop			@ (mov r8, r8)
 8004588:	00017959 	.word	0x00017959

0800458c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004594:	2300      	movs	r3, #0
 8004596:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004598:	230f      	movs	r3, #15
 800459a:	18fb      	adds	r3, r7, r3
 800459c:	2200      	movs	r2, #0
 800459e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	2240      	movs	r2, #64	@ 0x40
 80045a8:	4013      	ands	r3, r2
 80045aa:	d12b      	bne.n	8004604 <RTC_EnterInitMode+0x78>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68da      	ldr	r2, [r3, #12]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2180      	movs	r1, #128	@ 0x80
 80045b8:	430a      	orrs	r2, r1
 80045ba:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045bc:	f7fe fd50 	bl	8003060 <HAL_GetTick>
 80045c0:	0003      	movs	r3, r0
 80045c2:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80045c4:	e013      	b.n	80045ee <RTC_EnterInitMode+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80045c6:	f7fe fd4b 	bl	8003060 <HAL_GetTick>
 80045ca:	0002      	movs	r2, r0
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	1ad2      	subs	r2, r2, r3
 80045d0:	200f      	movs	r0, #15
 80045d2:	183b      	adds	r3, r7, r0
 80045d4:	1839      	adds	r1, r7, r0
 80045d6:	7809      	ldrb	r1, [r1, #0]
 80045d8:	7019      	strb	r1, [r3, #0]
 80045da:	23fa      	movs	r3, #250	@ 0xfa
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	429a      	cmp	r2, r3
 80045e0:	d905      	bls.n	80045ee <RTC_EnterInitMode+0x62>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2204      	movs	r2, #4
 80045e6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80045e8:	183b      	adds	r3, r7, r0
 80045ea:	2201      	movs	r2, #1
 80045ec:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	2240      	movs	r2, #64	@ 0x40
 80045f6:	4013      	ands	r3, r2
 80045f8:	d104      	bne.n	8004604 <RTC_EnterInitMode+0x78>
 80045fa:	230f      	movs	r3, #15
 80045fc:	18fb      	adds	r3, r7, r3
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d1e0      	bne.n	80045c6 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8004604:	230f      	movs	r3, #15
 8004606:	18fb      	adds	r3, r7, r3
 8004608:	781b      	ldrb	r3, [r3, #0]
}
 800460a:	0018      	movs	r0, r3
 800460c:	46bd      	mov	sp, r7
 800460e:	b004      	add	sp, #16
 8004610:	bd80      	pop	{r7, pc}

08004612 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004612:	b590      	push	{r4, r7, lr}
 8004614:	b085      	sub	sp, #20
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800461a:	240f      	movs	r4, #15
 800461c:	193b      	adds	r3, r7, r4
 800461e:	2200      	movs	r2, #0
 8004620:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68da      	ldr	r2, [r3, #12]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2180      	movs	r1, #128	@ 0x80
 800462e:	438a      	bics	r2, r1
 8004630:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	2220      	movs	r2, #32
 800463a:	4013      	ands	r3, r2
 800463c:	d10b      	bne.n	8004656 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	0018      	movs	r0, r3
 8004642:	f7ff ff7b 	bl	800453c <HAL_RTC_WaitForSynchro>
 8004646:	1e03      	subs	r3, r0, #0
 8004648:	d005      	beq.n	8004656 <RTC_ExitInitMode+0x44>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2204      	movs	r2, #4
 800464e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004650:	193b      	adds	r3, r7, r4
 8004652:	2201      	movs	r2, #1
 8004654:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8004656:	230f      	movs	r3, #15
 8004658:	18fb      	adds	r3, r7, r3
 800465a:	781b      	ldrb	r3, [r3, #0]
}
 800465c:	0018      	movs	r0, r3
 800465e:	46bd      	mov	sp, r7
 8004660:	b005      	add	sp, #20
 8004662:	bd90      	pop	{r4, r7, pc}

08004664 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e042      	b.n	80046fc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	223d      	movs	r2, #61	@ 0x3d
 800467a:	5c9b      	ldrb	r3, [r3, r2]
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d107      	bne.n	8004692 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	223c      	movs	r2, #60	@ 0x3c
 8004686:	2100      	movs	r1, #0
 8004688:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	0018      	movs	r0, r3
 800468e:	f7fe fb1d 	bl	8002ccc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	223d      	movs	r2, #61	@ 0x3d
 8004696:	2102      	movs	r1, #2
 8004698:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3304      	adds	r3, #4
 80046a2:	0019      	movs	r1, r3
 80046a4:	0010      	movs	r0, r2
 80046a6:	f000 f877 	bl	8004798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2246      	movs	r2, #70	@ 0x46
 80046ae:	2101      	movs	r1, #1
 80046b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	223e      	movs	r2, #62	@ 0x3e
 80046b6:	2101      	movs	r1, #1
 80046b8:	5499      	strb	r1, [r3, r2]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	223f      	movs	r2, #63	@ 0x3f
 80046be:	2101      	movs	r1, #1
 80046c0:	5499      	strb	r1, [r3, r2]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2240      	movs	r2, #64	@ 0x40
 80046c6:	2101      	movs	r1, #1
 80046c8:	5499      	strb	r1, [r3, r2]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2241      	movs	r2, #65	@ 0x41
 80046ce:	2101      	movs	r1, #1
 80046d0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2242      	movs	r2, #66	@ 0x42
 80046d6:	2101      	movs	r1, #1
 80046d8:	5499      	strb	r1, [r3, r2]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2243      	movs	r2, #67	@ 0x43
 80046de:	2101      	movs	r1, #1
 80046e0:	5499      	strb	r1, [r3, r2]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2244      	movs	r2, #68	@ 0x44
 80046e6:	2101      	movs	r1, #1
 80046e8:	5499      	strb	r1, [r3, r2]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2245      	movs	r2, #69	@ 0x45
 80046ee:	2101      	movs	r1, #1
 80046f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	223d      	movs	r2, #61	@ 0x3d
 80046f6:	2101      	movs	r1, #1
 80046f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	0018      	movs	r0, r3
 80046fe:	46bd      	mov	sp, r7
 8004700:	b002      	add	sp, #8
 8004702:	bd80      	pop	{r7, pc}

08004704 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	223d      	movs	r2, #61	@ 0x3d
 8004710:	5c9b      	ldrb	r3, [r3, r2]
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b01      	cmp	r3, #1
 8004716:	d001      	beq.n	800471c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e033      	b.n	8004784 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	223d      	movs	r2, #61	@ 0x3d
 8004720:	2102      	movs	r1, #2
 8004722:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a18      	ldr	r2, [pc, #96]	@ (800478c <HAL_TIM_Base_Start+0x88>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d00f      	beq.n	800474e <HAL_TIM_Base_Start+0x4a>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	2380      	movs	r3, #128	@ 0x80
 8004734:	05db      	lsls	r3, r3, #23
 8004736:	429a      	cmp	r2, r3
 8004738:	d009      	beq.n	800474e <HAL_TIM_Base_Start+0x4a>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a14      	ldr	r2, [pc, #80]	@ (8004790 <HAL_TIM_Base_Start+0x8c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d004      	beq.n	800474e <HAL_TIM_Base_Start+0x4a>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a12      	ldr	r2, [pc, #72]	@ (8004794 <HAL_TIM_Base_Start+0x90>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d111      	bne.n	8004772 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	2207      	movs	r2, #7
 8004756:	4013      	ands	r3, r2
 8004758:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2b06      	cmp	r3, #6
 800475e:	d010      	beq.n	8004782 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2101      	movs	r1, #1
 800476c:	430a      	orrs	r2, r1
 800476e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004770:	e007      	b.n	8004782 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2101      	movs	r1, #1
 800477e:	430a      	orrs	r2, r1
 8004780:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	0018      	movs	r0, r3
 8004786:	46bd      	mov	sp, r7
 8004788:	b004      	add	sp, #16
 800478a:	bd80      	pop	{r7, pc}
 800478c:	40012c00 	.word	0x40012c00
 8004790:	40000400 	.word	0x40000400
 8004794:	40014000 	.word	0x40014000

08004798 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a3b      	ldr	r2, [pc, #236]	@ (8004898 <TIM_Base_SetConfig+0x100>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d008      	beq.n	80047c2 <TIM_Base_SetConfig+0x2a>
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	2380      	movs	r3, #128	@ 0x80
 80047b4:	05db      	lsls	r3, r3, #23
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d003      	beq.n	80047c2 <TIM_Base_SetConfig+0x2a>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a37      	ldr	r2, [pc, #220]	@ (800489c <TIM_Base_SetConfig+0x104>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d108      	bne.n	80047d4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2270      	movs	r2, #112	@ 0x70
 80047c6:	4393      	bics	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a30      	ldr	r2, [pc, #192]	@ (8004898 <TIM_Base_SetConfig+0x100>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d018      	beq.n	800480e <TIM_Base_SetConfig+0x76>
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	2380      	movs	r3, #128	@ 0x80
 80047e0:	05db      	lsls	r3, r3, #23
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d013      	beq.n	800480e <TIM_Base_SetConfig+0x76>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a2c      	ldr	r2, [pc, #176]	@ (800489c <TIM_Base_SetConfig+0x104>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d00f      	beq.n	800480e <TIM_Base_SetConfig+0x76>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a2b      	ldr	r2, [pc, #172]	@ (80048a0 <TIM_Base_SetConfig+0x108>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d00b      	beq.n	800480e <TIM_Base_SetConfig+0x76>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a2a      	ldr	r2, [pc, #168]	@ (80048a4 <TIM_Base_SetConfig+0x10c>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d007      	beq.n	800480e <TIM_Base_SetConfig+0x76>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a29      	ldr	r2, [pc, #164]	@ (80048a8 <TIM_Base_SetConfig+0x110>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d003      	beq.n	800480e <TIM_Base_SetConfig+0x76>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a28      	ldr	r2, [pc, #160]	@ (80048ac <TIM_Base_SetConfig+0x114>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d108      	bne.n	8004820 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	4a27      	ldr	r2, [pc, #156]	@ (80048b0 <TIM_Base_SetConfig+0x118>)
 8004812:	4013      	ands	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	4313      	orrs	r3, r2
 800481e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2280      	movs	r2, #128	@ 0x80
 8004824:	4393      	bics	r3, r2
 8004826:	001a      	movs	r2, r3
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	4313      	orrs	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	689a      	ldr	r2, [r3, #8]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a13      	ldr	r2, [pc, #76]	@ (8004898 <TIM_Base_SetConfig+0x100>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d00b      	beq.n	8004866 <TIM_Base_SetConfig+0xce>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a14      	ldr	r2, [pc, #80]	@ (80048a4 <TIM_Base_SetConfig+0x10c>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d007      	beq.n	8004866 <TIM_Base_SetConfig+0xce>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a13      	ldr	r2, [pc, #76]	@ (80048a8 <TIM_Base_SetConfig+0x110>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d003      	beq.n	8004866 <TIM_Base_SetConfig+0xce>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a12      	ldr	r2, [pc, #72]	@ (80048ac <TIM_Base_SetConfig+0x114>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d103      	bne.n	800486e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	691a      	ldr	r2, [r3, #16]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	2201      	movs	r2, #1
 800487a:	4013      	ands	r3, r2
 800487c:	2b01      	cmp	r3, #1
 800487e:	d106      	bne.n	800488e <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	2201      	movs	r2, #1
 8004886:	4393      	bics	r3, r2
 8004888:	001a      	movs	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	611a      	str	r2, [r3, #16]
  }
}
 800488e:	46c0      	nop			@ (mov r8, r8)
 8004890:	46bd      	mov	sp, r7
 8004892:	b004      	add	sp, #16
 8004894:	bd80      	pop	{r7, pc}
 8004896:	46c0      	nop			@ (mov r8, r8)
 8004898:	40012c00 	.word	0x40012c00
 800489c:	40000400 	.word	0x40000400
 80048a0:	40002000 	.word	0x40002000
 80048a4:	40014000 	.word	0x40014000
 80048a8:	40014400 	.word	0x40014400
 80048ac:	40014800 	.word	0x40014800
 80048b0:	fffffcff 	.word	0xfffffcff

080048b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	223c      	movs	r2, #60	@ 0x3c
 80048c2:	5c9b      	ldrb	r3, [r3, r2]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d101      	bne.n	80048cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048c8:	2302      	movs	r3, #2
 80048ca:	e047      	b.n	800495c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	223c      	movs	r2, #60	@ 0x3c
 80048d0:	2101      	movs	r1, #1
 80048d2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	223d      	movs	r2, #61	@ 0x3d
 80048d8:	2102      	movs	r1, #2
 80048da:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2270      	movs	r2, #112	@ 0x70
 80048f0:	4393      	bics	r3, r2
 80048f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a16      	ldr	r2, [pc, #88]	@ (8004964 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d00f      	beq.n	8004930 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	2380      	movs	r3, #128	@ 0x80
 8004916:	05db      	lsls	r3, r3, #23
 8004918:	429a      	cmp	r2, r3
 800491a:	d009      	beq.n	8004930 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a11      	ldr	r2, [pc, #68]	@ (8004968 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d004      	beq.n	8004930 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a10      	ldr	r2, [pc, #64]	@ (800496c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d10c      	bne.n	800494a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	2280      	movs	r2, #128	@ 0x80
 8004934:	4393      	bics	r3, r2
 8004936:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	4313      	orrs	r3, r2
 8004940:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	223d      	movs	r2, #61	@ 0x3d
 800494e:	2101      	movs	r1, #1
 8004950:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	223c      	movs	r2, #60	@ 0x3c
 8004956:	2100      	movs	r1, #0
 8004958:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	0018      	movs	r0, r3
 800495e:	46bd      	mov	sp, r7
 8004960:	b004      	add	sp, #16
 8004962:	bd80      	pop	{r7, pc}
 8004964:	40012c00 	.word	0x40012c00
 8004968:	40000400 	.word	0x40000400
 800496c:	40014000 	.word	0x40014000

08004970 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e044      	b.n	8004a0c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004986:	2b00      	cmp	r3, #0
 8004988:	d107      	bne.n	800499a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2278      	movs	r2, #120	@ 0x78
 800498e:	2100      	movs	r1, #0
 8004990:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	0018      	movs	r0, r3
 8004996:	f7fe f9b7 	bl	8002d08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2224      	movs	r2, #36	@ 0x24
 800499e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2101      	movs	r1, #1
 80049ac:	438a      	bics	r2, r1
 80049ae:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	0018      	movs	r0, r3
 80049bc:	f000 fae0 	bl	8004f80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	0018      	movs	r0, r3
 80049c4:	f000 f99c 	bl	8004d00 <UART_SetConfig>
 80049c8:	0003      	movs	r3, r0
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d101      	bne.n	80049d2 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e01c      	b.n	8004a0c <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	490d      	ldr	r1, [pc, #52]	@ (8004a14 <HAL_UART_Init+0xa4>)
 80049de:	400a      	ands	r2, r1
 80049e0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	212a      	movs	r1, #42	@ 0x2a
 80049ee:	438a      	bics	r2, r1
 80049f0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2101      	movs	r1, #1
 80049fe:	430a      	orrs	r2, r1
 8004a00:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	0018      	movs	r0, r3
 8004a06:	f000 fb6f 	bl	80050e8 <UART_CheckIdleState>
 8004a0a:	0003      	movs	r3, r0
}
 8004a0c:	0018      	movs	r0, r3
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	b002      	add	sp, #8
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	ffffb7ff 	.word	0xffffb7ff

08004a18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08a      	sub	sp, #40	@ 0x28
 8004a1c:	af02      	add	r7, sp, #8
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	603b      	str	r3, [r7, #0]
 8004a24:	1dbb      	adds	r3, r7, #6
 8004a26:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a2c:	2b20      	cmp	r3, #32
 8004a2e:	d000      	beq.n	8004a32 <HAL_UART_Transmit+0x1a>
 8004a30:	e08c      	b.n	8004b4c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d003      	beq.n	8004a40 <HAL_UART_Transmit+0x28>
 8004a38:	1dbb      	adds	r3, r7, #6
 8004a3a:	881b      	ldrh	r3, [r3, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e084      	b.n	8004b4e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	2380      	movs	r3, #128	@ 0x80
 8004a4a:	015b      	lsls	r3, r3, #5
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d109      	bne.n	8004a64 <HAL_UART_Transmit+0x4c>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d105      	bne.n	8004a64 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	d001      	beq.n	8004a64 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e074      	b.n	8004b4e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2284      	movs	r2, #132	@ 0x84
 8004a68:	2100      	movs	r1, #0
 8004a6a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2221      	movs	r2, #33	@ 0x21
 8004a70:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a72:	f7fe faf5 	bl	8003060 <HAL_GetTick>
 8004a76:	0003      	movs	r3, r0
 8004a78:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	1dba      	adds	r2, r7, #6
 8004a7e:	2150      	movs	r1, #80	@ 0x50
 8004a80:	8812      	ldrh	r2, [r2, #0]
 8004a82:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	1dba      	adds	r2, r7, #6
 8004a88:	2152      	movs	r1, #82	@ 0x52
 8004a8a:	8812      	ldrh	r2, [r2, #0]
 8004a8c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	689a      	ldr	r2, [r3, #8]
 8004a92:	2380      	movs	r3, #128	@ 0x80
 8004a94:	015b      	lsls	r3, r3, #5
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d108      	bne.n	8004aac <HAL_UART_Transmit+0x94>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d104      	bne.n	8004aac <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	61bb      	str	r3, [r7, #24]
 8004aaa:	e003      	b.n	8004ab4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ab4:	e02f      	b.n	8004b16 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	0013      	movs	r3, r2
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	2180      	movs	r1, #128	@ 0x80
 8004ac4:	f000 fbb8 	bl	8005238 <UART_WaitOnFlagUntilTimeout>
 8004ac8:	1e03      	subs	r3, r0, #0
 8004aca:	d004      	beq.n	8004ad6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e03b      	b.n	8004b4e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10b      	bne.n	8004af4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	881a      	ldrh	r2, [r3, #0]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	05d2      	lsls	r2, r2, #23
 8004ae6:	0dd2      	lsrs	r2, r2, #23
 8004ae8:	b292      	uxth	r2, r2
 8004aea:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	3302      	adds	r3, #2
 8004af0:	61bb      	str	r3, [r7, #24]
 8004af2:	e007      	b.n	8004b04 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	781a      	ldrb	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	3301      	adds	r3, #1
 8004b02:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2252      	movs	r2, #82	@ 0x52
 8004b08:	5a9b      	ldrh	r3, [r3, r2]
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	b299      	uxth	r1, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2252      	movs	r2, #82	@ 0x52
 8004b14:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2252      	movs	r2, #82	@ 0x52
 8004b1a:	5a9b      	ldrh	r3, [r3, r2]
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1c9      	bne.n	8004ab6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	0013      	movs	r3, r2
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	2140      	movs	r1, #64	@ 0x40
 8004b30:	f000 fb82 	bl	8005238 <UART_WaitOnFlagUntilTimeout>
 8004b34:	1e03      	subs	r3, r0, #0
 8004b36:	d004      	beq.n	8004b42 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e005      	b.n	8004b4e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2220      	movs	r2, #32
 8004b46:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	e000      	b.n	8004b4e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004b4c:	2302      	movs	r3, #2
  }
}
 8004b4e:	0018      	movs	r0, r3
 8004b50:	46bd      	mov	sp, r7
 8004b52:	b008      	add	sp, #32
 8004b54:	bd80      	pop	{r7, pc}
	...

08004b58 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b08a      	sub	sp, #40	@ 0x28
 8004b5c:	af02      	add	r7, sp, #8
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	603b      	str	r3, [r7, #0]
 8004b64:	1dbb      	adds	r3, r7, #6
 8004b66:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2280      	movs	r2, #128	@ 0x80
 8004b6c:	589b      	ldr	r3, [r3, r2]
 8004b6e:	2b20      	cmp	r3, #32
 8004b70:	d000      	beq.n	8004b74 <HAL_UART_Receive+0x1c>
 8004b72:	e0bd      	b.n	8004cf0 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <HAL_UART_Receive+0x2a>
 8004b7a:	1dbb      	adds	r3, r7, #6
 8004b7c:	881b      	ldrh	r3, [r3, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e0b5      	b.n	8004cf2 <HAL_UART_Receive+0x19a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	689a      	ldr	r2, [r3, #8]
 8004b8a:	2380      	movs	r3, #128	@ 0x80
 8004b8c:	015b      	lsls	r3, r3, #5
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d109      	bne.n	8004ba6 <HAL_UART_Receive+0x4e>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d105      	bne.n	8004ba6 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	d001      	beq.n	8004ba6 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e0a5      	b.n	8004cf2 <HAL_UART_Receive+0x19a>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2284      	movs	r2, #132	@ 0x84
 8004baa:	2100      	movs	r1, #0
 8004bac:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2280      	movs	r2, #128	@ 0x80
 8004bb2:	2122      	movs	r1, #34	@ 0x22
 8004bb4:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bbc:	f7fe fa50 	bl	8003060 <HAL_GetTick>
 8004bc0:	0003      	movs	r3, r0
 8004bc2:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	1dba      	adds	r2, r7, #6
 8004bc8:	2158      	movs	r1, #88	@ 0x58
 8004bca:	8812      	ldrh	r2, [r2, #0]
 8004bcc:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	1dba      	adds	r2, r7, #6
 8004bd2:	215a      	movs	r1, #90	@ 0x5a
 8004bd4:	8812      	ldrh	r2, [r2, #0]
 8004bd6:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	2380      	movs	r3, #128	@ 0x80
 8004bde:	015b      	lsls	r3, r3, #5
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d10d      	bne.n	8004c00 <HAL_UART_Receive+0xa8>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d104      	bne.n	8004bf6 <HAL_UART_Receive+0x9e>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	225c      	movs	r2, #92	@ 0x5c
 8004bf0:	4942      	ldr	r1, [pc, #264]	@ (8004cfc <HAL_UART_Receive+0x1a4>)
 8004bf2:	5299      	strh	r1, [r3, r2]
 8004bf4:	e01a      	b.n	8004c2c <HAL_UART_Receive+0xd4>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	225c      	movs	r2, #92	@ 0x5c
 8004bfa:	21ff      	movs	r1, #255	@ 0xff
 8004bfc:	5299      	strh	r1, [r3, r2]
 8004bfe:	e015      	b.n	8004c2c <HAL_UART_Receive+0xd4>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10d      	bne.n	8004c24 <HAL_UART_Receive+0xcc>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d104      	bne.n	8004c1a <HAL_UART_Receive+0xc2>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	225c      	movs	r2, #92	@ 0x5c
 8004c14:	21ff      	movs	r1, #255	@ 0xff
 8004c16:	5299      	strh	r1, [r3, r2]
 8004c18:	e008      	b.n	8004c2c <HAL_UART_Receive+0xd4>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	225c      	movs	r2, #92	@ 0x5c
 8004c1e:	217f      	movs	r1, #127	@ 0x7f
 8004c20:	5299      	strh	r1, [r3, r2]
 8004c22:	e003      	b.n	8004c2c <HAL_UART_Receive+0xd4>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	225c      	movs	r2, #92	@ 0x5c
 8004c28:	2100      	movs	r1, #0
 8004c2a:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8004c2c:	2312      	movs	r3, #18
 8004c2e:	18fb      	adds	r3, r7, r3
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	215c      	movs	r1, #92	@ 0x5c
 8004c34:	5a52      	ldrh	r2, [r2, r1]
 8004c36:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	689a      	ldr	r2, [r3, #8]
 8004c3c:	2380      	movs	r3, #128	@ 0x80
 8004c3e:	015b      	lsls	r3, r3, #5
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d108      	bne.n	8004c56 <HAL_UART_Receive+0xfe>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d104      	bne.n	8004c56 <HAL_UART_Receive+0xfe>
    {
      pdata8bits  = NULL;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	61bb      	str	r3, [r7, #24]
 8004c54:	e003      	b.n	8004c5e <HAL_UART_Receive+0x106>
    }
    else
    {
      pdata8bits  = pData;
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004c5e:	e03b      	b.n	8004cd8 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	0013      	movs	r3, r2
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	2120      	movs	r1, #32
 8004c6e:	f000 fae3 	bl	8005238 <UART_WaitOnFlagUntilTimeout>
 8004c72:	1e03      	subs	r3, r0, #0
 8004c74:	d005      	beq.n	8004c82 <HAL_UART_Receive+0x12a>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2280      	movs	r2, #128	@ 0x80
 8004c7a:	2120      	movs	r1, #32
 8004c7c:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e037      	b.n	8004cf2 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10e      	bne.n	8004ca6 <HAL_UART_Receive+0x14e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	2212      	movs	r2, #18
 8004c92:	18ba      	adds	r2, r7, r2
 8004c94:	8812      	ldrh	r2, [r2, #0]
 8004c96:	4013      	ands	r3, r2
 8004c98:	b29a      	uxth	r2, r3
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	3302      	adds	r3, #2
 8004ca2:	61bb      	str	r3, [r7, #24]
 8004ca4:	e00f      	b.n	8004cc6 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2212      	movs	r2, #18
 8004cb2:	18ba      	adds	r2, r7, r2
 8004cb4:	8812      	ldrh	r2, [r2, #0]
 8004cb6:	b2d2      	uxtb	r2, r2
 8004cb8:	4013      	ands	r3, r2
 8004cba:	b2da      	uxtb	r2, r3
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	225a      	movs	r2, #90	@ 0x5a
 8004cca:	5a9b      	ldrh	r3, [r3, r2]
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	b299      	uxth	r1, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	225a      	movs	r2, #90	@ 0x5a
 8004cd6:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	225a      	movs	r2, #90	@ 0x5a
 8004cdc:	5a9b      	ldrh	r3, [r3, r2]
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1bd      	bne.n	8004c60 <HAL_UART_Receive+0x108>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2280      	movs	r2, #128	@ 0x80
 8004ce8:	2120      	movs	r1, #32
 8004cea:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004cec:	2300      	movs	r3, #0
 8004cee:	e000      	b.n	8004cf2 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004cf0:	2302      	movs	r3, #2
  }
}
 8004cf2:	0018      	movs	r0, r3
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	b008      	add	sp, #32
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	46c0      	nop			@ (mov r8, r8)
 8004cfc:	000001ff 	.word	0x000001ff

08004d00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b088      	sub	sp, #32
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d08:	231e      	movs	r3, #30
 8004d0a:	18fb      	adds	r3, r7, r3
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689a      	ldr	r2, [r3, #8]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	431a      	orrs	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a8d      	ldr	r2, [pc, #564]	@ (8004f64 <UART_SetConfig+0x264>)
 8004d30:	4013      	ands	r3, r2
 8004d32:	0019      	movs	r1, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	4a88      	ldr	r2, [pc, #544]	@ (8004f68 <UART_SetConfig+0x268>)
 8004d46:	4013      	ands	r3, r2
 8004d48:	0019      	movs	r1, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68da      	ldr	r2, [r3, #12]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	4a7f      	ldr	r2, [pc, #508]	@ (8004f6c <UART_SetConfig+0x26c>)
 8004d6e:	4013      	ands	r3, r2
 8004d70:	0019      	movs	r1, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a7b      	ldr	r2, [pc, #492]	@ (8004f70 <UART_SetConfig+0x270>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d127      	bne.n	8004dd6 <UART_SetConfig+0xd6>
 8004d86:	4b7b      	ldr	r3, [pc, #492]	@ (8004f74 <UART_SetConfig+0x274>)
 8004d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d8a:	2203      	movs	r2, #3
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	2b03      	cmp	r3, #3
 8004d90:	d00d      	beq.n	8004dae <UART_SetConfig+0xae>
 8004d92:	d81b      	bhi.n	8004dcc <UART_SetConfig+0xcc>
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d014      	beq.n	8004dc2 <UART_SetConfig+0xc2>
 8004d98:	d818      	bhi.n	8004dcc <UART_SetConfig+0xcc>
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d002      	beq.n	8004da4 <UART_SetConfig+0xa4>
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d00a      	beq.n	8004db8 <UART_SetConfig+0xb8>
 8004da2:	e013      	b.n	8004dcc <UART_SetConfig+0xcc>
 8004da4:	231f      	movs	r3, #31
 8004da6:	18fb      	adds	r3, r7, r3
 8004da8:	2200      	movs	r2, #0
 8004daa:	701a      	strb	r2, [r3, #0]
 8004dac:	e021      	b.n	8004df2 <UART_SetConfig+0xf2>
 8004dae:	231f      	movs	r3, #31
 8004db0:	18fb      	adds	r3, r7, r3
 8004db2:	2202      	movs	r2, #2
 8004db4:	701a      	strb	r2, [r3, #0]
 8004db6:	e01c      	b.n	8004df2 <UART_SetConfig+0xf2>
 8004db8:	231f      	movs	r3, #31
 8004dba:	18fb      	adds	r3, r7, r3
 8004dbc:	2204      	movs	r2, #4
 8004dbe:	701a      	strb	r2, [r3, #0]
 8004dc0:	e017      	b.n	8004df2 <UART_SetConfig+0xf2>
 8004dc2:	231f      	movs	r3, #31
 8004dc4:	18fb      	adds	r3, r7, r3
 8004dc6:	2208      	movs	r2, #8
 8004dc8:	701a      	strb	r2, [r3, #0]
 8004dca:	e012      	b.n	8004df2 <UART_SetConfig+0xf2>
 8004dcc:	231f      	movs	r3, #31
 8004dce:	18fb      	adds	r3, r7, r3
 8004dd0:	2210      	movs	r2, #16
 8004dd2:	701a      	strb	r2, [r3, #0]
 8004dd4:	e00d      	b.n	8004df2 <UART_SetConfig+0xf2>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a67      	ldr	r2, [pc, #412]	@ (8004f78 <UART_SetConfig+0x278>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d104      	bne.n	8004dea <UART_SetConfig+0xea>
 8004de0:	231f      	movs	r3, #31
 8004de2:	18fb      	adds	r3, r7, r3
 8004de4:	2200      	movs	r2, #0
 8004de6:	701a      	strb	r2, [r3, #0]
 8004de8:	e003      	b.n	8004df2 <UART_SetConfig+0xf2>
 8004dea:	231f      	movs	r3, #31
 8004dec:	18fb      	adds	r3, r7, r3
 8004dee:	2210      	movs	r2, #16
 8004df0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69da      	ldr	r2, [r3, #28]
 8004df6:	2380      	movs	r3, #128	@ 0x80
 8004df8:	021b      	lsls	r3, r3, #8
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d15c      	bne.n	8004eb8 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8004dfe:	231f      	movs	r3, #31
 8004e00:	18fb      	adds	r3, r7, r3
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d015      	beq.n	8004e34 <UART_SetConfig+0x134>
 8004e08:	dc18      	bgt.n	8004e3c <UART_SetConfig+0x13c>
 8004e0a:	2b04      	cmp	r3, #4
 8004e0c:	d00d      	beq.n	8004e2a <UART_SetConfig+0x12a>
 8004e0e:	dc15      	bgt.n	8004e3c <UART_SetConfig+0x13c>
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d002      	beq.n	8004e1a <UART_SetConfig+0x11a>
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d005      	beq.n	8004e24 <UART_SetConfig+0x124>
 8004e18:	e010      	b.n	8004e3c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e1a:	f7ff fa03 	bl	8004224 <HAL_RCC_GetPCLK1Freq>
 8004e1e:	0003      	movs	r3, r0
 8004e20:	61bb      	str	r3, [r7, #24]
        break;
 8004e22:	e012      	b.n	8004e4a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e24:	4b55      	ldr	r3, [pc, #340]	@ (8004f7c <UART_SetConfig+0x27c>)
 8004e26:	61bb      	str	r3, [r7, #24]
        break;
 8004e28:	e00f      	b.n	8004e4a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e2a:	f7ff f99b 	bl	8004164 <HAL_RCC_GetSysClockFreq>
 8004e2e:	0003      	movs	r3, r0
 8004e30:	61bb      	str	r3, [r7, #24]
        break;
 8004e32:	e00a      	b.n	8004e4a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e34:	2380      	movs	r3, #128	@ 0x80
 8004e36:	021b      	lsls	r3, r3, #8
 8004e38:	61bb      	str	r3, [r7, #24]
        break;
 8004e3a:	e006      	b.n	8004e4a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e40:	231e      	movs	r3, #30
 8004e42:	18fb      	adds	r3, r7, r3
 8004e44:	2201      	movs	r2, #1
 8004e46:	701a      	strb	r2, [r3, #0]
        break;
 8004e48:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d100      	bne.n	8004e52 <UART_SetConfig+0x152>
 8004e50:	e07a      	b.n	8004f48 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	005a      	lsls	r2, r3, #1
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	085b      	lsrs	r3, r3, #1
 8004e5c:	18d2      	adds	r2, r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	0019      	movs	r1, r3
 8004e64:	0010      	movs	r0, r2
 8004e66:	f7fb f96b 	bl	8000140 <__udivsi3>
 8004e6a:	0003      	movs	r3, r0
 8004e6c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	2b0f      	cmp	r3, #15
 8004e72:	d91c      	bls.n	8004eae <UART_SetConfig+0x1ae>
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	2380      	movs	r3, #128	@ 0x80
 8004e78:	025b      	lsls	r3, r3, #9
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d217      	bcs.n	8004eae <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	200e      	movs	r0, #14
 8004e84:	183b      	adds	r3, r7, r0
 8004e86:	210f      	movs	r1, #15
 8004e88:	438a      	bics	r2, r1
 8004e8a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	085b      	lsrs	r3, r3, #1
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	2207      	movs	r2, #7
 8004e94:	4013      	ands	r3, r2
 8004e96:	b299      	uxth	r1, r3
 8004e98:	183b      	adds	r3, r7, r0
 8004e9a:	183a      	adds	r2, r7, r0
 8004e9c:	8812      	ldrh	r2, [r2, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	183a      	adds	r2, r7, r0
 8004ea8:	8812      	ldrh	r2, [r2, #0]
 8004eaa:	60da      	str	r2, [r3, #12]
 8004eac:	e04c      	b.n	8004f48 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004eae:	231e      	movs	r3, #30
 8004eb0:	18fb      	adds	r3, r7, r3
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	701a      	strb	r2, [r3, #0]
 8004eb6:	e047      	b.n	8004f48 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004eb8:	231f      	movs	r3, #31
 8004eba:	18fb      	adds	r3, r7, r3
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d015      	beq.n	8004eee <UART_SetConfig+0x1ee>
 8004ec2:	dc18      	bgt.n	8004ef6 <UART_SetConfig+0x1f6>
 8004ec4:	2b04      	cmp	r3, #4
 8004ec6:	d00d      	beq.n	8004ee4 <UART_SetConfig+0x1e4>
 8004ec8:	dc15      	bgt.n	8004ef6 <UART_SetConfig+0x1f6>
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d002      	beq.n	8004ed4 <UART_SetConfig+0x1d4>
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d005      	beq.n	8004ede <UART_SetConfig+0x1de>
 8004ed2:	e010      	b.n	8004ef6 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ed4:	f7ff f9a6 	bl	8004224 <HAL_RCC_GetPCLK1Freq>
 8004ed8:	0003      	movs	r3, r0
 8004eda:	61bb      	str	r3, [r7, #24]
        break;
 8004edc:	e012      	b.n	8004f04 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ede:	4b27      	ldr	r3, [pc, #156]	@ (8004f7c <UART_SetConfig+0x27c>)
 8004ee0:	61bb      	str	r3, [r7, #24]
        break;
 8004ee2:	e00f      	b.n	8004f04 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ee4:	f7ff f93e 	bl	8004164 <HAL_RCC_GetSysClockFreq>
 8004ee8:	0003      	movs	r3, r0
 8004eea:	61bb      	str	r3, [r7, #24]
        break;
 8004eec:	e00a      	b.n	8004f04 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eee:	2380      	movs	r3, #128	@ 0x80
 8004ef0:	021b      	lsls	r3, r3, #8
 8004ef2:	61bb      	str	r3, [r7, #24]
        break;
 8004ef4:	e006      	b.n	8004f04 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004efa:	231e      	movs	r3, #30
 8004efc:	18fb      	adds	r3, r7, r3
 8004efe:	2201      	movs	r2, #1
 8004f00:	701a      	strb	r2, [r3, #0]
        break;
 8004f02:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d01e      	beq.n	8004f48 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	085a      	lsrs	r2, r3, #1
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	18d2      	adds	r2, r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	0019      	movs	r1, r3
 8004f1a:	0010      	movs	r0, r2
 8004f1c:	f7fb f910 	bl	8000140 <__udivsi3>
 8004f20:	0003      	movs	r3, r0
 8004f22:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	2b0f      	cmp	r3, #15
 8004f28:	d90a      	bls.n	8004f40 <UART_SetConfig+0x240>
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	2380      	movs	r3, #128	@ 0x80
 8004f2e:	025b      	lsls	r3, r3, #9
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d205      	bcs.n	8004f40 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	60da      	str	r2, [r3, #12]
 8004f3e:	e003      	b.n	8004f48 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004f40:	231e      	movs	r3, #30
 8004f42:	18fb      	adds	r3, r7, r3
 8004f44:	2201      	movs	r2, #1
 8004f46:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004f54:	231e      	movs	r3, #30
 8004f56:	18fb      	adds	r3, r7, r3
 8004f58:	781b      	ldrb	r3, [r3, #0]
}
 8004f5a:	0018      	movs	r0, r3
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	b008      	add	sp, #32
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	46c0      	nop			@ (mov r8, r8)
 8004f64:	ffff69f3 	.word	0xffff69f3
 8004f68:	ffffcfff 	.word	0xffffcfff
 8004f6c:	fffff4ff 	.word	0xfffff4ff
 8004f70:	40013800 	.word	0x40013800
 8004f74:	40021000 	.word	0x40021000
 8004f78:	40004400 	.word	0x40004400
 8004f7c:	007a1200 	.word	0x007a1200

08004f80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f8c:	2208      	movs	r2, #8
 8004f8e:	4013      	ands	r3, r2
 8004f90:	d00b      	beq.n	8004faa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	4a4a      	ldr	r2, [pc, #296]	@ (80050c4 <UART_AdvFeatureConfig+0x144>)
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	0019      	movs	r1, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fae:	2201      	movs	r2, #1
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	d00b      	beq.n	8004fcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	4a43      	ldr	r2, [pc, #268]	@ (80050c8 <UART_AdvFeatureConfig+0x148>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	0019      	movs	r1, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	d00b      	beq.n	8004fee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	4a3b      	ldr	r2, [pc, #236]	@ (80050cc <UART_AdvFeatureConfig+0x14c>)
 8004fde:	4013      	ands	r3, r2
 8004fe0:	0019      	movs	r1, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff2:	2204      	movs	r2, #4
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	d00b      	beq.n	8005010 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	4a34      	ldr	r2, [pc, #208]	@ (80050d0 <UART_AdvFeatureConfig+0x150>)
 8005000:	4013      	ands	r3, r2
 8005002:	0019      	movs	r1, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005014:	2210      	movs	r2, #16
 8005016:	4013      	ands	r3, r2
 8005018:	d00b      	beq.n	8005032 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	4a2c      	ldr	r2, [pc, #176]	@ (80050d4 <UART_AdvFeatureConfig+0x154>)
 8005022:	4013      	ands	r3, r2
 8005024:	0019      	movs	r1, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005036:	2220      	movs	r2, #32
 8005038:	4013      	ands	r3, r2
 800503a:	d00b      	beq.n	8005054 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	4a25      	ldr	r2, [pc, #148]	@ (80050d8 <UART_AdvFeatureConfig+0x158>)
 8005044:	4013      	ands	r3, r2
 8005046:	0019      	movs	r1, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	430a      	orrs	r2, r1
 8005052:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005058:	2240      	movs	r2, #64	@ 0x40
 800505a:	4013      	ands	r3, r2
 800505c:	d01d      	beq.n	800509a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	4a1d      	ldr	r2, [pc, #116]	@ (80050dc <UART_AdvFeatureConfig+0x15c>)
 8005066:	4013      	ands	r3, r2
 8005068:	0019      	movs	r1, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800507a:	2380      	movs	r3, #128	@ 0x80
 800507c:	035b      	lsls	r3, r3, #13
 800507e:	429a      	cmp	r2, r3
 8005080:	d10b      	bne.n	800509a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	4a15      	ldr	r2, [pc, #84]	@ (80050e0 <UART_AdvFeatureConfig+0x160>)
 800508a:	4013      	ands	r3, r2
 800508c:	0019      	movs	r1, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800509e:	2280      	movs	r2, #128	@ 0x80
 80050a0:	4013      	ands	r3, r2
 80050a2:	d00b      	beq.n	80050bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	4a0e      	ldr	r2, [pc, #56]	@ (80050e4 <UART_AdvFeatureConfig+0x164>)
 80050ac:	4013      	ands	r3, r2
 80050ae:	0019      	movs	r1, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	605a      	str	r2, [r3, #4]
  }
}
 80050bc:	46c0      	nop			@ (mov r8, r8)
 80050be:	46bd      	mov	sp, r7
 80050c0:	b002      	add	sp, #8
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	ffff7fff 	.word	0xffff7fff
 80050c8:	fffdffff 	.word	0xfffdffff
 80050cc:	fffeffff 	.word	0xfffeffff
 80050d0:	fffbffff 	.word	0xfffbffff
 80050d4:	ffffefff 	.word	0xffffefff
 80050d8:	ffffdfff 	.word	0xffffdfff
 80050dc:	ffefffff 	.word	0xffefffff
 80050e0:	ff9fffff 	.word	0xff9fffff
 80050e4:	fff7ffff 	.word	0xfff7ffff

080050e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b092      	sub	sp, #72	@ 0x48
 80050ec:	af02      	add	r7, sp, #8
 80050ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2284      	movs	r2, #132	@ 0x84
 80050f4:	2100      	movs	r1, #0
 80050f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050f8:	f7fd ffb2 	bl	8003060 <HAL_GetTick>
 80050fc:	0003      	movs	r3, r0
 80050fe:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2208      	movs	r2, #8
 8005108:	4013      	ands	r3, r2
 800510a:	2b08      	cmp	r3, #8
 800510c:	d12c      	bne.n	8005168 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800510e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005110:	2280      	movs	r2, #128	@ 0x80
 8005112:	0391      	lsls	r1, r2, #14
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	4a46      	ldr	r2, [pc, #280]	@ (8005230 <UART_CheckIdleState+0x148>)
 8005118:	9200      	str	r2, [sp, #0]
 800511a:	2200      	movs	r2, #0
 800511c:	f000 f88c 	bl	8005238 <UART_WaitOnFlagUntilTimeout>
 8005120:	1e03      	subs	r3, r0, #0
 8005122:	d021      	beq.n	8005168 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005124:	f3ef 8310 	mrs	r3, PRIMASK
 8005128:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800512a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800512c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800512e:	2301      	movs	r3, #1
 8005130:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005134:	f383 8810 	msr	PRIMASK, r3
}
 8005138:	46c0      	nop			@ (mov r8, r8)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2180      	movs	r1, #128	@ 0x80
 8005146:	438a      	bics	r2, r1
 8005148:	601a      	str	r2, [r3, #0]
 800514a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800514c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800514e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005150:	f383 8810 	msr	PRIMASK, r3
}
 8005154:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2220      	movs	r2, #32
 800515a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2278      	movs	r2, #120	@ 0x78
 8005160:	2100      	movs	r1, #0
 8005162:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e05f      	b.n	8005228 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2204      	movs	r2, #4
 8005170:	4013      	ands	r3, r2
 8005172:	2b04      	cmp	r3, #4
 8005174:	d146      	bne.n	8005204 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005176:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005178:	2280      	movs	r2, #128	@ 0x80
 800517a:	03d1      	lsls	r1, r2, #15
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	4a2c      	ldr	r2, [pc, #176]	@ (8005230 <UART_CheckIdleState+0x148>)
 8005180:	9200      	str	r2, [sp, #0]
 8005182:	2200      	movs	r2, #0
 8005184:	f000 f858 	bl	8005238 <UART_WaitOnFlagUntilTimeout>
 8005188:	1e03      	subs	r3, r0, #0
 800518a:	d03b      	beq.n	8005204 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800518c:	f3ef 8310 	mrs	r3, PRIMASK
 8005190:	60fb      	str	r3, [r7, #12]
  return(result);
 8005192:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005194:	637b      	str	r3, [r7, #52]	@ 0x34
 8005196:	2301      	movs	r3, #1
 8005198:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	f383 8810 	msr	PRIMASK, r3
}
 80051a0:	46c0      	nop			@ (mov r8, r8)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4921      	ldr	r1, [pc, #132]	@ (8005234 <UART_CheckIdleState+0x14c>)
 80051ae:	400a      	ands	r2, r1
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	f383 8810 	msr	PRIMASK, r3
}
 80051bc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051be:	f3ef 8310 	mrs	r3, PRIMASK
 80051c2:	61bb      	str	r3, [r7, #24]
  return(result);
 80051c4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80051c8:	2301      	movs	r3, #1
 80051ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	f383 8810 	msr	PRIMASK, r3
}
 80051d2:	46c0      	nop			@ (mov r8, r8)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689a      	ldr	r2, [r3, #8]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2101      	movs	r1, #1
 80051e0:	438a      	bics	r2, r1
 80051e2:	609a      	str	r2, [r3, #8]
 80051e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051e8:	6a3b      	ldr	r3, [r7, #32]
 80051ea:	f383 8810 	msr	PRIMASK, r3
}
 80051ee:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2280      	movs	r2, #128	@ 0x80
 80051f4:	2120      	movs	r1, #32
 80051f6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2278      	movs	r2, #120	@ 0x78
 80051fc:	2100      	movs	r1, #0
 80051fe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e011      	b.n	8005228 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2220      	movs	r2, #32
 8005208:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2280      	movs	r2, #128	@ 0x80
 800520e:	2120      	movs	r1, #32
 8005210:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2278      	movs	r2, #120	@ 0x78
 8005222:	2100      	movs	r1, #0
 8005224:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	0018      	movs	r0, r3
 800522a:	46bd      	mov	sp, r7
 800522c:	b010      	add	sp, #64	@ 0x40
 800522e:	bd80      	pop	{r7, pc}
 8005230:	01ffffff 	.word	0x01ffffff
 8005234:	fffffedf 	.word	0xfffffedf

08005238 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	603b      	str	r3, [r7, #0]
 8005244:	1dfb      	adds	r3, r7, #7
 8005246:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005248:	e051      	b.n	80052ee <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	3301      	adds	r3, #1
 800524e:	d04e      	beq.n	80052ee <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005250:	f7fd ff06 	bl	8003060 <HAL_GetTick>
 8005254:	0002      	movs	r2, r0
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	429a      	cmp	r2, r3
 800525e:	d302      	bcc.n	8005266 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e051      	b.n	800530e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2204      	movs	r2, #4
 8005272:	4013      	ands	r3, r2
 8005274:	d03b      	beq.n	80052ee <UART_WaitOnFlagUntilTimeout+0xb6>
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	2b80      	cmp	r3, #128	@ 0x80
 800527a:	d038      	beq.n	80052ee <UART_WaitOnFlagUntilTimeout+0xb6>
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	2b40      	cmp	r3, #64	@ 0x40
 8005280:	d035      	beq.n	80052ee <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	69db      	ldr	r3, [r3, #28]
 8005288:	2208      	movs	r2, #8
 800528a:	4013      	ands	r3, r2
 800528c:	2b08      	cmp	r3, #8
 800528e:	d111      	bne.n	80052b4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2208      	movs	r2, #8
 8005296:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	0018      	movs	r0, r3
 800529c:	f000 f83c 	bl	8005318 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2284      	movs	r2, #132	@ 0x84
 80052a4:	2108      	movs	r1, #8
 80052a6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2278      	movs	r2, #120	@ 0x78
 80052ac:	2100      	movs	r1, #0
 80052ae:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e02c      	b.n	800530e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	69da      	ldr	r2, [r3, #28]
 80052ba:	2380      	movs	r3, #128	@ 0x80
 80052bc:	011b      	lsls	r3, r3, #4
 80052be:	401a      	ands	r2, r3
 80052c0:	2380      	movs	r3, #128	@ 0x80
 80052c2:	011b      	lsls	r3, r3, #4
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d112      	bne.n	80052ee <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2280      	movs	r2, #128	@ 0x80
 80052ce:	0112      	lsls	r2, r2, #4
 80052d0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	0018      	movs	r0, r3
 80052d6:	f000 f81f 	bl	8005318 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2284      	movs	r2, #132	@ 0x84
 80052de:	2120      	movs	r1, #32
 80052e0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2278      	movs	r2, #120	@ 0x78
 80052e6:	2100      	movs	r1, #0
 80052e8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e00f      	b.n	800530e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	4013      	ands	r3, r2
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	425a      	negs	r2, r3
 80052fe:	4153      	adcs	r3, r2
 8005300:	b2db      	uxtb	r3, r3
 8005302:	001a      	movs	r2, r3
 8005304:	1dfb      	adds	r3, r7, #7
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	429a      	cmp	r2, r3
 800530a:	d09e      	beq.n	800524a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	0018      	movs	r0, r3
 8005310:	46bd      	mov	sp, r7
 8005312:	b004      	add	sp, #16
 8005314:	bd80      	pop	{r7, pc}
	...

08005318 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b08e      	sub	sp, #56	@ 0x38
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005320:	f3ef 8310 	mrs	r3, PRIMASK
 8005324:	617b      	str	r3, [r7, #20]
  return(result);
 8005326:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005328:	637b      	str	r3, [r7, #52]	@ 0x34
 800532a:	2301      	movs	r3, #1
 800532c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	f383 8810 	msr	PRIMASK, r3
}
 8005334:	46c0      	nop			@ (mov r8, r8)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4926      	ldr	r1, [pc, #152]	@ (80053dc <UART_EndRxTransfer+0xc4>)
 8005342:	400a      	ands	r2, r1
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005348:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	f383 8810 	msr	PRIMASK, r3
}
 8005350:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005352:	f3ef 8310 	mrs	r3, PRIMASK
 8005356:	623b      	str	r3, [r7, #32]
  return(result);
 8005358:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800535a:	633b      	str	r3, [r7, #48]	@ 0x30
 800535c:	2301      	movs	r3, #1
 800535e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005362:	f383 8810 	msr	PRIMASK, r3
}
 8005366:	46c0      	nop			@ (mov r8, r8)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689a      	ldr	r2, [r3, #8]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2101      	movs	r1, #1
 8005374:	438a      	bics	r2, r1
 8005376:	609a      	str	r2, [r3, #8]
 8005378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800537a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800537c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800537e:	f383 8810 	msr	PRIMASK, r3
}
 8005382:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005388:	2b01      	cmp	r3, #1
 800538a:	d118      	bne.n	80053be <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800538c:	f3ef 8310 	mrs	r3, PRIMASK
 8005390:	60bb      	str	r3, [r7, #8]
  return(result);
 8005392:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005394:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005396:	2301      	movs	r3, #1
 8005398:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f383 8810 	msr	PRIMASK, r3
}
 80053a0:	46c0      	nop			@ (mov r8, r8)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2110      	movs	r1, #16
 80053ae:	438a      	bics	r2, r1
 80053b0:	601a      	str	r2, [r3, #0]
 80053b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f383 8810 	msr	PRIMASK, r3
}
 80053bc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2280      	movs	r2, #128	@ 0x80
 80053c2:	2120      	movs	r1, #32
 80053c4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80053d2:	46c0      	nop			@ (mov r8, r8)
 80053d4:	46bd      	mov	sp, r7
 80053d6:	b00e      	add	sp, #56	@ 0x38
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	46c0      	nop			@ (mov r8, r8)
 80053dc:	fffffedf 	.word	0xfffffedf

080053e0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	0002      	movs	r2, r0
 80053e8:	1dbb      	adds	r3, r7, #6
 80053ea:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80053ec:	2300      	movs	r3, #0
 80053ee:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80053f0:	1dbb      	adds	r3, r7, #6
 80053f2:	2200      	movs	r2, #0
 80053f4:	5e9b      	ldrsh	r3, [r3, r2]
 80053f6:	2b84      	cmp	r3, #132	@ 0x84
 80053f8:	d006      	beq.n	8005408 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 80053fa:	1dbb      	adds	r3, r7, #6
 80053fc:	2200      	movs	r2, #0
 80053fe:	5e9a      	ldrsh	r2, [r3, r2]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	18d3      	adds	r3, r2, r3
 8005404:	3303      	adds	r3, #3
 8005406:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005408:	68fb      	ldr	r3, [r7, #12]
}
 800540a:	0018      	movs	r0, r3
 800540c:	46bd      	mov	sp, r7
 800540e:	b004      	add	sp, #16
 8005410:	bd80      	pop	{r7, pc}

08005412 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005416:	f000 faa5 	bl	8005964 <vTaskStartScheduler>
  
  return osOK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	0018      	movs	r0, r3
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005422:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005424:	b089      	sub	sp, #36	@ 0x24
 8005426:	af04      	add	r7, sp, #16
 8005428:	6078      	str	r0, [r7, #4]
 800542a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d020      	beq.n	8005476 <osThreadCreate+0x54>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d01c      	beq.n	8005476 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685c      	ldr	r4, [r3, #4]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	691e      	ldr	r6, [r3, #16]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2208      	movs	r2, #8
 800544c:	5e9b      	ldrsh	r3, [r3, r2]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800544e:	0018      	movs	r0, r3
 8005450:	f7ff ffc6 	bl	80053e0 <makeFreeRtosPriority>
              thread_def->buffer, thread_def->controlblock);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	695a      	ldr	r2, [r3, #20]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800545c:	6839      	ldr	r1, [r7, #0]
 800545e:	9302      	str	r3, [sp, #8]
 8005460:	9201      	str	r2, [sp, #4]
 8005462:	9000      	str	r0, [sp, #0]
 8005464:	000b      	movs	r3, r1
 8005466:	0032      	movs	r2, r6
 8005468:	0029      	movs	r1, r5
 800546a:	0020      	movs	r0, r4
 800546c:	f000 f8e3 	bl	8005636 <xTaskCreateStatic>
 8005470:	0003      	movs	r3, r0
 8005472:	60fb      	str	r3, [r7, #12]
 8005474:	e01d      	b.n	80054b2 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685c      	ldr	r4, [r3, #4]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005482:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2208      	movs	r2, #8
 8005488:	5e9b      	ldrsh	r3, [r3, r2]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800548a:	0018      	movs	r0, r3
 800548c:	f7ff ffa8 	bl	80053e0 <makeFreeRtosPriority>
 8005490:	0001      	movs	r1, r0
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	230c      	movs	r3, #12
 8005496:	18fb      	adds	r3, r7, r3
 8005498:	9301      	str	r3, [sp, #4]
 800549a:	9100      	str	r1, [sp, #0]
 800549c:	0013      	movs	r3, r2
 800549e:	0032      	movs	r2, r6
 80054a0:	0029      	movs	r1, r5
 80054a2:	0020      	movs	r0, r4
 80054a4:	f000 f90d 	bl	80056c2 <xTaskCreate>
 80054a8:	0003      	movs	r3, r0
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d001      	beq.n	80054b2 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 80054ae:	2300      	movs	r3, #0
 80054b0:	e000      	b.n	80054b4 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80054b2:	68fb      	ldr	r3, [r7, #12]
}
 80054b4:	0018      	movs	r0, r3
 80054b6:	46bd      	mov	sp, r7
 80054b8:	b005      	add	sp, #20
 80054ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080054bc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <osDelay+0x16>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	e000      	b.n	80054d4 <osDelay+0x18>
 80054d2:	2301      	movs	r3, #1
 80054d4:	0018      	movs	r0, r3
 80054d6:	f000 fa1f 	bl	8005918 <vTaskDelay>
  
  return osOK;
 80054da:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80054dc:	0018      	movs	r0, r3
 80054de:	46bd      	mov	sp, r7
 80054e0:	b004      	add	sp, #16
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	3308      	adds	r3, #8
 80054f0:	001a      	movs	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	4252      	negs	r2, r2
 80054fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	3308      	adds	r3, #8
 8005502:	001a      	movs	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	3308      	adds	r3, #8
 800550c:	001a      	movs	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005518:	46c0      	nop			@ (mov r8, r8)
 800551a:	46bd      	mov	sp, r7
 800551c:	b002      	add	sp, #8
 800551e:	bd80      	pop	{r7, pc}

08005520 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800552e:	46c0      	nop			@ (mov r8, r8)
 8005530:	46bd      	mov	sp, r7
 8005532:	b002      	add	sp, #8
 8005534:	bd80      	pop	{r7, pc}

08005536 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b084      	sub	sp, #16
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
 800553e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	1c5a      	adds	r2, r3, #1
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	601a      	str	r2, [r3, #0]
}
 8005572:	46c0      	nop			@ (mov r8, r8)
 8005574:	46bd      	mov	sp, r7
 8005576:	b004      	add	sp, #16
 8005578:	bd80      	pop	{r7, pc}

0800557a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b084      	sub	sp, #16
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	3301      	adds	r3, #1
 800558e:	d103      	bne.n	8005598 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	60fb      	str	r3, [r7, #12]
 8005596:	e00c      	b.n	80055b2 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	3308      	adds	r3, #8
 800559c:	60fb      	str	r3, [r7, #12]
 800559e:	e002      	b.n	80055a6 <vListInsert+0x2c>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	60fb      	str	r3, [r7, #12]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d2f6      	bcs.n	80055a0 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	1c5a      	adds	r2, r3, #1
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	601a      	str	r2, [r3, #0]
}
 80055de:	46c0      	nop			@ (mov r8, r8)
 80055e0:	46bd      	mov	sp, r7
 80055e2:	b004      	add	sp, #16
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b084      	sub	sp, #16
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	6892      	ldr	r2, [r2, #8]
 80055fc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	6852      	ldr	r2, [r2, #4]
 8005606:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	429a      	cmp	r2, r3
 8005610:	d103      	bne.n	800561a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	689a      	ldr	r2, [r3, #8]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	1e5a      	subs	r2, r3, #1
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
}
 800562e:	0018      	movs	r0, r3
 8005630:	46bd      	mov	sp, r7
 8005632:	b004      	add	sp, #16
 8005634:	bd80      	pop	{r7, pc}

08005636 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005636:	b590      	push	{r4, r7, lr}
 8005638:	b08d      	sub	sp, #52	@ 0x34
 800563a:	af04      	add	r7, sp, #16
 800563c:	60f8      	str	r0, [r7, #12]
 800563e:	60b9      	str	r1, [r7, #8]
 8005640:	607a      	str	r2, [r7, #4]
 8005642:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005646:	2b00      	cmp	r3, #0
 8005648:	d102      	bne.n	8005650 <xTaskCreateStatic+0x1a>
 800564a:	b672      	cpsid	i
 800564c:	46c0      	nop			@ (mov r8, r8)
 800564e:	e7fd      	b.n	800564c <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8005650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005652:	2b00      	cmp	r3, #0
 8005654:	d102      	bne.n	800565c <xTaskCreateStatic+0x26>
 8005656:	b672      	cpsid	i
 8005658:	46c0      	nop			@ (mov r8, r8)
 800565a:	e7fd      	b.n	8005658 <xTaskCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800565c:	2354      	movs	r3, #84	@ 0x54
 800565e:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	2b54      	cmp	r3, #84	@ 0x54
 8005664:	d002      	beq.n	800566c <xTaskCreateStatic+0x36>
 8005666:	b672      	cpsid	i
 8005668:	46c0      	nop			@ (mov r8, r8)
 800566a:	e7fd      	b.n	8005668 <xTaskCreateStatic+0x32>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800566c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800566e:	2b00      	cmp	r3, #0
 8005670:	d020      	beq.n	80056b4 <xTaskCreateStatic+0x7e>
 8005672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005674:	2b00      	cmp	r3, #0
 8005676:	d01d      	beq.n	80056b4 <xTaskCreateStatic+0x7e>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800567a:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005680:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	2251      	movs	r2, #81	@ 0x51
 8005686:	2102      	movs	r1, #2
 8005688:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800568a:	683c      	ldr	r4, [r7, #0]
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	68b9      	ldr	r1, [r7, #8]
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	2300      	movs	r3, #0
 8005694:	9303      	str	r3, [sp, #12]
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	9302      	str	r3, [sp, #8]
 800569a:	2318      	movs	r3, #24
 800569c:	18fb      	adds	r3, r7, r3
 800569e:	9301      	str	r3, [sp, #4]
 80056a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a2:	9300      	str	r3, [sp, #0]
 80056a4:	0023      	movs	r3, r4
 80056a6:	f000 f859 	bl	800575c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	0018      	movs	r0, r3
 80056ae:	f000 f8cf 	bl	8005850 <prvAddNewTaskToReadyList>
 80056b2:	e001      	b.n	80056b8 <xTaskCreateStatic+0x82>
		}
		else
		{
			xReturn = NULL;
 80056b4:	2300      	movs	r3, #0
 80056b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80056b8:	69bb      	ldr	r3, [r7, #24]
	}
 80056ba:	0018      	movs	r0, r3
 80056bc:	46bd      	mov	sp, r7
 80056be:	b009      	add	sp, #36	@ 0x24
 80056c0:	bd90      	pop	{r4, r7, pc}

080056c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80056c2:	b590      	push	{r4, r7, lr}
 80056c4:	b08d      	sub	sp, #52	@ 0x34
 80056c6:	af04      	add	r7, sp, #16
 80056c8:	60f8      	str	r0, [r7, #12]
 80056ca:	60b9      	str	r1, [r7, #8]
 80056cc:	603b      	str	r3, [r7, #0]
 80056ce:	1dbb      	adds	r3, r7, #6
 80056d0:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056d2:	1dbb      	adds	r3, r7, #6
 80056d4:	881b      	ldrh	r3, [r3, #0]
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	0018      	movs	r0, r3
 80056da:	f000 fda1 	bl	8006220 <pvPortMalloc>
 80056de:	0003      	movs	r3, r0
 80056e0:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d010      	beq.n	800570a <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80056e8:	2054      	movs	r0, #84	@ 0x54
 80056ea:	f000 fd99 	bl	8006220 <pvPortMalloc>
 80056ee:	0003      	movs	r3, r0
 80056f0:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d003      	beq.n	8005700 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80056fe:	e006      	b.n	800570e <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	0018      	movs	r0, r3
 8005704:	f000 fe34 	bl	8006370 <vPortFree>
 8005708:	e001      	b.n	800570e <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800570a:	2300      	movs	r3, #0
 800570c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d01a      	beq.n	800574a <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	2251      	movs	r2, #81	@ 0x51
 8005718:	2100      	movs	r1, #0
 800571a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800571c:	1dbb      	adds	r3, r7, #6
 800571e:	881a      	ldrh	r2, [r3, #0]
 8005720:	683c      	ldr	r4, [r7, #0]
 8005722:	68b9      	ldr	r1, [r7, #8]
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	2300      	movs	r3, #0
 8005728:	9303      	str	r3, [sp, #12]
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	9302      	str	r3, [sp, #8]
 800572e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005730:	9301      	str	r3, [sp, #4]
 8005732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	0023      	movs	r3, r4
 8005738:	f000 f810 	bl	800575c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	0018      	movs	r0, r3
 8005740:	f000 f886 	bl	8005850 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005744:	2301      	movs	r3, #1
 8005746:	61bb      	str	r3, [r7, #24]
 8005748:	e002      	b.n	8005750 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800574a:	2301      	movs	r3, #1
 800574c:	425b      	negs	r3, r3
 800574e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005750:	69bb      	ldr	r3, [r7, #24]
	}
 8005752:	0018      	movs	r0, r3
 8005754:	46bd      	mov	sp, r7
 8005756:	b009      	add	sp, #36	@ 0x24
 8005758:	bd90      	pop	{r4, r7, pc}
	...

0800575c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b086      	sub	sp, #24
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
 8005768:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800576a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800576c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4936      	ldr	r1, [pc, #216]	@ (800584c <prvInitialiseNewTask+0xf0>)
 8005772:	468c      	mov	ip, r1
 8005774:	4463      	add	r3, ip
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	18d3      	adds	r3, r2, r3
 800577a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	2207      	movs	r2, #7
 8005780:	4393      	bics	r3, r2
 8005782:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	2207      	movs	r2, #7
 8005788:	4013      	ands	r3, r2
 800578a:	d002      	beq.n	8005792 <prvInitialiseNewTask+0x36>
 800578c:	b672      	cpsid	i
 800578e:	46c0      	nop			@ (mov r8, r8)
 8005790:	e7fd      	b.n	800578e <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005792:	2300      	movs	r3, #0
 8005794:	617b      	str	r3, [r7, #20]
 8005796:	e013      	b.n	80057c0 <prvInitialiseNewTask+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	18d3      	adds	r3, r2, r3
 800579e:	7818      	ldrb	r0, [r3, #0]
 80057a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057a2:	2134      	movs	r1, #52	@ 0x34
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	18d3      	adds	r3, r2, r3
 80057a8:	185b      	adds	r3, r3, r1
 80057aa:	1c02      	adds	r2, r0, #0
 80057ac:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	18d3      	adds	r3, r2, r3
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d006      	beq.n	80057c8 <prvInitialiseNewTask+0x6c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	3301      	adds	r3, #1
 80057be:	617b      	str	r3, [r7, #20]
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	2b0f      	cmp	r3, #15
 80057c4:	d9e8      	bls.n	8005798 <prvInitialiseNewTask+0x3c>
 80057c6:	e000      	b.n	80057ca <prvInitialiseNewTask+0x6e>
		{
			break;
 80057c8:	46c0      	nop			@ (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80057ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057cc:	2243      	movs	r2, #67	@ 0x43
 80057ce:	2100      	movs	r1, #0
 80057d0:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80057d2:	6a3b      	ldr	r3, [r7, #32]
 80057d4:	2b06      	cmp	r3, #6
 80057d6:	d901      	bls.n	80057dc <prvInitialiseNewTask+0x80>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80057d8:	2306      	movs	r3, #6
 80057da:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80057dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057de:	6a3a      	ldr	r2, [r7, #32]
 80057e0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80057e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e4:	6a3a      	ldr	r2, [r7, #32]
 80057e6:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80057e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ea:	2200      	movs	r2, #0
 80057ec:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80057ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f0:	3304      	adds	r3, #4
 80057f2:	0018      	movs	r0, r3
 80057f4:	f7ff fe94 	bl	8005520 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80057f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057fa:	3318      	adds	r3, #24
 80057fc:	0018      	movs	r0, r3
 80057fe:	f7ff fe8f 	bl	8005520 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005804:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005806:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005808:	6a3b      	ldr	r3, [r7, #32]
 800580a:	2207      	movs	r2, #7
 800580c:	1ad2      	subs	r2, r2, r3
 800580e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005810:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005814:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005816:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800581a:	2200      	movs	r2, #0
 800581c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800581e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005820:	2250      	movs	r2, #80	@ 0x50
 8005822:	2100      	movs	r1, #0
 8005824:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	68f9      	ldr	r1, [r7, #12]
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	0018      	movs	r0, r3
 800582e:	f000 fbc7 	bl	8005fc0 <pxPortInitialiseStack>
 8005832:	0002      	movs	r2, r0
 8005834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005836:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583a:	2b00      	cmp	r3, #0
 800583c:	d002      	beq.n	8005844 <prvInitialiseNewTask+0xe8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800583e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005840:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005842:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005844:	46c0      	nop			@ (mov r8, r8)
 8005846:	46bd      	mov	sp, r7
 8005848:	b006      	add	sp, #24
 800584a:	bd80      	pop	{r7, pc}
 800584c:	3fffffff 	.word	0x3fffffff

08005850 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005858:	f000 fc4a 	bl	80060f0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800585c:	4b28      	ldr	r3, [pc, #160]	@ (8005900 <prvAddNewTaskToReadyList+0xb0>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	4b27      	ldr	r3, [pc, #156]	@ (8005900 <prvAddNewTaskToReadyList+0xb0>)
 8005864:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8005866:	4b27      	ldr	r3, [pc, #156]	@ (8005904 <prvAddNewTaskToReadyList+0xb4>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d109      	bne.n	8005882 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800586e:	4b25      	ldr	r3, [pc, #148]	@ (8005904 <prvAddNewTaskToReadyList+0xb4>)
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005874:	4b22      	ldr	r3, [pc, #136]	@ (8005900 <prvAddNewTaskToReadyList+0xb0>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d110      	bne.n	800589e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800587c:	f000 fa70 	bl	8005d60 <prvInitialiseTaskLists>
 8005880:	e00d      	b.n	800589e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005882:	4b21      	ldr	r3, [pc, #132]	@ (8005908 <prvAddNewTaskToReadyList+0xb8>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d109      	bne.n	800589e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800588a:	4b1e      	ldr	r3, [pc, #120]	@ (8005904 <prvAddNewTaskToReadyList+0xb4>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005894:	429a      	cmp	r2, r3
 8005896:	d802      	bhi.n	800589e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005898:	4b1a      	ldr	r3, [pc, #104]	@ (8005904 <prvAddNewTaskToReadyList+0xb4>)
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800589e:	4b1b      	ldr	r3, [pc, #108]	@ (800590c <prvAddNewTaskToReadyList+0xbc>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	1c5a      	adds	r2, r3, #1
 80058a4:	4b19      	ldr	r3, [pc, #100]	@ (800590c <prvAddNewTaskToReadyList+0xbc>)
 80058a6:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ac:	4b18      	ldr	r3, [pc, #96]	@ (8005910 <prvAddNewTaskToReadyList+0xc0>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d903      	bls.n	80058bc <prvAddNewTaskToReadyList+0x6c>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058b8:	4b15      	ldr	r3, [pc, #84]	@ (8005910 <prvAddNewTaskToReadyList+0xc0>)
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058c0:	0013      	movs	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	189b      	adds	r3, r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4a12      	ldr	r2, [pc, #72]	@ (8005914 <prvAddNewTaskToReadyList+0xc4>)
 80058ca:	189a      	adds	r2, r3, r2
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	3304      	adds	r3, #4
 80058d0:	0019      	movs	r1, r3
 80058d2:	0010      	movs	r0, r2
 80058d4:	f7ff fe2f 	bl	8005536 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80058d8:	f000 fc1c 	bl	8006114 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80058dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005908 <prvAddNewTaskToReadyList+0xb8>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d008      	beq.n	80058f6 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80058e4:	4b07      	ldr	r3, [pc, #28]	@ (8005904 <prvAddNewTaskToReadyList+0xb4>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d201      	bcs.n	80058f6 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80058f2:	f000 fbed 	bl	80060d0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058f6:	46c0      	nop			@ (mov r8, r8)
 80058f8:	46bd      	mov	sp, r7
 80058fa:	b002      	add	sp, #8
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	46c0      	nop			@ (mov r8, r8)
 8005900:	20000724 	.word	0x20000724
 8005904:	20000624 	.word	0x20000624
 8005908:	20000730 	.word	0x20000730
 800590c:	20000740 	.word	0x20000740
 8005910:	2000072c 	.word	0x2000072c
 8005914:	20000628 	.word	0x20000628

08005918 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005920:	2300      	movs	r3, #0
 8005922:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d011      	beq.n	800594e <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800592a:	4b0d      	ldr	r3, [pc, #52]	@ (8005960 <vTaskDelay+0x48>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d002      	beq.n	8005938 <vTaskDelay+0x20>
 8005932:	b672      	cpsid	i
 8005934:	46c0      	nop			@ (mov r8, r8)
 8005936:	e7fd      	b.n	8005934 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8005938:	f000 f862 	bl	8005a00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2100      	movs	r1, #0
 8005940:	0018      	movs	r0, r3
 8005942:	f000 fae9 	bl	8005f18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005946:	f000 f867 	bl	8005a18 <xTaskResumeAll>
 800594a:	0003      	movs	r3, r0
 800594c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
 8005954:	f000 fbbc 	bl	80060d0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005958:	46c0      	nop			@ (mov r8, r8)
 800595a:	46bd      	mov	sp, r7
 800595c:	b004      	add	sp, #16
 800595e:	bd80      	pop	{r7, pc}
 8005960:	2000074c 	.word	0x2000074c

08005964 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005964:	b590      	push	{r4, r7, lr}
 8005966:	b089      	sub	sp, #36	@ 0x24
 8005968:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800596a:	2300      	movs	r3, #0
 800596c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800596e:	2300      	movs	r3, #0
 8005970:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005972:	003a      	movs	r2, r7
 8005974:	1d39      	adds	r1, r7, #4
 8005976:	2308      	movs	r3, #8
 8005978:	18fb      	adds	r3, r7, r3
 800597a:	0018      	movs	r0, r3
 800597c:	f7fc fea2 	bl	80026c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005980:	683c      	ldr	r4, [r7, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	4918      	ldr	r1, [pc, #96]	@ (80059e8 <vTaskStartScheduler+0x84>)
 8005988:	4818      	ldr	r0, [pc, #96]	@ (80059ec <vTaskStartScheduler+0x88>)
 800598a:	9202      	str	r2, [sp, #8]
 800598c:	9301      	str	r3, [sp, #4]
 800598e:	2300      	movs	r3, #0
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	2300      	movs	r3, #0
 8005994:	0022      	movs	r2, r4
 8005996:	f7ff fe4e 	bl	8005636 <xTaskCreateStatic>
 800599a:	0002      	movs	r2, r0
 800599c:	4b14      	ldr	r3, [pc, #80]	@ (80059f0 <vTaskStartScheduler+0x8c>)
 800599e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80059a0:	4b13      	ldr	r3, [pc, #76]	@ (80059f0 <vTaskStartScheduler+0x8c>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d002      	beq.n	80059ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80059a8:	2301      	movs	r3, #1
 80059aa:	60fb      	str	r3, [r7, #12]
 80059ac:	e001      	b.n	80059b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80059ae:	2300      	movs	r3, #0
 80059b0:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d10d      	bne.n	80059d4 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80059b8:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80059ba:	4b0e      	ldr	r3, [pc, #56]	@ (80059f4 <vTaskStartScheduler+0x90>)
 80059bc:	2201      	movs	r2, #1
 80059be:	4252      	negs	r2, r2
 80059c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80059c2:	4b0d      	ldr	r3, [pc, #52]	@ (80059f8 <vTaskStartScheduler+0x94>)
 80059c4:	2201      	movs	r2, #1
 80059c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80059c8:	4b0c      	ldr	r3, [pc, #48]	@ (80059fc <vTaskStartScheduler+0x98>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80059ce:	f000 fb5b 	bl	8006088 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80059d2:	e005      	b.n	80059e0 <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	3301      	adds	r3, #1
 80059d8:	d102      	bne.n	80059e0 <vTaskStartScheduler+0x7c>
 80059da:	b672      	cpsid	i
 80059dc:	46c0      	nop			@ (mov r8, r8)
 80059de:	e7fd      	b.n	80059dc <vTaskStartScheduler+0x78>
}
 80059e0:	46c0      	nop			@ (mov r8, r8)
 80059e2:	46bd      	mov	sp, r7
 80059e4:	b005      	add	sp, #20
 80059e6:	bd90      	pop	{r4, r7, pc}
 80059e8:	08009058 	.word	0x08009058
 80059ec:	08005d41 	.word	0x08005d41
 80059f0:	20000748 	.word	0x20000748
 80059f4:	20000744 	.word	0x20000744
 80059f8:	20000730 	.word	0x20000730
 80059fc:	20000728 	.word	0x20000728

08005a00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005a04:	4b03      	ldr	r3, [pc, #12]	@ (8005a14 <vTaskSuspendAll+0x14>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	1c5a      	adds	r2, r3, #1
 8005a0a:	4b02      	ldr	r3, [pc, #8]	@ (8005a14 <vTaskSuspendAll+0x14>)
 8005a0c:	601a      	str	r2, [r3, #0]
}
 8005a0e:	46c0      	nop			@ (mov r8, r8)
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	2000074c 	.word	0x2000074c

08005a18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005a22:	2300      	movs	r3, #0
 8005a24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005a26:	4b3a      	ldr	r3, [pc, #232]	@ (8005b10 <xTaskResumeAll+0xf8>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d102      	bne.n	8005a34 <xTaskResumeAll+0x1c>
 8005a2e:	b672      	cpsid	i
 8005a30:	46c0      	nop			@ (mov r8, r8)
 8005a32:	e7fd      	b.n	8005a30 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005a34:	f000 fb5c 	bl	80060f0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005a38:	4b35      	ldr	r3, [pc, #212]	@ (8005b10 <xTaskResumeAll+0xf8>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	1e5a      	subs	r2, r3, #1
 8005a3e:	4b34      	ldr	r3, [pc, #208]	@ (8005b10 <xTaskResumeAll+0xf8>)
 8005a40:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a42:	4b33      	ldr	r3, [pc, #204]	@ (8005b10 <xTaskResumeAll+0xf8>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d15b      	bne.n	8005b02 <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005a4a:	4b32      	ldr	r3, [pc, #200]	@ (8005b14 <xTaskResumeAll+0xfc>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d057      	beq.n	8005b02 <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a52:	e02f      	b.n	8005ab4 <xTaskResumeAll+0x9c>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005a54:	4b30      	ldr	r3, [pc, #192]	@ (8005b18 <xTaskResumeAll+0x100>)
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	3318      	adds	r3, #24
 8005a60:	0018      	movs	r0, r3
 8005a62:	f7ff fdc0 	bl	80055e6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	3304      	adds	r3, #4
 8005a6a:	0018      	movs	r0, r3
 8005a6c:	f7ff fdbb 	bl	80055e6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a74:	4b29      	ldr	r3, [pc, #164]	@ (8005b1c <xTaskResumeAll+0x104>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d903      	bls.n	8005a84 <xTaskResumeAll+0x6c>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a80:	4b26      	ldr	r3, [pc, #152]	@ (8005b1c <xTaskResumeAll+0x104>)
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a88:	0013      	movs	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	189b      	adds	r3, r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4a23      	ldr	r2, [pc, #140]	@ (8005b20 <xTaskResumeAll+0x108>)
 8005a92:	189a      	adds	r2, r3, r2
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	3304      	adds	r3, #4
 8005a98:	0019      	movs	r1, r3
 8005a9a:	0010      	movs	r0, r2
 8005a9c:	f7ff fd4b 	bl	8005536 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8005b24 <xTaskResumeAll+0x10c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d302      	bcc.n	8005ab4 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 8005aae:	4b1e      	ldr	r3, [pc, #120]	@ (8005b28 <xTaskResumeAll+0x110>)
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ab4:	4b18      	ldr	r3, [pc, #96]	@ (8005b18 <xTaskResumeAll+0x100>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1cb      	bne.n	8005a54 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d001      	beq.n	8005ac6 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ac2:	f000 f9e9 	bl	8005e98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005ac6:	4b19      	ldr	r3, [pc, #100]	@ (8005b2c <xTaskResumeAll+0x114>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00f      	beq.n	8005af2 <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ad2:	f000 f82d 	bl	8005b30 <xTaskIncrementTick>
 8005ad6:	1e03      	subs	r3, r0, #0
 8005ad8:	d002      	beq.n	8005ae0 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 8005ada:	4b13      	ldr	r3, [pc, #76]	@ (8005b28 <xTaskResumeAll+0x110>)
 8005adc:	2201      	movs	r2, #1
 8005ade:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1f2      	bne.n	8005ad2 <xTaskResumeAll+0xba>

						uxPendedTicks = 0;
 8005aec:	4b0f      	ldr	r3, [pc, #60]	@ (8005b2c <xTaskResumeAll+0x114>)
 8005aee:	2200      	movs	r2, #0
 8005af0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005af2:	4b0d      	ldr	r3, [pc, #52]	@ (8005b28 <xTaskResumeAll+0x110>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005afa:	2301      	movs	r3, #1
 8005afc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005afe:	f000 fae7 	bl	80060d0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b02:	f000 fb07 	bl	8006114 <vPortExitCritical>

	return xAlreadyYielded;
 8005b06:	68bb      	ldr	r3, [r7, #8]
}
 8005b08:	0018      	movs	r0, r3
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	b004      	add	sp, #16
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	2000074c 	.word	0x2000074c
 8005b14:	20000724 	.word	0x20000724
 8005b18:	200006e4 	.word	0x200006e4
 8005b1c:	2000072c 	.word	0x2000072c
 8005b20:	20000628 	.word	0x20000628
 8005b24:	20000624 	.word	0x20000624
 8005b28:	20000738 	.word	0x20000738
 8005b2c:	20000734 	.word	0x20000734

08005b30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005b36:	2300      	movs	r3, #0
 8005b38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b3a:	4b4d      	ldr	r3, [pc, #308]	@ (8005c70 <xTaskIncrementTick+0x140>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d000      	beq.n	8005b44 <xTaskIncrementTick+0x14>
 8005b42:	e084      	b.n	8005c4e <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005b44:	4b4b      	ldr	r3, [pc, #300]	@ (8005c74 <xTaskIncrementTick+0x144>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005b4c:	4b49      	ldr	r3, [pc, #292]	@ (8005c74 <xTaskIncrementTick+0x144>)
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d118      	bne.n	8005b8a <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005b58:	4b47      	ldr	r3, [pc, #284]	@ (8005c78 <xTaskIncrementTick+0x148>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d002      	beq.n	8005b68 <xTaskIncrementTick+0x38>
 8005b62:	b672      	cpsid	i
 8005b64:	46c0      	nop			@ (mov r8, r8)
 8005b66:	e7fd      	b.n	8005b64 <xTaskIncrementTick+0x34>
 8005b68:	4b43      	ldr	r3, [pc, #268]	@ (8005c78 <xTaskIncrementTick+0x148>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	60fb      	str	r3, [r7, #12]
 8005b6e:	4b43      	ldr	r3, [pc, #268]	@ (8005c7c <xTaskIncrementTick+0x14c>)
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	4b41      	ldr	r3, [pc, #260]	@ (8005c78 <xTaskIncrementTick+0x148>)
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	4b41      	ldr	r3, [pc, #260]	@ (8005c7c <xTaskIncrementTick+0x14c>)
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	4b40      	ldr	r3, [pc, #256]	@ (8005c80 <xTaskIncrementTick+0x150>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	1c5a      	adds	r2, r3, #1
 8005b82:	4b3f      	ldr	r3, [pc, #252]	@ (8005c80 <xTaskIncrementTick+0x150>)
 8005b84:	601a      	str	r2, [r3, #0]
 8005b86:	f000 f987 	bl	8005e98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b8a:	4b3e      	ldr	r3, [pc, #248]	@ (8005c84 <xTaskIncrementTick+0x154>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d34e      	bcc.n	8005c32 <xTaskIncrementTick+0x102>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b94:	4b38      	ldr	r3, [pc, #224]	@ (8005c78 <xTaskIncrementTick+0x148>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d101      	bne.n	8005ba2 <xTaskIncrementTick+0x72>
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e000      	b.n	8005ba4 <xTaskIncrementTick+0x74>
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d004      	beq.n	8005bb2 <xTaskIncrementTick+0x82>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ba8:	4b36      	ldr	r3, [pc, #216]	@ (8005c84 <xTaskIncrementTick+0x154>)
 8005baa:	2201      	movs	r2, #1
 8005bac:	4252      	negs	r2, r2
 8005bae:	601a      	str	r2, [r3, #0]
					break;
 8005bb0:	e03f      	b.n	8005c32 <xTaskIncrementTick+0x102>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005bb2:	4b31      	ldr	r3, [pc, #196]	@ (8005c78 <xTaskIncrementTick+0x148>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d203      	bcs.n	8005bd2 <xTaskIncrementTick+0xa2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005bca:	4b2e      	ldr	r3, [pc, #184]	@ (8005c84 <xTaskIncrementTick+0x154>)
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	601a      	str	r2, [r3, #0]
						break;
 8005bd0:	e02f      	b.n	8005c32 <xTaskIncrementTick+0x102>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	3304      	adds	r3, #4
 8005bd6:	0018      	movs	r0, r3
 8005bd8:	f7ff fd05 	bl	80055e6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d004      	beq.n	8005bee <xTaskIncrementTick+0xbe>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	3318      	adds	r3, #24
 8005be8:	0018      	movs	r0, r3
 8005bea:	f7ff fcfc 	bl	80055e6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bf2:	4b25      	ldr	r3, [pc, #148]	@ (8005c88 <xTaskIncrementTick+0x158>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d903      	bls.n	8005c02 <xTaskIncrementTick+0xd2>
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bfe:	4b22      	ldr	r3, [pc, #136]	@ (8005c88 <xTaskIncrementTick+0x158>)
 8005c00:	601a      	str	r2, [r3, #0]
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c06:	0013      	movs	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	189b      	adds	r3, r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4a1f      	ldr	r2, [pc, #124]	@ (8005c8c <xTaskIncrementTick+0x15c>)
 8005c10:	189a      	adds	r2, r3, r2
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	3304      	adds	r3, #4
 8005c16:	0019      	movs	r1, r3
 8005c18:	0010      	movs	r0, r2
 8005c1a:	f7ff fc8c 	bl	8005536 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c22:	4b1b      	ldr	r3, [pc, #108]	@ (8005c90 <xTaskIncrementTick+0x160>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d3b3      	bcc.n	8005b94 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c30:	e7b0      	b.n	8005b94 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005c32:	4b17      	ldr	r3, [pc, #92]	@ (8005c90 <xTaskIncrementTick+0x160>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c38:	4914      	ldr	r1, [pc, #80]	@ (8005c8c <xTaskIncrementTick+0x15c>)
 8005c3a:	0013      	movs	r3, r2
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	189b      	adds	r3, r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	585b      	ldr	r3, [r3, r1]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d907      	bls.n	8005c58 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	617b      	str	r3, [r7, #20]
 8005c4c:	e004      	b.n	8005c58 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005c4e:	4b11      	ldr	r3, [pc, #68]	@ (8005c94 <xTaskIncrementTick+0x164>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	1c5a      	adds	r2, r3, #1
 8005c54:	4b0f      	ldr	r3, [pc, #60]	@ (8005c94 <xTaskIncrementTick+0x164>)
 8005c56:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005c58:	4b0f      	ldr	r3, [pc, #60]	@ (8005c98 <xTaskIncrementTick+0x168>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d001      	beq.n	8005c64 <xTaskIncrementTick+0x134>
		{
			xSwitchRequired = pdTRUE;
 8005c60:	2301      	movs	r3, #1
 8005c62:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005c64:	697b      	ldr	r3, [r7, #20]
}
 8005c66:	0018      	movs	r0, r3
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	b006      	add	sp, #24
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	46c0      	nop			@ (mov r8, r8)
 8005c70:	2000074c 	.word	0x2000074c
 8005c74:	20000728 	.word	0x20000728
 8005c78:	200006dc 	.word	0x200006dc
 8005c7c:	200006e0 	.word	0x200006e0
 8005c80:	2000073c 	.word	0x2000073c
 8005c84:	20000744 	.word	0x20000744
 8005c88:	2000072c 	.word	0x2000072c
 8005c8c:	20000628 	.word	0x20000628
 8005c90:	20000624 	.word	0x20000624
 8005c94:	20000734 	.word	0x20000734
 8005c98:	20000738 	.word	0x20000738

08005c9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ca2:	4b22      	ldr	r3, [pc, #136]	@ (8005d2c <vTaskSwitchContext+0x90>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d003      	beq.n	8005cb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005caa:	4b21      	ldr	r3, [pc, #132]	@ (8005d30 <vTaskSwitchContext+0x94>)
 8005cac:	2201      	movs	r2, #1
 8005cae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005cb0:	e038      	b.n	8005d24 <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 8005cb2:	4b1f      	ldr	r3, [pc, #124]	@ (8005d30 <vTaskSwitchContext+0x94>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005cb8:	4b1e      	ldr	r3, [pc, #120]	@ (8005d34 <vTaskSwitchContext+0x98>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	607b      	str	r3, [r7, #4]
 8005cbe:	e008      	b.n	8005cd2 <vTaskSwitchContext+0x36>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d102      	bne.n	8005ccc <vTaskSwitchContext+0x30>
 8005cc6:	b672      	cpsid	i
 8005cc8:	46c0      	nop			@ (mov r8, r8)
 8005cca:	e7fd      	b.n	8005cc8 <vTaskSwitchContext+0x2c>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	607b      	str	r3, [r7, #4]
 8005cd2:	4919      	ldr	r1, [pc, #100]	@ (8005d38 <vTaskSwitchContext+0x9c>)
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	0013      	movs	r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	189b      	adds	r3, r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	585b      	ldr	r3, [r3, r1]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d0ed      	beq.n	8005cc0 <vTaskSwitchContext+0x24>
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	0013      	movs	r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	189b      	adds	r3, r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4a12      	ldr	r2, [pc, #72]	@ (8005d38 <vTaskSwitchContext+0x9c>)
 8005cf0:	189b      	adds	r3, r3, r2
 8005cf2:	603b      	str	r3, [r7, #0]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	685a      	ldr	r2, [r3, #4]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	605a      	str	r2, [r3, #4]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	3308      	adds	r3, #8
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d104      	bne.n	8005d14 <vTaskSwitchContext+0x78>
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	685a      	ldr	r2, [r3, #4]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	605a      	str	r2, [r3, #4]
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	4b08      	ldr	r3, [pc, #32]	@ (8005d3c <vTaskSwitchContext+0xa0>)
 8005d1c:	601a      	str	r2, [r3, #0]
 8005d1e:	4b05      	ldr	r3, [pc, #20]	@ (8005d34 <vTaskSwitchContext+0x98>)
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	601a      	str	r2, [r3, #0]
}
 8005d24:	46c0      	nop			@ (mov r8, r8)
 8005d26:	46bd      	mov	sp, r7
 8005d28:	b002      	add	sp, #8
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	2000074c 	.word	0x2000074c
 8005d30:	20000738 	.word	0x20000738
 8005d34:	2000072c 	.word	0x2000072c
 8005d38:	20000628 	.word	0x20000628
 8005d3c:	20000624 	.word	0x20000624

08005d40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d48:	f000 f84e 	bl	8005de8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d4c:	4b03      	ldr	r3, [pc, #12]	@ (8005d5c <prvIdleTask+0x1c>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d9f9      	bls.n	8005d48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d54:	f000 f9bc 	bl	80060d0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8005d58:	e7f6      	b.n	8005d48 <prvIdleTask+0x8>
 8005d5a:	46c0      	nop			@ (mov r8, r8)
 8005d5c:	20000628 	.word	0x20000628

08005d60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d66:	2300      	movs	r3, #0
 8005d68:	607b      	str	r3, [r7, #4]
 8005d6a:	e00c      	b.n	8005d86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	0013      	movs	r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	189b      	adds	r3, r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4a14      	ldr	r2, [pc, #80]	@ (8005dc8 <prvInitialiseTaskLists+0x68>)
 8005d78:	189b      	adds	r3, r3, r2
 8005d7a:	0018      	movs	r0, r3
 8005d7c:	f7ff fbb2 	bl	80054e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	3301      	adds	r3, #1
 8005d84:	607b      	str	r3, [r7, #4]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b06      	cmp	r3, #6
 8005d8a:	d9ef      	bls.n	8005d6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8005dcc <prvInitialiseTaskLists+0x6c>)
 8005d8e:	0018      	movs	r0, r3
 8005d90:	f7ff fba8 	bl	80054e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d94:	4b0e      	ldr	r3, [pc, #56]	@ (8005dd0 <prvInitialiseTaskLists+0x70>)
 8005d96:	0018      	movs	r0, r3
 8005d98:	f7ff fba4 	bl	80054e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8005dd4 <prvInitialiseTaskLists+0x74>)
 8005d9e:	0018      	movs	r0, r3
 8005da0:	f7ff fba0 	bl	80054e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005da4:	4b0c      	ldr	r3, [pc, #48]	@ (8005dd8 <prvInitialiseTaskLists+0x78>)
 8005da6:	0018      	movs	r0, r3
 8005da8:	f7ff fb9c 	bl	80054e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005dac:	4b0b      	ldr	r3, [pc, #44]	@ (8005ddc <prvInitialiseTaskLists+0x7c>)
 8005dae:	0018      	movs	r0, r3
 8005db0:	f7ff fb98 	bl	80054e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005db4:	4b0a      	ldr	r3, [pc, #40]	@ (8005de0 <prvInitialiseTaskLists+0x80>)
 8005db6:	4a05      	ldr	r2, [pc, #20]	@ (8005dcc <prvInitialiseTaskLists+0x6c>)
 8005db8:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005dba:	4b0a      	ldr	r3, [pc, #40]	@ (8005de4 <prvInitialiseTaskLists+0x84>)
 8005dbc:	4a04      	ldr	r2, [pc, #16]	@ (8005dd0 <prvInitialiseTaskLists+0x70>)
 8005dbe:	601a      	str	r2, [r3, #0]
}
 8005dc0:	46c0      	nop			@ (mov r8, r8)
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	b002      	add	sp, #8
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	20000628 	.word	0x20000628
 8005dcc:	200006b4 	.word	0x200006b4
 8005dd0:	200006c8 	.word	0x200006c8
 8005dd4:	200006e4 	.word	0x200006e4
 8005dd8:	200006f8 	.word	0x200006f8
 8005ddc:	20000710 	.word	0x20000710
 8005de0:	200006dc 	.word	0x200006dc
 8005de4:	200006e0 	.word	0x200006e0

08005de8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005dee:	e01a      	b.n	8005e26 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8005df0:	f000 f97e 	bl	80060f0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005df4:	4b10      	ldr	r3, [pc, #64]	@ (8005e38 <prvCheckTasksWaitingTermination+0x50>)
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	3304      	adds	r3, #4
 8005e00:	0018      	movs	r0, r3
 8005e02:	f7ff fbf0 	bl	80055e6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e06:	4b0d      	ldr	r3, [pc, #52]	@ (8005e3c <prvCheckTasksWaitingTermination+0x54>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	1e5a      	subs	r2, r3, #1
 8005e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8005e3c <prvCheckTasksWaitingTermination+0x54>)
 8005e0e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e10:	4b0b      	ldr	r3, [pc, #44]	@ (8005e40 <prvCheckTasksWaitingTermination+0x58>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	1e5a      	subs	r2, r3, #1
 8005e16:	4b0a      	ldr	r3, [pc, #40]	@ (8005e40 <prvCheckTasksWaitingTermination+0x58>)
 8005e18:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8005e1a:	f000 f97b 	bl	8006114 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	0018      	movs	r0, r3
 8005e22:	f000 f80f 	bl	8005e44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e26:	4b06      	ldr	r3, [pc, #24]	@ (8005e40 <prvCheckTasksWaitingTermination+0x58>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1e0      	bne.n	8005df0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e2e:	46c0      	nop			@ (mov r8, r8)
 8005e30:	46c0      	nop			@ (mov r8, r8)
 8005e32:	46bd      	mov	sp, r7
 8005e34:	b002      	add	sp, #8
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	200006f8 	.word	0x200006f8
 8005e3c:	20000724 	.word	0x20000724
 8005e40:	2000070c 	.word	0x2000070c

08005e44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2251      	movs	r2, #81	@ 0x51
 8005e50:	5c9b      	ldrb	r3, [r3, r2]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d109      	bne.n	8005e6a <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e5a:	0018      	movs	r0, r3
 8005e5c:	f000 fa88 	bl	8006370 <vPortFree>
				vPortFree( pxTCB );
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	0018      	movs	r0, r3
 8005e64:	f000 fa84 	bl	8006370 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e68:	e011      	b.n	8005e8e <prvDeleteTCB+0x4a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2251      	movs	r2, #81	@ 0x51
 8005e6e:	5c9b      	ldrb	r3, [r3, r2]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d104      	bne.n	8005e7e <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	0018      	movs	r0, r3
 8005e78:	f000 fa7a 	bl	8006370 <vPortFree>
	}
 8005e7c:	e007      	b.n	8005e8e <prvDeleteTCB+0x4a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2251      	movs	r2, #81	@ 0x51
 8005e82:	5c9b      	ldrb	r3, [r3, r2]
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d002      	beq.n	8005e8e <prvDeleteTCB+0x4a>
 8005e88:	b672      	cpsid	i
 8005e8a:	46c0      	nop			@ (mov r8, r8)
 8005e8c:	e7fd      	b.n	8005e8a <prvDeleteTCB+0x46>
	}
 8005e8e:	46c0      	nop			@ (mov r8, r8)
 8005e90:	46bd      	mov	sp, r7
 8005e92:	b002      	add	sp, #8
 8005e94:	bd80      	pop	{r7, pc}
	...

08005e98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ed8 <prvResetNextTaskUnblockTime+0x40>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d101      	bne.n	8005eac <prvResetNextTaskUnblockTime+0x14>
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e000      	b.n	8005eae <prvResetNextTaskUnblockTime+0x16>
 8005eac:	2300      	movs	r3, #0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d004      	beq.n	8005ebc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8005edc <prvResetNextTaskUnblockTime+0x44>)
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	4252      	negs	r2, r2
 8005eb8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005eba:	e008      	b.n	8005ece <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005ebc:	4b06      	ldr	r3, [pc, #24]	@ (8005ed8 <prvResetNextTaskUnblockTime+0x40>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685a      	ldr	r2, [r3, #4]
 8005eca:	4b04      	ldr	r3, [pc, #16]	@ (8005edc <prvResetNextTaskUnblockTime+0x44>)
 8005ecc:	601a      	str	r2, [r3, #0]
}
 8005ece:	46c0      	nop			@ (mov r8, r8)
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	b002      	add	sp, #8
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	46c0      	nop			@ (mov r8, r8)
 8005ed8:	200006dc 	.word	0x200006dc
 8005edc:	20000744 	.word	0x20000744

08005ee0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8005f10 <xTaskGetSchedulerState+0x30>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d102      	bne.n	8005ef4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	607b      	str	r3, [r7, #4]
 8005ef2:	e008      	b.n	8005f06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ef4:	4b07      	ldr	r3, [pc, #28]	@ (8005f14 <xTaskGetSchedulerState+0x34>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d102      	bne.n	8005f02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005efc:	2302      	movs	r3, #2
 8005efe:	607b      	str	r3, [r7, #4]
 8005f00:	e001      	b.n	8005f06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f02:	2300      	movs	r3, #0
 8005f04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f06:	687b      	ldr	r3, [r7, #4]
	}
 8005f08:	0018      	movs	r0, r3
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	b002      	add	sp, #8
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	20000730 	.word	0x20000730
 8005f14:	2000074c 	.word	0x2000074c

08005f18 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f22:	4b21      	ldr	r3, [pc, #132]	@ (8005fa8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f28:	4b20      	ldr	r3, [pc, #128]	@ (8005fac <prvAddCurrentTaskToDelayedList+0x94>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	0018      	movs	r0, r3
 8005f30:	f7ff fb59 	bl	80055e6 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	3301      	adds	r3, #1
 8005f38:	d10b      	bne.n	8005f52 <prvAddCurrentTaskToDelayedList+0x3a>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d008      	beq.n	8005f52 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f40:	4b1a      	ldr	r3, [pc, #104]	@ (8005fac <prvAddCurrentTaskToDelayedList+0x94>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	1d1a      	adds	r2, r3, #4
 8005f46:	4b1a      	ldr	r3, [pc, #104]	@ (8005fb0 <prvAddCurrentTaskToDelayedList+0x98>)
 8005f48:	0011      	movs	r1, r2
 8005f4a:	0018      	movs	r0, r3
 8005f4c:	f7ff faf3 	bl	8005536 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f50:	e026      	b.n	8005fa0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	18d3      	adds	r3, r2, r3
 8005f58:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f5a:	4b14      	ldr	r3, [pc, #80]	@ (8005fac <prvAddCurrentTaskToDelayedList+0x94>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68ba      	ldr	r2, [r7, #8]
 8005f60:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d209      	bcs.n	8005f7e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f6a:	4b12      	ldr	r3, [pc, #72]	@ (8005fb4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8005fac <prvAddCurrentTaskToDelayedList+0x94>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	3304      	adds	r3, #4
 8005f74:	0019      	movs	r1, r3
 8005f76:	0010      	movs	r0, r2
 8005f78:	f7ff faff 	bl	800557a <vListInsert>
}
 8005f7c:	e010      	b.n	8005fa0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8005fb8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	4b0a      	ldr	r3, [pc, #40]	@ (8005fac <prvAddCurrentTaskToDelayedList+0x94>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	3304      	adds	r3, #4
 8005f88:	0019      	movs	r1, r3
 8005f8a:	0010      	movs	r0, r2
 8005f8c:	f7ff faf5 	bl	800557a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f90:	4b0a      	ldr	r3, [pc, #40]	@ (8005fbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68ba      	ldr	r2, [r7, #8]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d202      	bcs.n	8005fa0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005f9a:	4b08      	ldr	r3, [pc, #32]	@ (8005fbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	601a      	str	r2, [r3, #0]
}
 8005fa0:	46c0      	nop			@ (mov r8, r8)
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	b004      	add	sp, #16
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	20000728 	.word	0x20000728
 8005fac:	20000624 	.word	0x20000624
 8005fb0:	20000710 	.word	0x20000710
 8005fb4:	200006e0 	.word	0x200006e0
 8005fb8:	200006dc 	.word	0x200006dc
 8005fbc:	20000744 	.word	0x20000744

08005fc0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	3b04      	subs	r3, #4
 8005fd0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2280      	movs	r2, #128	@ 0x80
 8005fd6:	0452      	lsls	r2, r2, #17
 8005fd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	3b04      	subs	r3, #4
 8005fde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	3b04      	subs	r3, #4
 8005fea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005fec:	4a08      	ldr	r2, [pc, #32]	@ (8006010 <pxPortInitialiseStack+0x50>)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	3b14      	subs	r3, #20
 8005ff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	3b20      	subs	r3, #32
 8006002:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006004:	68fb      	ldr	r3, [r7, #12]
}
 8006006:	0018      	movs	r0, r3
 8006008:	46bd      	mov	sp, r7
 800600a:	b004      	add	sp, #16
 800600c:	bd80      	pop	{r7, pc}
 800600e:	46c0      	nop			@ (mov r8, r8)
 8006010:	08006015 	.word	0x08006015

08006014 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800601a:	2300      	movs	r3, #0
 800601c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800601e:	4b08      	ldr	r3, [pc, #32]	@ (8006040 <prvTaskExitError+0x2c>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	3301      	adds	r3, #1
 8006024:	d002      	beq.n	800602c <prvTaskExitError+0x18>
 8006026:	b672      	cpsid	i
 8006028:	46c0      	nop			@ (mov r8, r8)
 800602a:	e7fd      	b.n	8006028 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800602c:	b672      	cpsid	i
	while( ulDummy == 0 )
 800602e:	46c0      	nop			@ (mov r8, r8)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d0fc      	beq.n	8006030 <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006036:	46c0      	nop			@ (mov r8, r8)
 8006038:	46c0      	nop			@ (mov r8, r8)
 800603a:	46bd      	mov	sp, r7
 800603c:	b002      	add	sp, #8
 800603e:	bd80      	pop	{r7, pc}
 8006040:	20000054 	.word	0x20000054

08006044 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8006048:	46c0      	nop			@ (mov r8, r8)
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
	...

08006050 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8006050:	4a0b      	ldr	r2, [pc, #44]	@ (8006080 <pxCurrentTCBConst2>)
 8006052:	6813      	ldr	r3, [r2, #0]
 8006054:	6818      	ldr	r0, [r3, #0]
 8006056:	3020      	adds	r0, #32
 8006058:	f380 8809 	msr	PSP, r0
 800605c:	2002      	movs	r0, #2
 800605e:	f380 8814 	msr	CONTROL, r0
 8006062:	f3bf 8f6f 	isb	sy
 8006066:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8006068:	46ae      	mov	lr, r5
 800606a:	bc08      	pop	{r3}
 800606c:	bc04      	pop	{r2}
 800606e:	b662      	cpsie	i
 8006070:	4718      	bx	r3
 8006072:	46c0      	nop			@ (mov r8, r8)
 8006074:	46c0      	nop			@ (mov r8, r8)
 8006076:	46c0      	nop			@ (mov r8, r8)
 8006078:	46c0      	nop			@ (mov r8, r8)
 800607a:	46c0      	nop			@ (mov r8, r8)
 800607c:	46c0      	nop			@ (mov r8, r8)
 800607e:	46c0      	nop			@ (mov r8, r8)

08006080 <pxCurrentTCBConst2>:
 8006080:	20000624 	.word	0x20000624
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8006084:	46c0      	nop			@ (mov r8, r8)
 8006086:	46c0      	nop			@ (mov r8, r8)

08006088 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006088:	b580      	push	{r7, lr}
 800608a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800608c:	4b0e      	ldr	r3, [pc, #56]	@ (80060c8 <xPortStartScheduler+0x40>)
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	4b0d      	ldr	r3, [pc, #52]	@ (80060c8 <xPortStartScheduler+0x40>)
 8006092:	21ff      	movs	r1, #255	@ 0xff
 8006094:	0409      	lsls	r1, r1, #16
 8006096:	430a      	orrs	r2, r1
 8006098:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800609a:	4b0b      	ldr	r3, [pc, #44]	@ (80060c8 <xPortStartScheduler+0x40>)
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	4b0a      	ldr	r3, [pc, #40]	@ (80060c8 <xPortStartScheduler+0x40>)
 80060a0:	21ff      	movs	r1, #255	@ 0xff
 80060a2:	0609      	lsls	r1, r1, #24
 80060a4:	430a      	orrs	r2, r1
 80060a6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80060a8:	f000 f898 	bl	80061dc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80060ac:	4b07      	ldr	r3, [pc, #28]	@ (80060cc <xPortStartScheduler+0x44>)
 80060ae:	2200      	movs	r2, #0
 80060b0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80060b2:	f7ff ffcd 	bl	8006050 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80060b6:	f7ff fdf1 	bl	8005c9c <vTaskSwitchContext>
	prvTaskExitError();
 80060ba:	f7ff ffab 	bl	8006014 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	0018      	movs	r0, r3
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	46c0      	nop			@ (mov r8, r8)
 80060c8:	e000ed20 	.word	0xe000ed20
 80060cc:	20000054 	.word	0x20000054

080060d0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80060d4:	4b05      	ldr	r3, [pc, #20]	@ (80060ec <vPortYield+0x1c>)
 80060d6:	2280      	movs	r2, #128	@ 0x80
 80060d8:	0552      	lsls	r2, r2, #21
 80060da:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80060dc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80060e0:	f3bf 8f6f 	isb	sy
}
 80060e4:	46c0      	nop			@ (mov r8, r8)
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	46c0      	nop			@ (mov r8, r8)
 80060ec:	e000ed04 	.word	0xe000ed04

080060f0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80060f4:	b672      	cpsid	i
    uxCriticalNesting++;
 80060f6:	4b06      	ldr	r3, [pc, #24]	@ (8006110 <vPortEnterCritical+0x20>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	1c5a      	adds	r2, r3, #1
 80060fc:	4b04      	ldr	r3, [pc, #16]	@ (8006110 <vPortEnterCritical+0x20>)
 80060fe:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8006100:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006104:	f3bf 8f6f 	isb	sy
}
 8006108:	46c0      	nop			@ (mov r8, r8)
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	46c0      	nop			@ (mov r8, r8)
 8006110:	20000054 	.word	0x20000054

08006114 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006114:	b580      	push	{r7, lr}
 8006116:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006118:	4b09      	ldr	r3, [pc, #36]	@ (8006140 <vPortExitCritical+0x2c>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d102      	bne.n	8006126 <vPortExitCritical+0x12>
 8006120:	b672      	cpsid	i
 8006122:	46c0      	nop			@ (mov r8, r8)
 8006124:	e7fd      	b.n	8006122 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8006126:	4b06      	ldr	r3, [pc, #24]	@ (8006140 <vPortExitCritical+0x2c>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	1e5a      	subs	r2, r3, #1
 800612c:	4b04      	ldr	r3, [pc, #16]	@ (8006140 <vPortExitCritical+0x2c>)
 800612e:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8006130:	4b03      	ldr	r3, [pc, #12]	@ (8006140 <vPortExitCritical+0x2c>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d100      	bne.n	800613a <vPortExitCritical+0x26>
    {
        portENABLE_INTERRUPTS();
 8006138:	b662      	cpsie	i
    }
}
 800613a:	46c0      	nop			@ (mov r8, r8)
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	20000054 	.word	0x20000054

08006144 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8006144:	f3ef 8010 	mrs	r0, PRIMASK
 8006148:	b672      	cpsid	i
 800614a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800614c:	46c0      	nop			@ (mov r8, r8)
 800614e:	0018      	movs	r0, r3

08006150 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8006150:	f380 8810 	msr	PRIMASK, r0
 8006154:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8006156:	46c0      	nop			@ (mov r8, r8)
	...

08006160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006160:	f3ef 8009 	mrs	r0, PSP
 8006164:	4b0e      	ldr	r3, [pc, #56]	@ (80061a0 <pxCurrentTCBConst>)
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	3820      	subs	r0, #32
 800616a:	6010      	str	r0, [r2, #0]
 800616c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800616e:	4644      	mov	r4, r8
 8006170:	464d      	mov	r5, r9
 8006172:	4656      	mov	r6, sl
 8006174:	465f      	mov	r7, fp
 8006176:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006178:	b508      	push	{r3, lr}
 800617a:	b672      	cpsid	i
 800617c:	f7ff fd8e 	bl	8005c9c <vTaskSwitchContext>
 8006180:	b662      	cpsie	i
 8006182:	bc0c      	pop	{r2, r3}
 8006184:	6811      	ldr	r1, [r2, #0]
 8006186:	6808      	ldr	r0, [r1, #0]
 8006188:	3010      	adds	r0, #16
 800618a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800618c:	46a0      	mov	r8, r4
 800618e:	46a9      	mov	r9, r5
 8006190:	46b2      	mov	sl, r6
 8006192:	46bb      	mov	fp, r7
 8006194:	f380 8809 	msr	PSP, r0
 8006198:	3820      	subs	r0, #32
 800619a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800619c:	4718      	bx	r3
 800619e:	46c0      	nop			@ (mov r8, r8)

080061a0 <pxCurrentTCBConst>:
 80061a0:	20000624 	.word	0x20000624
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80061a4:	46c0      	nop			@ (mov r8, r8)
 80061a6:	46c0      	nop			@ (mov r8, r8)

080061a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80061ae:	f7ff ffc9 	bl	8006144 <ulSetInterruptMaskFromISR>
 80061b2:	0003      	movs	r3, r0
 80061b4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80061b6:	f7ff fcbb 	bl	8005b30 <xTaskIncrementTick>
 80061ba:	1e03      	subs	r3, r0, #0
 80061bc:	d003      	beq.n	80061c6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80061be:	4b06      	ldr	r3, [pc, #24]	@ (80061d8 <xPortSysTickHandler+0x30>)
 80061c0:	2280      	movs	r2, #128	@ 0x80
 80061c2:	0552      	lsls	r2, r2, #21
 80061c4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	0018      	movs	r0, r3
 80061ca:	f7ff ffc1 	bl	8006150 <vClearInterruptMaskFromISR>
}
 80061ce:	46c0      	nop			@ (mov r8, r8)
 80061d0:	46bd      	mov	sp, r7
 80061d2:	b002      	add	sp, #8
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	46c0      	nop			@ (mov r8, r8)
 80061d8:	e000ed04 	.word	0xe000ed04

080061dc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 80061e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006210 <prvSetupTimerInterrupt+0x34>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 80061e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006214 <prvSetupTimerInterrupt+0x38>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80061ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006218 <prvSetupTimerInterrupt+0x3c>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	22fa      	movs	r2, #250	@ 0xfa
 80061f2:	0091      	lsls	r1, r2, #2
 80061f4:	0018      	movs	r0, r3
 80061f6:	f7f9 ffa3 	bl	8000140 <__udivsi3>
 80061fa:	0003      	movs	r3, r0
 80061fc:	001a      	movs	r2, r3
 80061fe:	4b07      	ldr	r3, [pc, #28]	@ (800621c <prvSetupTimerInterrupt+0x40>)
 8006200:	3a01      	subs	r2, #1
 8006202:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8006204:	4b02      	ldr	r3, [pc, #8]	@ (8006210 <prvSetupTimerInterrupt+0x34>)
 8006206:	2207      	movs	r2, #7
 8006208:	601a      	str	r2, [r3, #0]
}
 800620a:	46c0      	nop			@ (mov r8, r8)
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	e000e010 	.word	0xe000e010
 8006214:	e000e018 	.word	0xe000e018
 8006218:	20000048 	.word	0x20000048
 800621c:	e000e014 	.word	0xe000e014

08006220 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b086      	sub	sp, #24
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006228:	2300      	movs	r3, #0
 800622a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800622c:	f7ff fbe8 	bl	8005a00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006230:	4b4a      	ldr	r3, [pc, #296]	@ (800635c <pvPortMalloc+0x13c>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d101      	bne.n	800623c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006238:	f000 f8e4 	bl	8006404 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800623c:	4b48      	ldr	r3, [pc, #288]	@ (8006360 <pvPortMalloc+0x140>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	4013      	ands	r3, r2
 8006244:	d000      	beq.n	8006248 <pvPortMalloc+0x28>
 8006246:	e07b      	b.n	8006340 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d013      	beq.n	8006276 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 800624e:	2208      	movs	r2, #8
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	189b      	adds	r3, r3, r2
 8006254:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2207      	movs	r2, #7
 800625a:	4013      	ands	r3, r2
 800625c:	d00b      	beq.n	8006276 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2207      	movs	r2, #7
 8006262:	4393      	bics	r3, r2
 8006264:	3308      	adds	r3, #8
 8006266:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2207      	movs	r2, #7
 800626c:	4013      	ands	r3, r2
 800626e:	d002      	beq.n	8006276 <pvPortMalloc+0x56>
 8006270:	b672      	cpsid	i
 8006272:	46c0      	nop			@ (mov r8, r8)
 8006274:	e7fd      	b.n	8006272 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d061      	beq.n	8006340 <pvPortMalloc+0x120>
 800627c:	4b39      	ldr	r3, [pc, #228]	@ (8006364 <pvPortMalloc+0x144>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	429a      	cmp	r2, r3
 8006284:	d85c      	bhi.n	8006340 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006286:	4b38      	ldr	r3, [pc, #224]	@ (8006368 <pvPortMalloc+0x148>)
 8006288:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800628a:	4b37      	ldr	r3, [pc, #220]	@ (8006368 <pvPortMalloc+0x148>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006290:	e004      	b.n	800629c <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d903      	bls.n	80062ae <pvPortMalloc+0x8e>
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1f1      	bne.n	8006292 <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80062ae:	4b2b      	ldr	r3, [pc, #172]	@ (800635c <pvPortMalloc+0x13c>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d043      	beq.n	8006340 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2208      	movs	r2, #8
 80062be:	189b      	adds	r3, r3, r2
 80062c0:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	685a      	ldr	r2, [r3, #4]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	1ad2      	subs	r2, r2, r3
 80062d2:	2308      	movs	r3, #8
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d917      	bls.n	800630a <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	18d3      	adds	r3, r2, r3
 80062e0:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	2207      	movs	r2, #7
 80062e6:	4013      	ands	r3, r2
 80062e8:	d002      	beq.n	80062f0 <pvPortMalloc+0xd0>
 80062ea:	b672      	cpsid	i
 80062ec:	46c0      	nop			@ (mov r8, r8)
 80062ee:	e7fd      	b.n	80062ec <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	685a      	ldr	r2, [r3, #4]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	1ad2      	subs	r2, r2, r3
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	0018      	movs	r0, r3
 8006306:	f000 f8dd 	bl	80064c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800630a:	4b16      	ldr	r3, [pc, #88]	@ (8006364 <pvPortMalloc+0x144>)
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	1ad2      	subs	r2, r2, r3
 8006314:	4b13      	ldr	r3, [pc, #76]	@ (8006364 <pvPortMalloc+0x144>)
 8006316:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006318:	4b12      	ldr	r3, [pc, #72]	@ (8006364 <pvPortMalloc+0x144>)
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	4b13      	ldr	r3, [pc, #76]	@ (800636c <pvPortMalloc+0x14c>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	429a      	cmp	r2, r3
 8006322:	d203      	bcs.n	800632c <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006324:	4b0f      	ldr	r3, [pc, #60]	@ (8006364 <pvPortMalloc+0x144>)
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	4b10      	ldr	r3, [pc, #64]	@ (800636c <pvPortMalloc+0x14c>)
 800632a:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	4b0b      	ldr	r3, [pc, #44]	@ (8006360 <pvPortMalloc+0x140>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	431a      	orrs	r2, r3
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	2200      	movs	r2, #0
 800633e:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006340:	f7ff fb6a 	bl	8005a18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2207      	movs	r2, #7
 8006348:	4013      	ands	r3, r2
 800634a:	d002      	beq.n	8006352 <pvPortMalloc+0x132>
 800634c:	b672      	cpsid	i
 800634e:	46c0      	nop			@ (mov r8, r8)
 8006350:	e7fd      	b.n	800634e <pvPortMalloc+0x12e>
	return pvReturn;
 8006352:	68fb      	ldr	r3, [r7, #12]
}
 8006354:	0018      	movs	r0, r3
 8006356:	46bd      	mov	sp, r7
 8006358:	b006      	add	sp, #24
 800635a:	bd80      	pop	{r7, pc}
 800635c:	20001358 	.word	0x20001358
 8006360:	20001364 	.word	0x20001364
 8006364:	2000135c 	.word	0x2000135c
 8006368:	20001350 	.word	0x20001350
 800636c:	20001360 	.word	0x20001360

08006370 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d037      	beq.n	80063f2 <vPortFree+0x82>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006382:	2308      	movs	r3, #8
 8006384:	425b      	negs	r3, r3
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	18d3      	adds	r3, r2, r3
 800638a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	4b19      	ldr	r3, [pc, #100]	@ (80063fc <vPortFree+0x8c>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4013      	ands	r3, r2
 800639a:	d102      	bne.n	80063a2 <vPortFree+0x32>
 800639c:	b672      	cpsid	i
 800639e:	46c0      	nop			@ (mov r8, r8)
 80063a0:	e7fd      	b.n	800639e <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d002      	beq.n	80063b0 <vPortFree+0x40>
 80063aa:	b672      	cpsid	i
 80063ac:	46c0      	nop			@ (mov r8, r8)
 80063ae:	e7fd      	b.n	80063ac <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	4b11      	ldr	r3, [pc, #68]	@ (80063fc <vPortFree+0x8c>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4013      	ands	r3, r2
 80063ba:	d01a      	beq.n	80063f2 <vPortFree+0x82>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d116      	bne.n	80063f2 <vPortFree+0x82>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	685a      	ldr	r2, [r3, #4]
 80063c8:	4b0c      	ldr	r3, [pc, #48]	@ (80063fc <vPortFree+0x8c>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	43db      	mvns	r3, r3
 80063ce:	401a      	ands	r2, r3
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80063d4:	f7ff fb14 	bl	8005a00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	685a      	ldr	r2, [r3, #4]
 80063dc:	4b08      	ldr	r3, [pc, #32]	@ (8006400 <vPortFree+0x90>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	18d2      	adds	r2, r2, r3
 80063e2:	4b07      	ldr	r3, [pc, #28]	@ (8006400 <vPortFree+0x90>)
 80063e4:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	0018      	movs	r0, r3
 80063ea:	f000 f86b 	bl	80064c4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80063ee:	f7ff fb13 	bl	8005a18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80063f2:	46c0      	nop			@ (mov r8, r8)
 80063f4:	46bd      	mov	sp, r7
 80063f6:	b004      	add	sp, #16
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	46c0      	nop			@ (mov r8, r8)
 80063fc:	20001364 	.word	0x20001364
 8006400:	2000135c 	.word	0x2000135c

08006404 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800640a:	23c0      	movs	r3, #192	@ 0xc0
 800640c:	011b      	lsls	r3, r3, #4
 800640e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006410:	4b26      	ldr	r3, [pc, #152]	@ (80064ac <prvHeapInit+0xa8>)
 8006412:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2207      	movs	r2, #7
 8006418:	4013      	ands	r3, r2
 800641a:	d00c      	beq.n	8006436 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	3307      	adds	r3, #7
 8006420:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2207      	movs	r2, #7
 8006426:	4393      	bics	r3, r2
 8006428:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	1ad2      	subs	r2, r2, r3
 8006430:	4b1e      	ldr	r3, [pc, #120]	@ (80064ac <prvHeapInit+0xa8>)
 8006432:	18d3      	adds	r3, r2, r3
 8006434:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800643a:	4b1d      	ldr	r3, [pc, #116]	@ (80064b0 <prvHeapInit+0xac>)
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006440:	4b1b      	ldr	r3, [pc, #108]	@ (80064b0 <prvHeapInit+0xac>)
 8006442:	2200      	movs	r2, #0
 8006444:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	18d3      	adds	r3, r2, r3
 800644c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800644e:	2208      	movs	r2, #8
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	1a9b      	subs	r3, r3, r2
 8006454:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2207      	movs	r2, #7
 800645a:	4393      	bics	r3, r2
 800645c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	4b14      	ldr	r3, [pc, #80]	@ (80064b4 <prvHeapInit+0xb0>)
 8006462:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8006464:	4b13      	ldr	r3, [pc, #76]	@ (80064b4 <prvHeapInit+0xb0>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2200      	movs	r2, #0
 800646a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800646c:	4b11      	ldr	r3, [pc, #68]	@ (80064b4 <prvHeapInit+0xb0>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2200      	movs	r2, #0
 8006472:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	1ad2      	subs	r2, r2, r3
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006482:	4b0c      	ldr	r3, [pc, #48]	@ (80064b4 <prvHeapInit+0xb0>)
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	4b0a      	ldr	r3, [pc, #40]	@ (80064b8 <prvHeapInit+0xb4>)
 8006490:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	4b09      	ldr	r3, [pc, #36]	@ (80064bc <prvHeapInit+0xb8>)
 8006498:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800649a:	4b09      	ldr	r3, [pc, #36]	@ (80064c0 <prvHeapInit+0xbc>)
 800649c:	2280      	movs	r2, #128	@ 0x80
 800649e:	0612      	lsls	r2, r2, #24
 80064a0:	601a      	str	r2, [r3, #0]
}
 80064a2:	46c0      	nop			@ (mov r8, r8)
 80064a4:	46bd      	mov	sp, r7
 80064a6:	b004      	add	sp, #16
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	46c0      	nop			@ (mov r8, r8)
 80064ac:	20000750 	.word	0x20000750
 80064b0:	20001350 	.word	0x20001350
 80064b4:	20001358 	.word	0x20001358
 80064b8:	20001360 	.word	0x20001360
 80064bc:	2000135c 	.word	0x2000135c
 80064c0:	20001364 	.word	0x20001364

080064c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80064cc:	4b27      	ldr	r3, [pc, #156]	@ (800656c <prvInsertBlockIntoFreeList+0xa8>)
 80064ce:	60fb      	str	r3, [r7, #12]
 80064d0:	e002      	b.n	80064d8 <prvInsertBlockIntoFreeList+0x14>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	60fb      	str	r3, [r7, #12]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d8f7      	bhi.n	80064d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	18d3      	adds	r3, r2, r3
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d108      	bne.n	8006506 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	685a      	ldr	r2, [r3, #4]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	18d2      	adds	r2, r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	68ba      	ldr	r2, [r7, #8]
 8006510:	18d2      	adds	r2, r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	429a      	cmp	r2, r3
 8006518:	d118      	bne.n	800654c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	4b14      	ldr	r3, [pc, #80]	@ (8006570 <prvInsertBlockIntoFreeList+0xac>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	429a      	cmp	r2, r3
 8006524:	d00d      	beq.n	8006542 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685a      	ldr	r2, [r3, #4]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	18d2      	adds	r2, r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	601a      	str	r2, [r3, #0]
 8006540:	e008      	b.n	8006554 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006542:	4b0b      	ldr	r3, [pc, #44]	@ (8006570 <prvInsertBlockIntoFreeList+0xac>)
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	601a      	str	r2, [r3, #0]
 800654a:	e003      	b.n	8006554 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	429a      	cmp	r2, r3
 800655a:	d002      	beq.n	8006562 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006562:	46c0      	nop			@ (mov r8, r8)
 8006564:	46bd      	mov	sp, r7
 8006566:	b004      	add	sp, #16
 8006568:	bd80      	pop	{r7, pc}
 800656a:	46c0      	nop			@ (mov r8, r8)
 800656c:	20001350 	.word	0x20001350
 8006570:	20001358 	.word	0x20001358

08006574 <malloc>:
 8006574:	b510      	push	{r4, lr}
 8006576:	4b03      	ldr	r3, [pc, #12]	@ (8006584 <malloc+0x10>)
 8006578:	0001      	movs	r1, r0
 800657a:	6818      	ldr	r0, [r3, #0]
 800657c:	f000 f826 	bl	80065cc <_malloc_r>
 8006580:	bd10      	pop	{r4, pc}
 8006582:	46c0      	nop			@ (mov r8, r8)
 8006584:	20000064 	.word	0x20000064

08006588 <sbrk_aligned>:
 8006588:	b570      	push	{r4, r5, r6, lr}
 800658a:	4e0f      	ldr	r6, [pc, #60]	@ (80065c8 <sbrk_aligned+0x40>)
 800658c:	000d      	movs	r5, r1
 800658e:	6831      	ldr	r1, [r6, #0]
 8006590:	0004      	movs	r4, r0
 8006592:	2900      	cmp	r1, #0
 8006594:	d102      	bne.n	800659c <sbrk_aligned+0x14>
 8006596:	f000 fe61 	bl	800725c <_sbrk_r>
 800659a:	6030      	str	r0, [r6, #0]
 800659c:	0029      	movs	r1, r5
 800659e:	0020      	movs	r0, r4
 80065a0:	f000 fe5c 	bl	800725c <_sbrk_r>
 80065a4:	1c43      	adds	r3, r0, #1
 80065a6:	d103      	bne.n	80065b0 <sbrk_aligned+0x28>
 80065a8:	2501      	movs	r5, #1
 80065aa:	426d      	negs	r5, r5
 80065ac:	0028      	movs	r0, r5
 80065ae:	bd70      	pop	{r4, r5, r6, pc}
 80065b0:	2303      	movs	r3, #3
 80065b2:	1cc5      	adds	r5, r0, #3
 80065b4:	439d      	bics	r5, r3
 80065b6:	42a8      	cmp	r0, r5
 80065b8:	d0f8      	beq.n	80065ac <sbrk_aligned+0x24>
 80065ba:	1a29      	subs	r1, r5, r0
 80065bc:	0020      	movs	r0, r4
 80065be:	f000 fe4d 	bl	800725c <_sbrk_r>
 80065c2:	3001      	adds	r0, #1
 80065c4:	d1f2      	bne.n	80065ac <sbrk_aligned+0x24>
 80065c6:	e7ef      	b.n	80065a8 <sbrk_aligned+0x20>
 80065c8:	20001368 	.word	0x20001368

080065cc <_malloc_r>:
 80065cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065ce:	2203      	movs	r2, #3
 80065d0:	1ccb      	adds	r3, r1, #3
 80065d2:	4393      	bics	r3, r2
 80065d4:	3308      	adds	r3, #8
 80065d6:	0005      	movs	r5, r0
 80065d8:	001f      	movs	r7, r3
 80065da:	2b0c      	cmp	r3, #12
 80065dc:	d234      	bcs.n	8006648 <_malloc_r+0x7c>
 80065de:	270c      	movs	r7, #12
 80065e0:	42b9      	cmp	r1, r7
 80065e2:	d833      	bhi.n	800664c <_malloc_r+0x80>
 80065e4:	0028      	movs	r0, r5
 80065e6:	f000 f871 	bl	80066cc <__malloc_lock>
 80065ea:	4e37      	ldr	r6, [pc, #220]	@ (80066c8 <_malloc_r+0xfc>)
 80065ec:	6833      	ldr	r3, [r6, #0]
 80065ee:	001c      	movs	r4, r3
 80065f0:	2c00      	cmp	r4, #0
 80065f2:	d12f      	bne.n	8006654 <_malloc_r+0x88>
 80065f4:	0039      	movs	r1, r7
 80065f6:	0028      	movs	r0, r5
 80065f8:	f7ff ffc6 	bl	8006588 <sbrk_aligned>
 80065fc:	0004      	movs	r4, r0
 80065fe:	1c43      	adds	r3, r0, #1
 8006600:	d15f      	bne.n	80066c2 <_malloc_r+0xf6>
 8006602:	6834      	ldr	r4, [r6, #0]
 8006604:	9400      	str	r4, [sp, #0]
 8006606:	9b00      	ldr	r3, [sp, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d14a      	bne.n	80066a2 <_malloc_r+0xd6>
 800660c:	2c00      	cmp	r4, #0
 800660e:	d052      	beq.n	80066b6 <_malloc_r+0xea>
 8006610:	6823      	ldr	r3, [r4, #0]
 8006612:	0028      	movs	r0, r5
 8006614:	18e3      	adds	r3, r4, r3
 8006616:	9900      	ldr	r1, [sp, #0]
 8006618:	9301      	str	r3, [sp, #4]
 800661a:	f000 fe1f 	bl	800725c <_sbrk_r>
 800661e:	9b01      	ldr	r3, [sp, #4]
 8006620:	4283      	cmp	r3, r0
 8006622:	d148      	bne.n	80066b6 <_malloc_r+0xea>
 8006624:	6823      	ldr	r3, [r4, #0]
 8006626:	0028      	movs	r0, r5
 8006628:	1aff      	subs	r7, r7, r3
 800662a:	0039      	movs	r1, r7
 800662c:	f7ff ffac 	bl	8006588 <sbrk_aligned>
 8006630:	3001      	adds	r0, #1
 8006632:	d040      	beq.n	80066b6 <_malloc_r+0xea>
 8006634:	6823      	ldr	r3, [r4, #0]
 8006636:	19db      	adds	r3, r3, r7
 8006638:	6023      	str	r3, [r4, #0]
 800663a:	6833      	ldr	r3, [r6, #0]
 800663c:	685a      	ldr	r2, [r3, #4]
 800663e:	2a00      	cmp	r2, #0
 8006640:	d133      	bne.n	80066aa <_malloc_r+0xde>
 8006642:	9b00      	ldr	r3, [sp, #0]
 8006644:	6033      	str	r3, [r6, #0]
 8006646:	e019      	b.n	800667c <_malloc_r+0xb0>
 8006648:	2b00      	cmp	r3, #0
 800664a:	dac9      	bge.n	80065e0 <_malloc_r+0x14>
 800664c:	230c      	movs	r3, #12
 800664e:	602b      	str	r3, [r5, #0]
 8006650:	2000      	movs	r0, #0
 8006652:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006654:	6821      	ldr	r1, [r4, #0]
 8006656:	1bc9      	subs	r1, r1, r7
 8006658:	d420      	bmi.n	800669c <_malloc_r+0xd0>
 800665a:	290b      	cmp	r1, #11
 800665c:	d90a      	bls.n	8006674 <_malloc_r+0xa8>
 800665e:	19e2      	adds	r2, r4, r7
 8006660:	6027      	str	r7, [r4, #0]
 8006662:	42a3      	cmp	r3, r4
 8006664:	d104      	bne.n	8006670 <_malloc_r+0xa4>
 8006666:	6032      	str	r2, [r6, #0]
 8006668:	6863      	ldr	r3, [r4, #4]
 800666a:	6011      	str	r1, [r2, #0]
 800666c:	6053      	str	r3, [r2, #4]
 800666e:	e005      	b.n	800667c <_malloc_r+0xb0>
 8006670:	605a      	str	r2, [r3, #4]
 8006672:	e7f9      	b.n	8006668 <_malloc_r+0x9c>
 8006674:	6862      	ldr	r2, [r4, #4]
 8006676:	42a3      	cmp	r3, r4
 8006678:	d10e      	bne.n	8006698 <_malloc_r+0xcc>
 800667a:	6032      	str	r2, [r6, #0]
 800667c:	0028      	movs	r0, r5
 800667e:	f000 f82d 	bl	80066dc <__malloc_unlock>
 8006682:	0020      	movs	r0, r4
 8006684:	2207      	movs	r2, #7
 8006686:	300b      	adds	r0, #11
 8006688:	1d23      	adds	r3, r4, #4
 800668a:	4390      	bics	r0, r2
 800668c:	1ac2      	subs	r2, r0, r3
 800668e:	4298      	cmp	r0, r3
 8006690:	d0df      	beq.n	8006652 <_malloc_r+0x86>
 8006692:	1a1b      	subs	r3, r3, r0
 8006694:	50a3      	str	r3, [r4, r2]
 8006696:	e7dc      	b.n	8006652 <_malloc_r+0x86>
 8006698:	605a      	str	r2, [r3, #4]
 800669a:	e7ef      	b.n	800667c <_malloc_r+0xb0>
 800669c:	0023      	movs	r3, r4
 800669e:	6864      	ldr	r4, [r4, #4]
 80066a0:	e7a6      	b.n	80065f0 <_malloc_r+0x24>
 80066a2:	9c00      	ldr	r4, [sp, #0]
 80066a4:	6863      	ldr	r3, [r4, #4]
 80066a6:	9300      	str	r3, [sp, #0]
 80066a8:	e7ad      	b.n	8006606 <_malloc_r+0x3a>
 80066aa:	001a      	movs	r2, r3
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	42a3      	cmp	r3, r4
 80066b0:	d1fb      	bne.n	80066aa <_malloc_r+0xde>
 80066b2:	2300      	movs	r3, #0
 80066b4:	e7da      	b.n	800666c <_malloc_r+0xa0>
 80066b6:	230c      	movs	r3, #12
 80066b8:	0028      	movs	r0, r5
 80066ba:	602b      	str	r3, [r5, #0]
 80066bc:	f000 f80e 	bl	80066dc <__malloc_unlock>
 80066c0:	e7c6      	b.n	8006650 <_malloc_r+0x84>
 80066c2:	6007      	str	r7, [r0, #0]
 80066c4:	e7da      	b.n	800667c <_malloc_r+0xb0>
 80066c6:	46c0      	nop			@ (mov r8, r8)
 80066c8:	2000136c 	.word	0x2000136c

080066cc <__malloc_lock>:
 80066cc:	b510      	push	{r4, lr}
 80066ce:	4802      	ldr	r0, [pc, #8]	@ (80066d8 <__malloc_lock+0xc>)
 80066d0:	f000 fe15 	bl	80072fe <__retarget_lock_acquire_recursive>
 80066d4:	bd10      	pop	{r4, pc}
 80066d6:	46c0      	nop			@ (mov r8, r8)
 80066d8:	200014b0 	.word	0x200014b0

080066dc <__malloc_unlock>:
 80066dc:	b510      	push	{r4, lr}
 80066de:	4802      	ldr	r0, [pc, #8]	@ (80066e8 <__malloc_unlock+0xc>)
 80066e0:	f000 fe0e 	bl	8007300 <__retarget_lock_release_recursive>
 80066e4:	bd10      	pop	{r4, pc}
 80066e6:	46c0      	nop			@ (mov r8, r8)
 80066e8:	200014b0 	.word	0x200014b0

080066ec <__cvt>:
 80066ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066ee:	001f      	movs	r7, r3
 80066f0:	2300      	movs	r3, #0
 80066f2:	0016      	movs	r6, r2
 80066f4:	b08b      	sub	sp, #44	@ 0x2c
 80066f6:	429f      	cmp	r7, r3
 80066f8:	da04      	bge.n	8006704 <__cvt+0x18>
 80066fa:	2180      	movs	r1, #128	@ 0x80
 80066fc:	0609      	lsls	r1, r1, #24
 80066fe:	187b      	adds	r3, r7, r1
 8006700:	001f      	movs	r7, r3
 8006702:	232d      	movs	r3, #45	@ 0x2d
 8006704:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006706:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8006708:	7013      	strb	r3, [r2, #0]
 800670a:	2320      	movs	r3, #32
 800670c:	2203      	movs	r2, #3
 800670e:	439d      	bics	r5, r3
 8006710:	2d46      	cmp	r5, #70	@ 0x46
 8006712:	d007      	beq.n	8006724 <__cvt+0x38>
 8006714:	002b      	movs	r3, r5
 8006716:	3b45      	subs	r3, #69	@ 0x45
 8006718:	4259      	negs	r1, r3
 800671a:	414b      	adcs	r3, r1
 800671c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800671e:	3a01      	subs	r2, #1
 8006720:	18cb      	adds	r3, r1, r3
 8006722:	9310      	str	r3, [sp, #64]	@ 0x40
 8006724:	ab09      	add	r3, sp, #36	@ 0x24
 8006726:	9304      	str	r3, [sp, #16]
 8006728:	ab08      	add	r3, sp, #32
 800672a:	9303      	str	r3, [sp, #12]
 800672c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800672e:	9200      	str	r2, [sp, #0]
 8006730:	9302      	str	r3, [sp, #8]
 8006732:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006734:	0032      	movs	r2, r6
 8006736:	9301      	str	r3, [sp, #4]
 8006738:	003b      	movs	r3, r7
 800673a:	f000 fe85 	bl	8007448 <_dtoa_r>
 800673e:	0004      	movs	r4, r0
 8006740:	2d47      	cmp	r5, #71	@ 0x47
 8006742:	d11b      	bne.n	800677c <__cvt+0x90>
 8006744:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006746:	07db      	lsls	r3, r3, #31
 8006748:	d511      	bpl.n	800676e <__cvt+0x82>
 800674a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800674c:	18c3      	adds	r3, r0, r3
 800674e:	9307      	str	r3, [sp, #28]
 8006750:	2200      	movs	r2, #0
 8006752:	2300      	movs	r3, #0
 8006754:	0030      	movs	r0, r6
 8006756:	0039      	movs	r1, r7
 8006758:	f7f9 fe78 	bl	800044c <__aeabi_dcmpeq>
 800675c:	2800      	cmp	r0, #0
 800675e:	d001      	beq.n	8006764 <__cvt+0x78>
 8006760:	9b07      	ldr	r3, [sp, #28]
 8006762:	9309      	str	r3, [sp, #36]	@ 0x24
 8006764:	2230      	movs	r2, #48	@ 0x30
 8006766:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006768:	9907      	ldr	r1, [sp, #28]
 800676a:	428b      	cmp	r3, r1
 800676c:	d320      	bcc.n	80067b0 <__cvt+0xc4>
 800676e:	0020      	movs	r0, r4
 8006770:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006772:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006774:	1b1b      	subs	r3, r3, r4
 8006776:	6013      	str	r3, [r2, #0]
 8006778:	b00b      	add	sp, #44	@ 0x2c
 800677a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800677c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800677e:	18c3      	adds	r3, r0, r3
 8006780:	9307      	str	r3, [sp, #28]
 8006782:	2d46      	cmp	r5, #70	@ 0x46
 8006784:	d1e4      	bne.n	8006750 <__cvt+0x64>
 8006786:	7803      	ldrb	r3, [r0, #0]
 8006788:	2b30      	cmp	r3, #48	@ 0x30
 800678a:	d10c      	bne.n	80067a6 <__cvt+0xba>
 800678c:	2200      	movs	r2, #0
 800678e:	2300      	movs	r3, #0
 8006790:	0030      	movs	r0, r6
 8006792:	0039      	movs	r1, r7
 8006794:	f7f9 fe5a 	bl	800044c <__aeabi_dcmpeq>
 8006798:	2800      	cmp	r0, #0
 800679a:	d104      	bne.n	80067a6 <__cvt+0xba>
 800679c:	2301      	movs	r3, #1
 800679e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80067a0:	1a9b      	subs	r3, r3, r2
 80067a2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80067a4:	6013      	str	r3, [r2, #0]
 80067a6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80067a8:	9a07      	ldr	r2, [sp, #28]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	18d3      	adds	r3, r2, r3
 80067ae:	e7ce      	b.n	800674e <__cvt+0x62>
 80067b0:	1c59      	adds	r1, r3, #1
 80067b2:	9109      	str	r1, [sp, #36]	@ 0x24
 80067b4:	701a      	strb	r2, [r3, #0]
 80067b6:	e7d6      	b.n	8006766 <__cvt+0x7a>

080067b8 <__exponent>:
 80067b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067ba:	232b      	movs	r3, #43	@ 0x2b
 80067bc:	0005      	movs	r5, r0
 80067be:	000c      	movs	r4, r1
 80067c0:	b085      	sub	sp, #20
 80067c2:	7002      	strb	r2, [r0, #0]
 80067c4:	2900      	cmp	r1, #0
 80067c6:	da01      	bge.n	80067cc <__exponent+0x14>
 80067c8:	424c      	negs	r4, r1
 80067ca:	3302      	adds	r3, #2
 80067cc:	706b      	strb	r3, [r5, #1]
 80067ce:	2c09      	cmp	r4, #9
 80067d0:	dd2c      	ble.n	800682c <__exponent+0x74>
 80067d2:	ab02      	add	r3, sp, #8
 80067d4:	1dde      	adds	r6, r3, #7
 80067d6:	0020      	movs	r0, r4
 80067d8:	210a      	movs	r1, #10
 80067da:	f7f9 fe21 	bl	8000420 <__aeabi_idivmod>
 80067de:	0037      	movs	r7, r6
 80067e0:	3130      	adds	r1, #48	@ 0x30
 80067e2:	3e01      	subs	r6, #1
 80067e4:	0020      	movs	r0, r4
 80067e6:	7031      	strb	r1, [r6, #0]
 80067e8:	210a      	movs	r1, #10
 80067ea:	9401      	str	r4, [sp, #4]
 80067ec:	f7f9 fd32 	bl	8000254 <__divsi3>
 80067f0:	9b01      	ldr	r3, [sp, #4]
 80067f2:	0004      	movs	r4, r0
 80067f4:	2b63      	cmp	r3, #99	@ 0x63
 80067f6:	dcee      	bgt.n	80067d6 <__exponent+0x1e>
 80067f8:	1eba      	subs	r2, r7, #2
 80067fa:	1ca8      	adds	r0, r5, #2
 80067fc:	0001      	movs	r1, r0
 80067fe:	0013      	movs	r3, r2
 8006800:	3430      	adds	r4, #48	@ 0x30
 8006802:	7014      	strb	r4, [r2, #0]
 8006804:	ac02      	add	r4, sp, #8
 8006806:	3407      	adds	r4, #7
 8006808:	429c      	cmp	r4, r3
 800680a:	d80a      	bhi.n	8006822 <__exponent+0x6a>
 800680c:	2300      	movs	r3, #0
 800680e:	42a2      	cmp	r2, r4
 8006810:	d803      	bhi.n	800681a <__exponent+0x62>
 8006812:	3309      	adds	r3, #9
 8006814:	aa02      	add	r2, sp, #8
 8006816:	189b      	adds	r3, r3, r2
 8006818:	1bdb      	subs	r3, r3, r7
 800681a:	18c0      	adds	r0, r0, r3
 800681c:	1b40      	subs	r0, r0, r5
 800681e:	b005      	add	sp, #20
 8006820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006822:	781c      	ldrb	r4, [r3, #0]
 8006824:	3301      	adds	r3, #1
 8006826:	700c      	strb	r4, [r1, #0]
 8006828:	3101      	adds	r1, #1
 800682a:	e7eb      	b.n	8006804 <__exponent+0x4c>
 800682c:	2330      	movs	r3, #48	@ 0x30
 800682e:	18e4      	adds	r4, r4, r3
 8006830:	70ab      	strb	r3, [r5, #2]
 8006832:	1d28      	adds	r0, r5, #4
 8006834:	70ec      	strb	r4, [r5, #3]
 8006836:	e7f1      	b.n	800681c <__exponent+0x64>

08006838 <_printf_float>:
 8006838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800683a:	b097      	sub	sp, #92	@ 0x5c
 800683c:	000d      	movs	r5, r1
 800683e:	920a      	str	r2, [sp, #40]	@ 0x28
 8006840:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8006842:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006844:	9009      	str	r0, [sp, #36]	@ 0x24
 8006846:	f000 fccb 	bl	80071e0 <_localeconv_r>
 800684a:	6803      	ldr	r3, [r0, #0]
 800684c:	0018      	movs	r0, r3
 800684e:	930d      	str	r3, [sp, #52]	@ 0x34
 8006850:	f7f9 fc5a 	bl	8000108 <strlen>
 8006854:	2300      	movs	r3, #0
 8006856:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006858:	9314      	str	r3, [sp, #80]	@ 0x50
 800685a:	7e2b      	ldrb	r3, [r5, #24]
 800685c:	2207      	movs	r2, #7
 800685e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006860:	682b      	ldr	r3, [r5, #0]
 8006862:	930e      	str	r3, [sp, #56]	@ 0x38
 8006864:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006866:	6823      	ldr	r3, [r4, #0]
 8006868:	05c9      	lsls	r1, r1, #23
 800686a:	d545      	bpl.n	80068f8 <_printf_float+0xc0>
 800686c:	189b      	adds	r3, r3, r2
 800686e:	4393      	bics	r3, r2
 8006870:	001a      	movs	r2, r3
 8006872:	3208      	adds	r2, #8
 8006874:	6022      	str	r2, [r4, #0]
 8006876:	2201      	movs	r2, #1
 8006878:	681e      	ldr	r6, [r3, #0]
 800687a:	685f      	ldr	r7, [r3, #4]
 800687c:	007b      	lsls	r3, r7, #1
 800687e:	085b      	lsrs	r3, r3, #1
 8006880:	9311      	str	r3, [sp, #68]	@ 0x44
 8006882:	9610      	str	r6, [sp, #64]	@ 0x40
 8006884:	64ae      	str	r6, [r5, #72]	@ 0x48
 8006886:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8006888:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800688a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800688c:	4ba7      	ldr	r3, [pc, #668]	@ (8006b2c <_printf_float+0x2f4>)
 800688e:	4252      	negs	r2, r2
 8006890:	f7fb fc16 	bl	80020c0 <__aeabi_dcmpun>
 8006894:	2800      	cmp	r0, #0
 8006896:	d131      	bne.n	80068fc <_printf_float+0xc4>
 8006898:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800689a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800689c:	2201      	movs	r2, #1
 800689e:	4ba3      	ldr	r3, [pc, #652]	@ (8006b2c <_printf_float+0x2f4>)
 80068a0:	4252      	negs	r2, r2
 80068a2:	f7f9 fde3 	bl	800046c <__aeabi_dcmple>
 80068a6:	2800      	cmp	r0, #0
 80068a8:	d128      	bne.n	80068fc <_printf_float+0xc4>
 80068aa:	2200      	movs	r2, #0
 80068ac:	2300      	movs	r3, #0
 80068ae:	0030      	movs	r0, r6
 80068b0:	0039      	movs	r1, r7
 80068b2:	f7f9 fdd1 	bl	8000458 <__aeabi_dcmplt>
 80068b6:	2800      	cmp	r0, #0
 80068b8:	d003      	beq.n	80068c2 <_printf_float+0x8a>
 80068ba:	002b      	movs	r3, r5
 80068bc:	222d      	movs	r2, #45	@ 0x2d
 80068be:	3343      	adds	r3, #67	@ 0x43
 80068c0:	701a      	strb	r2, [r3, #0]
 80068c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80068c4:	4f9a      	ldr	r7, [pc, #616]	@ (8006b30 <_printf_float+0x2f8>)
 80068c6:	2b47      	cmp	r3, #71	@ 0x47
 80068c8:	d900      	bls.n	80068cc <_printf_float+0x94>
 80068ca:	4f9a      	ldr	r7, [pc, #616]	@ (8006b34 <_printf_float+0x2fc>)
 80068cc:	2303      	movs	r3, #3
 80068ce:	2400      	movs	r4, #0
 80068d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80068d2:	612b      	str	r3, [r5, #16]
 80068d4:	3301      	adds	r3, #1
 80068d6:	439a      	bics	r2, r3
 80068d8:	602a      	str	r2, [r5, #0]
 80068da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068dc:	0029      	movs	r1, r5
 80068de:	9300      	str	r3, [sp, #0]
 80068e0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80068e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068e4:	aa15      	add	r2, sp, #84	@ 0x54
 80068e6:	f000 f9e5 	bl	8006cb4 <_printf_common>
 80068ea:	3001      	adds	r0, #1
 80068ec:	d000      	beq.n	80068f0 <_printf_float+0xb8>
 80068ee:	e09f      	b.n	8006a30 <_printf_float+0x1f8>
 80068f0:	2001      	movs	r0, #1
 80068f2:	4240      	negs	r0, r0
 80068f4:	b017      	add	sp, #92	@ 0x5c
 80068f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068f8:	3307      	adds	r3, #7
 80068fa:	e7b8      	b.n	800686e <_printf_float+0x36>
 80068fc:	0032      	movs	r2, r6
 80068fe:	003b      	movs	r3, r7
 8006900:	0030      	movs	r0, r6
 8006902:	0039      	movs	r1, r7
 8006904:	f7fb fbdc 	bl	80020c0 <__aeabi_dcmpun>
 8006908:	2800      	cmp	r0, #0
 800690a:	d00b      	beq.n	8006924 <_printf_float+0xec>
 800690c:	2f00      	cmp	r7, #0
 800690e:	da03      	bge.n	8006918 <_printf_float+0xe0>
 8006910:	002b      	movs	r3, r5
 8006912:	222d      	movs	r2, #45	@ 0x2d
 8006914:	3343      	adds	r3, #67	@ 0x43
 8006916:	701a      	strb	r2, [r3, #0]
 8006918:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800691a:	4f87      	ldr	r7, [pc, #540]	@ (8006b38 <_printf_float+0x300>)
 800691c:	2b47      	cmp	r3, #71	@ 0x47
 800691e:	d9d5      	bls.n	80068cc <_printf_float+0x94>
 8006920:	4f86      	ldr	r7, [pc, #536]	@ (8006b3c <_printf_float+0x304>)
 8006922:	e7d3      	b.n	80068cc <_printf_float+0x94>
 8006924:	2220      	movs	r2, #32
 8006926:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8006928:	686b      	ldr	r3, [r5, #4]
 800692a:	4394      	bics	r4, r2
 800692c:	1c5a      	adds	r2, r3, #1
 800692e:	d146      	bne.n	80069be <_printf_float+0x186>
 8006930:	3307      	adds	r3, #7
 8006932:	606b      	str	r3, [r5, #4]
 8006934:	2380      	movs	r3, #128	@ 0x80
 8006936:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006938:	00db      	lsls	r3, r3, #3
 800693a:	4313      	orrs	r3, r2
 800693c:	2200      	movs	r2, #0
 800693e:	602b      	str	r3, [r5, #0]
 8006940:	9206      	str	r2, [sp, #24]
 8006942:	aa14      	add	r2, sp, #80	@ 0x50
 8006944:	9205      	str	r2, [sp, #20]
 8006946:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006948:	a90a      	add	r1, sp, #40	@ 0x28
 800694a:	9204      	str	r2, [sp, #16]
 800694c:	aa13      	add	r2, sp, #76	@ 0x4c
 800694e:	9203      	str	r2, [sp, #12]
 8006950:	2223      	movs	r2, #35	@ 0x23
 8006952:	1852      	adds	r2, r2, r1
 8006954:	9202      	str	r2, [sp, #8]
 8006956:	9301      	str	r3, [sp, #4]
 8006958:	686b      	ldr	r3, [r5, #4]
 800695a:	0032      	movs	r2, r6
 800695c:	9300      	str	r3, [sp, #0]
 800695e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006960:	003b      	movs	r3, r7
 8006962:	f7ff fec3 	bl	80066ec <__cvt>
 8006966:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006968:	0007      	movs	r7, r0
 800696a:	2c47      	cmp	r4, #71	@ 0x47
 800696c:	d12d      	bne.n	80069ca <_printf_float+0x192>
 800696e:	1cd3      	adds	r3, r2, #3
 8006970:	db02      	blt.n	8006978 <_printf_float+0x140>
 8006972:	686b      	ldr	r3, [r5, #4]
 8006974:	429a      	cmp	r2, r3
 8006976:	dd48      	ble.n	8006a0a <_printf_float+0x1d2>
 8006978:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800697a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800697c:	3b02      	subs	r3, #2
 800697e:	b2db      	uxtb	r3, r3
 8006980:	930c      	str	r3, [sp, #48]	@ 0x30
 8006982:	0028      	movs	r0, r5
 8006984:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006986:	3901      	subs	r1, #1
 8006988:	3050      	adds	r0, #80	@ 0x50
 800698a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800698c:	f7ff ff14 	bl	80067b8 <__exponent>
 8006990:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006992:	0004      	movs	r4, r0
 8006994:	1813      	adds	r3, r2, r0
 8006996:	612b      	str	r3, [r5, #16]
 8006998:	2a01      	cmp	r2, #1
 800699a:	dc02      	bgt.n	80069a2 <_printf_float+0x16a>
 800699c:	682a      	ldr	r2, [r5, #0]
 800699e:	07d2      	lsls	r2, r2, #31
 80069a0:	d501      	bpl.n	80069a6 <_printf_float+0x16e>
 80069a2:	3301      	adds	r3, #1
 80069a4:	612b      	str	r3, [r5, #16]
 80069a6:	2323      	movs	r3, #35	@ 0x23
 80069a8:	aa0a      	add	r2, sp, #40	@ 0x28
 80069aa:	189b      	adds	r3, r3, r2
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d100      	bne.n	80069b4 <_printf_float+0x17c>
 80069b2:	e792      	b.n	80068da <_printf_float+0xa2>
 80069b4:	002b      	movs	r3, r5
 80069b6:	222d      	movs	r2, #45	@ 0x2d
 80069b8:	3343      	adds	r3, #67	@ 0x43
 80069ba:	701a      	strb	r2, [r3, #0]
 80069bc:	e78d      	b.n	80068da <_printf_float+0xa2>
 80069be:	2c47      	cmp	r4, #71	@ 0x47
 80069c0:	d1b8      	bne.n	8006934 <_printf_float+0xfc>
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1b6      	bne.n	8006934 <_printf_float+0xfc>
 80069c6:	3301      	adds	r3, #1
 80069c8:	e7b3      	b.n	8006932 <_printf_float+0xfa>
 80069ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80069cc:	0011      	movs	r1, r2
 80069ce:	2b65      	cmp	r3, #101	@ 0x65
 80069d0:	d9d7      	bls.n	8006982 <_printf_float+0x14a>
 80069d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80069d4:	2b66      	cmp	r3, #102	@ 0x66
 80069d6:	d11a      	bne.n	8006a0e <_printf_float+0x1d6>
 80069d8:	686b      	ldr	r3, [r5, #4]
 80069da:	2a00      	cmp	r2, #0
 80069dc:	dd09      	ble.n	80069f2 <_printf_float+0x1ba>
 80069de:	612a      	str	r2, [r5, #16]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d102      	bne.n	80069ea <_printf_float+0x1b2>
 80069e4:	6829      	ldr	r1, [r5, #0]
 80069e6:	07c9      	lsls	r1, r1, #31
 80069e8:	d50b      	bpl.n	8006a02 <_printf_float+0x1ca>
 80069ea:	3301      	adds	r3, #1
 80069ec:	189b      	adds	r3, r3, r2
 80069ee:	612b      	str	r3, [r5, #16]
 80069f0:	e007      	b.n	8006a02 <_printf_float+0x1ca>
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d103      	bne.n	80069fe <_printf_float+0x1c6>
 80069f6:	2201      	movs	r2, #1
 80069f8:	6829      	ldr	r1, [r5, #0]
 80069fa:	4211      	tst	r1, r2
 80069fc:	d000      	beq.n	8006a00 <_printf_float+0x1c8>
 80069fe:	1c9a      	adds	r2, r3, #2
 8006a00:	612a      	str	r2, [r5, #16]
 8006a02:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006a04:	2400      	movs	r4, #0
 8006a06:	65ab      	str	r3, [r5, #88]	@ 0x58
 8006a08:	e7cd      	b.n	80069a6 <_printf_float+0x16e>
 8006a0a:	2367      	movs	r3, #103	@ 0x67
 8006a0c:	930c      	str	r3, [sp, #48]	@ 0x30
 8006a0e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006a10:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006a12:	4299      	cmp	r1, r3
 8006a14:	db06      	blt.n	8006a24 <_printf_float+0x1ec>
 8006a16:	682b      	ldr	r3, [r5, #0]
 8006a18:	6129      	str	r1, [r5, #16]
 8006a1a:	07db      	lsls	r3, r3, #31
 8006a1c:	d5f1      	bpl.n	8006a02 <_printf_float+0x1ca>
 8006a1e:	3101      	adds	r1, #1
 8006a20:	6129      	str	r1, [r5, #16]
 8006a22:	e7ee      	b.n	8006a02 <_printf_float+0x1ca>
 8006a24:	2201      	movs	r2, #1
 8006a26:	2900      	cmp	r1, #0
 8006a28:	dce0      	bgt.n	80069ec <_printf_float+0x1b4>
 8006a2a:	1892      	adds	r2, r2, r2
 8006a2c:	1a52      	subs	r2, r2, r1
 8006a2e:	e7dd      	b.n	80069ec <_printf_float+0x1b4>
 8006a30:	682a      	ldr	r2, [r5, #0]
 8006a32:	0553      	lsls	r3, r2, #21
 8006a34:	d408      	bmi.n	8006a48 <_printf_float+0x210>
 8006a36:	692b      	ldr	r3, [r5, #16]
 8006a38:	003a      	movs	r2, r7
 8006a3a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006a3c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a3e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006a40:	47a0      	blx	r4
 8006a42:	3001      	adds	r0, #1
 8006a44:	d129      	bne.n	8006a9a <_printf_float+0x262>
 8006a46:	e753      	b.n	80068f0 <_printf_float+0xb8>
 8006a48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006a4a:	2b65      	cmp	r3, #101	@ 0x65
 8006a4c:	d800      	bhi.n	8006a50 <_printf_float+0x218>
 8006a4e:	e0da      	b.n	8006c06 <_printf_float+0x3ce>
 8006a50:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8006a52:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8006a54:	2200      	movs	r2, #0
 8006a56:	2300      	movs	r3, #0
 8006a58:	f7f9 fcf8 	bl	800044c <__aeabi_dcmpeq>
 8006a5c:	2800      	cmp	r0, #0
 8006a5e:	d033      	beq.n	8006ac8 <_printf_float+0x290>
 8006a60:	2301      	movs	r3, #1
 8006a62:	4a37      	ldr	r2, [pc, #220]	@ (8006b40 <_printf_float+0x308>)
 8006a64:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006a66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a68:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006a6a:	47a0      	blx	r4
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	d100      	bne.n	8006a72 <_printf_float+0x23a>
 8006a70:	e73e      	b.n	80068f0 <_printf_float+0xb8>
 8006a72:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8006a74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006a76:	42b3      	cmp	r3, r6
 8006a78:	db02      	blt.n	8006a80 <_printf_float+0x248>
 8006a7a:	682b      	ldr	r3, [r5, #0]
 8006a7c:	07db      	lsls	r3, r3, #31
 8006a7e:	d50c      	bpl.n	8006a9a <_printf_float+0x262>
 8006a80:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006a82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a84:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006a86:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006a88:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a8a:	47a0      	blx	r4
 8006a8c:	2400      	movs	r4, #0
 8006a8e:	3001      	adds	r0, #1
 8006a90:	d100      	bne.n	8006a94 <_printf_float+0x25c>
 8006a92:	e72d      	b.n	80068f0 <_printf_float+0xb8>
 8006a94:	1e73      	subs	r3, r6, #1
 8006a96:	42a3      	cmp	r3, r4
 8006a98:	dc0a      	bgt.n	8006ab0 <_printf_float+0x278>
 8006a9a:	682b      	ldr	r3, [r5, #0]
 8006a9c:	079b      	lsls	r3, r3, #30
 8006a9e:	d500      	bpl.n	8006aa2 <_printf_float+0x26a>
 8006aa0:	e105      	b.n	8006cae <_printf_float+0x476>
 8006aa2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006aa4:	68e8      	ldr	r0, [r5, #12]
 8006aa6:	4298      	cmp	r0, r3
 8006aa8:	db00      	blt.n	8006aac <_printf_float+0x274>
 8006aaa:	e723      	b.n	80068f4 <_printf_float+0xbc>
 8006aac:	0018      	movs	r0, r3
 8006aae:	e721      	b.n	80068f4 <_printf_float+0xbc>
 8006ab0:	002a      	movs	r2, r5
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ab6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ab8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006aba:	321a      	adds	r2, #26
 8006abc:	47b8      	blx	r7
 8006abe:	3001      	adds	r0, #1
 8006ac0:	d100      	bne.n	8006ac4 <_printf_float+0x28c>
 8006ac2:	e715      	b.n	80068f0 <_printf_float+0xb8>
 8006ac4:	3401      	adds	r4, #1
 8006ac6:	e7e5      	b.n	8006a94 <_printf_float+0x25c>
 8006ac8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	dc3a      	bgt.n	8006b44 <_printf_float+0x30c>
 8006ace:	2301      	movs	r3, #1
 8006ad0:	4a1b      	ldr	r2, [pc, #108]	@ (8006b40 <_printf_float+0x308>)
 8006ad2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ad4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ad6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006ad8:	47a0      	blx	r4
 8006ada:	3001      	adds	r0, #1
 8006adc:	d100      	bne.n	8006ae0 <_printf_float+0x2a8>
 8006ade:	e707      	b.n	80068f0 <_printf_float+0xb8>
 8006ae0:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8006ae2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006ae4:	4333      	orrs	r3, r6
 8006ae6:	d102      	bne.n	8006aee <_printf_float+0x2b6>
 8006ae8:	682b      	ldr	r3, [r5, #0]
 8006aea:	07db      	lsls	r3, r3, #31
 8006aec:	d5d5      	bpl.n	8006a9a <_printf_float+0x262>
 8006aee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006af0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006af2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006af4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006af6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006af8:	47a0      	blx	r4
 8006afa:	2300      	movs	r3, #0
 8006afc:	3001      	adds	r0, #1
 8006afe:	d100      	bne.n	8006b02 <_printf_float+0x2ca>
 8006b00:	e6f6      	b.n	80068f0 <_printf_float+0xb8>
 8006b02:	930c      	str	r3, [sp, #48]	@ 0x30
 8006b04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006b06:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006b08:	425b      	negs	r3, r3
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	dc01      	bgt.n	8006b12 <_printf_float+0x2da>
 8006b0e:	0033      	movs	r3, r6
 8006b10:	e792      	b.n	8006a38 <_printf_float+0x200>
 8006b12:	002a      	movs	r2, r5
 8006b14:	2301      	movs	r3, #1
 8006b16:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006b18:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006b1a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006b1c:	321a      	adds	r2, #26
 8006b1e:	47a0      	blx	r4
 8006b20:	3001      	adds	r0, #1
 8006b22:	d100      	bne.n	8006b26 <_printf_float+0x2ee>
 8006b24:	e6e4      	b.n	80068f0 <_printf_float+0xb8>
 8006b26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006b28:	3301      	adds	r3, #1
 8006b2a:	e7ea      	b.n	8006b02 <_printf_float+0x2ca>
 8006b2c:	7fefffff 	.word	0x7fefffff
 8006b30:	080090d8 	.word	0x080090d8
 8006b34:	080090dc 	.word	0x080090dc
 8006b38:	080090e0 	.word	0x080090e0
 8006b3c:	080090e4 	.word	0x080090e4
 8006b40:	080090e8 	.word	0x080090e8
 8006b44:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006b46:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8006b48:	930c      	str	r3, [sp, #48]	@ 0x30
 8006b4a:	429e      	cmp	r6, r3
 8006b4c:	dd00      	ble.n	8006b50 <_printf_float+0x318>
 8006b4e:	001e      	movs	r6, r3
 8006b50:	2e00      	cmp	r6, #0
 8006b52:	dc31      	bgt.n	8006bb8 <_printf_float+0x380>
 8006b54:	43f3      	mvns	r3, r6
 8006b56:	2400      	movs	r4, #0
 8006b58:	17db      	asrs	r3, r3, #31
 8006b5a:	4033      	ands	r3, r6
 8006b5c:	930e      	str	r3, [sp, #56]	@ 0x38
 8006b5e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8006b60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b62:	1af3      	subs	r3, r6, r3
 8006b64:	42a3      	cmp	r3, r4
 8006b66:	dc30      	bgt.n	8006bca <_printf_float+0x392>
 8006b68:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006b6a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	dc38      	bgt.n	8006be2 <_printf_float+0x3aa>
 8006b70:	682b      	ldr	r3, [r5, #0]
 8006b72:	07db      	lsls	r3, r3, #31
 8006b74:	d435      	bmi.n	8006be2 <_printf_float+0x3aa>
 8006b76:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8006b78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006b7a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006b7c:	1b9b      	subs	r3, r3, r6
 8006b7e:	1b14      	subs	r4, r2, r4
 8006b80:	429c      	cmp	r4, r3
 8006b82:	dd00      	ble.n	8006b86 <_printf_float+0x34e>
 8006b84:	001c      	movs	r4, r3
 8006b86:	2c00      	cmp	r4, #0
 8006b88:	dc34      	bgt.n	8006bf4 <_printf_float+0x3bc>
 8006b8a:	43e3      	mvns	r3, r4
 8006b8c:	2600      	movs	r6, #0
 8006b8e:	17db      	asrs	r3, r3, #31
 8006b90:	401c      	ands	r4, r3
 8006b92:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006b94:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	1b1b      	subs	r3, r3, r4
 8006b9a:	42b3      	cmp	r3, r6
 8006b9c:	dc00      	bgt.n	8006ba0 <_printf_float+0x368>
 8006b9e:	e77c      	b.n	8006a9a <_printf_float+0x262>
 8006ba0:	002a      	movs	r2, r5
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ba6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ba8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006baa:	321a      	adds	r2, #26
 8006bac:	47b8      	blx	r7
 8006bae:	3001      	adds	r0, #1
 8006bb0:	d100      	bne.n	8006bb4 <_printf_float+0x37c>
 8006bb2:	e69d      	b.n	80068f0 <_printf_float+0xb8>
 8006bb4:	3601      	adds	r6, #1
 8006bb6:	e7ec      	b.n	8006b92 <_printf_float+0x35a>
 8006bb8:	0033      	movs	r3, r6
 8006bba:	003a      	movs	r2, r7
 8006bbc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006bbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006bc0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006bc2:	47a0      	blx	r4
 8006bc4:	3001      	adds	r0, #1
 8006bc6:	d1c5      	bne.n	8006b54 <_printf_float+0x31c>
 8006bc8:	e692      	b.n	80068f0 <_printf_float+0xb8>
 8006bca:	002a      	movs	r2, r5
 8006bcc:	2301      	movs	r3, #1
 8006bce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006bd0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006bd2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006bd4:	321a      	adds	r2, #26
 8006bd6:	47b0      	blx	r6
 8006bd8:	3001      	adds	r0, #1
 8006bda:	d100      	bne.n	8006bde <_printf_float+0x3a6>
 8006bdc:	e688      	b.n	80068f0 <_printf_float+0xb8>
 8006bde:	3401      	adds	r4, #1
 8006be0:	e7bd      	b.n	8006b5e <_printf_float+0x326>
 8006be2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006be4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006be6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006be8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006bea:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006bec:	47a0      	blx	r4
 8006bee:	3001      	adds	r0, #1
 8006bf0:	d1c1      	bne.n	8006b76 <_printf_float+0x33e>
 8006bf2:	e67d      	b.n	80068f0 <_printf_float+0xb8>
 8006bf4:	19ba      	adds	r2, r7, r6
 8006bf6:	0023      	movs	r3, r4
 8006bf8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006bfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006bfc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006bfe:	47b0      	blx	r6
 8006c00:	3001      	adds	r0, #1
 8006c02:	d1c2      	bne.n	8006b8a <_printf_float+0x352>
 8006c04:	e674      	b.n	80068f0 <_printf_float+0xb8>
 8006c06:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006c08:	930c      	str	r3, [sp, #48]	@ 0x30
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	dc02      	bgt.n	8006c14 <_printf_float+0x3dc>
 8006c0e:	2301      	movs	r3, #1
 8006c10:	421a      	tst	r2, r3
 8006c12:	d039      	beq.n	8006c88 <_printf_float+0x450>
 8006c14:	2301      	movs	r3, #1
 8006c16:	003a      	movs	r2, r7
 8006c18:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006c1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c1c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006c1e:	47b0      	blx	r6
 8006c20:	3001      	adds	r0, #1
 8006c22:	d100      	bne.n	8006c26 <_printf_float+0x3ee>
 8006c24:	e664      	b.n	80068f0 <_printf_float+0xb8>
 8006c26:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c28:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006c2a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006c2c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c2e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006c30:	47b0      	blx	r6
 8006c32:	3001      	adds	r0, #1
 8006c34:	d100      	bne.n	8006c38 <_printf_float+0x400>
 8006c36:	e65b      	b.n	80068f0 <_printf_float+0xb8>
 8006c38:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8006c3a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8006c3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c3e:	2200      	movs	r2, #0
 8006c40:	3b01      	subs	r3, #1
 8006c42:	930c      	str	r3, [sp, #48]	@ 0x30
 8006c44:	2300      	movs	r3, #0
 8006c46:	f7f9 fc01 	bl	800044c <__aeabi_dcmpeq>
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	d11a      	bne.n	8006c84 <_printf_float+0x44c>
 8006c4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c50:	1c7a      	adds	r2, r7, #1
 8006c52:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006c54:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c56:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006c58:	47b0      	blx	r6
 8006c5a:	3001      	adds	r0, #1
 8006c5c:	d10e      	bne.n	8006c7c <_printf_float+0x444>
 8006c5e:	e647      	b.n	80068f0 <_printf_float+0xb8>
 8006c60:	002a      	movs	r2, r5
 8006c62:	2301      	movs	r3, #1
 8006c64:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006c66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c68:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006c6a:	321a      	adds	r2, #26
 8006c6c:	47b8      	blx	r7
 8006c6e:	3001      	adds	r0, #1
 8006c70:	d100      	bne.n	8006c74 <_printf_float+0x43c>
 8006c72:	e63d      	b.n	80068f0 <_printf_float+0xb8>
 8006c74:	3601      	adds	r6, #1
 8006c76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c78:	429e      	cmp	r6, r3
 8006c7a:	dbf1      	blt.n	8006c60 <_printf_float+0x428>
 8006c7c:	002a      	movs	r2, r5
 8006c7e:	0023      	movs	r3, r4
 8006c80:	3250      	adds	r2, #80	@ 0x50
 8006c82:	e6da      	b.n	8006a3a <_printf_float+0x202>
 8006c84:	2600      	movs	r6, #0
 8006c86:	e7f6      	b.n	8006c76 <_printf_float+0x43e>
 8006c88:	003a      	movs	r2, r7
 8006c8a:	e7e2      	b.n	8006c52 <_printf_float+0x41a>
 8006c8c:	002a      	movs	r2, r5
 8006c8e:	2301      	movs	r3, #1
 8006c90:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006c92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c94:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006c96:	3219      	adds	r2, #25
 8006c98:	47b0      	blx	r6
 8006c9a:	3001      	adds	r0, #1
 8006c9c:	d100      	bne.n	8006ca0 <_printf_float+0x468>
 8006c9e:	e627      	b.n	80068f0 <_printf_float+0xb8>
 8006ca0:	3401      	adds	r4, #1
 8006ca2:	68eb      	ldr	r3, [r5, #12]
 8006ca4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006ca6:	1a9b      	subs	r3, r3, r2
 8006ca8:	42a3      	cmp	r3, r4
 8006caa:	dcef      	bgt.n	8006c8c <_printf_float+0x454>
 8006cac:	e6f9      	b.n	8006aa2 <_printf_float+0x26a>
 8006cae:	2400      	movs	r4, #0
 8006cb0:	e7f7      	b.n	8006ca2 <_printf_float+0x46a>
 8006cb2:	46c0      	nop			@ (mov r8, r8)

08006cb4 <_printf_common>:
 8006cb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cb6:	0016      	movs	r6, r2
 8006cb8:	9301      	str	r3, [sp, #4]
 8006cba:	688a      	ldr	r2, [r1, #8]
 8006cbc:	690b      	ldr	r3, [r1, #16]
 8006cbe:	000c      	movs	r4, r1
 8006cc0:	9000      	str	r0, [sp, #0]
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	da00      	bge.n	8006cc8 <_printf_common+0x14>
 8006cc6:	0013      	movs	r3, r2
 8006cc8:	0022      	movs	r2, r4
 8006cca:	6033      	str	r3, [r6, #0]
 8006ccc:	3243      	adds	r2, #67	@ 0x43
 8006cce:	7812      	ldrb	r2, [r2, #0]
 8006cd0:	2a00      	cmp	r2, #0
 8006cd2:	d001      	beq.n	8006cd8 <_printf_common+0x24>
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	6033      	str	r3, [r6, #0]
 8006cd8:	6823      	ldr	r3, [r4, #0]
 8006cda:	069b      	lsls	r3, r3, #26
 8006cdc:	d502      	bpl.n	8006ce4 <_printf_common+0x30>
 8006cde:	6833      	ldr	r3, [r6, #0]
 8006ce0:	3302      	adds	r3, #2
 8006ce2:	6033      	str	r3, [r6, #0]
 8006ce4:	6822      	ldr	r2, [r4, #0]
 8006ce6:	2306      	movs	r3, #6
 8006ce8:	0015      	movs	r5, r2
 8006cea:	401d      	ands	r5, r3
 8006cec:	421a      	tst	r2, r3
 8006cee:	d027      	beq.n	8006d40 <_printf_common+0x8c>
 8006cf0:	0023      	movs	r3, r4
 8006cf2:	3343      	adds	r3, #67	@ 0x43
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	1e5a      	subs	r2, r3, #1
 8006cf8:	4193      	sbcs	r3, r2
 8006cfa:	6822      	ldr	r2, [r4, #0]
 8006cfc:	0692      	lsls	r2, r2, #26
 8006cfe:	d430      	bmi.n	8006d62 <_printf_common+0xae>
 8006d00:	0022      	movs	r2, r4
 8006d02:	9901      	ldr	r1, [sp, #4]
 8006d04:	9800      	ldr	r0, [sp, #0]
 8006d06:	9d08      	ldr	r5, [sp, #32]
 8006d08:	3243      	adds	r2, #67	@ 0x43
 8006d0a:	47a8      	blx	r5
 8006d0c:	3001      	adds	r0, #1
 8006d0e:	d025      	beq.n	8006d5c <_printf_common+0xa8>
 8006d10:	2206      	movs	r2, #6
 8006d12:	6823      	ldr	r3, [r4, #0]
 8006d14:	2500      	movs	r5, #0
 8006d16:	4013      	ands	r3, r2
 8006d18:	2b04      	cmp	r3, #4
 8006d1a:	d105      	bne.n	8006d28 <_printf_common+0x74>
 8006d1c:	6833      	ldr	r3, [r6, #0]
 8006d1e:	68e5      	ldr	r5, [r4, #12]
 8006d20:	1aed      	subs	r5, r5, r3
 8006d22:	43eb      	mvns	r3, r5
 8006d24:	17db      	asrs	r3, r3, #31
 8006d26:	401d      	ands	r5, r3
 8006d28:	68a3      	ldr	r3, [r4, #8]
 8006d2a:	6922      	ldr	r2, [r4, #16]
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	dd01      	ble.n	8006d34 <_printf_common+0x80>
 8006d30:	1a9b      	subs	r3, r3, r2
 8006d32:	18ed      	adds	r5, r5, r3
 8006d34:	2600      	movs	r6, #0
 8006d36:	42b5      	cmp	r5, r6
 8006d38:	d120      	bne.n	8006d7c <_printf_common+0xc8>
 8006d3a:	2000      	movs	r0, #0
 8006d3c:	e010      	b.n	8006d60 <_printf_common+0xac>
 8006d3e:	3501      	adds	r5, #1
 8006d40:	68e3      	ldr	r3, [r4, #12]
 8006d42:	6832      	ldr	r2, [r6, #0]
 8006d44:	1a9b      	subs	r3, r3, r2
 8006d46:	42ab      	cmp	r3, r5
 8006d48:	ddd2      	ble.n	8006cf0 <_printf_common+0x3c>
 8006d4a:	0022      	movs	r2, r4
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	9901      	ldr	r1, [sp, #4]
 8006d50:	9800      	ldr	r0, [sp, #0]
 8006d52:	9f08      	ldr	r7, [sp, #32]
 8006d54:	3219      	adds	r2, #25
 8006d56:	47b8      	blx	r7
 8006d58:	3001      	adds	r0, #1
 8006d5a:	d1f0      	bne.n	8006d3e <_printf_common+0x8a>
 8006d5c:	2001      	movs	r0, #1
 8006d5e:	4240      	negs	r0, r0
 8006d60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006d62:	2030      	movs	r0, #48	@ 0x30
 8006d64:	18e1      	adds	r1, r4, r3
 8006d66:	3143      	adds	r1, #67	@ 0x43
 8006d68:	7008      	strb	r0, [r1, #0]
 8006d6a:	0021      	movs	r1, r4
 8006d6c:	1c5a      	adds	r2, r3, #1
 8006d6e:	3145      	adds	r1, #69	@ 0x45
 8006d70:	7809      	ldrb	r1, [r1, #0]
 8006d72:	18a2      	adds	r2, r4, r2
 8006d74:	3243      	adds	r2, #67	@ 0x43
 8006d76:	3302      	adds	r3, #2
 8006d78:	7011      	strb	r1, [r2, #0]
 8006d7a:	e7c1      	b.n	8006d00 <_printf_common+0x4c>
 8006d7c:	0022      	movs	r2, r4
 8006d7e:	2301      	movs	r3, #1
 8006d80:	9901      	ldr	r1, [sp, #4]
 8006d82:	9800      	ldr	r0, [sp, #0]
 8006d84:	9f08      	ldr	r7, [sp, #32]
 8006d86:	321a      	adds	r2, #26
 8006d88:	47b8      	blx	r7
 8006d8a:	3001      	adds	r0, #1
 8006d8c:	d0e6      	beq.n	8006d5c <_printf_common+0xa8>
 8006d8e:	3601      	adds	r6, #1
 8006d90:	e7d1      	b.n	8006d36 <_printf_common+0x82>
	...

08006d94 <_printf_i>:
 8006d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d96:	b08b      	sub	sp, #44	@ 0x2c
 8006d98:	9206      	str	r2, [sp, #24]
 8006d9a:	000a      	movs	r2, r1
 8006d9c:	3243      	adds	r2, #67	@ 0x43
 8006d9e:	9307      	str	r3, [sp, #28]
 8006da0:	9005      	str	r0, [sp, #20]
 8006da2:	9203      	str	r2, [sp, #12]
 8006da4:	7e0a      	ldrb	r2, [r1, #24]
 8006da6:	000c      	movs	r4, r1
 8006da8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006daa:	2a78      	cmp	r2, #120	@ 0x78
 8006dac:	d809      	bhi.n	8006dc2 <_printf_i+0x2e>
 8006dae:	2a62      	cmp	r2, #98	@ 0x62
 8006db0:	d80b      	bhi.n	8006dca <_printf_i+0x36>
 8006db2:	2a00      	cmp	r2, #0
 8006db4:	d100      	bne.n	8006db8 <_printf_i+0x24>
 8006db6:	e0bc      	b.n	8006f32 <_printf_i+0x19e>
 8006db8:	497b      	ldr	r1, [pc, #492]	@ (8006fa8 <_printf_i+0x214>)
 8006dba:	9104      	str	r1, [sp, #16]
 8006dbc:	2a58      	cmp	r2, #88	@ 0x58
 8006dbe:	d100      	bne.n	8006dc2 <_printf_i+0x2e>
 8006dc0:	e090      	b.n	8006ee4 <_printf_i+0x150>
 8006dc2:	0025      	movs	r5, r4
 8006dc4:	3542      	adds	r5, #66	@ 0x42
 8006dc6:	702a      	strb	r2, [r5, #0]
 8006dc8:	e022      	b.n	8006e10 <_printf_i+0x7c>
 8006dca:	0010      	movs	r0, r2
 8006dcc:	3863      	subs	r0, #99	@ 0x63
 8006dce:	2815      	cmp	r0, #21
 8006dd0:	d8f7      	bhi.n	8006dc2 <_printf_i+0x2e>
 8006dd2:	f7f9 f9ab 	bl	800012c <__gnu_thumb1_case_shi>
 8006dd6:	0016      	.short	0x0016
 8006dd8:	fff6001f 	.word	0xfff6001f
 8006ddc:	fff6fff6 	.word	0xfff6fff6
 8006de0:	001ffff6 	.word	0x001ffff6
 8006de4:	fff6fff6 	.word	0xfff6fff6
 8006de8:	fff6fff6 	.word	0xfff6fff6
 8006dec:	003600a1 	.word	0x003600a1
 8006df0:	fff60080 	.word	0xfff60080
 8006df4:	00b2fff6 	.word	0x00b2fff6
 8006df8:	0036fff6 	.word	0x0036fff6
 8006dfc:	fff6fff6 	.word	0xfff6fff6
 8006e00:	0084      	.short	0x0084
 8006e02:	0025      	movs	r5, r4
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	3542      	adds	r5, #66	@ 0x42
 8006e08:	1d11      	adds	r1, r2, #4
 8006e0a:	6019      	str	r1, [r3, #0]
 8006e0c:	6813      	ldr	r3, [r2, #0]
 8006e0e:	702b      	strb	r3, [r5, #0]
 8006e10:	2301      	movs	r3, #1
 8006e12:	e0a0      	b.n	8006f56 <_printf_i+0x1c2>
 8006e14:	6818      	ldr	r0, [r3, #0]
 8006e16:	6809      	ldr	r1, [r1, #0]
 8006e18:	1d02      	adds	r2, r0, #4
 8006e1a:	060d      	lsls	r5, r1, #24
 8006e1c:	d50b      	bpl.n	8006e36 <_printf_i+0xa2>
 8006e1e:	6806      	ldr	r6, [r0, #0]
 8006e20:	601a      	str	r2, [r3, #0]
 8006e22:	2e00      	cmp	r6, #0
 8006e24:	da03      	bge.n	8006e2e <_printf_i+0x9a>
 8006e26:	232d      	movs	r3, #45	@ 0x2d
 8006e28:	9a03      	ldr	r2, [sp, #12]
 8006e2a:	4276      	negs	r6, r6
 8006e2c:	7013      	strb	r3, [r2, #0]
 8006e2e:	4b5e      	ldr	r3, [pc, #376]	@ (8006fa8 <_printf_i+0x214>)
 8006e30:	270a      	movs	r7, #10
 8006e32:	9304      	str	r3, [sp, #16]
 8006e34:	e018      	b.n	8006e68 <_printf_i+0xd4>
 8006e36:	6806      	ldr	r6, [r0, #0]
 8006e38:	601a      	str	r2, [r3, #0]
 8006e3a:	0649      	lsls	r1, r1, #25
 8006e3c:	d5f1      	bpl.n	8006e22 <_printf_i+0x8e>
 8006e3e:	b236      	sxth	r6, r6
 8006e40:	e7ef      	b.n	8006e22 <_printf_i+0x8e>
 8006e42:	6808      	ldr	r0, [r1, #0]
 8006e44:	6819      	ldr	r1, [r3, #0]
 8006e46:	c940      	ldmia	r1!, {r6}
 8006e48:	0605      	lsls	r5, r0, #24
 8006e4a:	d402      	bmi.n	8006e52 <_printf_i+0xbe>
 8006e4c:	0640      	lsls	r0, r0, #25
 8006e4e:	d500      	bpl.n	8006e52 <_printf_i+0xbe>
 8006e50:	b2b6      	uxth	r6, r6
 8006e52:	6019      	str	r1, [r3, #0]
 8006e54:	4b54      	ldr	r3, [pc, #336]	@ (8006fa8 <_printf_i+0x214>)
 8006e56:	270a      	movs	r7, #10
 8006e58:	9304      	str	r3, [sp, #16]
 8006e5a:	2a6f      	cmp	r2, #111	@ 0x6f
 8006e5c:	d100      	bne.n	8006e60 <_printf_i+0xcc>
 8006e5e:	3f02      	subs	r7, #2
 8006e60:	0023      	movs	r3, r4
 8006e62:	2200      	movs	r2, #0
 8006e64:	3343      	adds	r3, #67	@ 0x43
 8006e66:	701a      	strb	r2, [r3, #0]
 8006e68:	6863      	ldr	r3, [r4, #4]
 8006e6a:	60a3      	str	r3, [r4, #8]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	db03      	blt.n	8006e78 <_printf_i+0xe4>
 8006e70:	2104      	movs	r1, #4
 8006e72:	6822      	ldr	r2, [r4, #0]
 8006e74:	438a      	bics	r2, r1
 8006e76:	6022      	str	r2, [r4, #0]
 8006e78:	2e00      	cmp	r6, #0
 8006e7a:	d102      	bne.n	8006e82 <_printf_i+0xee>
 8006e7c:	9d03      	ldr	r5, [sp, #12]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00c      	beq.n	8006e9c <_printf_i+0x108>
 8006e82:	9d03      	ldr	r5, [sp, #12]
 8006e84:	0030      	movs	r0, r6
 8006e86:	0039      	movs	r1, r7
 8006e88:	f7f9 f9e0 	bl	800024c <__aeabi_uidivmod>
 8006e8c:	9b04      	ldr	r3, [sp, #16]
 8006e8e:	3d01      	subs	r5, #1
 8006e90:	5c5b      	ldrb	r3, [r3, r1]
 8006e92:	702b      	strb	r3, [r5, #0]
 8006e94:	0033      	movs	r3, r6
 8006e96:	0006      	movs	r6, r0
 8006e98:	429f      	cmp	r7, r3
 8006e9a:	d9f3      	bls.n	8006e84 <_printf_i+0xf0>
 8006e9c:	2f08      	cmp	r7, #8
 8006e9e:	d109      	bne.n	8006eb4 <_printf_i+0x120>
 8006ea0:	6823      	ldr	r3, [r4, #0]
 8006ea2:	07db      	lsls	r3, r3, #31
 8006ea4:	d506      	bpl.n	8006eb4 <_printf_i+0x120>
 8006ea6:	6862      	ldr	r2, [r4, #4]
 8006ea8:	6923      	ldr	r3, [r4, #16]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	dc02      	bgt.n	8006eb4 <_printf_i+0x120>
 8006eae:	2330      	movs	r3, #48	@ 0x30
 8006eb0:	3d01      	subs	r5, #1
 8006eb2:	702b      	strb	r3, [r5, #0]
 8006eb4:	9b03      	ldr	r3, [sp, #12]
 8006eb6:	1b5b      	subs	r3, r3, r5
 8006eb8:	6123      	str	r3, [r4, #16]
 8006eba:	9b07      	ldr	r3, [sp, #28]
 8006ebc:	0021      	movs	r1, r4
 8006ebe:	9300      	str	r3, [sp, #0]
 8006ec0:	9805      	ldr	r0, [sp, #20]
 8006ec2:	9b06      	ldr	r3, [sp, #24]
 8006ec4:	aa09      	add	r2, sp, #36	@ 0x24
 8006ec6:	f7ff fef5 	bl	8006cb4 <_printf_common>
 8006eca:	3001      	adds	r0, #1
 8006ecc:	d148      	bne.n	8006f60 <_printf_i+0x1cc>
 8006ece:	2001      	movs	r0, #1
 8006ed0:	4240      	negs	r0, r0
 8006ed2:	b00b      	add	sp, #44	@ 0x2c
 8006ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ed6:	2220      	movs	r2, #32
 8006ed8:	6809      	ldr	r1, [r1, #0]
 8006eda:	430a      	orrs	r2, r1
 8006edc:	6022      	str	r2, [r4, #0]
 8006ede:	2278      	movs	r2, #120	@ 0x78
 8006ee0:	4932      	ldr	r1, [pc, #200]	@ (8006fac <_printf_i+0x218>)
 8006ee2:	9104      	str	r1, [sp, #16]
 8006ee4:	0021      	movs	r1, r4
 8006ee6:	3145      	adds	r1, #69	@ 0x45
 8006ee8:	700a      	strb	r2, [r1, #0]
 8006eea:	6819      	ldr	r1, [r3, #0]
 8006eec:	6822      	ldr	r2, [r4, #0]
 8006eee:	c940      	ldmia	r1!, {r6}
 8006ef0:	0610      	lsls	r0, r2, #24
 8006ef2:	d402      	bmi.n	8006efa <_printf_i+0x166>
 8006ef4:	0650      	lsls	r0, r2, #25
 8006ef6:	d500      	bpl.n	8006efa <_printf_i+0x166>
 8006ef8:	b2b6      	uxth	r6, r6
 8006efa:	6019      	str	r1, [r3, #0]
 8006efc:	07d3      	lsls	r3, r2, #31
 8006efe:	d502      	bpl.n	8006f06 <_printf_i+0x172>
 8006f00:	2320      	movs	r3, #32
 8006f02:	4313      	orrs	r3, r2
 8006f04:	6023      	str	r3, [r4, #0]
 8006f06:	2e00      	cmp	r6, #0
 8006f08:	d001      	beq.n	8006f0e <_printf_i+0x17a>
 8006f0a:	2710      	movs	r7, #16
 8006f0c:	e7a8      	b.n	8006e60 <_printf_i+0xcc>
 8006f0e:	2220      	movs	r2, #32
 8006f10:	6823      	ldr	r3, [r4, #0]
 8006f12:	4393      	bics	r3, r2
 8006f14:	6023      	str	r3, [r4, #0]
 8006f16:	e7f8      	b.n	8006f0a <_printf_i+0x176>
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	680d      	ldr	r5, [r1, #0]
 8006f1c:	1d10      	adds	r0, r2, #4
 8006f1e:	6949      	ldr	r1, [r1, #20]
 8006f20:	6018      	str	r0, [r3, #0]
 8006f22:	6813      	ldr	r3, [r2, #0]
 8006f24:	062e      	lsls	r6, r5, #24
 8006f26:	d501      	bpl.n	8006f2c <_printf_i+0x198>
 8006f28:	6019      	str	r1, [r3, #0]
 8006f2a:	e002      	b.n	8006f32 <_printf_i+0x19e>
 8006f2c:	066d      	lsls	r5, r5, #25
 8006f2e:	d5fb      	bpl.n	8006f28 <_printf_i+0x194>
 8006f30:	8019      	strh	r1, [r3, #0]
 8006f32:	2300      	movs	r3, #0
 8006f34:	9d03      	ldr	r5, [sp, #12]
 8006f36:	6123      	str	r3, [r4, #16]
 8006f38:	e7bf      	b.n	8006eba <_printf_i+0x126>
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	1d11      	adds	r1, r2, #4
 8006f3e:	6019      	str	r1, [r3, #0]
 8006f40:	6815      	ldr	r5, [r2, #0]
 8006f42:	2100      	movs	r1, #0
 8006f44:	0028      	movs	r0, r5
 8006f46:	6862      	ldr	r2, [r4, #4]
 8006f48:	f000 f9db 	bl	8007302 <memchr>
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	d001      	beq.n	8006f54 <_printf_i+0x1c0>
 8006f50:	1b40      	subs	r0, r0, r5
 8006f52:	6060      	str	r0, [r4, #4]
 8006f54:	6863      	ldr	r3, [r4, #4]
 8006f56:	6123      	str	r3, [r4, #16]
 8006f58:	2300      	movs	r3, #0
 8006f5a:	9a03      	ldr	r2, [sp, #12]
 8006f5c:	7013      	strb	r3, [r2, #0]
 8006f5e:	e7ac      	b.n	8006eba <_printf_i+0x126>
 8006f60:	002a      	movs	r2, r5
 8006f62:	6923      	ldr	r3, [r4, #16]
 8006f64:	9906      	ldr	r1, [sp, #24]
 8006f66:	9805      	ldr	r0, [sp, #20]
 8006f68:	9d07      	ldr	r5, [sp, #28]
 8006f6a:	47a8      	blx	r5
 8006f6c:	3001      	adds	r0, #1
 8006f6e:	d0ae      	beq.n	8006ece <_printf_i+0x13a>
 8006f70:	6823      	ldr	r3, [r4, #0]
 8006f72:	079b      	lsls	r3, r3, #30
 8006f74:	d415      	bmi.n	8006fa2 <_printf_i+0x20e>
 8006f76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f78:	68e0      	ldr	r0, [r4, #12]
 8006f7a:	4298      	cmp	r0, r3
 8006f7c:	daa9      	bge.n	8006ed2 <_printf_i+0x13e>
 8006f7e:	0018      	movs	r0, r3
 8006f80:	e7a7      	b.n	8006ed2 <_printf_i+0x13e>
 8006f82:	0022      	movs	r2, r4
 8006f84:	2301      	movs	r3, #1
 8006f86:	9906      	ldr	r1, [sp, #24]
 8006f88:	9805      	ldr	r0, [sp, #20]
 8006f8a:	9e07      	ldr	r6, [sp, #28]
 8006f8c:	3219      	adds	r2, #25
 8006f8e:	47b0      	blx	r6
 8006f90:	3001      	adds	r0, #1
 8006f92:	d09c      	beq.n	8006ece <_printf_i+0x13a>
 8006f94:	3501      	adds	r5, #1
 8006f96:	68e3      	ldr	r3, [r4, #12]
 8006f98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f9a:	1a9b      	subs	r3, r3, r2
 8006f9c:	42ab      	cmp	r3, r5
 8006f9e:	dcf0      	bgt.n	8006f82 <_printf_i+0x1ee>
 8006fa0:	e7e9      	b.n	8006f76 <_printf_i+0x1e2>
 8006fa2:	2500      	movs	r5, #0
 8006fa4:	e7f7      	b.n	8006f96 <_printf_i+0x202>
 8006fa6:	46c0      	nop			@ (mov r8, r8)
 8006fa8:	080090ea 	.word	0x080090ea
 8006fac:	080090fb 	.word	0x080090fb

08006fb0 <std>:
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	b510      	push	{r4, lr}
 8006fb4:	0004      	movs	r4, r0
 8006fb6:	6003      	str	r3, [r0, #0]
 8006fb8:	6043      	str	r3, [r0, #4]
 8006fba:	6083      	str	r3, [r0, #8]
 8006fbc:	8181      	strh	r1, [r0, #12]
 8006fbe:	6643      	str	r3, [r0, #100]	@ 0x64
 8006fc0:	81c2      	strh	r2, [r0, #14]
 8006fc2:	6103      	str	r3, [r0, #16]
 8006fc4:	6143      	str	r3, [r0, #20]
 8006fc6:	6183      	str	r3, [r0, #24]
 8006fc8:	0019      	movs	r1, r3
 8006fca:	2208      	movs	r2, #8
 8006fcc:	305c      	adds	r0, #92	@ 0x5c
 8006fce:	f000 f8ff 	bl	80071d0 <memset>
 8006fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8007000 <std+0x50>)
 8006fd4:	6224      	str	r4, [r4, #32]
 8006fd6:	6263      	str	r3, [r4, #36]	@ 0x24
 8006fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8007004 <std+0x54>)
 8006fda:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8007008 <std+0x58>)
 8006fde:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800700c <std+0x5c>)
 8006fe2:	6323      	str	r3, [r4, #48]	@ 0x30
 8006fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8007010 <std+0x60>)
 8006fe6:	429c      	cmp	r4, r3
 8006fe8:	d005      	beq.n	8006ff6 <std+0x46>
 8006fea:	4b0a      	ldr	r3, [pc, #40]	@ (8007014 <std+0x64>)
 8006fec:	429c      	cmp	r4, r3
 8006fee:	d002      	beq.n	8006ff6 <std+0x46>
 8006ff0:	4b09      	ldr	r3, [pc, #36]	@ (8007018 <std+0x68>)
 8006ff2:	429c      	cmp	r4, r3
 8006ff4:	d103      	bne.n	8006ffe <std+0x4e>
 8006ff6:	0020      	movs	r0, r4
 8006ff8:	3058      	adds	r0, #88	@ 0x58
 8006ffa:	f000 f97f 	bl	80072fc <__retarget_lock_init_recursive>
 8006ffe:	bd10      	pop	{r4, pc}
 8007000:	08007139 	.word	0x08007139
 8007004:	08007161 	.word	0x08007161
 8007008:	08007199 	.word	0x08007199
 800700c:	080071c5 	.word	0x080071c5
 8007010:	20001370 	.word	0x20001370
 8007014:	200013d8 	.word	0x200013d8
 8007018:	20001440 	.word	0x20001440

0800701c <stdio_exit_handler>:
 800701c:	b510      	push	{r4, lr}
 800701e:	4a03      	ldr	r2, [pc, #12]	@ (800702c <stdio_exit_handler+0x10>)
 8007020:	4903      	ldr	r1, [pc, #12]	@ (8007030 <stdio_exit_handler+0x14>)
 8007022:	4804      	ldr	r0, [pc, #16]	@ (8007034 <stdio_exit_handler+0x18>)
 8007024:	f000 f86c 	bl	8007100 <_fwalk_sglue>
 8007028:	bd10      	pop	{r4, pc}
 800702a:	46c0      	nop			@ (mov r8, r8)
 800702c:	20000058 	.word	0x20000058
 8007030:	08008919 	.word	0x08008919
 8007034:	20000068 	.word	0x20000068

08007038 <cleanup_stdio>:
 8007038:	6841      	ldr	r1, [r0, #4]
 800703a:	4b0b      	ldr	r3, [pc, #44]	@ (8007068 <cleanup_stdio+0x30>)
 800703c:	b510      	push	{r4, lr}
 800703e:	0004      	movs	r4, r0
 8007040:	4299      	cmp	r1, r3
 8007042:	d001      	beq.n	8007048 <cleanup_stdio+0x10>
 8007044:	f001 fc68 	bl	8008918 <_fflush_r>
 8007048:	68a1      	ldr	r1, [r4, #8]
 800704a:	4b08      	ldr	r3, [pc, #32]	@ (800706c <cleanup_stdio+0x34>)
 800704c:	4299      	cmp	r1, r3
 800704e:	d002      	beq.n	8007056 <cleanup_stdio+0x1e>
 8007050:	0020      	movs	r0, r4
 8007052:	f001 fc61 	bl	8008918 <_fflush_r>
 8007056:	68e1      	ldr	r1, [r4, #12]
 8007058:	4b05      	ldr	r3, [pc, #20]	@ (8007070 <cleanup_stdio+0x38>)
 800705a:	4299      	cmp	r1, r3
 800705c:	d002      	beq.n	8007064 <cleanup_stdio+0x2c>
 800705e:	0020      	movs	r0, r4
 8007060:	f001 fc5a 	bl	8008918 <_fflush_r>
 8007064:	bd10      	pop	{r4, pc}
 8007066:	46c0      	nop			@ (mov r8, r8)
 8007068:	20001370 	.word	0x20001370
 800706c:	200013d8 	.word	0x200013d8
 8007070:	20001440 	.word	0x20001440

08007074 <global_stdio_init.part.0>:
 8007074:	b510      	push	{r4, lr}
 8007076:	4b09      	ldr	r3, [pc, #36]	@ (800709c <global_stdio_init.part.0+0x28>)
 8007078:	4a09      	ldr	r2, [pc, #36]	@ (80070a0 <global_stdio_init.part.0+0x2c>)
 800707a:	2104      	movs	r1, #4
 800707c:	601a      	str	r2, [r3, #0]
 800707e:	4809      	ldr	r0, [pc, #36]	@ (80070a4 <global_stdio_init.part.0+0x30>)
 8007080:	2200      	movs	r2, #0
 8007082:	f7ff ff95 	bl	8006fb0 <std>
 8007086:	2201      	movs	r2, #1
 8007088:	2109      	movs	r1, #9
 800708a:	4807      	ldr	r0, [pc, #28]	@ (80070a8 <global_stdio_init.part.0+0x34>)
 800708c:	f7ff ff90 	bl	8006fb0 <std>
 8007090:	2202      	movs	r2, #2
 8007092:	2112      	movs	r1, #18
 8007094:	4805      	ldr	r0, [pc, #20]	@ (80070ac <global_stdio_init.part.0+0x38>)
 8007096:	f7ff ff8b 	bl	8006fb0 <std>
 800709a:	bd10      	pop	{r4, pc}
 800709c:	200014a8 	.word	0x200014a8
 80070a0:	0800701d 	.word	0x0800701d
 80070a4:	20001370 	.word	0x20001370
 80070a8:	200013d8 	.word	0x200013d8
 80070ac:	20001440 	.word	0x20001440

080070b0 <__sfp_lock_acquire>:
 80070b0:	b510      	push	{r4, lr}
 80070b2:	4802      	ldr	r0, [pc, #8]	@ (80070bc <__sfp_lock_acquire+0xc>)
 80070b4:	f000 f923 	bl	80072fe <__retarget_lock_acquire_recursive>
 80070b8:	bd10      	pop	{r4, pc}
 80070ba:	46c0      	nop			@ (mov r8, r8)
 80070bc:	200014b1 	.word	0x200014b1

080070c0 <__sfp_lock_release>:
 80070c0:	b510      	push	{r4, lr}
 80070c2:	4802      	ldr	r0, [pc, #8]	@ (80070cc <__sfp_lock_release+0xc>)
 80070c4:	f000 f91c 	bl	8007300 <__retarget_lock_release_recursive>
 80070c8:	bd10      	pop	{r4, pc}
 80070ca:	46c0      	nop			@ (mov r8, r8)
 80070cc:	200014b1 	.word	0x200014b1

080070d0 <__sinit>:
 80070d0:	b510      	push	{r4, lr}
 80070d2:	0004      	movs	r4, r0
 80070d4:	f7ff ffec 	bl	80070b0 <__sfp_lock_acquire>
 80070d8:	6a23      	ldr	r3, [r4, #32]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d002      	beq.n	80070e4 <__sinit+0x14>
 80070de:	f7ff ffef 	bl	80070c0 <__sfp_lock_release>
 80070e2:	bd10      	pop	{r4, pc}
 80070e4:	4b04      	ldr	r3, [pc, #16]	@ (80070f8 <__sinit+0x28>)
 80070e6:	6223      	str	r3, [r4, #32]
 80070e8:	4b04      	ldr	r3, [pc, #16]	@ (80070fc <__sinit+0x2c>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d1f6      	bne.n	80070de <__sinit+0xe>
 80070f0:	f7ff ffc0 	bl	8007074 <global_stdio_init.part.0>
 80070f4:	e7f3      	b.n	80070de <__sinit+0xe>
 80070f6:	46c0      	nop			@ (mov r8, r8)
 80070f8:	08007039 	.word	0x08007039
 80070fc:	200014a8 	.word	0x200014a8

08007100 <_fwalk_sglue>:
 8007100:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007102:	0014      	movs	r4, r2
 8007104:	2600      	movs	r6, #0
 8007106:	9000      	str	r0, [sp, #0]
 8007108:	9101      	str	r1, [sp, #4]
 800710a:	68a5      	ldr	r5, [r4, #8]
 800710c:	6867      	ldr	r7, [r4, #4]
 800710e:	3f01      	subs	r7, #1
 8007110:	d504      	bpl.n	800711c <_fwalk_sglue+0x1c>
 8007112:	6824      	ldr	r4, [r4, #0]
 8007114:	2c00      	cmp	r4, #0
 8007116:	d1f8      	bne.n	800710a <_fwalk_sglue+0xa>
 8007118:	0030      	movs	r0, r6
 800711a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800711c:	89ab      	ldrh	r3, [r5, #12]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d908      	bls.n	8007134 <_fwalk_sglue+0x34>
 8007122:	220e      	movs	r2, #14
 8007124:	5eab      	ldrsh	r3, [r5, r2]
 8007126:	3301      	adds	r3, #1
 8007128:	d004      	beq.n	8007134 <_fwalk_sglue+0x34>
 800712a:	0029      	movs	r1, r5
 800712c:	9800      	ldr	r0, [sp, #0]
 800712e:	9b01      	ldr	r3, [sp, #4]
 8007130:	4798      	blx	r3
 8007132:	4306      	orrs	r6, r0
 8007134:	3568      	adds	r5, #104	@ 0x68
 8007136:	e7ea      	b.n	800710e <_fwalk_sglue+0xe>

08007138 <__sread>:
 8007138:	b570      	push	{r4, r5, r6, lr}
 800713a:	000c      	movs	r4, r1
 800713c:	250e      	movs	r5, #14
 800713e:	5f49      	ldrsh	r1, [r1, r5]
 8007140:	f000 f878 	bl	8007234 <_read_r>
 8007144:	2800      	cmp	r0, #0
 8007146:	db03      	blt.n	8007150 <__sread+0x18>
 8007148:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800714a:	181b      	adds	r3, r3, r0
 800714c:	6563      	str	r3, [r4, #84]	@ 0x54
 800714e:	bd70      	pop	{r4, r5, r6, pc}
 8007150:	89a3      	ldrh	r3, [r4, #12]
 8007152:	4a02      	ldr	r2, [pc, #8]	@ (800715c <__sread+0x24>)
 8007154:	4013      	ands	r3, r2
 8007156:	81a3      	strh	r3, [r4, #12]
 8007158:	e7f9      	b.n	800714e <__sread+0x16>
 800715a:	46c0      	nop			@ (mov r8, r8)
 800715c:	ffffefff 	.word	0xffffefff

08007160 <__swrite>:
 8007160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007162:	001f      	movs	r7, r3
 8007164:	898b      	ldrh	r3, [r1, #12]
 8007166:	0005      	movs	r5, r0
 8007168:	000c      	movs	r4, r1
 800716a:	0016      	movs	r6, r2
 800716c:	05db      	lsls	r3, r3, #23
 800716e:	d505      	bpl.n	800717c <__swrite+0x1c>
 8007170:	230e      	movs	r3, #14
 8007172:	5ec9      	ldrsh	r1, [r1, r3]
 8007174:	2200      	movs	r2, #0
 8007176:	2302      	movs	r3, #2
 8007178:	f000 f848 	bl	800720c <_lseek_r>
 800717c:	89a3      	ldrh	r3, [r4, #12]
 800717e:	4a05      	ldr	r2, [pc, #20]	@ (8007194 <__swrite+0x34>)
 8007180:	0028      	movs	r0, r5
 8007182:	4013      	ands	r3, r2
 8007184:	81a3      	strh	r3, [r4, #12]
 8007186:	0032      	movs	r2, r6
 8007188:	230e      	movs	r3, #14
 800718a:	5ee1      	ldrsh	r1, [r4, r3]
 800718c:	003b      	movs	r3, r7
 800718e:	f000 f877 	bl	8007280 <_write_r>
 8007192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007194:	ffffefff 	.word	0xffffefff

08007198 <__sseek>:
 8007198:	b570      	push	{r4, r5, r6, lr}
 800719a:	000c      	movs	r4, r1
 800719c:	250e      	movs	r5, #14
 800719e:	5f49      	ldrsh	r1, [r1, r5]
 80071a0:	f000 f834 	bl	800720c <_lseek_r>
 80071a4:	89a3      	ldrh	r3, [r4, #12]
 80071a6:	1c42      	adds	r2, r0, #1
 80071a8:	d103      	bne.n	80071b2 <__sseek+0x1a>
 80071aa:	4a05      	ldr	r2, [pc, #20]	@ (80071c0 <__sseek+0x28>)
 80071ac:	4013      	ands	r3, r2
 80071ae:	81a3      	strh	r3, [r4, #12]
 80071b0:	bd70      	pop	{r4, r5, r6, pc}
 80071b2:	2280      	movs	r2, #128	@ 0x80
 80071b4:	0152      	lsls	r2, r2, #5
 80071b6:	4313      	orrs	r3, r2
 80071b8:	81a3      	strh	r3, [r4, #12]
 80071ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80071bc:	e7f8      	b.n	80071b0 <__sseek+0x18>
 80071be:	46c0      	nop			@ (mov r8, r8)
 80071c0:	ffffefff 	.word	0xffffefff

080071c4 <__sclose>:
 80071c4:	b510      	push	{r4, lr}
 80071c6:	230e      	movs	r3, #14
 80071c8:	5ec9      	ldrsh	r1, [r1, r3]
 80071ca:	f000 f80d 	bl	80071e8 <_close_r>
 80071ce:	bd10      	pop	{r4, pc}

080071d0 <memset>:
 80071d0:	0003      	movs	r3, r0
 80071d2:	1882      	adds	r2, r0, r2
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d100      	bne.n	80071da <memset+0xa>
 80071d8:	4770      	bx	lr
 80071da:	7019      	strb	r1, [r3, #0]
 80071dc:	3301      	adds	r3, #1
 80071de:	e7f9      	b.n	80071d4 <memset+0x4>

080071e0 <_localeconv_r>:
 80071e0:	4800      	ldr	r0, [pc, #0]	@ (80071e4 <_localeconv_r+0x4>)
 80071e2:	4770      	bx	lr
 80071e4:	200001a4 	.word	0x200001a4

080071e8 <_close_r>:
 80071e8:	2300      	movs	r3, #0
 80071ea:	b570      	push	{r4, r5, r6, lr}
 80071ec:	4d06      	ldr	r5, [pc, #24]	@ (8007208 <_close_r+0x20>)
 80071ee:	0004      	movs	r4, r0
 80071f0:	0008      	movs	r0, r1
 80071f2:	602b      	str	r3, [r5, #0]
 80071f4:	f7fb fe48 	bl	8002e88 <_close>
 80071f8:	1c43      	adds	r3, r0, #1
 80071fa:	d103      	bne.n	8007204 <_close_r+0x1c>
 80071fc:	682b      	ldr	r3, [r5, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d000      	beq.n	8007204 <_close_r+0x1c>
 8007202:	6023      	str	r3, [r4, #0]
 8007204:	bd70      	pop	{r4, r5, r6, pc}
 8007206:	46c0      	nop			@ (mov r8, r8)
 8007208:	200014ac 	.word	0x200014ac

0800720c <_lseek_r>:
 800720c:	b570      	push	{r4, r5, r6, lr}
 800720e:	0004      	movs	r4, r0
 8007210:	0008      	movs	r0, r1
 8007212:	0011      	movs	r1, r2
 8007214:	001a      	movs	r2, r3
 8007216:	2300      	movs	r3, #0
 8007218:	4d05      	ldr	r5, [pc, #20]	@ (8007230 <_lseek_r+0x24>)
 800721a:	602b      	str	r3, [r5, #0]
 800721c:	f7fb fe55 	bl	8002eca <_lseek>
 8007220:	1c43      	adds	r3, r0, #1
 8007222:	d103      	bne.n	800722c <_lseek_r+0x20>
 8007224:	682b      	ldr	r3, [r5, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d000      	beq.n	800722c <_lseek_r+0x20>
 800722a:	6023      	str	r3, [r4, #0]
 800722c:	bd70      	pop	{r4, r5, r6, pc}
 800722e:	46c0      	nop			@ (mov r8, r8)
 8007230:	200014ac 	.word	0x200014ac

08007234 <_read_r>:
 8007234:	b570      	push	{r4, r5, r6, lr}
 8007236:	0004      	movs	r4, r0
 8007238:	0008      	movs	r0, r1
 800723a:	0011      	movs	r1, r2
 800723c:	001a      	movs	r2, r3
 800723e:	2300      	movs	r3, #0
 8007240:	4d05      	ldr	r5, [pc, #20]	@ (8007258 <_read_r+0x24>)
 8007242:	602b      	str	r3, [r5, #0]
 8007244:	f7fb fde7 	bl	8002e16 <_read>
 8007248:	1c43      	adds	r3, r0, #1
 800724a:	d103      	bne.n	8007254 <_read_r+0x20>
 800724c:	682b      	ldr	r3, [r5, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d000      	beq.n	8007254 <_read_r+0x20>
 8007252:	6023      	str	r3, [r4, #0]
 8007254:	bd70      	pop	{r4, r5, r6, pc}
 8007256:	46c0      	nop			@ (mov r8, r8)
 8007258:	200014ac 	.word	0x200014ac

0800725c <_sbrk_r>:
 800725c:	2300      	movs	r3, #0
 800725e:	b570      	push	{r4, r5, r6, lr}
 8007260:	4d06      	ldr	r5, [pc, #24]	@ (800727c <_sbrk_r+0x20>)
 8007262:	0004      	movs	r4, r0
 8007264:	0008      	movs	r0, r1
 8007266:	602b      	str	r3, [r5, #0]
 8007268:	f7fb fe3a 	bl	8002ee0 <_sbrk>
 800726c:	1c43      	adds	r3, r0, #1
 800726e:	d103      	bne.n	8007278 <_sbrk_r+0x1c>
 8007270:	682b      	ldr	r3, [r5, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d000      	beq.n	8007278 <_sbrk_r+0x1c>
 8007276:	6023      	str	r3, [r4, #0]
 8007278:	bd70      	pop	{r4, r5, r6, pc}
 800727a:	46c0      	nop			@ (mov r8, r8)
 800727c:	200014ac 	.word	0x200014ac

08007280 <_write_r>:
 8007280:	b570      	push	{r4, r5, r6, lr}
 8007282:	0004      	movs	r4, r0
 8007284:	0008      	movs	r0, r1
 8007286:	0011      	movs	r1, r2
 8007288:	001a      	movs	r2, r3
 800728a:	2300      	movs	r3, #0
 800728c:	4d05      	ldr	r5, [pc, #20]	@ (80072a4 <_write_r+0x24>)
 800728e:	602b      	str	r3, [r5, #0]
 8007290:	f7fb fdde 	bl	8002e50 <_write>
 8007294:	1c43      	adds	r3, r0, #1
 8007296:	d103      	bne.n	80072a0 <_write_r+0x20>
 8007298:	682b      	ldr	r3, [r5, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d000      	beq.n	80072a0 <_write_r+0x20>
 800729e:	6023      	str	r3, [r4, #0]
 80072a0:	bd70      	pop	{r4, r5, r6, pc}
 80072a2:	46c0      	nop			@ (mov r8, r8)
 80072a4:	200014ac 	.word	0x200014ac

080072a8 <__errno>:
 80072a8:	4b01      	ldr	r3, [pc, #4]	@ (80072b0 <__errno+0x8>)
 80072aa:	6818      	ldr	r0, [r3, #0]
 80072ac:	4770      	bx	lr
 80072ae:	46c0      	nop			@ (mov r8, r8)
 80072b0:	20000064 	.word	0x20000064

080072b4 <__libc_init_array>:
 80072b4:	b570      	push	{r4, r5, r6, lr}
 80072b6:	2600      	movs	r6, #0
 80072b8:	4c0c      	ldr	r4, [pc, #48]	@ (80072ec <__libc_init_array+0x38>)
 80072ba:	4d0d      	ldr	r5, [pc, #52]	@ (80072f0 <__libc_init_array+0x3c>)
 80072bc:	1b64      	subs	r4, r4, r5
 80072be:	10a4      	asrs	r4, r4, #2
 80072c0:	42a6      	cmp	r6, r4
 80072c2:	d109      	bne.n	80072d8 <__libc_init_array+0x24>
 80072c4:	2600      	movs	r6, #0
 80072c6:	f001 fe91 	bl	8008fec <_init>
 80072ca:	4c0a      	ldr	r4, [pc, #40]	@ (80072f4 <__libc_init_array+0x40>)
 80072cc:	4d0a      	ldr	r5, [pc, #40]	@ (80072f8 <__libc_init_array+0x44>)
 80072ce:	1b64      	subs	r4, r4, r5
 80072d0:	10a4      	asrs	r4, r4, #2
 80072d2:	42a6      	cmp	r6, r4
 80072d4:	d105      	bne.n	80072e2 <__libc_init_array+0x2e>
 80072d6:	bd70      	pop	{r4, r5, r6, pc}
 80072d8:	00b3      	lsls	r3, r6, #2
 80072da:	58eb      	ldr	r3, [r5, r3]
 80072dc:	4798      	blx	r3
 80072de:	3601      	adds	r6, #1
 80072e0:	e7ee      	b.n	80072c0 <__libc_init_array+0xc>
 80072e2:	00b3      	lsls	r3, r6, #2
 80072e4:	58eb      	ldr	r3, [r5, r3]
 80072e6:	4798      	blx	r3
 80072e8:	3601      	adds	r6, #1
 80072ea:	e7f2      	b.n	80072d2 <__libc_init_array+0x1e>
 80072ec:	08009448 	.word	0x08009448
 80072f0:	08009448 	.word	0x08009448
 80072f4:	0800944c 	.word	0x0800944c
 80072f8:	08009448 	.word	0x08009448

080072fc <__retarget_lock_init_recursive>:
 80072fc:	4770      	bx	lr

080072fe <__retarget_lock_acquire_recursive>:
 80072fe:	4770      	bx	lr

08007300 <__retarget_lock_release_recursive>:
 8007300:	4770      	bx	lr

08007302 <memchr>:
 8007302:	b2c9      	uxtb	r1, r1
 8007304:	1882      	adds	r2, r0, r2
 8007306:	4290      	cmp	r0, r2
 8007308:	d101      	bne.n	800730e <memchr+0xc>
 800730a:	2000      	movs	r0, #0
 800730c:	4770      	bx	lr
 800730e:	7803      	ldrb	r3, [r0, #0]
 8007310:	428b      	cmp	r3, r1
 8007312:	d0fb      	beq.n	800730c <memchr+0xa>
 8007314:	3001      	adds	r0, #1
 8007316:	e7f6      	b.n	8007306 <memchr+0x4>

08007318 <memcpy>:
 8007318:	2300      	movs	r3, #0
 800731a:	b510      	push	{r4, lr}
 800731c:	429a      	cmp	r2, r3
 800731e:	d100      	bne.n	8007322 <memcpy+0xa>
 8007320:	bd10      	pop	{r4, pc}
 8007322:	5ccc      	ldrb	r4, [r1, r3]
 8007324:	54c4      	strb	r4, [r0, r3]
 8007326:	3301      	adds	r3, #1
 8007328:	e7f8      	b.n	800731c <memcpy+0x4>

0800732a <quorem>:
 800732a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800732c:	6902      	ldr	r2, [r0, #16]
 800732e:	690f      	ldr	r7, [r1, #16]
 8007330:	b087      	sub	sp, #28
 8007332:	0006      	movs	r6, r0
 8007334:	000b      	movs	r3, r1
 8007336:	2000      	movs	r0, #0
 8007338:	9102      	str	r1, [sp, #8]
 800733a:	42ba      	cmp	r2, r7
 800733c:	db6d      	blt.n	800741a <quorem+0xf0>
 800733e:	3f01      	subs	r7, #1
 8007340:	00bc      	lsls	r4, r7, #2
 8007342:	3314      	adds	r3, #20
 8007344:	9305      	str	r3, [sp, #20]
 8007346:	191b      	adds	r3, r3, r4
 8007348:	9303      	str	r3, [sp, #12]
 800734a:	0033      	movs	r3, r6
 800734c:	3314      	adds	r3, #20
 800734e:	191c      	adds	r4, r3, r4
 8007350:	9301      	str	r3, [sp, #4]
 8007352:	6823      	ldr	r3, [r4, #0]
 8007354:	9304      	str	r3, [sp, #16]
 8007356:	9b03      	ldr	r3, [sp, #12]
 8007358:	9804      	ldr	r0, [sp, #16]
 800735a:	681d      	ldr	r5, [r3, #0]
 800735c:	3501      	adds	r5, #1
 800735e:	0029      	movs	r1, r5
 8007360:	f7f8 feee 	bl	8000140 <__udivsi3>
 8007364:	9b04      	ldr	r3, [sp, #16]
 8007366:	9000      	str	r0, [sp, #0]
 8007368:	42ab      	cmp	r3, r5
 800736a:	d32b      	bcc.n	80073c4 <quorem+0x9a>
 800736c:	9b05      	ldr	r3, [sp, #20]
 800736e:	9d01      	ldr	r5, [sp, #4]
 8007370:	469c      	mov	ip, r3
 8007372:	2300      	movs	r3, #0
 8007374:	9305      	str	r3, [sp, #20]
 8007376:	9304      	str	r3, [sp, #16]
 8007378:	4662      	mov	r2, ip
 800737a:	ca08      	ldmia	r2!, {r3}
 800737c:	6828      	ldr	r0, [r5, #0]
 800737e:	4694      	mov	ip, r2
 8007380:	9a00      	ldr	r2, [sp, #0]
 8007382:	b299      	uxth	r1, r3
 8007384:	4351      	muls	r1, r2
 8007386:	9a05      	ldr	r2, [sp, #20]
 8007388:	0c1b      	lsrs	r3, r3, #16
 800738a:	1889      	adds	r1, r1, r2
 800738c:	9a00      	ldr	r2, [sp, #0]
 800738e:	4353      	muls	r3, r2
 8007390:	0c0a      	lsrs	r2, r1, #16
 8007392:	189b      	adds	r3, r3, r2
 8007394:	0c1a      	lsrs	r2, r3, #16
 8007396:	b289      	uxth	r1, r1
 8007398:	9205      	str	r2, [sp, #20]
 800739a:	b282      	uxth	r2, r0
 800739c:	1a52      	subs	r2, r2, r1
 800739e:	9904      	ldr	r1, [sp, #16]
 80073a0:	0c00      	lsrs	r0, r0, #16
 80073a2:	1852      	adds	r2, r2, r1
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	1411      	asrs	r1, r2, #16
 80073a8:	1ac3      	subs	r3, r0, r3
 80073aa:	185b      	adds	r3, r3, r1
 80073ac:	1419      	asrs	r1, r3, #16
 80073ae:	b292      	uxth	r2, r2
 80073b0:	041b      	lsls	r3, r3, #16
 80073b2:	431a      	orrs	r2, r3
 80073b4:	9b03      	ldr	r3, [sp, #12]
 80073b6:	9104      	str	r1, [sp, #16]
 80073b8:	c504      	stmia	r5!, {r2}
 80073ba:	4563      	cmp	r3, ip
 80073bc:	d2dc      	bcs.n	8007378 <quorem+0x4e>
 80073be:	6823      	ldr	r3, [r4, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d030      	beq.n	8007426 <quorem+0xfc>
 80073c4:	0030      	movs	r0, r6
 80073c6:	9902      	ldr	r1, [sp, #8]
 80073c8:	f001 f90a 	bl	80085e0 <__mcmp>
 80073cc:	2800      	cmp	r0, #0
 80073ce:	db23      	blt.n	8007418 <quorem+0xee>
 80073d0:	0034      	movs	r4, r6
 80073d2:	2500      	movs	r5, #0
 80073d4:	9902      	ldr	r1, [sp, #8]
 80073d6:	3414      	adds	r4, #20
 80073d8:	3114      	adds	r1, #20
 80073da:	6823      	ldr	r3, [r4, #0]
 80073dc:	c901      	ldmia	r1!, {r0}
 80073de:	9302      	str	r3, [sp, #8]
 80073e0:	466b      	mov	r3, sp
 80073e2:	891b      	ldrh	r3, [r3, #8]
 80073e4:	b282      	uxth	r2, r0
 80073e6:	1a9a      	subs	r2, r3, r2
 80073e8:	9b02      	ldr	r3, [sp, #8]
 80073ea:	1952      	adds	r2, r2, r5
 80073ec:	0c00      	lsrs	r0, r0, #16
 80073ee:	0c1b      	lsrs	r3, r3, #16
 80073f0:	1a1b      	subs	r3, r3, r0
 80073f2:	1410      	asrs	r0, r2, #16
 80073f4:	181b      	adds	r3, r3, r0
 80073f6:	141d      	asrs	r5, r3, #16
 80073f8:	b292      	uxth	r2, r2
 80073fa:	041b      	lsls	r3, r3, #16
 80073fc:	431a      	orrs	r2, r3
 80073fe:	9b03      	ldr	r3, [sp, #12]
 8007400:	c404      	stmia	r4!, {r2}
 8007402:	428b      	cmp	r3, r1
 8007404:	d2e9      	bcs.n	80073da <quorem+0xb0>
 8007406:	9a01      	ldr	r2, [sp, #4]
 8007408:	00bb      	lsls	r3, r7, #2
 800740a:	18d3      	adds	r3, r2, r3
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	2a00      	cmp	r2, #0
 8007410:	d013      	beq.n	800743a <quorem+0x110>
 8007412:	9b00      	ldr	r3, [sp, #0]
 8007414:	3301      	adds	r3, #1
 8007416:	9300      	str	r3, [sp, #0]
 8007418:	9800      	ldr	r0, [sp, #0]
 800741a:	b007      	add	sp, #28
 800741c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800741e:	6823      	ldr	r3, [r4, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d104      	bne.n	800742e <quorem+0x104>
 8007424:	3f01      	subs	r7, #1
 8007426:	9b01      	ldr	r3, [sp, #4]
 8007428:	3c04      	subs	r4, #4
 800742a:	42a3      	cmp	r3, r4
 800742c:	d3f7      	bcc.n	800741e <quorem+0xf4>
 800742e:	6137      	str	r7, [r6, #16]
 8007430:	e7c8      	b.n	80073c4 <quorem+0x9a>
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	2a00      	cmp	r2, #0
 8007436:	d104      	bne.n	8007442 <quorem+0x118>
 8007438:	3f01      	subs	r7, #1
 800743a:	9a01      	ldr	r2, [sp, #4]
 800743c:	3b04      	subs	r3, #4
 800743e:	429a      	cmp	r2, r3
 8007440:	d3f7      	bcc.n	8007432 <quorem+0x108>
 8007442:	6137      	str	r7, [r6, #16]
 8007444:	e7e5      	b.n	8007412 <quorem+0xe8>
	...

08007448 <_dtoa_r>:
 8007448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800744a:	0014      	movs	r4, r2
 800744c:	001d      	movs	r5, r3
 800744e:	69c6      	ldr	r6, [r0, #28]
 8007450:	b09d      	sub	sp, #116	@ 0x74
 8007452:	940a      	str	r4, [sp, #40]	@ 0x28
 8007454:	950b      	str	r5, [sp, #44]	@ 0x2c
 8007456:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8007458:	9003      	str	r0, [sp, #12]
 800745a:	2e00      	cmp	r6, #0
 800745c:	d10f      	bne.n	800747e <_dtoa_r+0x36>
 800745e:	2010      	movs	r0, #16
 8007460:	f7ff f888 	bl	8006574 <malloc>
 8007464:	9b03      	ldr	r3, [sp, #12]
 8007466:	1e02      	subs	r2, r0, #0
 8007468:	61d8      	str	r0, [r3, #28]
 800746a:	d104      	bne.n	8007476 <_dtoa_r+0x2e>
 800746c:	21ef      	movs	r1, #239	@ 0xef
 800746e:	4bc7      	ldr	r3, [pc, #796]	@ (800778c <_dtoa_r+0x344>)
 8007470:	48c7      	ldr	r0, [pc, #796]	@ (8007790 <_dtoa_r+0x348>)
 8007472:	f001 fa7d 	bl	8008970 <__assert_func>
 8007476:	6046      	str	r6, [r0, #4]
 8007478:	6086      	str	r6, [r0, #8]
 800747a:	6006      	str	r6, [r0, #0]
 800747c:	60c6      	str	r6, [r0, #12]
 800747e:	9b03      	ldr	r3, [sp, #12]
 8007480:	69db      	ldr	r3, [r3, #28]
 8007482:	6819      	ldr	r1, [r3, #0]
 8007484:	2900      	cmp	r1, #0
 8007486:	d00b      	beq.n	80074a0 <_dtoa_r+0x58>
 8007488:	685a      	ldr	r2, [r3, #4]
 800748a:	2301      	movs	r3, #1
 800748c:	4093      	lsls	r3, r2
 800748e:	604a      	str	r2, [r1, #4]
 8007490:	608b      	str	r3, [r1, #8]
 8007492:	9803      	ldr	r0, [sp, #12]
 8007494:	f000 fe5a 	bl	800814c <_Bfree>
 8007498:	2200      	movs	r2, #0
 800749a:	9b03      	ldr	r3, [sp, #12]
 800749c:	69db      	ldr	r3, [r3, #28]
 800749e:	601a      	str	r2, [r3, #0]
 80074a0:	2d00      	cmp	r5, #0
 80074a2:	da1e      	bge.n	80074e2 <_dtoa_r+0x9a>
 80074a4:	2301      	movs	r3, #1
 80074a6:	603b      	str	r3, [r7, #0]
 80074a8:	006b      	lsls	r3, r5, #1
 80074aa:	085b      	lsrs	r3, r3, #1
 80074ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074ae:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80074b0:	4bb8      	ldr	r3, [pc, #736]	@ (8007794 <_dtoa_r+0x34c>)
 80074b2:	4ab8      	ldr	r2, [pc, #736]	@ (8007794 <_dtoa_r+0x34c>)
 80074b4:	403b      	ands	r3, r7
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d116      	bne.n	80074e8 <_dtoa_r+0xa0>
 80074ba:	4bb7      	ldr	r3, [pc, #732]	@ (8007798 <_dtoa_r+0x350>)
 80074bc:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80074be:	6013      	str	r3, [r2, #0]
 80074c0:	033b      	lsls	r3, r7, #12
 80074c2:	0b1b      	lsrs	r3, r3, #12
 80074c4:	4323      	orrs	r3, r4
 80074c6:	d101      	bne.n	80074cc <_dtoa_r+0x84>
 80074c8:	f000 fd83 	bl	8007fd2 <_dtoa_r+0xb8a>
 80074cc:	4bb3      	ldr	r3, [pc, #716]	@ (800779c <_dtoa_r+0x354>)
 80074ce:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80074d0:	9308      	str	r3, [sp, #32]
 80074d2:	2a00      	cmp	r2, #0
 80074d4:	d002      	beq.n	80074dc <_dtoa_r+0x94>
 80074d6:	4bb2      	ldr	r3, [pc, #712]	@ (80077a0 <_dtoa_r+0x358>)
 80074d8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80074da:	6013      	str	r3, [r2, #0]
 80074dc:	9808      	ldr	r0, [sp, #32]
 80074de:	b01d      	add	sp, #116	@ 0x74
 80074e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074e2:	2300      	movs	r3, #0
 80074e4:	603b      	str	r3, [r7, #0]
 80074e6:	e7e2      	b.n	80074ae <_dtoa_r+0x66>
 80074e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80074ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074ec:	9212      	str	r2, [sp, #72]	@ 0x48
 80074ee:	9313      	str	r3, [sp, #76]	@ 0x4c
 80074f0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80074f2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80074f4:	2200      	movs	r2, #0
 80074f6:	2300      	movs	r3, #0
 80074f8:	f7f8 ffa8 	bl	800044c <__aeabi_dcmpeq>
 80074fc:	1e06      	subs	r6, r0, #0
 80074fe:	d00b      	beq.n	8007518 <_dtoa_r+0xd0>
 8007500:	2301      	movs	r3, #1
 8007502:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007504:	6013      	str	r3, [r2, #0]
 8007506:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8007508:	2b00      	cmp	r3, #0
 800750a:	d002      	beq.n	8007512 <_dtoa_r+0xca>
 800750c:	4ba5      	ldr	r3, [pc, #660]	@ (80077a4 <_dtoa_r+0x35c>)
 800750e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007510:	6013      	str	r3, [r2, #0]
 8007512:	4ba5      	ldr	r3, [pc, #660]	@ (80077a8 <_dtoa_r+0x360>)
 8007514:	9308      	str	r3, [sp, #32]
 8007516:	e7e1      	b.n	80074dc <_dtoa_r+0x94>
 8007518:	ab1a      	add	r3, sp, #104	@ 0x68
 800751a:	9301      	str	r3, [sp, #4]
 800751c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800751e:	9300      	str	r3, [sp, #0]
 8007520:	9803      	ldr	r0, [sp, #12]
 8007522:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007524:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007526:	f001 f911 	bl	800874c <__d2b>
 800752a:	007a      	lsls	r2, r7, #1
 800752c:	9005      	str	r0, [sp, #20]
 800752e:	0d52      	lsrs	r2, r2, #21
 8007530:	d100      	bne.n	8007534 <_dtoa_r+0xec>
 8007532:	e07b      	b.n	800762c <_dtoa_r+0x1e4>
 8007534:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007536:	9618      	str	r6, [sp, #96]	@ 0x60
 8007538:	0319      	lsls	r1, r3, #12
 800753a:	4b9c      	ldr	r3, [pc, #624]	@ (80077ac <_dtoa_r+0x364>)
 800753c:	0b09      	lsrs	r1, r1, #12
 800753e:	430b      	orrs	r3, r1
 8007540:	499b      	ldr	r1, [pc, #620]	@ (80077b0 <_dtoa_r+0x368>)
 8007542:	1857      	adds	r7, r2, r1
 8007544:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007546:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007548:	0019      	movs	r1, r3
 800754a:	2200      	movs	r2, #0
 800754c:	4b99      	ldr	r3, [pc, #612]	@ (80077b4 <_dtoa_r+0x36c>)
 800754e:	f7fa fa1b 	bl	8001988 <__aeabi_dsub>
 8007552:	4a99      	ldr	r2, [pc, #612]	@ (80077b8 <_dtoa_r+0x370>)
 8007554:	4b99      	ldr	r3, [pc, #612]	@ (80077bc <_dtoa_r+0x374>)
 8007556:	f7f9 ff4f 	bl	80013f8 <__aeabi_dmul>
 800755a:	4a99      	ldr	r2, [pc, #612]	@ (80077c0 <_dtoa_r+0x378>)
 800755c:	4b99      	ldr	r3, [pc, #612]	@ (80077c4 <_dtoa_r+0x37c>)
 800755e:	f7f8 ffa3 	bl	80004a8 <__aeabi_dadd>
 8007562:	0004      	movs	r4, r0
 8007564:	0038      	movs	r0, r7
 8007566:	000d      	movs	r5, r1
 8007568:	f7fa fe08 	bl	800217c <__aeabi_i2d>
 800756c:	4a96      	ldr	r2, [pc, #600]	@ (80077c8 <_dtoa_r+0x380>)
 800756e:	4b97      	ldr	r3, [pc, #604]	@ (80077cc <_dtoa_r+0x384>)
 8007570:	f7f9 ff42 	bl	80013f8 <__aeabi_dmul>
 8007574:	0002      	movs	r2, r0
 8007576:	000b      	movs	r3, r1
 8007578:	0020      	movs	r0, r4
 800757a:	0029      	movs	r1, r5
 800757c:	f7f8 ff94 	bl	80004a8 <__aeabi_dadd>
 8007580:	0004      	movs	r4, r0
 8007582:	000d      	movs	r5, r1
 8007584:	f7fa fdbe 	bl	8002104 <__aeabi_d2iz>
 8007588:	2200      	movs	r2, #0
 800758a:	9004      	str	r0, [sp, #16]
 800758c:	2300      	movs	r3, #0
 800758e:	0020      	movs	r0, r4
 8007590:	0029      	movs	r1, r5
 8007592:	f7f8 ff61 	bl	8000458 <__aeabi_dcmplt>
 8007596:	2800      	cmp	r0, #0
 8007598:	d00b      	beq.n	80075b2 <_dtoa_r+0x16a>
 800759a:	9804      	ldr	r0, [sp, #16]
 800759c:	f7fa fdee 	bl	800217c <__aeabi_i2d>
 80075a0:	002b      	movs	r3, r5
 80075a2:	0022      	movs	r2, r4
 80075a4:	f7f8 ff52 	bl	800044c <__aeabi_dcmpeq>
 80075a8:	4243      	negs	r3, r0
 80075aa:	4158      	adcs	r0, r3
 80075ac:	9b04      	ldr	r3, [sp, #16]
 80075ae:	1a1b      	subs	r3, r3, r0
 80075b0:	9304      	str	r3, [sp, #16]
 80075b2:	2301      	movs	r3, #1
 80075b4:	9315      	str	r3, [sp, #84]	@ 0x54
 80075b6:	9b04      	ldr	r3, [sp, #16]
 80075b8:	2b16      	cmp	r3, #22
 80075ba:	d810      	bhi.n	80075de <_dtoa_r+0x196>
 80075bc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80075be:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80075c0:	9a04      	ldr	r2, [sp, #16]
 80075c2:	4b83      	ldr	r3, [pc, #524]	@ (80077d0 <_dtoa_r+0x388>)
 80075c4:	00d2      	lsls	r2, r2, #3
 80075c6:	189b      	adds	r3, r3, r2
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	f7f8 ff44 	bl	8000458 <__aeabi_dcmplt>
 80075d0:	2800      	cmp	r0, #0
 80075d2:	d047      	beq.n	8007664 <_dtoa_r+0x21c>
 80075d4:	9b04      	ldr	r3, [sp, #16]
 80075d6:	3b01      	subs	r3, #1
 80075d8:	9304      	str	r3, [sp, #16]
 80075da:	2300      	movs	r3, #0
 80075dc:	9315      	str	r3, [sp, #84]	@ 0x54
 80075de:	2200      	movs	r2, #0
 80075e0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80075e2:	9206      	str	r2, [sp, #24]
 80075e4:	1bdb      	subs	r3, r3, r7
 80075e6:	1e5a      	subs	r2, r3, #1
 80075e8:	d53e      	bpl.n	8007668 <_dtoa_r+0x220>
 80075ea:	2201      	movs	r2, #1
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	9306      	str	r3, [sp, #24]
 80075f0:	2300      	movs	r3, #0
 80075f2:	930d      	str	r3, [sp, #52]	@ 0x34
 80075f4:	9b04      	ldr	r3, [sp, #16]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	db38      	blt.n	800766c <_dtoa_r+0x224>
 80075fa:	9a04      	ldr	r2, [sp, #16]
 80075fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80075fe:	4694      	mov	ip, r2
 8007600:	4463      	add	r3, ip
 8007602:	930d      	str	r3, [sp, #52]	@ 0x34
 8007604:	2300      	movs	r3, #0
 8007606:	9214      	str	r2, [sp, #80]	@ 0x50
 8007608:	930f      	str	r3, [sp, #60]	@ 0x3c
 800760a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800760c:	2401      	movs	r4, #1
 800760e:	2b09      	cmp	r3, #9
 8007610:	d867      	bhi.n	80076e2 <_dtoa_r+0x29a>
 8007612:	2b05      	cmp	r3, #5
 8007614:	dd02      	ble.n	800761c <_dtoa_r+0x1d4>
 8007616:	2400      	movs	r4, #0
 8007618:	3b04      	subs	r3, #4
 800761a:	9322      	str	r3, [sp, #136]	@ 0x88
 800761c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800761e:	1e98      	subs	r0, r3, #2
 8007620:	2803      	cmp	r0, #3
 8007622:	d867      	bhi.n	80076f4 <_dtoa_r+0x2ac>
 8007624:	f7f8 fd78 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007628:	5b383a2b 	.word	0x5b383a2b
 800762c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800762e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8007630:	18f6      	adds	r6, r6, r3
 8007632:	4b68      	ldr	r3, [pc, #416]	@ (80077d4 <_dtoa_r+0x38c>)
 8007634:	18f2      	adds	r2, r6, r3
 8007636:	2a20      	cmp	r2, #32
 8007638:	dd0f      	ble.n	800765a <_dtoa_r+0x212>
 800763a:	2340      	movs	r3, #64	@ 0x40
 800763c:	1a9b      	subs	r3, r3, r2
 800763e:	409f      	lsls	r7, r3
 8007640:	4b65      	ldr	r3, [pc, #404]	@ (80077d8 <_dtoa_r+0x390>)
 8007642:	0038      	movs	r0, r7
 8007644:	18f3      	adds	r3, r6, r3
 8007646:	40dc      	lsrs	r4, r3
 8007648:	4320      	orrs	r0, r4
 800764a:	f7fa fdc5 	bl	80021d8 <__aeabi_ui2d>
 800764e:	2201      	movs	r2, #1
 8007650:	4b62      	ldr	r3, [pc, #392]	@ (80077dc <_dtoa_r+0x394>)
 8007652:	1e77      	subs	r7, r6, #1
 8007654:	18cb      	adds	r3, r1, r3
 8007656:	9218      	str	r2, [sp, #96]	@ 0x60
 8007658:	e776      	b.n	8007548 <_dtoa_r+0x100>
 800765a:	2320      	movs	r3, #32
 800765c:	0020      	movs	r0, r4
 800765e:	1a9b      	subs	r3, r3, r2
 8007660:	4098      	lsls	r0, r3
 8007662:	e7f2      	b.n	800764a <_dtoa_r+0x202>
 8007664:	9015      	str	r0, [sp, #84]	@ 0x54
 8007666:	e7ba      	b.n	80075de <_dtoa_r+0x196>
 8007668:	920d      	str	r2, [sp, #52]	@ 0x34
 800766a:	e7c3      	b.n	80075f4 <_dtoa_r+0x1ac>
 800766c:	9b06      	ldr	r3, [sp, #24]
 800766e:	9a04      	ldr	r2, [sp, #16]
 8007670:	1a9b      	subs	r3, r3, r2
 8007672:	9306      	str	r3, [sp, #24]
 8007674:	4253      	negs	r3, r2
 8007676:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007678:	2300      	movs	r3, #0
 800767a:	9314      	str	r3, [sp, #80]	@ 0x50
 800767c:	e7c5      	b.n	800760a <_dtoa_r+0x1c2>
 800767e:	2300      	movs	r3, #0
 8007680:	9310      	str	r3, [sp, #64]	@ 0x40
 8007682:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007684:	930e      	str	r3, [sp, #56]	@ 0x38
 8007686:	9309      	str	r3, [sp, #36]	@ 0x24
 8007688:	2b00      	cmp	r3, #0
 800768a:	dc13      	bgt.n	80076b4 <_dtoa_r+0x26c>
 800768c:	2301      	movs	r3, #1
 800768e:	001a      	movs	r2, r3
 8007690:	930e      	str	r3, [sp, #56]	@ 0x38
 8007692:	9309      	str	r3, [sp, #36]	@ 0x24
 8007694:	9223      	str	r2, [sp, #140]	@ 0x8c
 8007696:	e00d      	b.n	80076b4 <_dtoa_r+0x26c>
 8007698:	2301      	movs	r3, #1
 800769a:	e7f1      	b.n	8007680 <_dtoa_r+0x238>
 800769c:	2300      	movs	r3, #0
 800769e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80076a0:	9310      	str	r3, [sp, #64]	@ 0x40
 80076a2:	4694      	mov	ip, r2
 80076a4:	9b04      	ldr	r3, [sp, #16]
 80076a6:	4463      	add	r3, ip
 80076a8:	930e      	str	r3, [sp, #56]	@ 0x38
 80076aa:	3301      	adds	r3, #1
 80076ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	dc00      	bgt.n	80076b4 <_dtoa_r+0x26c>
 80076b2:	2301      	movs	r3, #1
 80076b4:	9a03      	ldr	r2, [sp, #12]
 80076b6:	2100      	movs	r1, #0
 80076b8:	69d0      	ldr	r0, [r2, #28]
 80076ba:	2204      	movs	r2, #4
 80076bc:	0015      	movs	r5, r2
 80076be:	3514      	adds	r5, #20
 80076c0:	429d      	cmp	r5, r3
 80076c2:	d91b      	bls.n	80076fc <_dtoa_r+0x2b4>
 80076c4:	6041      	str	r1, [r0, #4]
 80076c6:	9803      	ldr	r0, [sp, #12]
 80076c8:	f000 fcfc 	bl	80080c4 <_Balloc>
 80076cc:	9008      	str	r0, [sp, #32]
 80076ce:	2800      	cmp	r0, #0
 80076d0:	d117      	bne.n	8007702 <_dtoa_r+0x2ba>
 80076d2:	21b0      	movs	r1, #176	@ 0xb0
 80076d4:	4b42      	ldr	r3, [pc, #264]	@ (80077e0 <_dtoa_r+0x398>)
 80076d6:	482e      	ldr	r0, [pc, #184]	@ (8007790 <_dtoa_r+0x348>)
 80076d8:	9a08      	ldr	r2, [sp, #32]
 80076da:	31ff      	adds	r1, #255	@ 0xff
 80076dc:	e6c9      	b.n	8007472 <_dtoa_r+0x2a>
 80076de:	2301      	movs	r3, #1
 80076e0:	e7dd      	b.n	800769e <_dtoa_r+0x256>
 80076e2:	2300      	movs	r3, #0
 80076e4:	9410      	str	r4, [sp, #64]	@ 0x40
 80076e6:	9322      	str	r3, [sp, #136]	@ 0x88
 80076e8:	3b01      	subs	r3, #1
 80076ea:	930e      	str	r3, [sp, #56]	@ 0x38
 80076ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80076ee:	2200      	movs	r2, #0
 80076f0:	3313      	adds	r3, #19
 80076f2:	e7cf      	b.n	8007694 <_dtoa_r+0x24c>
 80076f4:	2301      	movs	r3, #1
 80076f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80076f8:	3b02      	subs	r3, #2
 80076fa:	e7f6      	b.n	80076ea <_dtoa_r+0x2a2>
 80076fc:	3101      	adds	r1, #1
 80076fe:	0052      	lsls	r2, r2, #1
 8007700:	e7dc      	b.n	80076bc <_dtoa_r+0x274>
 8007702:	9b03      	ldr	r3, [sp, #12]
 8007704:	9a08      	ldr	r2, [sp, #32]
 8007706:	69db      	ldr	r3, [r3, #28]
 8007708:	601a      	str	r2, [r3, #0]
 800770a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800770c:	2b0e      	cmp	r3, #14
 800770e:	d900      	bls.n	8007712 <_dtoa_r+0x2ca>
 8007710:	e0d9      	b.n	80078c6 <_dtoa_r+0x47e>
 8007712:	2c00      	cmp	r4, #0
 8007714:	d100      	bne.n	8007718 <_dtoa_r+0x2d0>
 8007716:	e0d6      	b.n	80078c6 <_dtoa_r+0x47e>
 8007718:	9b04      	ldr	r3, [sp, #16]
 800771a:	2b00      	cmp	r3, #0
 800771c:	dd64      	ble.n	80077e8 <_dtoa_r+0x3a0>
 800771e:	210f      	movs	r1, #15
 8007720:	9a04      	ldr	r2, [sp, #16]
 8007722:	4b2b      	ldr	r3, [pc, #172]	@ (80077d0 <_dtoa_r+0x388>)
 8007724:	400a      	ands	r2, r1
 8007726:	00d2      	lsls	r2, r2, #3
 8007728:	189b      	adds	r3, r3, r2
 800772a:	681e      	ldr	r6, [r3, #0]
 800772c:	685f      	ldr	r7, [r3, #4]
 800772e:	9b04      	ldr	r3, [sp, #16]
 8007730:	2402      	movs	r4, #2
 8007732:	111d      	asrs	r5, r3, #4
 8007734:	05db      	lsls	r3, r3, #23
 8007736:	d50a      	bpl.n	800774e <_dtoa_r+0x306>
 8007738:	4b2a      	ldr	r3, [pc, #168]	@ (80077e4 <_dtoa_r+0x39c>)
 800773a:	400d      	ands	r5, r1
 800773c:	6a1a      	ldr	r2, [r3, #32]
 800773e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007740:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007742:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007744:	f7f9 fa14 	bl	8000b70 <__aeabi_ddiv>
 8007748:	900a      	str	r0, [sp, #40]	@ 0x28
 800774a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800774c:	3401      	adds	r4, #1
 800774e:	4b25      	ldr	r3, [pc, #148]	@ (80077e4 <_dtoa_r+0x39c>)
 8007750:	930c      	str	r3, [sp, #48]	@ 0x30
 8007752:	2d00      	cmp	r5, #0
 8007754:	d108      	bne.n	8007768 <_dtoa_r+0x320>
 8007756:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007758:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800775a:	0032      	movs	r2, r6
 800775c:	003b      	movs	r3, r7
 800775e:	f7f9 fa07 	bl	8000b70 <__aeabi_ddiv>
 8007762:	900a      	str	r0, [sp, #40]	@ 0x28
 8007764:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007766:	e05a      	b.n	800781e <_dtoa_r+0x3d6>
 8007768:	2301      	movs	r3, #1
 800776a:	421d      	tst	r5, r3
 800776c:	d009      	beq.n	8007782 <_dtoa_r+0x33a>
 800776e:	18e4      	adds	r4, r4, r3
 8007770:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007772:	0030      	movs	r0, r6
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	0039      	movs	r1, r7
 800777a:	f7f9 fe3d 	bl	80013f8 <__aeabi_dmul>
 800777e:	0006      	movs	r6, r0
 8007780:	000f      	movs	r7, r1
 8007782:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007784:	106d      	asrs	r5, r5, #1
 8007786:	3308      	adds	r3, #8
 8007788:	e7e2      	b.n	8007750 <_dtoa_r+0x308>
 800778a:	46c0      	nop			@ (mov r8, r8)
 800778c:	08009119 	.word	0x08009119
 8007790:	08009130 	.word	0x08009130
 8007794:	7ff00000 	.word	0x7ff00000
 8007798:	0000270f 	.word	0x0000270f
 800779c:	08009115 	.word	0x08009115
 80077a0:	08009118 	.word	0x08009118
 80077a4:	080090e9 	.word	0x080090e9
 80077a8:	080090e8 	.word	0x080090e8
 80077ac:	3ff00000 	.word	0x3ff00000
 80077b0:	fffffc01 	.word	0xfffffc01
 80077b4:	3ff80000 	.word	0x3ff80000
 80077b8:	636f4361 	.word	0x636f4361
 80077bc:	3fd287a7 	.word	0x3fd287a7
 80077c0:	8b60c8b3 	.word	0x8b60c8b3
 80077c4:	3fc68a28 	.word	0x3fc68a28
 80077c8:	509f79fb 	.word	0x509f79fb
 80077cc:	3fd34413 	.word	0x3fd34413
 80077d0:	08009228 	.word	0x08009228
 80077d4:	00000432 	.word	0x00000432
 80077d8:	00000412 	.word	0x00000412
 80077dc:	fe100000 	.word	0xfe100000
 80077e0:	08009188 	.word	0x08009188
 80077e4:	08009200 	.word	0x08009200
 80077e8:	9b04      	ldr	r3, [sp, #16]
 80077ea:	2402      	movs	r4, #2
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d016      	beq.n	800781e <_dtoa_r+0x3d6>
 80077f0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80077f2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80077f4:	220f      	movs	r2, #15
 80077f6:	425d      	negs	r5, r3
 80077f8:	402a      	ands	r2, r5
 80077fa:	4bd7      	ldr	r3, [pc, #860]	@ (8007b58 <_dtoa_r+0x710>)
 80077fc:	00d2      	lsls	r2, r2, #3
 80077fe:	189b      	adds	r3, r3, r2
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	f7f9 fdf8 	bl	80013f8 <__aeabi_dmul>
 8007808:	2701      	movs	r7, #1
 800780a:	2300      	movs	r3, #0
 800780c:	900a      	str	r0, [sp, #40]	@ 0x28
 800780e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007810:	4ed2      	ldr	r6, [pc, #840]	@ (8007b5c <_dtoa_r+0x714>)
 8007812:	112d      	asrs	r5, r5, #4
 8007814:	2d00      	cmp	r5, #0
 8007816:	d000      	beq.n	800781a <_dtoa_r+0x3d2>
 8007818:	e0ba      	b.n	8007990 <_dtoa_r+0x548>
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1a1      	bne.n	8007762 <_dtoa_r+0x31a>
 800781e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007820:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007822:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007824:	2b00      	cmp	r3, #0
 8007826:	d100      	bne.n	800782a <_dtoa_r+0x3e2>
 8007828:	e0bd      	b.n	80079a6 <_dtoa_r+0x55e>
 800782a:	2200      	movs	r2, #0
 800782c:	0030      	movs	r0, r6
 800782e:	0039      	movs	r1, r7
 8007830:	4bcb      	ldr	r3, [pc, #812]	@ (8007b60 <_dtoa_r+0x718>)
 8007832:	f7f8 fe11 	bl	8000458 <__aeabi_dcmplt>
 8007836:	2800      	cmp	r0, #0
 8007838:	d100      	bne.n	800783c <_dtoa_r+0x3f4>
 800783a:	e0b4      	b.n	80079a6 <_dtoa_r+0x55e>
 800783c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800783e:	2b00      	cmp	r3, #0
 8007840:	d100      	bne.n	8007844 <_dtoa_r+0x3fc>
 8007842:	e0b0      	b.n	80079a6 <_dtoa_r+0x55e>
 8007844:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007846:	2b00      	cmp	r3, #0
 8007848:	dd39      	ble.n	80078be <_dtoa_r+0x476>
 800784a:	9b04      	ldr	r3, [sp, #16]
 800784c:	2200      	movs	r2, #0
 800784e:	3b01      	subs	r3, #1
 8007850:	930c      	str	r3, [sp, #48]	@ 0x30
 8007852:	0030      	movs	r0, r6
 8007854:	4bc3      	ldr	r3, [pc, #780]	@ (8007b64 <_dtoa_r+0x71c>)
 8007856:	0039      	movs	r1, r7
 8007858:	f7f9 fdce 	bl	80013f8 <__aeabi_dmul>
 800785c:	900a      	str	r0, [sp, #40]	@ 0x28
 800785e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007860:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007862:	3401      	adds	r4, #1
 8007864:	0020      	movs	r0, r4
 8007866:	9311      	str	r3, [sp, #68]	@ 0x44
 8007868:	f7fa fc88 	bl	800217c <__aeabi_i2d>
 800786c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800786e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007870:	f7f9 fdc2 	bl	80013f8 <__aeabi_dmul>
 8007874:	4bbc      	ldr	r3, [pc, #752]	@ (8007b68 <_dtoa_r+0x720>)
 8007876:	2200      	movs	r2, #0
 8007878:	f7f8 fe16 	bl	80004a8 <__aeabi_dadd>
 800787c:	4bbb      	ldr	r3, [pc, #748]	@ (8007b6c <_dtoa_r+0x724>)
 800787e:	0006      	movs	r6, r0
 8007880:	18cf      	adds	r7, r1, r3
 8007882:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007884:	2b00      	cmp	r3, #0
 8007886:	d000      	beq.n	800788a <_dtoa_r+0x442>
 8007888:	e091      	b.n	80079ae <_dtoa_r+0x566>
 800788a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800788c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800788e:	2200      	movs	r2, #0
 8007890:	4bb7      	ldr	r3, [pc, #732]	@ (8007b70 <_dtoa_r+0x728>)
 8007892:	f7fa f879 	bl	8001988 <__aeabi_dsub>
 8007896:	0032      	movs	r2, r6
 8007898:	003b      	movs	r3, r7
 800789a:	0004      	movs	r4, r0
 800789c:	000d      	movs	r5, r1
 800789e:	f7f8 fdef 	bl	8000480 <__aeabi_dcmpgt>
 80078a2:	2800      	cmp	r0, #0
 80078a4:	d000      	beq.n	80078a8 <_dtoa_r+0x460>
 80078a6:	e29d      	b.n	8007de4 <_dtoa_r+0x99c>
 80078a8:	2180      	movs	r1, #128	@ 0x80
 80078aa:	0609      	lsls	r1, r1, #24
 80078ac:	187b      	adds	r3, r7, r1
 80078ae:	0032      	movs	r2, r6
 80078b0:	0020      	movs	r0, r4
 80078b2:	0029      	movs	r1, r5
 80078b4:	f7f8 fdd0 	bl	8000458 <__aeabi_dcmplt>
 80078b8:	2800      	cmp	r0, #0
 80078ba:	d000      	beq.n	80078be <_dtoa_r+0x476>
 80078bc:	e130      	b.n	8007b20 <_dtoa_r+0x6d8>
 80078be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80078c0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80078c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80078c4:	940b      	str	r4, [sp, #44]	@ 0x2c
 80078c6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	da00      	bge.n	80078ce <_dtoa_r+0x486>
 80078cc:	e177      	b.n	8007bbe <_dtoa_r+0x776>
 80078ce:	9a04      	ldr	r2, [sp, #16]
 80078d0:	2a0e      	cmp	r2, #14
 80078d2:	dd00      	ble.n	80078d6 <_dtoa_r+0x48e>
 80078d4:	e173      	b.n	8007bbe <_dtoa_r+0x776>
 80078d6:	4ba0      	ldr	r3, [pc, #640]	@ (8007b58 <_dtoa_r+0x710>)
 80078d8:	00d2      	lsls	r2, r2, #3
 80078da:	189b      	adds	r3, r3, r2
 80078dc:	685c      	ldr	r4, [r3, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	9306      	str	r3, [sp, #24]
 80078e2:	9407      	str	r4, [sp, #28]
 80078e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	da03      	bge.n	80078f2 <_dtoa_r+0x4aa>
 80078ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	dc00      	bgt.n	80078f2 <_dtoa_r+0x4aa>
 80078f0:	e106      	b.n	8007b00 <_dtoa_r+0x6b8>
 80078f2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80078f4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80078f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078f8:	9d08      	ldr	r5, [sp, #32]
 80078fa:	3b01      	subs	r3, #1
 80078fc:	195b      	adds	r3, r3, r5
 80078fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007900:	9a06      	ldr	r2, [sp, #24]
 8007902:	9b07      	ldr	r3, [sp, #28]
 8007904:	0030      	movs	r0, r6
 8007906:	0039      	movs	r1, r7
 8007908:	f7f9 f932 	bl	8000b70 <__aeabi_ddiv>
 800790c:	f7fa fbfa 	bl	8002104 <__aeabi_d2iz>
 8007910:	9009      	str	r0, [sp, #36]	@ 0x24
 8007912:	f7fa fc33 	bl	800217c <__aeabi_i2d>
 8007916:	9a06      	ldr	r2, [sp, #24]
 8007918:	9b07      	ldr	r3, [sp, #28]
 800791a:	f7f9 fd6d 	bl	80013f8 <__aeabi_dmul>
 800791e:	0002      	movs	r2, r0
 8007920:	000b      	movs	r3, r1
 8007922:	0030      	movs	r0, r6
 8007924:	0039      	movs	r1, r7
 8007926:	f7fa f82f 	bl	8001988 <__aeabi_dsub>
 800792a:	002b      	movs	r3, r5
 800792c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800792e:	3501      	adds	r5, #1
 8007930:	3230      	adds	r2, #48	@ 0x30
 8007932:	701a      	strb	r2, [r3, #0]
 8007934:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007936:	002c      	movs	r4, r5
 8007938:	429a      	cmp	r2, r3
 800793a:	d000      	beq.n	800793e <_dtoa_r+0x4f6>
 800793c:	e131      	b.n	8007ba2 <_dtoa_r+0x75a>
 800793e:	0002      	movs	r2, r0
 8007940:	000b      	movs	r3, r1
 8007942:	f7f8 fdb1 	bl	80004a8 <__aeabi_dadd>
 8007946:	9a06      	ldr	r2, [sp, #24]
 8007948:	9b07      	ldr	r3, [sp, #28]
 800794a:	0006      	movs	r6, r0
 800794c:	000f      	movs	r7, r1
 800794e:	f7f8 fd97 	bl	8000480 <__aeabi_dcmpgt>
 8007952:	2800      	cmp	r0, #0
 8007954:	d000      	beq.n	8007958 <_dtoa_r+0x510>
 8007956:	e10f      	b.n	8007b78 <_dtoa_r+0x730>
 8007958:	9a06      	ldr	r2, [sp, #24]
 800795a:	9b07      	ldr	r3, [sp, #28]
 800795c:	0030      	movs	r0, r6
 800795e:	0039      	movs	r1, r7
 8007960:	f7f8 fd74 	bl	800044c <__aeabi_dcmpeq>
 8007964:	2800      	cmp	r0, #0
 8007966:	d003      	beq.n	8007970 <_dtoa_r+0x528>
 8007968:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800796a:	07dd      	lsls	r5, r3, #31
 800796c:	d500      	bpl.n	8007970 <_dtoa_r+0x528>
 800796e:	e103      	b.n	8007b78 <_dtoa_r+0x730>
 8007970:	9905      	ldr	r1, [sp, #20]
 8007972:	9803      	ldr	r0, [sp, #12]
 8007974:	f000 fbea 	bl	800814c <_Bfree>
 8007978:	2300      	movs	r3, #0
 800797a:	7023      	strb	r3, [r4, #0]
 800797c:	9b04      	ldr	r3, [sp, #16]
 800797e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007980:	3301      	adds	r3, #1
 8007982:	6013      	str	r3, [r2, #0]
 8007984:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8007986:	2b00      	cmp	r3, #0
 8007988:	d100      	bne.n	800798c <_dtoa_r+0x544>
 800798a:	e5a7      	b.n	80074dc <_dtoa_r+0x94>
 800798c:	601c      	str	r4, [r3, #0]
 800798e:	e5a5      	b.n	80074dc <_dtoa_r+0x94>
 8007990:	423d      	tst	r5, r7
 8007992:	d005      	beq.n	80079a0 <_dtoa_r+0x558>
 8007994:	6832      	ldr	r2, [r6, #0]
 8007996:	6873      	ldr	r3, [r6, #4]
 8007998:	f7f9 fd2e 	bl	80013f8 <__aeabi_dmul>
 800799c:	003b      	movs	r3, r7
 800799e:	3401      	adds	r4, #1
 80079a0:	106d      	asrs	r5, r5, #1
 80079a2:	3608      	adds	r6, #8
 80079a4:	e736      	b.n	8007814 <_dtoa_r+0x3cc>
 80079a6:	9b04      	ldr	r3, [sp, #16]
 80079a8:	930c      	str	r3, [sp, #48]	@ 0x30
 80079aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079ac:	e75a      	b.n	8007864 <_dtoa_r+0x41c>
 80079ae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80079b0:	4b69      	ldr	r3, [pc, #420]	@ (8007b58 <_dtoa_r+0x710>)
 80079b2:	3a01      	subs	r2, #1
 80079b4:	00d2      	lsls	r2, r2, #3
 80079b6:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80079b8:	189b      	adds	r3, r3, r2
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	2900      	cmp	r1, #0
 80079c0:	d04c      	beq.n	8007a5c <_dtoa_r+0x614>
 80079c2:	2000      	movs	r0, #0
 80079c4:	496b      	ldr	r1, [pc, #428]	@ (8007b74 <_dtoa_r+0x72c>)
 80079c6:	f7f9 f8d3 	bl	8000b70 <__aeabi_ddiv>
 80079ca:	0032      	movs	r2, r6
 80079cc:	003b      	movs	r3, r7
 80079ce:	f7f9 ffdb 	bl	8001988 <__aeabi_dsub>
 80079d2:	9a08      	ldr	r2, [sp, #32]
 80079d4:	0006      	movs	r6, r0
 80079d6:	4694      	mov	ip, r2
 80079d8:	000f      	movs	r7, r1
 80079da:	9b08      	ldr	r3, [sp, #32]
 80079dc:	9316      	str	r3, [sp, #88]	@ 0x58
 80079de:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80079e0:	4463      	add	r3, ip
 80079e2:	9311      	str	r3, [sp, #68]	@ 0x44
 80079e4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80079e6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80079e8:	f7fa fb8c 	bl	8002104 <__aeabi_d2iz>
 80079ec:	0005      	movs	r5, r0
 80079ee:	f7fa fbc5 	bl	800217c <__aeabi_i2d>
 80079f2:	0002      	movs	r2, r0
 80079f4:	000b      	movs	r3, r1
 80079f6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80079f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80079fa:	f7f9 ffc5 	bl	8001988 <__aeabi_dsub>
 80079fe:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007a00:	3530      	adds	r5, #48	@ 0x30
 8007a02:	1c5c      	adds	r4, r3, #1
 8007a04:	701d      	strb	r5, [r3, #0]
 8007a06:	0032      	movs	r2, r6
 8007a08:	003b      	movs	r3, r7
 8007a0a:	900a      	str	r0, [sp, #40]	@ 0x28
 8007a0c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007a0e:	f7f8 fd23 	bl	8000458 <__aeabi_dcmplt>
 8007a12:	2800      	cmp	r0, #0
 8007a14:	d16a      	bne.n	8007aec <_dtoa_r+0x6a4>
 8007a16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a1a:	2000      	movs	r0, #0
 8007a1c:	4950      	ldr	r1, [pc, #320]	@ (8007b60 <_dtoa_r+0x718>)
 8007a1e:	f7f9 ffb3 	bl	8001988 <__aeabi_dsub>
 8007a22:	0032      	movs	r2, r6
 8007a24:	003b      	movs	r3, r7
 8007a26:	f7f8 fd17 	bl	8000458 <__aeabi_dcmplt>
 8007a2a:	2800      	cmp	r0, #0
 8007a2c:	d000      	beq.n	8007a30 <_dtoa_r+0x5e8>
 8007a2e:	e0a5      	b.n	8007b7c <_dtoa_r+0x734>
 8007a30:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007a32:	42a3      	cmp	r3, r4
 8007a34:	d100      	bne.n	8007a38 <_dtoa_r+0x5f0>
 8007a36:	e742      	b.n	80078be <_dtoa_r+0x476>
 8007a38:	2200      	movs	r2, #0
 8007a3a:	0030      	movs	r0, r6
 8007a3c:	0039      	movs	r1, r7
 8007a3e:	4b49      	ldr	r3, [pc, #292]	@ (8007b64 <_dtoa_r+0x71c>)
 8007a40:	f7f9 fcda 	bl	80013f8 <__aeabi_dmul>
 8007a44:	2200      	movs	r2, #0
 8007a46:	0006      	movs	r6, r0
 8007a48:	000f      	movs	r7, r1
 8007a4a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007a4c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a4e:	4b45      	ldr	r3, [pc, #276]	@ (8007b64 <_dtoa_r+0x71c>)
 8007a50:	f7f9 fcd2 	bl	80013f8 <__aeabi_dmul>
 8007a54:	9416      	str	r4, [sp, #88]	@ 0x58
 8007a56:	900a      	str	r0, [sp, #40]	@ 0x28
 8007a58:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007a5a:	e7c3      	b.n	80079e4 <_dtoa_r+0x59c>
 8007a5c:	0030      	movs	r0, r6
 8007a5e:	0039      	movs	r1, r7
 8007a60:	f7f9 fcca 	bl	80013f8 <__aeabi_dmul>
 8007a64:	9d08      	ldr	r5, [sp, #32]
 8007a66:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007a68:	002b      	movs	r3, r5
 8007a6a:	4694      	mov	ip, r2
 8007a6c:	9016      	str	r0, [sp, #88]	@ 0x58
 8007a6e:	9117      	str	r1, [sp, #92]	@ 0x5c
 8007a70:	4463      	add	r3, ip
 8007a72:	9319      	str	r3, [sp, #100]	@ 0x64
 8007a74:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007a76:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a78:	f7fa fb44 	bl	8002104 <__aeabi_d2iz>
 8007a7c:	0004      	movs	r4, r0
 8007a7e:	f7fa fb7d 	bl	800217c <__aeabi_i2d>
 8007a82:	000b      	movs	r3, r1
 8007a84:	0002      	movs	r2, r0
 8007a86:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007a88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a8a:	f7f9 ff7d 	bl	8001988 <__aeabi_dsub>
 8007a8e:	3430      	adds	r4, #48	@ 0x30
 8007a90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a92:	702c      	strb	r4, [r5, #0]
 8007a94:	3501      	adds	r5, #1
 8007a96:	0006      	movs	r6, r0
 8007a98:	000f      	movs	r7, r1
 8007a9a:	42ab      	cmp	r3, r5
 8007a9c:	d129      	bne.n	8007af2 <_dtoa_r+0x6aa>
 8007a9e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8007aa0:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8007aa2:	9b08      	ldr	r3, [sp, #32]
 8007aa4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8007aa6:	469c      	mov	ip, r3
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	4b32      	ldr	r3, [pc, #200]	@ (8007b74 <_dtoa_r+0x72c>)
 8007aac:	4464      	add	r4, ip
 8007aae:	f7f8 fcfb 	bl	80004a8 <__aeabi_dadd>
 8007ab2:	0002      	movs	r2, r0
 8007ab4:	000b      	movs	r3, r1
 8007ab6:	0030      	movs	r0, r6
 8007ab8:	0039      	movs	r1, r7
 8007aba:	f7f8 fce1 	bl	8000480 <__aeabi_dcmpgt>
 8007abe:	2800      	cmp	r0, #0
 8007ac0:	d15c      	bne.n	8007b7c <_dtoa_r+0x734>
 8007ac2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007ac4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007ac6:	2000      	movs	r0, #0
 8007ac8:	492a      	ldr	r1, [pc, #168]	@ (8007b74 <_dtoa_r+0x72c>)
 8007aca:	f7f9 ff5d 	bl	8001988 <__aeabi_dsub>
 8007ace:	0002      	movs	r2, r0
 8007ad0:	000b      	movs	r3, r1
 8007ad2:	0030      	movs	r0, r6
 8007ad4:	0039      	movs	r1, r7
 8007ad6:	f7f8 fcbf 	bl	8000458 <__aeabi_dcmplt>
 8007ada:	2800      	cmp	r0, #0
 8007adc:	d100      	bne.n	8007ae0 <_dtoa_r+0x698>
 8007ade:	e6ee      	b.n	80078be <_dtoa_r+0x476>
 8007ae0:	0023      	movs	r3, r4
 8007ae2:	3c01      	subs	r4, #1
 8007ae4:	7822      	ldrb	r2, [r4, #0]
 8007ae6:	2a30      	cmp	r2, #48	@ 0x30
 8007ae8:	d0fa      	beq.n	8007ae0 <_dtoa_r+0x698>
 8007aea:	001c      	movs	r4, r3
 8007aec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007aee:	9304      	str	r3, [sp, #16]
 8007af0:	e73e      	b.n	8007970 <_dtoa_r+0x528>
 8007af2:	2200      	movs	r2, #0
 8007af4:	4b1b      	ldr	r3, [pc, #108]	@ (8007b64 <_dtoa_r+0x71c>)
 8007af6:	f7f9 fc7f 	bl	80013f8 <__aeabi_dmul>
 8007afa:	900a      	str	r0, [sp, #40]	@ 0x28
 8007afc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007afe:	e7b9      	b.n	8007a74 <_dtoa_r+0x62c>
 8007b00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d10c      	bne.n	8007b20 <_dtoa_r+0x6d8>
 8007b06:	9806      	ldr	r0, [sp, #24]
 8007b08:	9907      	ldr	r1, [sp, #28]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	4b18      	ldr	r3, [pc, #96]	@ (8007b70 <_dtoa_r+0x728>)
 8007b0e:	f7f9 fc73 	bl	80013f8 <__aeabi_dmul>
 8007b12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b16:	f7f8 fcbd 	bl	8000494 <__aeabi_dcmpge>
 8007b1a:	2800      	cmp	r0, #0
 8007b1c:	d100      	bne.n	8007b20 <_dtoa_r+0x6d8>
 8007b1e:	e164      	b.n	8007dea <_dtoa_r+0x9a2>
 8007b20:	2600      	movs	r6, #0
 8007b22:	0037      	movs	r7, r6
 8007b24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007b26:	9c08      	ldr	r4, [sp, #32]
 8007b28:	43db      	mvns	r3, r3
 8007b2a:	930c      	str	r3, [sp, #48]	@ 0x30
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	9304      	str	r3, [sp, #16]
 8007b30:	0031      	movs	r1, r6
 8007b32:	9803      	ldr	r0, [sp, #12]
 8007b34:	f000 fb0a 	bl	800814c <_Bfree>
 8007b38:	2f00      	cmp	r7, #0
 8007b3a:	d0d7      	beq.n	8007aec <_dtoa_r+0x6a4>
 8007b3c:	9b04      	ldr	r3, [sp, #16]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d005      	beq.n	8007b4e <_dtoa_r+0x706>
 8007b42:	42bb      	cmp	r3, r7
 8007b44:	d003      	beq.n	8007b4e <_dtoa_r+0x706>
 8007b46:	0019      	movs	r1, r3
 8007b48:	9803      	ldr	r0, [sp, #12]
 8007b4a:	f000 faff 	bl	800814c <_Bfree>
 8007b4e:	0039      	movs	r1, r7
 8007b50:	9803      	ldr	r0, [sp, #12]
 8007b52:	f000 fafb 	bl	800814c <_Bfree>
 8007b56:	e7c9      	b.n	8007aec <_dtoa_r+0x6a4>
 8007b58:	08009228 	.word	0x08009228
 8007b5c:	08009200 	.word	0x08009200
 8007b60:	3ff00000 	.word	0x3ff00000
 8007b64:	40240000 	.word	0x40240000
 8007b68:	401c0000 	.word	0x401c0000
 8007b6c:	fcc00000 	.word	0xfcc00000
 8007b70:	40140000 	.word	0x40140000
 8007b74:	3fe00000 	.word	0x3fe00000
 8007b78:	9b04      	ldr	r3, [sp, #16]
 8007b7a:	930c      	str	r3, [sp, #48]	@ 0x30
 8007b7c:	0023      	movs	r3, r4
 8007b7e:	001c      	movs	r4, r3
 8007b80:	3b01      	subs	r3, #1
 8007b82:	781a      	ldrb	r2, [r3, #0]
 8007b84:	2a39      	cmp	r2, #57	@ 0x39
 8007b86:	d108      	bne.n	8007b9a <_dtoa_r+0x752>
 8007b88:	9a08      	ldr	r2, [sp, #32]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d1f7      	bne.n	8007b7e <_dtoa_r+0x736>
 8007b8e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007b90:	9908      	ldr	r1, [sp, #32]
 8007b92:	3201      	adds	r2, #1
 8007b94:	920c      	str	r2, [sp, #48]	@ 0x30
 8007b96:	2230      	movs	r2, #48	@ 0x30
 8007b98:	700a      	strb	r2, [r1, #0]
 8007b9a:	781a      	ldrb	r2, [r3, #0]
 8007b9c:	3201      	adds	r2, #1
 8007b9e:	701a      	strb	r2, [r3, #0]
 8007ba0:	e7a4      	b.n	8007aec <_dtoa_r+0x6a4>
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	4bc6      	ldr	r3, [pc, #792]	@ (8007ec0 <_dtoa_r+0xa78>)
 8007ba6:	f7f9 fc27 	bl	80013f8 <__aeabi_dmul>
 8007baa:	2200      	movs	r2, #0
 8007bac:	2300      	movs	r3, #0
 8007bae:	0006      	movs	r6, r0
 8007bb0:	000f      	movs	r7, r1
 8007bb2:	f7f8 fc4b 	bl	800044c <__aeabi_dcmpeq>
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	d100      	bne.n	8007bbc <_dtoa_r+0x774>
 8007bba:	e6a1      	b.n	8007900 <_dtoa_r+0x4b8>
 8007bbc:	e6d8      	b.n	8007970 <_dtoa_r+0x528>
 8007bbe:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8007bc0:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8007bc2:	9c06      	ldr	r4, [sp, #24]
 8007bc4:	2f00      	cmp	r7, #0
 8007bc6:	d014      	beq.n	8007bf2 <_dtoa_r+0x7aa>
 8007bc8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007bca:	2a01      	cmp	r2, #1
 8007bcc:	dd00      	ble.n	8007bd0 <_dtoa_r+0x788>
 8007bce:	e0c8      	b.n	8007d62 <_dtoa_r+0x91a>
 8007bd0:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8007bd2:	2a00      	cmp	r2, #0
 8007bd4:	d100      	bne.n	8007bd8 <_dtoa_r+0x790>
 8007bd6:	e0be      	b.n	8007d56 <_dtoa_r+0x90e>
 8007bd8:	4aba      	ldr	r2, [pc, #744]	@ (8007ec4 <_dtoa_r+0xa7c>)
 8007bda:	189b      	adds	r3, r3, r2
 8007bdc:	9a06      	ldr	r2, [sp, #24]
 8007bde:	2101      	movs	r1, #1
 8007be0:	18d2      	adds	r2, r2, r3
 8007be2:	9206      	str	r2, [sp, #24]
 8007be4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007be6:	9803      	ldr	r0, [sp, #12]
 8007be8:	18d3      	adds	r3, r2, r3
 8007bea:	930d      	str	r3, [sp, #52]	@ 0x34
 8007bec:	f000 fb66 	bl	80082bc <__i2b>
 8007bf0:	0007      	movs	r7, r0
 8007bf2:	2c00      	cmp	r4, #0
 8007bf4:	d00e      	beq.n	8007c14 <_dtoa_r+0x7cc>
 8007bf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	dd0b      	ble.n	8007c14 <_dtoa_r+0x7cc>
 8007bfc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007bfe:	0023      	movs	r3, r4
 8007c00:	4294      	cmp	r4, r2
 8007c02:	dd00      	ble.n	8007c06 <_dtoa_r+0x7be>
 8007c04:	0013      	movs	r3, r2
 8007c06:	9a06      	ldr	r2, [sp, #24]
 8007c08:	1ae4      	subs	r4, r4, r3
 8007c0a:	1ad2      	subs	r2, r2, r3
 8007c0c:	9206      	str	r2, [sp, #24]
 8007c0e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	930d      	str	r3, [sp, #52]	@ 0x34
 8007c14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d01f      	beq.n	8007c5a <_dtoa_r+0x812>
 8007c1a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d100      	bne.n	8007c22 <_dtoa_r+0x7da>
 8007c20:	e0b5      	b.n	8007d8e <_dtoa_r+0x946>
 8007c22:	2d00      	cmp	r5, #0
 8007c24:	d010      	beq.n	8007c48 <_dtoa_r+0x800>
 8007c26:	0039      	movs	r1, r7
 8007c28:	002a      	movs	r2, r5
 8007c2a:	9803      	ldr	r0, [sp, #12]
 8007c2c:	f000 fc10 	bl	8008450 <__pow5mult>
 8007c30:	9a05      	ldr	r2, [sp, #20]
 8007c32:	0001      	movs	r1, r0
 8007c34:	0007      	movs	r7, r0
 8007c36:	9803      	ldr	r0, [sp, #12]
 8007c38:	f000 fb58 	bl	80082ec <__multiply>
 8007c3c:	0006      	movs	r6, r0
 8007c3e:	9905      	ldr	r1, [sp, #20]
 8007c40:	9803      	ldr	r0, [sp, #12]
 8007c42:	f000 fa83 	bl	800814c <_Bfree>
 8007c46:	9605      	str	r6, [sp, #20]
 8007c48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c4a:	1b5a      	subs	r2, r3, r5
 8007c4c:	42ab      	cmp	r3, r5
 8007c4e:	d004      	beq.n	8007c5a <_dtoa_r+0x812>
 8007c50:	9905      	ldr	r1, [sp, #20]
 8007c52:	9803      	ldr	r0, [sp, #12]
 8007c54:	f000 fbfc 	bl	8008450 <__pow5mult>
 8007c58:	9005      	str	r0, [sp, #20]
 8007c5a:	2101      	movs	r1, #1
 8007c5c:	9803      	ldr	r0, [sp, #12]
 8007c5e:	f000 fb2d 	bl	80082bc <__i2b>
 8007c62:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007c64:	0006      	movs	r6, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d100      	bne.n	8007c6c <_dtoa_r+0x824>
 8007c6a:	e1bc      	b.n	8007fe6 <_dtoa_r+0xb9e>
 8007c6c:	001a      	movs	r2, r3
 8007c6e:	0001      	movs	r1, r0
 8007c70:	9803      	ldr	r0, [sp, #12]
 8007c72:	f000 fbed 	bl	8008450 <__pow5mult>
 8007c76:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007c78:	0006      	movs	r6, r0
 8007c7a:	2500      	movs	r5, #0
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	dc16      	bgt.n	8007cae <_dtoa_r+0x866>
 8007c80:	2500      	movs	r5, #0
 8007c82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c84:	42ab      	cmp	r3, r5
 8007c86:	d10e      	bne.n	8007ca6 <_dtoa_r+0x85e>
 8007c88:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c8a:	031b      	lsls	r3, r3, #12
 8007c8c:	42ab      	cmp	r3, r5
 8007c8e:	d10a      	bne.n	8007ca6 <_dtoa_r+0x85e>
 8007c90:	4b8d      	ldr	r3, [pc, #564]	@ (8007ec8 <_dtoa_r+0xa80>)
 8007c92:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007c94:	4213      	tst	r3, r2
 8007c96:	d006      	beq.n	8007ca6 <_dtoa_r+0x85e>
 8007c98:	9b06      	ldr	r3, [sp, #24]
 8007c9a:	3501      	adds	r5, #1
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	9306      	str	r3, [sp, #24]
 8007ca0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	930d      	str	r3, [sp, #52]	@ 0x34
 8007ca6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007ca8:	2001      	movs	r0, #1
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d008      	beq.n	8007cc0 <_dtoa_r+0x878>
 8007cae:	6933      	ldr	r3, [r6, #16]
 8007cb0:	3303      	adds	r3, #3
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	18f3      	adds	r3, r6, r3
 8007cb6:	6858      	ldr	r0, [r3, #4]
 8007cb8:	f000 fab0 	bl	800821c <__hi0bits>
 8007cbc:	2320      	movs	r3, #32
 8007cbe:	1a18      	subs	r0, r3, r0
 8007cc0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007cc2:	1818      	adds	r0, r3, r0
 8007cc4:	0002      	movs	r2, r0
 8007cc6:	231f      	movs	r3, #31
 8007cc8:	401a      	ands	r2, r3
 8007cca:	4218      	tst	r0, r3
 8007ccc:	d065      	beq.n	8007d9a <_dtoa_r+0x952>
 8007cce:	3301      	adds	r3, #1
 8007cd0:	1a9b      	subs	r3, r3, r2
 8007cd2:	2b04      	cmp	r3, #4
 8007cd4:	dd5d      	ble.n	8007d92 <_dtoa_r+0x94a>
 8007cd6:	231c      	movs	r3, #28
 8007cd8:	1a9b      	subs	r3, r3, r2
 8007cda:	9a06      	ldr	r2, [sp, #24]
 8007cdc:	18e4      	adds	r4, r4, r3
 8007cde:	18d2      	adds	r2, r2, r3
 8007ce0:	9206      	str	r2, [sp, #24]
 8007ce2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007ce4:	18d3      	adds	r3, r2, r3
 8007ce6:	930d      	str	r3, [sp, #52]	@ 0x34
 8007ce8:	9b06      	ldr	r3, [sp, #24]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	dd05      	ble.n	8007cfa <_dtoa_r+0x8b2>
 8007cee:	001a      	movs	r2, r3
 8007cf0:	9905      	ldr	r1, [sp, #20]
 8007cf2:	9803      	ldr	r0, [sp, #12]
 8007cf4:	f000 fc08 	bl	8008508 <__lshift>
 8007cf8:	9005      	str	r0, [sp, #20]
 8007cfa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	dd05      	ble.n	8007d0c <_dtoa_r+0x8c4>
 8007d00:	0031      	movs	r1, r6
 8007d02:	001a      	movs	r2, r3
 8007d04:	9803      	ldr	r0, [sp, #12]
 8007d06:	f000 fbff 	bl	8008508 <__lshift>
 8007d0a:	0006      	movs	r6, r0
 8007d0c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d045      	beq.n	8007d9e <_dtoa_r+0x956>
 8007d12:	0031      	movs	r1, r6
 8007d14:	9805      	ldr	r0, [sp, #20]
 8007d16:	f000 fc63 	bl	80085e0 <__mcmp>
 8007d1a:	2800      	cmp	r0, #0
 8007d1c:	da3f      	bge.n	8007d9e <_dtoa_r+0x956>
 8007d1e:	9b04      	ldr	r3, [sp, #16]
 8007d20:	220a      	movs	r2, #10
 8007d22:	3b01      	subs	r3, #1
 8007d24:	930c      	str	r3, [sp, #48]	@ 0x30
 8007d26:	9905      	ldr	r1, [sp, #20]
 8007d28:	2300      	movs	r3, #0
 8007d2a:	9803      	ldr	r0, [sp, #12]
 8007d2c:	f000 fa32 	bl	8008194 <__multadd>
 8007d30:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007d32:	9005      	str	r0, [sp, #20]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d100      	bne.n	8007d3a <_dtoa_r+0x8f2>
 8007d38:	e15c      	b.n	8007ff4 <_dtoa_r+0xbac>
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	0039      	movs	r1, r7
 8007d3e:	220a      	movs	r2, #10
 8007d40:	9803      	ldr	r0, [sp, #12]
 8007d42:	f000 fa27 	bl	8008194 <__multadd>
 8007d46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d48:	0007      	movs	r7, r0
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	dc55      	bgt.n	8007dfa <_dtoa_r+0x9b2>
 8007d4e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	dc2d      	bgt.n	8007db0 <_dtoa_r+0x968>
 8007d54:	e051      	b.n	8007dfa <_dtoa_r+0x9b2>
 8007d56:	2336      	movs	r3, #54	@ 0x36
 8007d58:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007d5a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8007d5c:	9c06      	ldr	r4, [sp, #24]
 8007d5e:	1a9b      	subs	r3, r3, r2
 8007d60:	e73c      	b.n	8007bdc <_dtoa_r+0x794>
 8007d62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d64:	1e5d      	subs	r5, r3, #1
 8007d66:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d68:	42ab      	cmp	r3, r5
 8007d6a:	db08      	blt.n	8007d7e <_dtoa_r+0x936>
 8007d6c:	1b5d      	subs	r5, r3, r5
 8007d6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d70:	9c06      	ldr	r4, [sp, #24]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	db00      	blt.n	8007d78 <_dtoa_r+0x930>
 8007d76:	e731      	b.n	8007bdc <_dtoa_r+0x794>
 8007d78:	1ae4      	subs	r4, r4, r3
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	e72e      	b.n	8007bdc <_dtoa_r+0x794>
 8007d7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d80:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007d82:	1aeb      	subs	r3, r5, r3
 8007d84:	18d3      	adds	r3, r2, r3
 8007d86:	950f      	str	r5, [sp, #60]	@ 0x3c
 8007d88:	9314      	str	r3, [sp, #80]	@ 0x50
 8007d8a:	2500      	movs	r5, #0
 8007d8c:	e7ef      	b.n	8007d6e <_dtoa_r+0x926>
 8007d8e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007d90:	e75e      	b.n	8007c50 <_dtoa_r+0x808>
 8007d92:	2b04      	cmp	r3, #4
 8007d94:	d0a8      	beq.n	8007ce8 <_dtoa_r+0x8a0>
 8007d96:	331c      	adds	r3, #28
 8007d98:	e79f      	b.n	8007cda <_dtoa_r+0x892>
 8007d9a:	0013      	movs	r3, r2
 8007d9c:	e7fb      	b.n	8007d96 <_dtoa_r+0x94e>
 8007d9e:	9b04      	ldr	r3, [sp, #16]
 8007da0:	930c      	str	r3, [sp, #48]	@ 0x30
 8007da2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007da4:	930e      	str	r3, [sp, #56]	@ 0x38
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	dc23      	bgt.n	8007df2 <_dtoa_r+0x9aa>
 8007daa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	dd20      	ble.n	8007df2 <_dtoa_r+0x9aa>
 8007db0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d000      	beq.n	8007db8 <_dtoa_r+0x970>
 8007db6:	e6b5      	b.n	8007b24 <_dtoa_r+0x6dc>
 8007db8:	0031      	movs	r1, r6
 8007dba:	2205      	movs	r2, #5
 8007dbc:	9803      	ldr	r0, [sp, #12]
 8007dbe:	f000 f9e9 	bl	8008194 <__multadd>
 8007dc2:	0006      	movs	r6, r0
 8007dc4:	0001      	movs	r1, r0
 8007dc6:	9805      	ldr	r0, [sp, #20]
 8007dc8:	f000 fc0a 	bl	80085e0 <__mcmp>
 8007dcc:	2800      	cmp	r0, #0
 8007dce:	dc00      	bgt.n	8007dd2 <_dtoa_r+0x98a>
 8007dd0:	e6a8      	b.n	8007b24 <_dtoa_r+0x6dc>
 8007dd2:	9b08      	ldr	r3, [sp, #32]
 8007dd4:	9a08      	ldr	r2, [sp, #32]
 8007dd6:	1c5c      	adds	r4, r3, #1
 8007dd8:	2331      	movs	r3, #49	@ 0x31
 8007dda:	7013      	strb	r3, [r2, #0]
 8007ddc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007dde:	3301      	adds	r3, #1
 8007de0:	930c      	str	r3, [sp, #48]	@ 0x30
 8007de2:	e6a3      	b.n	8007b2c <_dtoa_r+0x6e4>
 8007de4:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8007de6:	0037      	movs	r7, r6
 8007de8:	e7f3      	b.n	8007dd2 <_dtoa_r+0x98a>
 8007dea:	9b04      	ldr	r3, [sp, #16]
 8007dec:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8007dee:	930c      	str	r3, [sp, #48]	@ 0x30
 8007df0:	e7f9      	b.n	8007de6 <_dtoa_r+0x99e>
 8007df2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d100      	bne.n	8007dfa <_dtoa_r+0x9b2>
 8007df8:	e100      	b.n	8007ffc <_dtoa_r+0xbb4>
 8007dfa:	2c00      	cmp	r4, #0
 8007dfc:	dd05      	ble.n	8007e0a <_dtoa_r+0x9c2>
 8007dfe:	0039      	movs	r1, r7
 8007e00:	0022      	movs	r2, r4
 8007e02:	9803      	ldr	r0, [sp, #12]
 8007e04:	f000 fb80 	bl	8008508 <__lshift>
 8007e08:	0007      	movs	r7, r0
 8007e0a:	0038      	movs	r0, r7
 8007e0c:	2d00      	cmp	r5, #0
 8007e0e:	d018      	beq.n	8007e42 <_dtoa_r+0x9fa>
 8007e10:	6879      	ldr	r1, [r7, #4]
 8007e12:	9803      	ldr	r0, [sp, #12]
 8007e14:	f000 f956 	bl	80080c4 <_Balloc>
 8007e18:	1e04      	subs	r4, r0, #0
 8007e1a:	d105      	bne.n	8007e28 <_dtoa_r+0x9e0>
 8007e1c:	0022      	movs	r2, r4
 8007e1e:	4b2b      	ldr	r3, [pc, #172]	@ (8007ecc <_dtoa_r+0xa84>)
 8007e20:	482b      	ldr	r0, [pc, #172]	@ (8007ed0 <_dtoa_r+0xa88>)
 8007e22:	492c      	ldr	r1, [pc, #176]	@ (8007ed4 <_dtoa_r+0xa8c>)
 8007e24:	f7ff fb25 	bl	8007472 <_dtoa_r+0x2a>
 8007e28:	0039      	movs	r1, r7
 8007e2a:	693a      	ldr	r2, [r7, #16]
 8007e2c:	310c      	adds	r1, #12
 8007e2e:	3202      	adds	r2, #2
 8007e30:	0092      	lsls	r2, r2, #2
 8007e32:	300c      	adds	r0, #12
 8007e34:	f7ff fa70 	bl	8007318 <memcpy>
 8007e38:	2201      	movs	r2, #1
 8007e3a:	0021      	movs	r1, r4
 8007e3c:	9803      	ldr	r0, [sp, #12]
 8007e3e:	f000 fb63 	bl	8008508 <__lshift>
 8007e42:	9b08      	ldr	r3, [sp, #32]
 8007e44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e46:	9306      	str	r3, [sp, #24]
 8007e48:	3b01      	subs	r3, #1
 8007e4a:	189b      	adds	r3, r3, r2
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	9704      	str	r7, [sp, #16]
 8007e50:	0007      	movs	r7, r0
 8007e52:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007e54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e56:	4013      	ands	r3, r2
 8007e58:	930e      	str	r3, [sp, #56]	@ 0x38
 8007e5a:	0031      	movs	r1, r6
 8007e5c:	9805      	ldr	r0, [sp, #20]
 8007e5e:	f7ff fa64 	bl	800732a <quorem>
 8007e62:	9904      	ldr	r1, [sp, #16]
 8007e64:	0005      	movs	r5, r0
 8007e66:	900a      	str	r0, [sp, #40]	@ 0x28
 8007e68:	9805      	ldr	r0, [sp, #20]
 8007e6a:	f000 fbb9 	bl	80085e0 <__mcmp>
 8007e6e:	003a      	movs	r2, r7
 8007e70:	900d      	str	r0, [sp, #52]	@ 0x34
 8007e72:	0031      	movs	r1, r6
 8007e74:	9803      	ldr	r0, [sp, #12]
 8007e76:	f000 fbcf 	bl	8008618 <__mdiff>
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	68c3      	ldr	r3, [r0, #12]
 8007e7e:	0004      	movs	r4, r0
 8007e80:	3530      	adds	r5, #48	@ 0x30
 8007e82:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d104      	bne.n	8007e92 <_dtoa_r+0xa4a>
 8007e88:	0001      	movs	r1, r0
 8007e8a:	9805      	ldr	r0, [sp, #20]
 8007e8c:	f000 fba8 	bl	80085e0 <__mcmp>
 8007e90:	9009      	str	r0, [sp, #36]	@ 0x24
 8007e92:	0021      	movs	r1, r4
 8007e94:	9803      	ldr	r0, [sp, #12]
 8007e96:	f000 f959 	bl	800814c <_Bfree>
 8007e9a:	9b06      	ldr	r3, [sp, #24]
 8007e9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e9e:	1c5c      	adds	r4, r3, #1
 8007ea0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	d116      	bne.n	8007ed8 <_dtoa_r+0xa90>
 8007eaa:	2d39      	cmp	r5, #57	@ 0x39
 8007eac:	d02f      	beq.n	8007f0e <_dtoa_r+0xac6>
 8007eae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	dd01      	ble.n	8007eb8 <_dtoa_r+0xa70>
 8007eb4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8007eb6:	3531      	adds	r5, #49	@ 0x31
 8007eb8:	9b06      	ldr	r3, [sp, #24]
 8007eba:	701d      	strb	r5, [r3, #0]
 8007ebc:	e638      	b.n	8007b30 <_dtoa_r+0x6e8>
 8007ebe:	46c0      	nop			@ (mov r8, r8)
 8007ec0:	40240000 	.word	0x40240000
 8007ec4:	00000433 	.word	0x00000433
 8007ec8:	7ff00000 	.word	0x7ff00000
 8007ecc:	08009188 	.word	0x08009188
 8007ed0:	08009130 	.word	0x08009130
 8007ed4:	000002ef 	.word	0x000002ef
 8007ed8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	db04      	blt.n	8007ee8 <_dtoa_r+0xaa0>
 8007ede:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	d11e      	bne.n	8007f26 <_dtoa_r+0xade>
 8007ee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	dde4      	ble.n	8007eb8 <_dtoa_r+0xa70>
 8007eee:	9905      	ldr	r1, [sp, #20]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	9803      	ldr	r0, [sp, #12]
 8007ef4:	f000 fb08 	bl	8008508 <__lshift>
 8007ef8:	0031      	movs	r1, r6
 8007efa:	9005      	str	r0, [sp, #20]
 8007efc:	f000 fb70 	bl	80085e0 <__mcmp>
 8007f00:	2800      	cmp	r0, #0
 8007f02:	dc02      	bgt.n	8007f0a <_dtoa_r+0xac2>
 8007f04:	d1d8      	bne.n	8007eb8 <_dtoa_r+0xa70>
 8007f06:	07eb      	lsls	r3, r5, #31
 8007f08:	d5d6      	bpl.n	8007eb8 <_dtoa_r+0xa70>
 8007f0a:	2d39      	cmp	r5, #57	@ 0x39
 8007f0c:	d1d2      	bne.n	8007eb4 <_dtoa_r+0xa6c>
 8007f0e:	2339      	movs	r3, #57	@ 0x39
 8007f10:	9a06      	ldr	r2, [sp, #24]
 8007f12:	7013      	strb	r3, [r2, #0]
 8007f14:	0023      	movs	r3, r4
 8007f16:	001c      	movs	r4, r3
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	781a      	ldrb	r2, [r3, #0]
 8007f1c:	2a39      	cmp	r2, #57	@ 0x39
 8007f1e:	d04f      	beq.n	8007fc0 <_dtoa_r+0xb78>
 8007f20:	3201      	adds	r2, #1
 8007f22:	701a      	strb	r2, [r3, #0]
 8007f24:	e604      	b.n	8007b30 <_dtoa_r+0x6e8>
 8007f26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	dd03      	ble.n	8007f34 <_dtoa_r+0xaec>
 8007f2c:	2d39      	cmp	r5, #57	@ 0x39
 8007f2e:	d0ee      	beq.n	8007f0e <_dtoa_r+0xac6>
 8007f30:	3501      	adds	r5, #1
 8007f32:	e7c1      	b.n	8007eb8 <_dtoa_r+0xa70>
 8007f34:	9b06      	ldr	r3, [sp, #24]
 8007f36:	9a06      	ldr	r2, [sp, #24]
 8007f38:	701d      	strb	r5, [r3, #0]
 8007f3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d02a      	beq.n	8007f96 <_dtoa_r+0xb4e>
 8007f40:	2300      	movs	r3, #0
 8007f42:	220a      	movs	r2, #10
 8007f44:	9905      	ldr	r1, [sp, #20]
 8007f46:	9803      	ldr	r0, [sp, #12]
 8007f48:	f000 f924 	bl	8008194 <__multadd>
 8007f4c:	9b04      	ldr	r3, [sp, #16]
 8007f4e:	9005      	str	r0, [sp, #20]
 8007f50:	42bb      	cmp	r3, r7
 8007f52:	d109      	bne.n	8007f68 <_dtoa_r+0xb20>
 8007f54:	2300      	movs	r3, #0
 8007f56:	220a      	movs	r2, #10
 8007f58:	9904      	ldr	r1, [sp, #16]
 8007f5a:	9803      	ldr	r0, [sp, #12]
 8007f5c:	f000 f91a 	bl	8008194 <__multadd>
 8007f60:	9004      	str	r0, [sp, #16]
 8007f62:	0007      	movs	r7, r0
 8007f64:	9406      	str	r4, [sp, #24]
 8007f66:	e778      	b.n	8007e5a <_dtoa_r+0xa12>
 8007f68:	9904      	ldr	r1, [sp, #16]
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	220a      	movs	r2, #10
 8007f6e:	9803      	ldr	r0, [sp, #12]
 8007f70:	f000 f910 	bl	8008194 <__multadd>
 8007f74:	2300      	movs	r3, #0
 8007f76:	9004      	str	r0, [sp, #16]
 8007f78:	220a      	movs	r2, #10
 8007f7a:	0039      	movs	r1, r7
 8007f7c:	9803      	ldr	r0, [sp, #12]
 8007f7e:	f000 f909 	bl	8008194 <__multadd>
 8007f82:	e7ee      	b.n	8007f62 <_dtoa_r+0xb1a>
 8007f84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f86:	2401      	movs	r4, #1
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	dd00      	ble.n	8007f8e <_dtoa_r+0xb46>
 8007f8c:	001c      	movs	r4, r3
 8007f8e:	9b08      	ldr	r3, [sp, #32]
 8007f90:	191c      	adds	r4, r3, r4
 8007f92:	2300      	movs	r3, #0
 8007f94:	9304      	str	r3, [sp, #16]
 8007f96:	9905      	ldr	r1, [sp, #20]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	9803      	ldr	r0, [sp, #12]
 8007f9c:	f000 fab4 	bl	8008508 <__lshift>
 8007fa0:	0031      	movs	r1, r6
 8007fa2:	9005      	str	r0, [sp, #20]
 8007fa4:	f000 fb1c 	bl	80085e0 <__mcmp>
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	dcb3      	bgt.n	8007f14 <_dtoa_r+0xacc>
 8007fac:	d101      	bne.n	8007fb2 <_dtoa_r+0xb6a>
 8007fae:	07ed      	lsls	r5, r5, #31
 8007fb0:	d4b0      	bmi.n	8007f14 <_dtoa_r+0xacc>
 8007fb2:	0023      	movs	r3, r4
 8007fb4:	001c      	movs	r4, r3
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	781a      	ldrb	r2, [r3, #0]
 8007fba:	2a30      	cmp	r2, #48	@ 0x30
 8007fbc:	d0fa      	beq.n	8007fb4 <_dtoa_r+0xb6c>
 8007fbe:	e5b7      	b.n	8007b30 <_dtoa_r+0x6e8>
 8007fc0:	9a08      	ldr	r2, [sp, #32]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d1a7      	bne.n	8007f16 <_dtoa_r+0xace>
 8007fc6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007fc8:	3301      	adds	r3, #1
 8007fca:	930c      	str	r3, [sp, #48]	@ 0x30
 8007fcc:	2331      	movs	r3, #49	@ 0x31
 8007fce:	7013      	strb	r3, [r2, #0]
 8007fd0:	e5ae      	b.n	8007b30 <_dtoa_r+0x6e8>
 8007fd2:	4b15      	ldr	r3, [pc, #84]	@ (8008028 <_dtoa_r+0xbe0>)
 8007fd4:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007fd6:	9308      	str	r3, [sp, #32]
 8007fd8:	4b14      	ldr	r3, [pc, #80]	@ (800802c <_dtoa_r+0xbe4>)
 8007fda:	2a00      	cmp	r2, #0
 8007fdc:	d001      	beq.n	8007fe2 <_dtoa_r+0xb9a>
 8007fde:	f7ff fa7b 	bl	80074d8 <_dtoa_r+0x90>
 8007fe2:	f7ff fa7b 	bl	80074dc <_dtoa_r+0x94>
 8007fe6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	dc00      	bgt.n	8007fee <_dtoa_r+0xba6>
 8007fec:	e648      	b.n	8007c80 <_dtoa_r+0x838>
 8007fee:	2001      	movs	r0, #1
 8007ff0:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8007ff2:	e665      	b.n	8007cc0 <_dtoa_r+0x878>
 8007ff4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	dc00      	bgt.n	8007ffc <_dtoa_r+0xbb4>
 8007ffa:	e6d6      	b.n	8007daa <_dtoa_r+0x962>
 8007ffc:	2400      	movs	r4, #0
 8007ffe:	0031      	movs	r1, r6
 8008000:	9805      	ldr	r0, [sp, #20]
 8008002:	f7ff f992 	bl	800732a <quorem>
 8008006:	9b08      	ldr	r3, [sp, #32]
 8008008:	3030      	adds	r0, #48	@ 0x30
 800800a:	5518      	strb	r0, [r3, r4]
 800800c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800800e:	3401      	adds	r4, #1
 8008010:	0005      	movs	r5, r0
 8008012:	429c      	cmp	r4, r3
 8008014:	dab6      	bge.n	8007f84 <_dtoa_r+0xb3c>
 8008016:	2300      	movs	r3, #0
 8008018:	220a      	movs	r2, #10
 800801a:	9905      	ldr	r1, [sp, #20]
 800801c:	9803      	ldr	r0, [sp, #12]
 800801e:	f000 f8b9 	bl	8008194 <__multadd>
 8008022:	9005      	str	r0, [sp, #20]
 8008024:	e7eb      	b.n	8007ffe <_dtoa_r+0xbb6>
 8008026:	46c0      	nop			@ (mov r8, r8)
 8008028:	0800910c 	.word	0x0800910c
 800802c:	08009114 	.word	0x08009114

08008030 <_free_r>:
 8008030:	b570      	push	{r4, r5, r6, lr}
 8008032:	0005      	movs	r5, r0
 8008034:	1e0c      	subs	r4, r1, #0
 8008036:	d010      	beq.n	800805a <_free_r+0x2a>
 8008038:	3c04      	subs	r4, #4
 800803a:	6823      	ldr	r3, [r4, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	da00      	bge.n	8008042 <_free_r+0x12>
 8008040:	18e4      	adds	r4, r4, r3
 8008042:	0028      	movs	r0, r5
 8008044:	f7fe fb42 	bl	80066cc <__malloc_lock>
 8008048:	4a1d      	ldr	r2, [pc, #116]	@ (80080c0 <_free_r+0x90>)
 800804a:	6813      	ldr	r3, [r2, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d105      	bne.n	800805c <_free_r+0x2c>
 8008050:	6063      	str	r3, [r4, #4]
 8008052:	6014      	str	r4, [r2, #0]
 8008054:	0028      	movs	r0, r5
 8008056:	f7fe fb41 	bl	80066dc <__malloc_unlock>
 800805a:	bd70      	pop	{r4, r5, r6, pc}
 800805c:	42a3      	cmp	r3, r4
 800805e:	d908      	bls.n	8008072 <_free_r+0x42>
 8008060:	6820      	ldr	r0, [r4, #0]
 8008062:	1821      	adds	r1, r4, r0
 8008064:	428b      	cmp	r3, r1
 8008066:	d1f3      	bne.n	8008050 <_free_r+0x20>
 8008068:	6819      	ldr	r1, [r3, #0]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	1809      	adds	r1, r1, r0
 800806e:	6021      	str	r1, [r4, #0]
 8008070:	e7ee      	b.n	8008050 <_free_r+0x20>
 8008072:	001a      	movs	r2, r3
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d001      	beq.n	800807e <_free_r+0x4e>
 800807a:	42a3      	cmp	r3, r4
 800807c:	d9f9      	bls.n	8008072 <_free_r+0x42>
 800807e:	6811      	ldr	r1, [r2, #0]
 8008080:	1850      	adds	r0, r2, r1
 8008082:	42a0      	cmp	r0, r4
 8008084:	d10b      	bne.n	800809e <_free_r+0x6e>
 8008086:	6820      	ldr	r0, [r4, #0]
 8008088:	1809      	adds	r1, r1, r0
 800808a:	1850      	adds	r0, r2, r1
 800808c:	6011      	str	r1, [r2, #0]
 800808e:	4283      	cmp	r3, r0
 8008090:	d1e0      	bne.n	8008054 <_free_r+0x24>
 8008092:	6818      	ldr	r0, [r3, #0]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	1841      	adds	r1, r0, r1
 8008098:	6011      	str	r1, [r2, #0]
 800809a:	6053      	str	r3, [r2, #4]
 800809c:	e7da      	b.n	8008054 <_free_r+0x24>
 800809e:	42a0      	cmp	r0, r4
 80080a0:	d902      	bls.n	80080a8 <_free_r+0x78>
 80080a2:	230c      	movs	r3, #12
 80080a4:	602b      	str	r3, [r5, #0]
 80080a6:	e7d5      	b.n	8008054 <_free_r+0x24>
 80080a8:	6820      	ldr	r0, [r4, #0]
 80080aa:	1821      	adds	r1, r4, r0
 80080ac:	428b      	cmp	r3, r1
 80080ae:	d103      	bne.n	80080b8 <_free_r+0x88>
 80080b0:	6819      	ldr	r1, [r3, #0]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	1809      	adds	r1, r1, r0
 80080b6:	6021      	str	r1, [r4, #0]
 80080b8:	6063      	str	r3, [r4, #4]
 80080ba:	6054      	str	r4, [r2, #4]
 80080bc:	e7ca      	b.n	8008054 <_free_r+0x24>
 80080be:	46c0      	nop			@ (mov r8, r8)
 80080c0:	2000136c 	.word	0x2000136c

080080c4 <_Balloc>:
 80080c4:	b570      	push	{r4, r5, r6, lr}
 80080c6:	69c5      	ldr	r5, [r0, #28]
 80080c8:	0006      	movs	r6, r0
 80080ca:	000c      	movs	r4, r1
 80080cc:	2d00      	cmp	r5, #0
 80080ce:	d10e      	bne.n	80080ee <_Balloc+0x2a>
 80080d0:	2010      	movs	r0, #16
 80080d2:	f7fe fa4f 	bl	8006574 <malloc>
 80080d6:	1e02      	subs	r2, r0, #0
 80080d8:	61f0      	str	r0, [r6, #28]
 80080da:	d104      	bne.n	80080e6 <_Balloc+0x22>
 80080dc:	216b      	movs	r1, #107	@ 0x6b
 80080de:	4b19      	ldr	r3, [pc, #100]	@ (8008144 <_Balloc+0x80>)
 80080e0:	4819      	ldr	r0, [pc, #100]	@ (8008148 <_Balloc+0x84>)
 80080e2:	f000 fc45 	bl	8008970 <__assert_func>
 80080e6:	6045      	str	r5, [r0, #4]
 80080e8:	6085      	str	r5, [r0, #8]
 80080ea:	6005      	str	r5, [r0, #0]
 80080ec:	60c5      	str	r5, [r0, #12]
 80080ee:	69f5      	ldr	r5, [r6, #28]
 80080f0:	68eb      	ldr	r3, [r5, #12]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d013      	beq.n	800811e <_Balloc+0x5a>
 80080f6:	69f3      	ldr	r3, [r6, #28]
 80080f8:	00a2      	lsls	r2, r4, #2
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	189b      	adds	r3, r3, r2
 80080fe:	6818      	ldr	r0, [r3, #0]
 8008100:	2800      	cmp	r0, #0
 8008102:	d118      	bne.n	8008136 <_Balloc+0x72>
 8008104:	2101      	movs	r1, #1
 8008106:	000d      	movs	r5, r1
 8008108:	40a5      	lsls	r5, r4
 800810a:	1d6a      	adds	r2, r5, #5
 800810c:	0030      	movs	r0, r6
 800810e:	0092      	lsls	r2, r2, #2
 8008110:	f000 fc4c 	bl	80089ac <_calloc_r>
 8008114:	2800      	cmp	r0, #0
 8008116:	d00c      	beq.n	8008132 <_Balloc+0x6e>
 8008118:	6044      	str	r4, [r0, #4]
 800811a:	6085      	str	r5, [r0, #8]
 800811c:	e00d      	b.n	800813a <_Balloc+0x76>
 800811e:	2221      	movs	r2, #33	@ 0x21
 8008120:	2104      	movs	r1, #4
 8008122:	0030      	movs	r0, r6
 8008124:	f000 fc42 	bl	80089ac <_calloc_r>
 8008128:	69f3      	ldr	r3, [r6, #28]
 800812a:	60e8      	str	r0, [r5, #12]
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d1e1      	bne.n	80080f6 <_Balloc+0x32>
 8008132:	2000      	movs	r0, #0
 8008134:	bd70      	pop	{r4, r5, r6, pc}
 8008136:	6802      	ldr	r2, [r0, #0]
 8008138:	601a      	str	r2, [r3, #0]
 800813a:	2300      	movs	r3, #0
 800813c:	6103      	str	r3, [r0, #16]
 800813e:	60c3      	str	r3, [r0, #12]
 8008140:	e7f8      	b.n	8008134 <_Balloc+0x70>
 8008142:	46c0      	nop			@ (mov r8, r8)
 8008144:	08009119 	.word	0x08009119
 8008148:	08009199 	.word	0x08009199

0800814c <_Bfree>:
 800814c:	b570      	push	{r4, r5, r6, lr}
 800814e:	69c6      	ldr	r6, [r0, #28]
 8008150:	0005      	movs	r5, r0
 8008152:	000c      	movs	r4, r1
 8008154:	2e00      	cmp	r6, #0
 8008156:	d10e      	bne.n	8008176 <_Bfree+0x2a>
 8008158:	2010      	movs	r0, #16
 800815a:	f7fe fa0b 	bl	8006574 <malloc>
 800815e:	1e02      	subs	r2, r0, #0
 8008160:	61e8      	str	r0, [r5, #28]
 8008162:	d104      	bne.n	800816e <_Bfree+0x22>
 8008164:	218f      	movs	r1, #143	@ 0x8f
 8008166:	4b09      	ldr	r3, [pc, #36]	@ (800818c <_Bfree+0x40>)
 8008168:	4809      	ldr	r0, [pc, #36]	@ (8008190 <_Bfree+0x44>)
 800816a:	f000 fc01 	bl	8008970 <__assert_func>
 800816e:	6046      	str	r6, [r0, #4]
 8008170:	6086      	str	r6, [r0, #8]
 8008172:	6006      	str	r6, [r0, #0]
 8008174:	60c6      	str	r6, [r0, #12]
 8008176:	2c00      	cmp	r4, #0
 8008178:	d007      	beq.n	800818a <_Bfree+0x3e>
 800817a:	69eb      	ldr	r3, [r5, #28]
 800817c:	6862      	ldr	r2, [r4, #4]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	0092      	lsls	r2, r2, #2
 8008182:	189b      	adds	r3, r3, r2
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	6022      	str	r2, [r4, #0]
 8008188:	601c      	str	r4, [r3, #0]
 800818a:	bd70      	pop	{r4, r5, r6, pc}
 800818c:	08009119 	.word	0x08009119
 8008190:	08009199 	.word	0x08009199

08008194 <__multadd>:
 8008194:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008196:	000f      	movs	r7, r1
 8008198:	9001      	str	r0, [sp, #4]
 800819a:	000c      	movs	r4, r1
 800819c:	001e      	movs	r6, r3
 800819e:	2000      	movs	r0, #0
 80081a0:	690d      	ldr	r5, [r1, #16]
 80081a2:	3714      	adds	r7, #20
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	3001      	adds	r0, #1
 80081a8:	b299      	uxth	r1, r3
 80081aa:	4351      	muls	r1, r2
 80081ac:	0c1b      	lsrs	r3, r3, #16
 80081ae:	4353      	muls	r3, r2
 80081b0:	1989      	adds	r1, r1, r6
 80081b2:	0c0e      	lsrs	r6, r1, #16
 80081b4:	199b      	adds	r3, r3, r6
 80081b6:	0c1e      	lsrs	r6, r3, #16
 80081b8:	b289      	uxth	r1, r1
 80081ba:	041b      	lsls	r3, r3, #16
 80081bc:	185b      	adds	r3, r3, r1
 80081be:	c708      	stmia	r7!, {r3}
 80081c0:	4285      	cmp	r5, r0
 80081c2:	dcef      	bgt.n	80081a4 <__multadd+0x10>
 80081c4:	2e00      	cmp	r6, #0
 80081c6:	d022      	beq.n	800820e <__multadd+0x7a>
 80081c8:	68a3      	ldr	r3, [r4, #8]
 80081ca:	42ab      	cmp	r3, r5
 80081cc:	dc19      	bgt.n	8008202 <__multadd+0x6e>
 80081ce:	6861      	ldr	r1, [r4, #4]
 80081d0:	9801      	ldr	r0, [sp, #4]
 80081d2:	3101      	adds	r1, #1
 80081d4:	f7ff ff76 	bl	80080c4 <_Balloc>
 80081d8:	1e07      	subs	r7, r0, #0
 80081da:	d105      	bne.n	80081e8 <__multadd+0x54>
 80081dc:	003a      	movs	r2, r7
 80081de:	21ba      	movs	r1, #186	@ 0xba
 80081e0:	4b0c      	ldr	r3, [pc, #48]	@ (8008214 <__multadd+0x80>)
 80081e2:	480d      	ldr	r0, [pc, #52]	@ (8008218 <__multadd+0x84>)
 80081e4:	f000 fbc4 	bl	8008970 <__assert_func>
 80081e8:	0021      	movs	r1, r4
 80081ea:	6922      	ldr	r2, [r4, #16]
 80081ec:	310c      	adds	r1, #12
 80081ee:	3202      	adds	r2, #2
 80081f0:	0092      	lsls	r2, r2, #2
 80081f2:	300c      	adds	r0, #12
 80081f4:	f7ff f890 	bl	8007318 <memcpy>
 80081f8:	0021      	movs	r1, r4
 80081fa:	9801      	ldr	r0, [sp, #4]
 80081fc:	f7ff ffa6 	bl	800814c <_Bfree>
 8008200:	003c      	movs	r4, r7
 8008202:	1d2b      	adds	r3, r5, #4
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	18e3      	adds	r3, r4, r3
 8008208:	3501      	adds	r5, #1
 800820a:	605e      	str	r6, [r3, #4]
 800820c:	6125      	str	r5, [r4, #16]
 800820e:	0020      	movs	r0, r4
 8008210:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008212:	46c0      	nop			@ (mov r8, r8)
 8008214:	08009188 	.word	0x08009188
 8008218:	08009199 	.word	0x08009199

0800821c <__hi0bits>:
 800821c:	2280      	movs	r2, #128	@ 0x80
 800821e:	0003      	movs	r3, r0
 8008220:	0252      	lsls	r2, r2, #9
 8008222:	2000      	movs	r0, #0
 8008224:	4293      	cmp	r3, r2
 8008226:	d201      	bcs.n	800822c <__hi0bits+0x10>
 8008228:	041b      	lsls	r3, r3, #16
 800822a:	3010      	adds	r0, #16
 800822c:	2280      	movs	r2, #128	@ 0x80
 800822e:	0452      	lsls	r2, r2, #17
 8008230:	4293      	cmp	r3, r2
 8008232:	d201      	bcs.n	8008238 <__hi0bits+0x1c>
 8008234:	3008      	adds	r0, #8
 8008236:	021b      	lsls	r3, r3, #8
 8008238:	2280      	movs	r2, #128	@ 0x80
 800823a:	0552      	lsls	r2, r2, #21
 800823c:	4293      	cmp	r3, r2
 800823e:	d201      	bcs.n	8008244 <__hi0bits+0x28>
 8008240:	3004      	adds	r0, #4
 8008242:	011b      	lsls	r3, r3, #4
 8008244:	2280      	movs	r2, #128	@ 0x80
 8008246:	05d2      	lsls	r2, r2, #23
 8008248:	4293      	cmp	r3, r2
 800824a:	d201      	bcs.n	8008250 <__hi0bits+0x34>
 800824c:	3002      	adds	r0, #2
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	2b00      	cmp	r3, #0
 8008252:	db03      	blt.n	800825c <__hi0bits+0x40>
 8008254:	3001      	adds	r0, #1
 8008256:	4213      	tst	r3, r2
 8008258:	d100      	bne.n	800825c <__hi0bits+0x40>
 800825a:	2020      	movs	r0, #32
 800825c:	4770      	bx	lr

0800825e <__lo0bits>:
 800825e:	6803      	ldr	r3, [r0, #0]
 8008260:	0001      	movs	r1, r0
 8008262:	2207      	movs	r2, #7
 8008264:	0018      	movs	r0, r3
 8008266:	4010      	ands	r0, r2
 8008268:	4213      	tst	r3, r2
 800826a:	d00d      	beq.n	8008288 <__lo0bits+0x2a>
 800826c:	3a06      	subs	r2, #6
 800826e:	2000      	movs	r0, #0
 8008270:	4213      	tst	r3, r2
 8008272:	d105      	bne.n	8008280 <__lo0bits+0x22>
 8008274:	3002      	adds	r0, #2
 8008276:	4203      	tst	r3, r0
 8008278:	d003      	beq.n	8008282 <__lo0bits+0x24>
 800827a:	40d3      	lsrs	r3, r2
 800827c:	0010      	movs	r0, r2
 800827e:	600b      	str	r3, [r1, #0]
 8008280:	4770      	bx	lr
 8008282:	089b      	lsrs	r3, r3, #2
 8008284:	600b      	str	r3, [r1, #0]
 8008286:	e7fb      	b.n	8008280 <__lo0bits+0x22>
 8008288:	b29a      	uxth	r2, r3
 800828a:	2a00      	cmp	r2, #0
 800828c:	d101      	bne.n	8008292 <__lo0bits+0x34>
 800828e:	2010      	movs	r0, #16
 8008290:	0c1b      	lsrs	r3, r3, #16
 8008292:	b2da      	uxtb	r2, r3
 8008294:	2a00      	cmp	r2, #0
 8008296:	d101      	bne.n	800829c <__lo0bits+0x3e>
 8008298:	3008      	adds	r0, #8
 800829a:	0a1b      	lsrs	r3, r3, #8
 800829c:	071a      	lsls	r2, r3, #28
 800829e:	d101      	bne.n	80082a4 <__lo0bits+0x46>
 80082a0:	3004      	adds	r0, #4
 80082a2:	091b      	lsrs	r3, r3, #4
 80082a4:	079a      	lsls	r2, r3, #30
 80082a6:	d101      	bne.n	80082ac <__lo0bits+0x4e>
 80082a8:	3002      	adds	r0, #2
 80082aa:	089b      	lsrs	r3, r3, #2
 80082ac:	07da      	lsls	r2, r3, #31
 80082ae:	d4e9      	bmi.n	8008284 <__lo0bits+0x26>
 80082b0:	3001      	adds	r0, #1
 80082b2:	085b      	lsrs	r3, r3, #1
 80082b4:	d1e6      	bne.n	8008284 <__lo0bits+0x26>
 80082b6:	2020      	movs	r0, #32
 80082b8:	e7e2      	b.n	8008280 <__lo0bits+0x22>
	...

080082bc <__i2b>:
 80082bc:	b510      	push	{r4, lr}
 80082be:	000c      	movs	r4, r1
 80082c0:	2101      	movs	r1, #1
 80082c2:	f7ff feff 	bl	80080c4 <_Balloc>
 80082c6:	2800      	cmp	r0, #0
 80082c8:	d107      	bne.n	80082da <__i2b+0x1e>
 80082ca:	2146      	movs	r1, #70	@ 0x46
 80082cc:	4c05      	ldr	r4, [pc, #20]	@ (80082e4 <__i2b+0x28>)
 80082ce:	0002      	movs	r2, r0
 80082d0:	4b05      	ldr	r3, [pc, #20]	@ (80082e8 <__i2b+0x2c>)
 80082d2:	0020      	movs	r0, r4
 80082d4:	31ff      	adds	r1, #255	@ 0xff
 80082d6:	f000 fb4b 	bl	8008970 <__assert_func>
 80082da:	2301      	movs	r3, #1
 80082dc:	6144      	str	r4, [r0, #20]
 80082de:	6103      	str	r3, [r0, #16]
 80082e0:	bd10      	pop	{r4, pc}
 80082e2:	46c0      	nop			@ (mov r8, r8)
 80082e4:	08009199 	.word	0x08009199
 80082e8:	08009188 	.word	0x08009188

080082ec <__multiply>:
 80082ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082ee:	0014      	movs	r4, r2
 80082f0:	690a      	ldr	r2, [r1, #16]
 80082f2:	6923      	ldr	r3, [r4, #16]
 80082f4:	000d      	movs	r5, r1
 80082f6:	b08b      	sub	sp, #44	@ 0x2c
 80082f8:	429a      	cmp	r2, r3
 80082fa:	db02      	blt.n	8008302 <__multiply+0x16>
 80082fc:	0023      	movs	r3, r4
 80082fe:	000c      	movs	r4, r1
 8008300:	001d      	movs	r5, r3
 8008302:	6927      	ldr	r7, [r4, #16]
 8008304:	692e      	ldr	r6, [r5, #16]
 8008306:	6861      	ldr	r1, [r4, #4]
 8008308:	19bb      	adds	r3, r7, r6
 800830a:	9303      	str	r3, [sp, #12]
 800830c:	68a3      	ldr	r3, [r4, #8]
 800830e:	19ba      	adds	r2, r7, r6
 8008310:	4293      	cmp	r3, r2
 8008312:	da00      	bge.n	8008316 <__multiply+0x2a>
 8008314:	3101      	adds	r1, #1
 8008316:	f7ff fed5 	bl	80080c4 <_Balloc>
 800831a:	9002      	str	r0, [sp, #8]
 800831c:	2800      	cmp	r0, #0
 800831e:	d106      	bne.n	800832e <__multiply+0x42>
 8008320:	21b1      	movs	r1, #177	@ 0xb1
 8008322:	4b49      	ldr	r3, [pc, #292]	@ (8008448 <__multiply+0x15c>)
 8008324:	4849      	ldr	r0, [pc, #292]	@ (800844c <__multiply+0x160>)
 8008326:	9a02      	ldr	r2, [sp, #8]
 8008328:	0049      	lsls	r1, r1, #1
 800832a:	f000 fb21 	bl	8008970 <__assert_func>
 800832e:	9b02      	ldr	r3, [sp, #8]
 8008330:	2200      	movs	r2, #0
 8008332:	3314      	adds	r3, #20
 8008334:	469c      	mov	ip, r3
 8008336:	19bb      	adds	r3, r7, r6
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	4463      	add	r3, ip
 800833c:	9304      	str	r3, [sp, #16]
 800833e:	4663      	mov	r3, ip
 8008340:	9904      	ldr	r1, [sp, #16]
 8008342:	428b      	cmp	r3, r1
 8008344:	d32a      	bcc.n	800839c <__multiply+0xb0>
 8008346:	0023      	movs	r3, r4
 8008348:	00bf      	lsls	r7, r7, #2
 800834a:	3314      	adds	r3, #20
 800834c:	3514      	adds	r5, #20
 800834e:	9308      	str	r3, [sp, #32]
 8008350:	00b6      	lsls	r6, r6, #2
 8008352:	19db      	adds	r3, r3, r7
 8008354:	9305      	str	r3, [sp, #20]
 8008356:	19ab      	adds	r3, r5, r6
 8008358:	9309      	str	r3, [sp, #36]	@ 0x24
 800835a:	2304      	movs	r3, #4
 800835c:	9306      	str	r3, [sp, #24]
 800835e:	0023      	movs	r3, r4
 8008360:	9a05      	ldr	r2, [sp, #20]
 8008362:	3315      	adds	r3, #21
 8008364:	9501      	str	r5, [sp, #4]
 8008366:	429a      	cmp	r2, r3
 8008368:	d305      	bcc.n	8008376 <__multiply+0x8a>
 800836a:	1b13      	subs	r3, r2, r4
 800836c:	3b15      	subs	r3, #21
 800836e:	089b      	lsrs	r3, r3, #2
 8008370:	3301      	adds	r3, #1
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	9306      	str	r3, [sp, #24]
 8008376:	9b01      	ldr	r3, [sp, #4]
 8008378:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800837a:	4293      	cmp	r3, r2
 800837c:	d310      	bcc.n	80083a0 <__multiply+0xb4>
 800837e:	9b03      	ldr	r3, [sp, #12]
 8008380:	2b00      	cmp	r3, #0
 8008382:	dd05      	ble.n	8008390 <__multiply+0xa4>
 8008384:	9b04      	ldr	r3, [sp, #16]
 8008386:	3b04      	subs	r3, #4
 8008388:	9304      	str	r3, [sp, #16]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d056      	beq.n	800843e <__multiply+0x152>
 8008390:	9b02      	ldr	r3, [sp, #8]
 8008392:	9a03      	ldr	r2, [sp, #12]
 8008394:	0018      	movs	r0, r3
 8008396:	611a      	str	r2, [r3, #16]
 8008398:	b00b      	add	sp, #44	@ 0x2c
 800839a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800839c:	c304      	stmia	r3!, {r2}
 800839e:	e7cf      	b.n	8008340 <__multiply+0x54>
 80083a0:	9b01      	ldr	r3, [sp, #4]
 80083a2:	6818      	ldr	r0, [r3, #0]
 80083a4:	b280      	uxth	r0, r0
 80083a6:	2800      	cmp	r0, #0
 80083a8:	d01e      	beq.n	80083e8 <__multiply+0xfc>
 80083aa:	4667      	mov	r7, ip
 80083ac:	2500      	movs	r5, #0
 80083ae:	9e08      	ldr	r6, [sp, #32]
 80083b0:	ce02      	ldmia	r6!, {r1}
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	9307      	str	r3, [sp, #28]
 80083b6:	b28b      	uxth	r3, r1
 80083b8:	4343      	muls	r3, r0
 80083ba:	001a      	movs	r2, r3
 80083bc:	466b      	mov	r3, sp
 80083be:	0c09      	lsrs	r1, r1, #16
 80083c0:	8b9b      	ldrh	r3, [r3, #28]
 80083c2:	4341      	muls	r1, r0
 80083c4:	18d3      	adds	r3, r2, r3
 80083c6:	9a07      	ldr	r2, [sp, #28]
 80083c8:	195b      	adds	r3, r3, r5
 80083ca:	0c12      	lsrs	r2, r2, #16
 80083cc:	1889      	adds	r1, r1, r2
 80083ce:	0c1a      	lsrs	r2, r3, #16
 80083d0:	188a      	adds	r2, r1, r2
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	0c15      	lsrs	r5, r2, #16
 80083d6:	0412      	lsls	r2, r2, #16
 80083d8:	431a      	orrs	r2, r3
 80083da:	9b05      	ldr	r3, [sp, #20]
 80083dc:	c704      	stmia	r7!, {r2}
 80083de:	42b3      	cmp	r3, r6
 80083e0:	d8e6      	bhi.n	80083b0 <__multiply+0xc4>
 80083e2:	4663      	mov	r3, ip
 80083e4:	9a06      	ldr	r2, [sp, #24]
 80083e6:	509d      	str	r5, [r3, r2]
 80083e8:	9b01      	ldr	r3, [sp, #4]
 80083ea:	6818      	ldr	r0, [r3, #0]
 80083ec:	0c00      	lsrs	r0, r0, #16
 80083ee:	d020      	beq.n	8008432 <__multiply+0x146>
 80083f0:	4663      	mov	r3, ip
 80083f2:	0025      	movs	r5, r4
 80083f4:	4661      	mov	r1, ip
 80083f6:	2700      	movs	r7, #0
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	3514      	adds	r5, #20
 80083fc:	682a      	ldr	r2, [r5, #0]
 80083fe:	680e      	ldr	r6, [r1, #0]
 8008400:	b292      	uxth	r2, r2
 8008402:	4342      	muls	r2, r0
 8008404:	0c36      	lsrs	r6, r6, #16
 8008406:	1992      	adds	r2, r2, r6
 8008408:	19d2      	adds	r2, r2, r7
 800840a:	0416      	lsls	r6, r2, #16
 800840c:	b29b      	uxth	r3, r3
 800840e:	431e      	orrs	r6, r3
 8008410:	600e      	str	r6, [r1, #0]
 8008412:	cd40      	ldmia	r5!, {r6}
 8008414:	684b      	ldr	r3, [r1, #4]
 8008416:	0c36      	lsrs	r6, r6, #16
 8008418:	4346      	muls	r6, r0
 800841a:	b29b      	uxth	r3, r3
 800841c:	0c12      	lsrs	r2, r2, #16
 800841e:	18f3      	adds	r3, r6, r3
 8008420:	189b      	adds	r3, r3, r2
 8008422:	9a05      	ldr	r2, [sp, #20]
 8008424:	0c1f      	lsrs	r7, r3, #16
 8008426:	3104      	adds	r1, #4
 8008428:	42aa      	cmp	r2, r5
 800842a:	d8e7      	bhi.n	80083fc <__multiply+0x110>
 800842c:	4662      	mov	r2, ip
 800842e:	9906      	ldr	r1, [sp, #24]
 8008430:	5053      	str	r3, [r2, r1]
 8008432:	9b01      	ldr	r3, [sp, #4]
 8008434:	3304      	adds	r3, #4
 8008436:	9301      	str	r3, [sp, #4]
 8008438:	2304      	movs	r3, #4
 800843a:	449c      	add	ip, r3
 800843c:	e79b      	b.n	8008376 <__multiply+0x8a>
 800843e:	9b03      	ldr	r3, [sp, #12]
 8008440:	3b01      	subs	r3, #1
 8008442:	9303      	str	r3, [sp, #12]
 8008444:	e79b      	b.n	800837e <__multiply+0x92>
 8008446:	46c0      	nop			@ (mov r8, r8)
 8008448:	08009188 	.word	0x08009188
 800844c:	08009199 	.word	0x08009199

08008450 <__pow5mult>:
 8008450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008452:	2303      	movs	r3, #3
 8008454:	0015      	movs	r5, r2
 8008456:	0007      	movs	r7, r0
 8008458:	000e      	movs	r6, r1
 800845a:	401a      	ands	r2, r3
 800845c:	421d      	tst	r5, r3
 800845e:	d008      	beq.n	8008472 <__pow5mult+0x22>
 8008460:	4925      	ldr	r1, [pc, #148]	@ (80084f8 <__pow5mult+0xa8>)
 8008462:	3a01      	subs	r2, #1
 8008464:	0092      	lsls	r2, r2, #2
 8008466:	5852      	ldr	r2, [r2, r1]
 8008468:	2300      	movs	r3, #0
 800846a:	0031      	movs	r1, r6
 800846c:	f7ff fe92 	bl	8008194 <__multadd>
 8008470:	0006      	movs	r6, r0
 8008472:	10ad      	asrs	r5, r5, #2
 8008474:	d03d      	beq.n	80084f2 <__pow5mult+0xa2>
 8008476:	69fc      	ldr	r4, [r7, #28]
 8008478:	2c00      	cmp	r4, #0
 800847a:	d10f      	bne.n	800849c <__pow5mult+0x4c>
 800847c:	2010      	movs	r0, #16
 800847e:	f7fe f879 	bl	8006574 <malloc>
 8008482:	1e02      	subs	r2, r0, #0
 8008484:	61f8      	str	r0, [r7, #28]
 8008486:	d105      	bne.n	8008494 <__pow5mult+0x44>
 8008488:	21b4      	movs	r1, #180	@ 0xb4
 800848a:	4b1c      	ldr	r3, [pc, #112]	@ (80084fc <__pow5mult+0xac>)
 800848c:	481c      	ldr	r0, [pc, #112]	@ (8008500 <__pow5mult+0xb0>)
 800848e:	31ff      	adds	r1, #255	@ 0xff
 8008490:	f000 fa6e 	bl	8008970 <__assert_func>
 8008494:	6044      	str	r4, [r0, #4]
 8008496:	6084      	str	r4, [r0, #8]
 8008498:	6004      	str	r4, [r0, #0]
 800849a:	60c4      	str	r4, [r0, #12]
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	689c      	ldr	r4, [r3, #8]
 80084a0:	9301      	str	r3, [sp, #4]
 80084a2:	2c00      	cmp	r4, #0
 80084a4:	d108      	bne.n	80084b8 <__pow5mult+0x68>
 80084a6:	0038      	movs	r0, r7
 80084a8:	4916      	ldr	r1, [pc, #88]	@ (8008504 <__pow5mult+0xb4>)
 80084aa:	f7ff ff07 	bl	80082bc <__i2b>
 80084ae:	9b01      	ldr	r3, [sp, #4]
 80084b0:	0004      	movs	r4, r0
 80084b2:	6098      	str	r0, [r3, #8]
 80084b4:	2300      	movs	r3, #0
 80084b6:	6003      	str	r3, [r0, #0]
 80084b8:	2301      	movs	r3, #1
 80084ba:	421d      	tst	r5, r3
 80084bc:	d00a      	beq.n	80084d4 <__pow5mult+0x84>
 80084be:	0031      	movs	r1, r6
 80084c0:	0022      	movs	r2, r4
 80084c2:	0038      	movs	r0, r7
 80084c4:	f7ff ff12 	bl	80082ec <__multiply>
 80084c8:	0031      	movs	r1, r6
 80084ca:	9001      	str	r0, [sp, #4]
 80084cc:	0038      	movs	r0, r7
 80084ce:	f7ff fe3d 	bl	800814c <_Bfree>
 80084d2:	9e01      	ldr	r6, [sp, #4]
 80084d4:	106d      	asrs	r5, r5, #1
 80084d6:	d00c      	beq.n	80084f2 <__pow5mult+0xa2>
 80084d8:	6820      	ldr	r0, [r4, #0]
 80084da:	2800      	cmp	r0, #0
 80084dc:	d107      	bne.n	80084ee <__pow5mult+0x9e>
 80084de:	0022      	movs	r2, r4
 80084e0:	0021      	movs	r1, r4
 80084e2:	0038      	movs	r0, r7
 80084e4:	f7ff ff02 	bl	80082ec <__multiply>
 80084e8:	2300      	movs	r3, #0
 80084ea:	6020      	str	r0, [r4, #0]
 80084ec:	6003      	str	r3, [r0, #0]
 80084ee:	0004      	movs	r4, r0
 80084f0:	e7e2      	b.n	80084b8 <__pow5mult+0x68>
 80084f2:	0030      	movs	r0, r6
 80084f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80084f6:	46c0      	nop			@ (mov r8, r8)
 80084f8:	080091f4 	.word	0x080091f4
 80084fc:	08009119 	.word	0x08009119
 8008500:	08009199 	.word	0x08009199
 8008504:	00000271 	.word	0x00000271

08008508 <__lshift>:
 8008508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800850a:	000c      	movs	r4, r1
 800850c:	0016      	movs	r6, r2
 800850e:	6923      	ldr	r3, [r4, #16]
 8008510:	1157      	asrs	r7, r2, #5
 8008512:	b085      	sub	sp, #20
 8008514:	18fb      	adds	r3, r7, r3
 8008516:	9301      	str	r3, [sp, #4]
 8008518:	3301      	adds	r3, #1
 800851a:	9300      	str	r3, [sp, #0]
 800851c:	6849      	ldr	r1, [r1, #4]
 800851e:	68a3      	ldr	r3, [r4, #8]
 8008520:	9002      	str	r0, [sp, #8]
 8008522:	9a00      	ldr	r2, [sp, #0]
 8008524:	4293      	cmp	r3, r2
 8008526:	db10      	blt.n	800854a <__lshift+0x42>
 8008528:	9802      	ldr	r0, [sp, #8]
 800852a:	f7ff fdcb 	bl	80080c4 <_Balloc>
 800852e:	2300      	movs	r3, #0
 8008530:	0001      	movs	r1, r0
 8008532:	0005      	movs	r5, r0
 8008534:	001a      	movs	r2, r3
 8008536:	3114      	adds	r1, #20
 8008538:	4298      	cmp	r0, r3
 800853a:	d10c      	bne.n	8008556 <__lshift+0x4e>
 800853c:	21ef      	movs	r1, #239	@ 0xef
 800853e:	002a      	movs	r2, r5
 8008540:	4b25      	ldr	r3, [pc, #148]	@ (80085d8 <__lshift+0xd0>)
 8008542:	4826      	ldr	r0, [pc, #152]	@ (80085dc <__lshift+0xd4>)
 8008544:	0049      	lsls	r1, r1, #1
 8008546:	f000 fa13 	bl	8008970 <__assert_func>
 800854a:	3101      	adds	r1, #1
 800854c:	005b      	lsls	r3, r3, #1
 800854e:	e7e8      	b.n	8008522 <__lshift+0x1a>
 8008550:	0098      	lsls	r0, r3, #2
 8008552:	500a      	str	r2, [r1, r0]
 8008554:	3301      	adds	r3, #1
 8008556:	42bb      	cmp	r3, r7
 8008558:	dbfa      	blt.n	8008550 <__lshift+0x48>
 800855a:	43fb      	mvns	r3, r7
 800855c:	17db      	asrs	r3, r3, #31
 800855e:	401f      	ands	r7, r3
 8008560:	00bf      	lsls	r7, r7, #2
 8008562:	0023      	movs	r3, r4
 8008564:	201f      	movs	r0, #31
 8008566:	19c9      	adds	r1, r1, r7
 8008568:	0037      	movs	r7, r6
 800856a:	6922      	ldr	r2, [r4, #16]
 800856c:	3314      	adds	r3, #20
 800856e:	0092      	lsls	r2, r2, #2
 8008570:	189a      	adds	r2, r3, r2
 8008572:	4007      	ands	r7, r0
 8008574:	4206      	tst	r6, r0
 8008576:	d029      	beq.n	80085cc <__lshift+0xc4>
 8008578:	3001      	adds	r0, #1
 800857a:	1bc0      	subs	r0, r0, r7
 800857c:	9003      	str	r0, [sp, #12]
 800857e:	468c      	mov	ip, r1
 8008580:	2000      	movs	r0, #0
 8008582:	681e      	ldr	r6, [r3, #0]
 8008584:	40be      	lsls	r6, r7
 8008586:	4306      	orrs	r6, r0
 8008588:	4660      	mov	r0, ip
 800858a:	c040      	stmia	r0!, {r6}
 800858c:	4684      	mov	ip, r0
 800858e:	9e03      	ldr	r6, [sp, #12]
 8008590:	cb01      	ldmia	r3!, {r0}
 8008592:	40f0      	lsrs	r0, r6
 8008594:	429a      	cmp	r2, r3
 8008596:	d8f4      	bhi.n	8008582 <__lshift+0x7a>
 8008598:	0026      	movs	r6, r4
 800859a:	3615      	adds	r6, #21
 800859c:	2304      	movs	r3, #4
 800859e:	42b2      	cmp	r2, r6
 80085a0:	d304      	bcc.n	80085ac <__lshift+0xa4>
 80085a2:	1b13      	subs	r3, r2, r4
 80085a4:	3b15      	subs	r3, #21
 80085a6:	089b      	lsrs	r3, r3, #2
 80085a8:	3301      	adds	r3, #1
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	50c8      	str	r0, [r1, r3]
 80085ae:	2800      	cmp	r0, #0
 80085b0:	d002      	beq.n	80085b8 <__lshift+0xb0>
 80085b2:	9b01      	ldr	r3, [sp, #4]
 80085b4:	3302      	adds	r3, #2
 80085b6:	9300      	str	r3, [sp, #0]
 80085b8:	9b00      	ldr	r3, [sp, #0]
 80085ba:	9802      	ldr	r0, [sp, #8]
 80085bc:	3b01      	subs	r3, #1
 80085be:	0021      	movs	r1, r4
 80085c0:	612b      	str	r3, [r5, #16]
 80085c2:	f7ff fdc3 	bl	800814c <_Bfree>
 80085c6:	0028      	movs	r0, r5
 80085c8:	b005      	add	sp, #20
 80085ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085cc:	cb01      	ldmia	r3!, {r0}
 80085ce:	c101      	stmia	r1!, {r0}
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d8fb      	bhi.n	80085cc <__lshift+0xc4>
 80085d4:	e7f0      	b.n	80085b8 <__lshift+0xb0>
 80085d6:	46c0      	nop			@ (mov r8, r8)
 80085d8:	08009188 	.word	0x08009188
 80085dc:	08009199 	.word	0x08009199

080085e0 <__mcmp>:
 80085e0:	b530      	push	{r4, r5, lr}
 80085e2:	690b      	ldr	r3, [r1, #16]
 80085e4:	6904      	ldr	r4, [r0, #16]
 80085e6:	0002      	movs	r2, r0
 80085e8:	1ae0      	subs	r0, r4, r3
 80085ea:	429c      	cmp	r4, r3
 80085ec:	d10f      	bne.n	800860e <__mcmp+0x2e>
 80085ee:	3214      	adds	r2, #20
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	3114      	adds	r1, #20
 80085f4:	0014      	movs	r4, r2
 80085f6:	18c9      	adds	r1, r1, r3
 80085f8:	18d2      	adds	r2, r2, r3
 80085fa:	3a04      	subs	r2, #4
 80085fc:	3904      	subs	r1, #4
 80085fe:	6815      	ldr	r5, [r2, #0]
 8008600:	680b      	ldr	r3, [r1, #0]
 8008602:	429d      	cmp	r5, r3
 8008604:	d004      	beq.n	8008610 <__mcmp+0x30>
 8008606:	2001      	movs	r0, #1
 8008608:	429d      	cmp	r5, r3
 800860a:	d200      	bcs.n	800860e <__mcmp+0x2e>
 800860c:	3802      	subs	r0, #2
 800860e:	bd30      	pop	{r4, r5, pc}
 8008610:	4294      	cmp	r4, r2
 8008612:	d3f2      	bcc.n	80085fa <__mcmp+0x1a>
 8008614:	e7fb      	b.n	800860e <__mcmp+0x2e>
	...

08008618 <__mdiff>:
 8008618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800861a:	000c      	movs	r4, r1
 800861c:	b087      	sub	sp, #28
 800861e:	9000      	str	r0, [sp, #0]
 8008620:	0011      	movs	r1, r2
 8008622:	0020      	movs	r0, r4
 8008624:	0017      	movs	r7, r2
 8008626:	f7ff ffdb 	bl	80085e0 <__mcmp>
 800862a:	1e05      	subs	r5, r0, #0
 800862c:	d110      	bne.n	8008650 <__mdiff+0x38>
 800862e:	0001      	movs	r1, r0
 8008630:	9800      	ldr	r0, [sp, #0]
 8008632:	f7ff fd47 	bl	80080c4 <_Balloc>
 8008636:	1e02      	subs	r2, r0, #0
 8008638:	d104      	bne.n	8008644 <__mdiff+0x2c>
 800863a:	4b40      	ldr	r3, [pc, #256]	@ (800873c <__mdiff+0x124>)
 800863c:	4840      	ldr	r0, [pc, #256]	@ (8008740 <__mdiff+0x128>)
 800863e:	4941      	ldr	r1, [pc, #260]	@ (8008744 <__mdiff+0x12c>)
 8008640:	f000 f996 	bl	8008970 <__assert_func>
 8008644:	2301      	movs	r3, #1
 8008646:	6145      	str	r5, [r0, #20]
 8008648:	6103      	str	r3, [r0, #16]
 800864a:	0010      	movs	r0, r2
 800864c:	b007      	add	sp, #28
 800864e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008650:	2600      	movs	r6, #0
 8008652:	42b0      	cmp	r0, r6
 8008654:	da03      	bge.n	800865e <__mdiff+0x46>
 8008656:	0023      	movs	r3, r4
 8008658:	003c      	movs	r4, r7
 800865a:	001f      	movs	r7, r3
 800865c:	3601      	adds	r6, #1
 800865e:	6861      	ldr	r1, [r4, #4]
 8008660:	9800      	ldr	r0, [sp, #0]
 8008662:	f7ff fd2f 	bl	80080c4 <_Balloc>
 8008666:	1e02      	subs	r2, r0, #0
 8008668:	d103      	bne.n	8008672 <__mdiff+0x5a>
 800866a:	4b34      	ldr	r3, [pc, #208]	@ (800873c <__mdiff+0x124>)
 800866c:	4834      	ldr	r0, [pc, #208]	@ (8008740 <__mdiff+0x128>)
 800866e:	4936      	ldr	r1, [pc, #216]	@ (8008748 <__mdiff+0x130>)
 8008670:	e7e6      	b.n	8008640 <__mdiff+0x28>
 8008672:	6923      	ldr	r3, [r4, #16]
 8008674:	3414      	adds	r4, #20
 8008676:	9300      	str	r3, [sp, #0]
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	18e3      	adds	r3, r4, r3
 800867c:	0021      	movs	r1, r4
 800867e:	9401      	str	r4, [sp, #4]
 8008680:	003c      	movs	r4, r7
 8008682:	9302      	str	r3, [sp, #8]
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	3414      	adds	r4, #20
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	18e3      	adds	r3, r4, r3
 800868c:	9303      	str	r3, [sp, #12]
 800868e:	0003      	movs	r3, r0
 8008690:	60c6      	str	r6, [r0, #12]
 8008692:	468c      	mov	ip, r1
 8008694:	2000      	movs	r0, #0
 8008696:	3314      	adds	r3, #20
 8008698:	9304      	str	r3, [sp, #16]
 800869a:	9305      	str	r3, [sp, #20]
 800869c:	4663      	mov	r3, ip
 800869e:	cb20      	ldmia	r3!, {r5}
 80086a0:	b2a9      	uxth	r1, r5
 80086a2:	000e      	movs	r6, r1
 80086a4:	469c      	mov	ip, r3
 80086a6:	cc08      	ldmia	r4!, {r3}
 80086a8:	0c2d      	lsrs	r5, r5, #16
 80086aa:	b299      	uxth	r1, r3
 80086ac:	1a71      	subs	r1, r6, r1
 80086ae:	1809      	adds	r1, r1, r0
 80086b0:	0c1b      	lsrs	r3, r3, #16
 80086b2:	1408      	asrs	r0, r1, #16
 80086b4:	1aeb      	subs	r3, r5, r3
 80086b6:	181b      	adds	r3, r3, r0
 80086b8:	1418      	asrs	r0, r3, #16
 80086ba:	b289      	uxth	r1, r1
 80086bc:	041b      	lsls	r3, r3, #16
 80086be:	4319      	orrs	r1, r3
 80086c0:	9b05      	ldr	r3, [sp, #20]
 80086c2:	c302      	stmia	r3!, {r1}
 80086c4:	9305      	str	r3, [sp, #20]
 80086c6:	9b03      	ldr	r3, [sp, #12]
 80086c8:	42a3      	cmp	r3, r4
 80086ca:	d8e7      	bhi.n	800869c <__mdiff+0x84>
 80086cc:	0039      	movs	r1, r7
 80086ce:	9c03      	ldr	r4, [sp, #12]
 80086d0:	3115      	adds	r1, #21
 80086d2:	2304      	movs	r3, #4
 80086d4:	428c      	cmp	r4, r1
 80086d6:	d304      	bcc.n	80086e2 <__mdiff+0xca>
 80086d8:	1be3      	subs	r3, r4, r7
 80086da:	3b15      	subs	r3, #21
 80086dc:	089b      	lsrs	r3, r3, #2
 80086de:	3301      	adds	r3, #1
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	9901      	ldr	r1, [sp, #4]
 80086e4:	18cd      	adds	r5, r1, r3
 80086e6:	9904      	ldr	r1, [sp, #16]
 80086e8:	002e      	movs	r6, r5
 80086ea:	18cb      	adds	r3, r1, r3
 80086ec:	001f      	movs	r7, r3
 80086ee:	9902      	ldr	r1, [sp, #8]
 80086f0:	428e      	cmp	r6, r1
 80086f2:	d311      	bcc.n	8008718 <__mdiff+0x100>
 80086f4:	9c02      	ldr	r4, [sp, #8]
 80086f6:	1ee9      	subs	r1, r5, #3
 80086f8:	2000      	movs	r0, #0
 80086fa:	428c      	cmp	r4, r1
 80086fc:	d304      	bcc.n	8008708 <__mdiff+0xf0>
 80086fe:	0021      	movs	r1, r4
 8008700:	3103      	adds	r1, #3
 8008702:	1b49      	subs	r1, r1, r5
 8008704:	0889      	lsrs	r1, r1, #2
 8008706:	0088      	lsls	r0, r1, #2
 8008708:	181b      	adds	r3, r3, r0
 800870a:	3b04      	subs	r3, #4
 800870c:	6819      	ldr	r1, [r3, #0]
 800870e:	2900      	cmp	r1, #0
 8008710:	d010      	beq.n	8008734 <__mdiff+0x11c>
 8008712:	9b00      	ldr	r3, [sp, #0]
 8008714:	6113      	str	r3, [r2, #16]
 8008716:	e798      	b.n	800864a <__mdiff+0x32>
 8008718:	4684      	mov	ip, r0
 800871a:	ce02      	ldmia	r6!, {r1}
 800871c:	b288      	uxth	r0, r1
 800871e:	4460      	add	r0, ip
 8008720:	1400      	asrs	r0, r0, #16
 8008722:	0c0c      	lsrs	r4, r1, #16
 8008724:	1904      	adds	r4, r0, r4
 8008726:	4461      	add	r1, ip
 8008728:	1420      	asrs	r0, r4, #16
 800872a:	b289      	uxth	r1, r1
 800872c:	0424      	lsls	r4, r4, #16
 800872e:	4321      	orrs	r1, r4
 8008730:	c702      	stmia	r7!, {r1}
 8008732:	e7dc      	b.n	80086ee <__mdiff+0xd6>
 8008734:	9900      	ldr	r1, [sp, #0]
 8008736:	3901      	subs	r1, #1
 8008738:	9100      	str	r1, [sp, #0]
 800873a:	e7e6      	b.n	800870a <__mdiff+0xf2>
 800873c:	08009188 	.word	0x08009188
 8008740:	08009199 	.word	0x08009199
 8008744:	00000237 	.word	0x00000237
 8008748:	00000245 	.word	0x00000245

0800874c <__d2b>:
 800874c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800874e:	2101      	movs	r1, #1
 8008750:	0016      	movs	r6, r2
 8008752:	001f      	movs	r7, r3
 8008754:	f7ff fcb6 	bl	80080c4 <_Balloc>
 8008758:	1e04      	subs	r4, r0, #0
 800875a:	d105      	bne.n	8008768 <__d2b+0x1c>
 800875c:	0022      	movs	r2, r4
 800875e:	4b25      	ldr	r3, [pc, #148]	@ (80087f4 <__d2b+0xa8>)
 8008760:	4825      	ldr	r0, [pc, #148]	@ (80087f8 <__d2b+0xac>)
 8008762:	4926      	ldr	r1, [pc, #152]	@ (80087fc <__d2b+0xb0>)
 8008764:	f000 f904 	bl	8008970 <__assert_func>
 8008768:	033b      	lsls	r3, r7, #12
 800876a:	007d      	lsls	r5, r7, #1
 800876c:	0b1b      	lsrs	r3, r3, #12
 800876e:	0d6d      	lsrs	r5, r5, #21
 8008770:	d002      	beq.n	8008778 <__d2b+0x2c>
 8008772:	2280      	movs	r2, #128	@ 0x80
 8008774:	0352      	lsls	r2, r2, #13
 8008776:	4313      	orrs	r3, r2
 8008778:	9301      	str	r3, [sp, #4]
 800877a:	2e00      	cmp	r6, #0
 800877c:	d025      	beq.n	80087ca <__d2b+0x7e>
 800877e:	4668      	mov	r0, sp
 8008780:	9600      	str	r6, [sp, #0]
 8008782:	f7ff fd6c 	bl	800825e <__lo0bits>
 8008786:	9b01      	ldr	r3, [sp, #4]
 8008788:	9900      	ldr	r1, [sp, #0]
 800878a:	2800      	cmp	r0, #0
 800878c:	d01b      	beq.n	80087c6 <__d2b+0x7a>
 800878e:	2220      	movs	r2, #32
 8008790:	001e      	movs	r6, r3
 8008792:	1a12      	subs	r2, r2, r0
 8008794:	4096      	lsls	r6, r2
 8008796:	0032      	movs	r2, r6
 8008798:	40c3      	lsrs	r3, r0
 800879a:	430a      	orrs	r2, r1
 800879c:	6162      	str	r2, [r4, #20]
 800879e:	9301      	str	r3, [sp, #4]
 80087a0:	9e01      	ldr	r6, [sp, #4]
 80087a2:	61a6      	str	r6, [r4, #24]
 80087a4:	1e73      	subs	r3, r6, #1
 80087a6:	419e      	sbcs	r6, r3
 80087a8:	3601      	adds	r6, #1
 80087aa:	6126      	str	r6, [r4, #16]
 80087ac:	2d00      	cmp	r5, #0
 80087ae:	d014      	beq.n	80087da <__d2b+0x8e>
 80087b0:	2635      	movs	r6, #53	@ 0x35
 80087b2:	4b13      	ldr	r3, [pc, #76]	@ (8008800 <__d2b+0xb4>)
 80087b4:	18ed      	adds	r5, r5, r3
 80087b6:	9b08      	ldr	r3, [sp, #32]
 80087b8:	182d      	adds	r5, r5, r0
 80087ba:	601d      	str	r5, [r3, #0]
 80087bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087be:	1a36      	subs	r6, r6, r0
 80087c0:	601e      	str	r6, [r3, #0]
 80087c2:	0020      	movs	r0, r4
 80087c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80087c6:	6161      	str	r1, [r4, #20]
 80087c8:	e7ea      	b.n	80087a0 <__d2b+0x54>
 80087ca:	a801      	add	r0, sp, #4
 80087cc:	f7ff fd47 	bl	800825e <__lo0bits>
 80087d0:	9b01      	ldr	r3, [sp, #4]
 80087d2:	2601      	movs	r6, #1
 80087d4:	6163      	str	r3, [r4, #20]
 80087d6:	3020      	adds	r0, #32
 80087d8:	e7e7      	b.n	80087aa <__d2b+0x5e>
 80087da:	4b0a      	ldr	r3, [pc, #40]	@ (8008804 <__d2b+0xb8>)
 80087dc:	18c0      	adds	r0, r0, r3
 80087de:	9b08      	ldr	r3, [sp, #32]
 80087e0:	6018      	str	r0, [r3, #0]
 80087e2:	4b09      	ldr	r3, [pc, #36]	@ (8008808 <__d2b+0xbc>)
 80087e4:	18f3      	adds	r3, r6, r3
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	18e3      	adds	r3, r4, r3
 80087ea:	6958      	ldr	r0, [r3, #20]
 80087ec:	f7ff fd16 	bl	800821c <__hi0bits>
 80087f0:	0176      	lsls	r6, r6, #5
 80087f2:	e7e3      	b.n	80087bc <__d2b+0x70>
 80087f4:	08009188 	.word	0x08009188
 80087f8:	08009199 	.word	0x08009199
 80087fc:	0000030f 	.word	0x0000030f
 8008800:	fffffbcd 	.word	0xfffffbcd
 8008804:	fffffbce 	.word	0xfffffbce
 8008808:	3fffffff 	.word	0x3fffffff

0800880c <__sflush_r>:
 800880c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800880e:	220c      	movs	r2, #12
 8008810:	5e8b      	ldrsh	r3, [r1, r2]
 8008812:	0005      	movs	r5, r0
 8008814:	000c      	movs	r4, r1
 8008816:	071a      	lsls	r2, r3, #28
 8008818:	d456      	bmi.n	80088c8 <__sflush_r+0xbc>
 800881a:	684a      	ldr	r2, [r1, #4]
 800881c:	2a00      	cmp	r2, #0
 800881e:	dc02      	bgt.n	8008826 <__sflush_r+0x1a>
 8008820:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8008822:	2a00      	cmp	r2, #0
 8008824:	dd4e      	ble.n	80088c4 <__sflush_r+0xb8>
 8008826:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8008828:	2f00      	cmp	r7, #0
 800882a:	d04b      	beq.n	80088c4 <__sflush_r+0xb8>
 800882c:	2200      	movs	r2, #0
 800882e:	2080      	movs	r0, #128	@ 0x80
 8008830:	682e      	ldr	r6, [r5, #0]
 8008832:	602a      	str	r2, [r5, #0]
 8008834:	001a      	movs	r2, r3
 8008836:	0140      	lsls	r0, r0, #5
 8008838:	6a21      	ldr	r1, [r4, #32]
 800883a:	4002      	ands	r2, r0
 800883c:	4203      	tst	r3, r0
 800883e:	d033      	beq.n	80088a8 <__sflush_r+0x9c>
 8008840:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008842:	89a3      	ldrh	r3, [r4, #12]
 8008844:	075b      	lsls	r3, r3, #29
 8008846:	d506      	bpl.n	8008856 <__sflush_r+0x4a>
 8008848:	6863      	ldr	r3, [r4, #4]
 800884a:	1ad2      	subs	r2, r2, r3
 800884c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800884e:	2b00      	cmp	r3, #0
 8008850:	d001      	beq.n	8008856 <__sflush_r+0x4a>
 8008852:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008854:	1ad2      	subs	r2, r2, r3
 8008856:	2300      	movs	r3, #0
 8008858:	0028      	movs	r0, r5
 800885a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800885c:	6a21      	ldr	r1, [r4, #32]
 800885e:	47b8      	blx	r7
 8008860:	89a2      	ldrh	r2, [r4, #12]
 8008862:	1c43      	adds	r3, r0, #1
 8008864:	d106      	bne.n	8008874 <__sflush_r+0x68>
 8008866:	6829      	ldr	r1, [r5, #0]
 8008868:	291d      	cmp	r1, #29
 800886a:	d846      	bhi.n	80088fa <__sflush_r+0xee>
 800886c:	4b29      	ldr	r3, [pc, #164]	@ (8008914 <__sflush_r+0x108>)
 800886e:	410b      	asrs	r3, r1
 8008870:	07db      	lsls	r3, r3, #31
 8008872:	d442      	bmi.n	80088fa <__sflush_r+0xee>
 8008874:	2300      	movs	r3, #0
 8008876:	6063      	str	r3, [r4, #4]
 8008878:	6923      	ldr	r3, [r4, #16]
 800887a:	6023      	str	r3, [r4, #0]
 800887c:	04d2      	lsls	r2, r2, #19
 800887e:	d505      	bpl.n	800888c <__sflush_r+0x80>
 8008880:	1c43      	adds	r3, r0, #1
 8008882:	d102      	bne.n	800888a <__sflush_r+0x7e>
 8008884:	682b      	ldr	r3, [r5, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d100      	bne.n	800888c <__sflush_r+0x80>
 800888a:	6560      	str	r0, [r4, #84]	@ 0x54
 800888c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800888e:	602e      	str	r6, [r5, #0]
 8008890:	2900      	cmp	r1, #0
 8008892:	d017      	beq.n	80088c4 <__sflush_r+0xb8>
 8008894:	0023      	movs	r3, r4
 8008896:	3344      	adds	r3, #68	@ 0x44
 8008898:	4299      	cmp	r1, r3
 800889a:	d002      	beq.n	80088a2 <__sflush_r+0x96>
 800889c:	0028      	movs	r0, r5
 800889e:	f7ff fbc7 	bl	8008030 <_free_r>
 80088a2:	2300      	movs	r3, #0
 80088a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80088a6:	e00d      	b.n	80088c4 <__sflush_r+0xb8>
 80088a8:	2301      	movs	r3, #1
 80088aa:	0028      	movs	r0, r5
 80088ac:	47b8      	blx	r7
 80088ae:	0002      	movs	r2, r0
 80088b0:	1c43      	adds	r3, r0, #1
 80088b2:	d1c6      	bne.n	8008842 <__sflush_r+0x36>
 80088b4:	682b      	ldr	r3, [r5, #0]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d0c3      	beq.n	8008842 <__sflush_r+0x36>
 80088ba:	2b1d      	cmp	r3, #29
 80088bc:	d001      	beq.n	80088c2 <__sflush_r+0xb6>
 80088be:	2b16      	cmp	r3, #22
 80088c0:	d11a      	bne.n	80088f8 <__sflush_r+0xec>
 80088c2:	602e      	str	r6, [r5, #0]
 80088c4:	2000      	movs	r0, #0
 80088c6:	e01e      	b.n	8008906 <__sflush_r+0xfa>
 80088c8:	690e      	ldr	r6, [r1, #16]
 80088ca:	2e00      	cmp	r6, #0
 80088cc:	d0fa      	beq.n	80088c4 <__sflush_r+0xb8>
 80088ce:	680f      	ldr	r7, [r1, #0]
 80088d0:	600e      	str	r6, [r1, #0]
 80088d2:	1bba      	subs	r2, r7, r6
 80088d4:	9201      	str	r2, [sp, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	079b      	lsls	r3, r3, #30
 80088da:	d100      	bne.n	80088de <__sflush_r+0xd2>
 80088dc:	694a      	ldr	r2, [r1, #20]
 80088de:	60a2      	str	r2, [r4, #8]
 80088e0:	9b01      	ldr	r3, [sp, #4]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	ddee      	ble.n	80088c4 <__sflush_r+0xb8>
 80088e6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80088e8:	0032      	movs	r2, r6
 80088ea:	001f      	movs	r7, r3
 80088ec:	0028      	movs	r0, r5
 80088ee:	9b01      	ldr	r3, [sp, #4]
 80088f0:	6a21      	ldr	r1, [r4, #32]
 80088f2:	47b8      	blx	r7
 80088f4:	2800      	cmp	r0, #0
 80088f6:	dc07      	bgt.n	8008908 <__sflush_r+0xfc>
 80088f8:	89a2      	ldrh	r2, [r4, #12]
 80088fa:	2340      	movs	r3, #64	@ 0x40
 80088fc:	2001      	movs	r0, #1
 80088fe:	4313      	orrs	r3, r2
 8008900:	b21b      	sxth	r3, r3
 8008902:	81a3      	strh	r3, [r4, #12]
 8008904:	4240      	negs	r0, r0
 8008906:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008908:	9b01      	ldr	r3, [sp, #4]
 800890a:	1836      	adds	r6, r6, r0
 800890c:	1a1b      	subs	r3, r3, r0
 800890e:	9301      	str	r3, [sp, #4]
 8008910:	e7e6      	b.n	80088e0 <__sflush_r+0xd4>
 8008912:	46c0      	nop			@ (mov r8, r8)
 8008914:	dfbffffe 	.word	0xdfbffffe

08008918 <_fflush_r>:
 8008918:	690b      	ldr	r3, [r1, #16]
 800891a:	b570      	push	{r4, r5, r6, lr}
 800891c:	0005      	movs	r5, r0
 800891e:	000c      	movs	r4, r1
 8008920:	2b00      	cmp	r3, #0
 8008922:	d102      	bne.n	800892a <_fflush_r+0x12>
 8008924:	2500      	movs	r5, #0
 8008926:	0028      	movs	r0, r5
 8008928:	bd70      	pop	{r4, r5, r6, pc}
 800892a:	2800      	cmp	r0, #0
 800892c:	d004      	beq.n	8008938 <_fflush_r+0x20>
 800892e:	6a03      	ldr	r3, [r0, #32]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d101      	bne.n	8008938 <_fflush_r+0x20>
 8008934:	f7fe fbcc 	bl	80070d0 <__sinit>
 8008938:	220c      	movs	r2, #12
 800893a:	5ea3      	ldrsh	r3, [r4, r2]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d0f1      	beq.n	8008924 <_fflush_r+0xc>
 8008940:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008942:	07d2      	lsls	r2, r2, #31
 8008944:	d404      	bmi.n	8008950 <_fflush_r+0x38>
 8008946:	059b      	lsls	r3, r3, #22
 8008948:	d402      	bmi.n	8008950 <_fflush_r+0x38>
 800894a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800894c:	f7fe fcd7 	bl	80072fe <__retarget_lock_acquire_recursive>
 8008950:	0028      	movs	r0, r5
 8008952:	0021      	movs	r1, r4
 8008954:	f7ff ff5a 	bl	800880c <__sflush_r>
 8008958:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800895a:	0005      	movs	r5, r0
 800895c:	07db      	lsls	r3, r3, #31
 800895e:	d4e2      	bmi.n	8008926 <_fflush_r+0xe>
 8008960:	89a3      	ldrh	r3, [r4, #12]
 8008962:	059b      	lsls	r3, r3, #22
 8008964:	d4df      	bmi.n	8008926 <_fflush_r+0xe>
 8008966:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008968:	f7fe fcca 	bl	8007300 <__retarget_lock_release_recursive>
 800896c:	e7db      	b.n	8008926 <_fflush_r+0xe>
	...

08008970 <__assert_func>:
 8008970:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008972:	0014      	movs	r4, r2
 8008974:	001a      	movs	r2, r3
 8008976:	4b09      	ldr	r3, [pc, #36]	@ (800899c <__assert_func+0x2c>)
 8008978:	0005      	movs	r5, r0
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	000e      	movs	r6, r1
 800897e:	68d8      	ldr	r0, [r3, #12]
 8008980:	4b07      	ldr	r3, [pc, #28]	@ (80089a0 <__assert_func+0x30>)
 8008982:	2c00      	cmp	r4, #0
 8008984:	d101      	bne.n	800898a <__assert_func+0x1a>
 8008986:	4b07      	ldr	r3, [pc, #28]	@ (80089a4 <__assert_func+0x34>)
 8008988:	001c      	movs	r4, r3
 800898a:	4907      	ldr	r1, [pc, #28]	@ (80089a8 <__assert_func+0x38>)
 800898c:	9301      	str	r3, [sp, #4]
 800898e:	9402      	str	r4, [sp, #8]
 8008990:	002b      	movs	r3, r5
 8008992:	9600      	str	r6, [sp, #0]
 8008994:	f000 f856 	bl	8008a44 <fiprintf>
 8008998:	f000 f864 	bl	8008a64 <abort>
 800899c:	20000064 	.word	0x20000064
 80089a0:	080092fa 	.word	0x080092fa
 80089a4:	08009335 	.word	0x08009335
 80089a8:	08009307 	.word	0x08009307

080089ac <_calloc_r>:
 80089ac:	b570      	push	{r4, r5, r6, lr}
 80089ae:	0c0b      	lsrs	r3, r1, #16
 80089b0:	0c15      	lsrs	r5, r2, #16
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d11e      	bne.n	80089f4 <_calloc_r+0x48>
 80089b6:	2d00      	cmp	r5, #0
 80089b8:	d10c      	bne.n	80089d4 <_calloc_r+0x28>
 80089ba:	b289      	uxth	r1, r1
 80089bc:	b294      	uxth	r4, r2
 80089be:	434c      	muls	r4, r1
 80089c0:	0021      	movs	r1, r4
 80089c2:	f7fd fe03 	bl	80065cc <_malloc_r>
 80089c6:	1e05      	subs	r5, r0, #0
 80089c8:	d01a      	beq.n	8008a00 <_calloc_r+0x54>
 80089ca:	0022      	movs	r2, r4
 80089cc:	2100      	movs	r1, #0
 80089ce:	f7fe fbff 	bl	80071d0 <memset>
 80089d2:	e016      	b.n	8008a02 <_calloc_r+0x56>
 80089d4:	1c2b      	adds	r3, r5, #0
 80089d6:	1c0c      	adds	r4, r1, #0
 80089d8:	b289      	uxth	r1, r1
 80089da:	b292      	uxth	r2, r2
 80089dc:	434a      	muls	r2, r1
 80089de:	b29b      	uxth	r3, r3
 80089e0:	b2a1      	uxth	r1, r4
 80089e2:	4359      	muls	r1, r3
 80089e4:	0c14      	lsrs	r4, r2, #16
 80089e6:	190c      	adds	r4, r1, r4
 80089e8:	0c23      	lsrs	r3, r4, #16
 80089ea:	d107      	bne.n	80089fc <_calloc_r+0x50>
 80089ec:	0424      	lsls	r4, r4, #16
 80089ee:	b292      	uxth	r2, r2
 80089f0:	4314      	orrs	r4, r2
 80089f2:	e7e5      	b.n	80089c0 <_calloc_r+0x14>
 80089f4:	2d00      	cmp	r5, #0
 80089f6:	d101      	bne.n	80089fc <_calloc_r+0x50>
 80089f8:	1c14      	adds	r4, r2, #0
 80089fa:	e7ed      	b.n	80089d8 <_calloc_r+0x2c>
 80089fc:	230c      	movs	r3, #12
 80089fe:	6003      	str	r3, [r0, #0]
 8008a00:	2500      	movs	r5, #0
 8008a02:	0028      	movs	r0, r5
 8008a04:	bd70      	pop	{r4, r5, r6, pc}

08008a06 <__ascii_mbtowc>:
 8008a06:	b082      	sub	sp, #8
 8008a08:	2900      	cmp	r1, #0
 8008a0a:	d100      	bne.n	8008a0e <__ascii_mbtowc+0x8>
 8008a0c:	a901      	add	r1, sp, #4
 8008a0e:	1e10      	subs	r0, r2, #0
 8008a10:	d006      	beq.n	8008a20 <__ascii_mbtowc+0x1a>
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d006      	beq.n	8008a24 <__ascii_mbtowc+0x1e>
 8008a16:	7813      	ldrb	r3, [r2, #0]
 8008a18:	600b      	str	r3, [r1, #0]
 8008a1a:	7810      	ldrb	r0, [r2, #0]
 8008a1c:	1e43      	subs	r3, r0, #1
 8008a1e:	4198      	sbcs	r0, r3
 8008a20:	b002      	add	sp, #8
 8008a22:	4770      	bx	lr
 8008a24:	2002      	movs	r0, #2
 8008a26:	4240      	negs	r0, r0
 8008a28:	e7fa      	b.n	8008a20 <__ascii_mbtowc+0x1a>

08008a2a <__ascii_wctomb>:
 8008a2a:	0003      	movs	r3, r0
 8008a2c:	1e08      	subs	r0, r1, #0
 8008a2e:	d005      	beq.n	8008a3c <__ascii_wctomb+0x12>
 8008a30:	2aff      	cmp	r2, #255	@ 0xff
 8008a32:	d904      	bls.n	8008a3e <__ascii_wctomb+0x14>
 8008a34:	228a      	movs	r2, #138	@ 0x8a
 8008a36:	2001      	movs	r0, #1
 8008a38:	601a      	str	r2, [r3, #0]
 8008a3a:	4240      	negs	r0, r0
 8008a3c:	4770      	bx	lr
 8008a3e:	2001      	movs	r0, #1
 8008a40:	700a      	strb	r2, [r1, #0]
 8008a42:	e7fb      	b.n	8008a3c <__ascii_wctomb+0x12>

08008a44 <fiprintf>:
 8008a44:	b40e      	push	{r1, r2, r3}
 8008a46:	b517      	push	{r0, r1, r2, r4, lr}
 8008a48:	4c05      	ldr	r4, [pc, #20]	@ (8008a60 <fiprintf+0x1c>)
 8008a4a:	ab05      	add	r3, sp, #20
 8008a4c:	cb04      	ldmia	r3!, {r2}
 8008a4e:	0001      	movs	r1, r0
 8008a50:	6820      	ldr	r0, [r4, #0]
 8008a52:	9301      	str	r3, [sp, #4]
 8008a54:	f000 f834 	bl	8008ac0 <_vfiprintf_r>
 8008a58:	bc1e      	pop	{r1, r2, r3, r4}
 8008a5a:	bc08      	pop	{r3}
 8008a5c:	b003      	add	sp, #12
 8008a5e:	4718      	bx	r3
 8008a60:	20000064 	.word	0x20000064

08008a64 <abort>:
 8008a64:	2006      	movs	r0, #6
 8008a66:	b510      	push	{r4, lr}
 8008a68:	f000 fa10 	bl	8008e8c <raise>
 8008a6c:	2001      	movs	r0, #1
 8008a6e:	f7fa f9c5 	bl	8002dfc <_exit>

08008a72 <__sfputc_r>:
 8008a72:	6893      	ldr	r3, [r2, #8]
 8008a74:	b510      	push	{r4, lr}
 8008a76:	3b01      	subs	r3, #1
 8008a78:	6093      	str	r3, [r2, #8]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	da04      	bge.n	8008a88 <__sfputc_r+0x16>
 8008a7e:	6994      	ldr	r4, [r2, #24]
 8008a80:	42a3      	cmp	r3, r4
 8008a82:	db07      	blt.n	8008a94 <__sfputc_r+0x22>
 8008a84:	290a      	cmp	r1, #10
 8008a86:	d005      	beq.n	8008a94 <__sfputc_r+0x22>
 8008a88:	6813      	ldr	r3, [r2, #0]
 8008a8a:	1c58      	adds	r0, r3, #1
 8008a8c:	6010      	str	r0, [r2, #0]
 8008a8e:	7019      	strb	r1, [r3, #0]
 8008a90:	0008      	movs	r0, r1
 8008a92:	bd10      	pop	{r4, pc}
 8008a94:	f000 f930 	bl	8008cf8 <__swbuf_r>
 8008a98:	0001      	movs	r1, r0
 8008a9a:	e7f9      	b.n	8008a90 <__sfputc_r+0x1e>

08008a9c <__sfputs_r>:
 8008a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a9e:	0006      	movs	r6, r0
 8008aa0:	000f      	movs	r7, r1
 8008aa2:	0014      	movs	r4, r2
 8008aa4:	18d5      	adds	r5, r2, r3
 8008aa6:	42ac      	cmp	r4, r5
 8008aa8:	d101      	bne.n	8008aae <__sfputs_r+0x12>
 8008aaa:	2000      	movs	r0, #0
 8008aac:	e007      	b.n	8008abe <__sfputs_r+0x22>
 8008aae:	7821      	ldrb	r1, [r4, #0]
 8008ab0:	003a      	movs	r2, r7
 8008ab2:	0030      	movs	r0, r6
 8008ab4:	f7ff ffdd 	bl	8008a72 <__sfputc_r>
 8008ab8:	3401      	adds	r4, #1
 8008aba:	1c43      	adds	r3, r0, #1
 8008abc:	d1f3      	bne.n	8008aa6 <__sfputs_r+0xa>
 8008abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008ac0 <_vfiprintf_r>:
 8008ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ac2:	b0a1      	sub	sp, #132	@ 0x84
 8008ac4:	000f      	movs	r7, r1
 8008ac6:	0015      	movs	r5, r2
 8008ac8:	001e      	movs	r6, r3
 8008aca:	9003      	str	r0, [sp, #12]
 8008acc:	2800      	cmp	r0, #0
 8008ace:	d004      	beq.n	8008ada <_vfiprintf_r+0x1a>
 8008ad0:	6a03      	ldr	r3, [r0, #32]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d101      	bne.n	8008ada <_vfiprintf_r+0x1a>
 8008ad6:	f7fe fafb 	bl	80070d0 <__sinit>
 8008ada:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008adc:	07db      	lsls	r3, r3, #31
 8008ade:	d405      	bmi.n	8008aec <_vfiprintf_r+0x2c>
 8008ae0:	89bb      	ldrh	r3, [r7, #12]
 8008ae2:	059b      	lsls	r3, r3, #22
 8008ae4:	d402      	bmi.n	8008aec <_vfiprintf_r+0x2c>
 8008ae6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008ae8:	f7fe fc09 	bl	80072fe <__retarget_lock_acquire_recursive>
 8008aec:	89bb      	ldrh	r3, [r7, #12]
 8008aee:	071b      	lsls	r3, r3, #28
 8008af0:	d502      	bpl.n	8008af8 <_vfiprintf_r+0x38>
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d113      	bne.n	8008b20 <_vfiprintf_r+0x60>
 8008af8:	0039      	movs	r1, r7
 8008afa:	9803      	ldr	r0, [sp, #12]
 8008afc:	f000 f93e 	bl	8008d7c <__swsetup_r>
 8008b00:	2800      	cmp	r0, #0
 8008b02:	d00d      	beq.n	8008b20 <_vfiprintf_r+0x60>
 8008b04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b06:	07db      	lsls	r3, r3, #31
 8008b08:	d503      	bpl.n	8008b12 <_vfiprintf_r+0x52>
 8008b0a:	2001      	movs	r0, #1
 8008b0c:	4240      	negs	r0, r0
 8008b0e:	b021      	add	sp, #132	@ 0x84
 8008b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b12:	89bb      	ldrh	r3, [r7, #12]
 8008b14:	059b      	lsls	r3, r3, #22
 8008b16:	d4f8      	bmi.n	8008b0a <_vfiprintf_r+0x4a>
 8008b18:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008b1a:	f7fe fbf1 	bl	8007300 <__retarget_lock_release_recursive>
 8008b1e:	e7f4      	b.n	8008b0a <_vfiprintf_r+0x4a>
 8008b20:	2300      	movs	r3, #0
 8008b22:	ac08      	add	r4, sp, #32
 8008b24:	6163      	str	r3, [r4, #20]
 8008b26:	3320      	adds	r3, #32
 8008b28:	7663      	strb	r3, [r4, #25]
 8008b2a:	3310      	adds	r3, #16
 8008b2c:	76a3      	strb	r3, [r4, #26]
 8008b2e:	9607      	str	r6, [sp, #28]
 8008b30:	002e      	movs	r6, r5
 8008b32:	7833      	ldrb	r3, [r6, #0]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d001      	beq.n	8008b3c <_vfiprintf_r+0x7c>
 8008b38:	2b25      	cmp	r3, #37	@ 0x25
 8008b3a:	d148      	bne.n	8008bce <_vfiprintf_r+0x10e>
 8008b3c:	1b73      	subs	r3, r6, r5
 8008b3e:	9305      	str	r3, [sp, #20]
 8008b40:	42ae      	cmp	r6, r5
 8008b42:	d00b      	beq.n	8008b5c <_vfiprintf_r+0x9c>
 8008b44:	002a      	movs	r2, r5
 8008b46:	0039      	movs	r1, r7
 8008b48:	9803      	ldr	r0, [sp, #12]
 8008b4a:	f7ff ffa7 	bl	8008a9c <__sfputs_r>
 8008b4e:	3001      	adds	r0, #1
 8008b50:	d100      	bne.n	8008b54 <_vfiprintf_r+0x94>
 8008b52:	e0ae      	b.n	8008cb2 <_vfiprintf_r+0x1f2>
 8008b54:	6963      	ldr	r3, [r4, #20]
 8008b56:	9a05      	ldr	r2, [sp, #20]
 8008b58:	189b      	adds	r3, r3, r2
 8008b5a:	6163      	str	r3, [r4, #20]
 8008b5c:	7833      	ldrb	r3, [r6, #0]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d100      	bne.n	8008b64 <_vfiprintf_r+0xa4>
 8008b62:	e0a6      	b.n	8008cb2 <_vfiprintf_r+0x1f2>
 8008b64:	2201      	movs	r2, #1
 8008b66:	2300      	movs	r3, #0
 8008b68:	4252      	negs	r2, r2
 8008b6a:	6062      	str	r2, [r4, #4]
 8008b6c:	a904      	add	r1, sp, #16
 8008b6e:	3254      	adds	r2, #84	@ 0x54
 8008b70:	1852      	adds	r2, r2, r1
 8008b72:	1c75      	adds	r5, r6, #1
 8008b74:	6023      	str	r3, [r4, #0]
 8008b76:	60e3      	str	r3, [r4, #12]
 8008b78:	60a3      	str	r3, [r4, #8]
 8008b7a:	7013      	strb	r3, [r2, #0]
 8008b7c:	65a3      	str	r3, [r4, #88]	@ 0x58
 8008b7e:	4b59      	ldr	r3, [pc, #356]	@ (8008ce4 <_vfiprintf_r+0x224>)
 8008b80:	2205      	movs	r2, #5
 8008b82:	0018      	movs	r0, r3
 8008b84:	7829      	ldrb	r1, [r5, #0]
 8008b86:	9305      	str	r3, [sp, #20]
 8008b88:	f7fe fbbb 	bl	8007302 <memchr>
 8008b8c:	1c6e      	adds	r6, r5, #1
 8008b8e:	2800      	cmp	r0, #0
 8008b90:	d11f      	bne.n	8008bd2 <_vfiprintf_r+0x112>
 8008b92:	6822      	ldr	r2, [r4, #0]
 8008b94:	06d3      	lsls	r3, r2, #27
 8008b96:	d504      	bpl.n	8008ba2 <_vfiprintf_r+0xe2>
 8008b98:	2353      	movs	r3, #83	@ 0x53
 8008b9a:	a904      	add	r1, sp, #16
 8008b9c:	185b      	adds	r3, r3, r1
 8008b9e:	2120      	movs	r1, #32
 8008ba0:	7019      	strb	r1, [r3, #0]
 8008ba2:	0713      	lsls	r3, r2, #28
 8008ba4:	d504      	bpl.n	8008bb0 <_vfiprintf_r+0xf0>
 8008ba6:	2353      	movs	r3, #83	@ 0x53
 8008ba8:	a904      	add	r1, sp, #16
 8008baa:	185b      	adds	r3, r3, r1
 8008bac:	212b      	movs	r1, #43	@ 0x2b
 8008bae:	7019      	strb	r1, [r3, #0]
 8008bb0:	782b      	ldrb	r3, [r5, #0]
 8008bb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bb4:	d016      	beq.n	8008be4 <_vfiprintf_r+0x124>
 8008bb6:	002e      	movs	r6, r5
 8008bb8:	2100      	movs	r1, #0
 8008bba:	200a      	movs	r0, #10
 8008bbc:	68e3      	ldr	r3, [r4, #12]
 8008bbe:	7832      	ldrb	r2, [r6, #0]
 8008bc0:	1c75      	adds	r5, r6, #1
 8008bc2:	3a30      	subs	r2, #48	@ 0x30
 8008bc4:	2a09      	cmp	r2, #9
 8008bc6:	d950      	bls.n	8008c6a <_vfiprintf_r+0x1aa>
 8008bc8:	2900      	cmp	r1, #0
 8008bca:	d111      	bne.n	8008bf0 <_vfiprintf_r+0x130>
 8008bcc:	e017      	b.n	8008bfe <_vfiprintf_r+0x13e>
 8008bce:	3601      	adds	r6, #1
 8008bd0:	e7af      	b.n	8008b32 <_vfiprintf_r+0x72>
 8008bd2:	9b05      	ldr	r3, [sp, #20]
 8008bd4:	6822      	ldr	r2, [r4, #0]
 8008bd6:	1ac0      	subs	r0, r0, r3
 8008bd8:	2301      	movs	r3, #1
 8008bda:	4083      	lsls	r3, r0
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	0035      	movs	r5, r6
 8008be0:	6023      	str	r3, [r4, #0]
 8008be2:	e7cc      	b.n	8008b7e <_vfiprintf_r+0xbe>
 8008be4:	9b07      	ldr	r3, [sp, #28]
 8008be6:	1d19      	adds	r1, r3, #4
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	9107      	str	r1, [sp, #28]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	db01      	blt.n	8008bf4 <_vfiprintf_r+0x134>
 8008bf0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008bf2:	e004      	b.n	8008bfe <_vfiprintf_r+0x13e>
 8008bf4:	425b      	negs	r3, r3
 8008bf6:	60e3      	str	r3, [r4, #12]
 8008bf8:	2302      	movs	r3, #2
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	6023      	str	r3, [r4, #0]
 8008bfe:	7833      	ldrb	r3, [r6, #0]
 8008c00:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c02:	d10c      	bne.n	8008c1e <_vfiprintf_r+0x15e>
 8008c04:	7873      	ldrb	r3, [r6, #1]
 8008c06:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c08:	d134      	bne.n	8008c74 <_vfiprintf_r+0x1b4>
 8008c0a:	9b07      	ldr	r3, [sp, #28]
 8008c0c:	3602      	adds	r6, #2
 8008c0e:	1d1a      	adds	r2, r3, #4
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	9207      	str	r2, [sp, #28]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	da01      	bge.n	8008c1c <_vfiprintf_r+0x15c>
 8008c18:	2301      	movs	r3, #1
 8008c1a:	425b      	negs	r3, r3
 8008c1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c1e:	4d32      	ldr	r5, [pc, #200]	@ (8008ce8 <_vfiprintf_r+0x228>)
 8008c20:	2203      	movs	r2, #3
 8008c22:	0028      	movs	r0, r5
 8008c24:	7831      	ldrb	r1, [r6, #0]
 8008c26:	f7fe fb6c 	bl	8007302 <memchr>
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	d006      	beq.n	8008c3c <_vfiprintf_r+0x17c>
 8008c2e:	2340      	movs	r3, #64	@ 0x40
 8008c30:	1b40      	subs	r0, r0, r5
 8008c32:	4083      	lsls	r3, r0
 8008c34:	6822      	ldr	r2, [r4, #0]
 8008c36:	3601      	adds	r6, #1
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	6023      	str	r3, [r4, #0]
 8008c3c:	7831      	ldrb	r1, [r6, #0]
 8008c3e:	2206      	movs	r2, #6
 8008c40:	482a      	ldr	r0, [pc, #168]	@ (8008cec <_vfiprintf_r+0x22c>)
 8008c42:	1c75      	adds	r5, r6, #1
 8008c44:	7621      	strb	r1, [r4, #24]
 8008c46:	f7fe fb5c 	bl	8007302 <memchr>
 8008c4a:	2800      	cmp	r0, #0
 8008c4c:	d040      	beq.n	8008cd0 <_vfiprintf_r+0x210>
 8008c4e:	4b28      	ldr	r3, [pc, #160]	@ (8008cf0 <_vfiprintf_r+0x230>)
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d122      	bne.n	8008c9a <_vfiprintf_r+0x1da>
 8008c54:	2207      	movs	r2, #7
 8008c56:	9b07      	ldr	r3, [sp, #28]
 8008c58:	3307      	adds	r3, #7
 8008c5a:	4393      	bics	r3, r2
 8008c5c:	3308      	adds	r3, #8
 8008c5e:	9307      	str	r3, [sp, #28]
 8008c60:	6963      	ldr	r3, [r4, #20]
 8008c62:	9a04      	ldr	r2, [sp, #16]
 8008c64:	189b      	adds	r3, r3, r2
 8008c66:	6163      	str	r3, [r4, #20]
 8008c68:	e762      	b.n	8008b30 <_vfiprintf_r+0x70>
 8008c6a:	4343      	muls	r3, r0
 8008c6c:	002e      	movs	r6, r5
 8008c6e:	2101      	movs	r1, #1
 8008c70:	189b      	adds	r3, r3, r2
 8008c72:	e7a4      	b.n	8008bbe <_vfiprintf_r+0xfe>
 8008c74:	2300      	movs	r3, #0
 8008c76:	200a      	movs	r0, #10
 8008c78:	0019      	movs	r1, r3
 8008c7a:	3601      	adds	r6, #1
 8008c7c:	6063      	str	r3, [r4, #4]
 8008c7e:	7832      	ldrb	r2, [r6, #0]
 8008c80:	1c75      	adds	r5, r6, #1
 8008c82:	3a30      	subs	r2, #48	@ 0x30
 8008c84:	2a09      	cmp	r2, #9
 8008c86:	d903      	bls.n	8008c90 <_vfiprintf_r+0x1d0>
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d0c8      	beq.n	8008c1e <_vfiprintf_r+0x15e>
 8008c8c:	9109      	str	r1, [sp, #36]	@ 0x24
 8008c8e:	e7c6      	b.n	8008c1e <_vfiprintf_r+0x15e>
 8008c90:	4341      	muls	r1, r0
 8008c92:	002e      	movs	r6, r5
 8008c94:	2301      	movs	r3, #1
 8008c96:	1889      	adds	r1, r1, r2
 8008c98:	e7f1      	b.n	8008c7e <_vfiprintf_r+0x1be>
 8008c9a:	aa07      	add	r2, sp, #28
 8008c9c:	9200      	str	r2, [sp, #0]
 8008c9e:	0021      	movs	r1, r4
 8008ca0:	003a      	movs	r2, r7
 8008ca2:	4b14      	ldr	r3, [pc, #80]	@ (8008cf4 <_vfiprintf_r+0x234>)
 8008ca4:	9803      	ldr	r0, [sp, #12]
 8008ca6:	f7fd fdc7 	bl	8006838 <_printf_float>
 8008caa:	9004      	str	r0, [sp, #16]
 8008cac:	9b04      	ldr	r3, [sp, #16]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	d1d6      	bne.n	8008c60 <_vfiprintf_r+0x1a0>
 8008cb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008cb4:	07db      	lsls	r3, r3, #31
 8008cb6:	d405      	bmi.n	8008cc4 <_vfiprintf_r+0x204>
 8008cb8:	89bb      	ldrh	r3, [r7, #12]
 8008cba:	059b      	lsls	r3, r3, #22
 8008cbc:	d402      	bmi.n	8008cc4 <_vfiprintf_r+0x204>
 8008cbe:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008cc0:	f7fe fb1e 	bl	8007300 <__retarget_lock_release_recursive>
 8008cc4:	89bb      	ldrh	r3, [r7, #12]
 8008cc6:	065b      	lsls	r3, r3, #25
 8008cc8:	d500      	bpl.n	8008ccc <_vfiprintf_r+0x20c>
 8008cca:	e71e      	b.n	8008b0a <_vfiprintf_r+0x4a>
 8008ccc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008cce:	e71e      	b.n	8008b0e <_vfiprintf_r+0x4e>
 8008cd0:	aa07      	add	r2, sp, #28
 8008cd2:	9200      	str	r2, [sp, #0]
 8008cd4:	0021      	movs	r1, r4
 8008cd6:	003a      	movs	r2, r7
 8008cd8:	4b06      	ldr	r3, [pc, #24]	@ (8008cf4 <_vfiprintf_r+0x234>)
 8008cda:	9803      	ldr	r0, [sp, #12]
 8008cdc:	f7fe f85a 	bl	8006d94 <_printf_i>
 8008ce0:	e7e3      	b.n	8008caa <_vfiprintf_r+0x1ea>
 8008ce2:	46c0      	nop			@ (mov r8, r8)
 8008ce4:	08009437 	.word	0x08009437
 8008ce8:	0800943d 	.word	0x0800943d
 8008cec:	08009441 	.word	0x08009441
 8008cf0:	08006839 	.word	0x08006839
 8008cf4:	08008a9d 	.word	0x08008a9d

08008cf8 <__swbuf_r>:
 8008cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cfa:	0006      	movs	r6, r0
 8008cfc:	000d      	movs	r5, r1
 8008cfe:	0014      	movs	r4, r2
 8008d00:	2800      	cmp	r0, #0
 8008d02:	d004      	beq.n	8008d0e <__swbuf_r+0x16>
 8008d04:	6a03      	ldr	r3, [r0, #32]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d101      	bne.n	8008d0e <__swbuf_r+0x16>
 8008d0a:	f7fe f9e1 	bl	80070d0 <__sinit>
 8008d0e:	69a3      	ldr	r3, [r4, #24]
 8008d10:	60a3      	str	r3, [r4, #8]
 8008d12:	89a3      	ldrh	r3, [r4, #12]
 8008d14:	071b      	lsls	r3, r3, #28
 8008d16:	d502      	bpl.n	8008d1e <__swbuf_r+0x26>
 8008d18:	6923      	ldr	r3, [r4, #16]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d109      	bne.n	8008d32 <__swbuf_r+0x3a>
 8008d1e:	0021      	movs	r1, r4
 8008d20:	0030      	movs	r0, r6
 8008d22:	f000 f82b 	bl	8008d7c <__swsetup_r>
 8008d26:	2800      	cmp	r0, #0
 8008d28:	d003      	beq.n	8008d32 <__swbuf_r+0x3a>
 8008d2a:	2501      	movs	r5, #1
 8008d2c:	426d      	negs	r5, r5
 8008d2e:	0028      	movs	r0, r5
 8008d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d32:	6923      	ldr	r3, [r4, #16]
 8008d34:	6820      	ldr	r0, [r4, #0]
 8008d36:	b2ef      	uxtb	r7, r5
 8008d38:	1ac0      	subs	r0, r0, r3
 8008d3a:	6963      	ldr	r3, [r4, #20]
 8008d3c:	b2ed      	uxtb	r5, r5
 8008d3e:	4283      	cmp	r3, r0
 8008d40:	dc05      	bgt.n	8008d4e <__swbuf_r+0x56>
 8008d42:	0021      	movs	r1, r4
 8008d44:	0030      	movs	r0, r6
 8008d46:	f7ff fde7 	bl	8008918 <_fflush_r>
 8008d4a:	2800      	cmp	r0, #0
 8008d4c:	d1ed      	bne.n	8008d2a <__swbuf_r+0x32>
 8008d4e:	68a3      	ldr	r3, [r4, #8]
 8008d50:	3001      	adds	r0, #1
 8008d52:	3b01      	subs	r3, #1
 8008d54:	60a3      	str	r3, [r4, #8]
 8008d56:	6823      	ldr	r3, [r4, #0]
 8008d58:	1c5a      	adds	r2, r3, #1
 8008d5a:	6022      	str	r2, [r4, #0]
 8008d5c:	701f      	strb	r7, [r3, #0]
 8008d5e:	6963      	ldr	r3, [r4, #20]
 8008d60:	4283      	cmp	r3, r0
 8008d62:	d004      	beq.n	8008d6e <__swbuf_r+0x76>
 8008d64:	89a3      	ldrh	r3, [r4, #12]
 8008d66:	07db      	lsls	r3, r3, #31
 8008d68:	d5e1      	bpl.n	8008d2e <__swbuf_r+0x36>
 8008d6a:	2d0a      	cmp	r5, #10
 8008d6c:	d1df      	bne.n	8008d2e <__swbuf_r+0x36>
 8008d6e:	0021      	movs	r1, r4
 8008d70:	0030      	movs	r0, r6
 8008d72:	f7ff fdd1 	bl	8008918 <_fflush_r>
 8008d76:	2800      	cmp	r0, #0
 8008d78:	d0d9      	beq.n	8008d2e <__swbuf_r+0x36>
 8008d7a:	e7d6      	b.n	8008d2a <__swbuf_r+0x32>

08008d7c <__swsetup_r>:
 8008d7c:	4b2d      	ldr	r3, [pc, #180]	@ (8008e34 <__swsetup_r+0xb8>)
 8008d7e:	b570      	push	{r4, r5, r6, lr}
 8008d80:	0005      	movs	r5, r0
 8008d82:	6818      	ldr	r0, [r3, #0]
 8008d84:	000c      	movs	r4, r1
 8008d86:	2800      	cmp	r0, #0
 8008d88:	d004      	beq.n	8008d94 <__swsetup_r+0x18>
 8008d8a:	6a03      	ldr	r3, [r0, #32]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d101      	bne.n	8008d94 <__swsetup_r+0x18>
 8008d90:	f7fe f99e 	bl	80070d0 <__sinit>
 8008d94:	230c      	movs	r3, #12
 8008d96:	5ee2      	ldrsh	r2, [r4, r3]
 8008d98:	0713      	lsls	r3, r2, #28
 8008d9a:	d423      	bmi.n	8008de4 <__swsetup_r+0x68>
 8008d9c:	06d3      	lsls	r3, r2, #27
 8008d9e:	d407      	bmi.n	8008db0 <__swsetup_r+0x34>
 8008da0:	2309      	movs	r3, #9
 8008da2:	602b      	str	r3, [r5, #0]
 8008da4:	2340      	movs	r3, #64	@ 0x40
 8008da6:	2001      	movs	r0, #1
 8008da8:	4313      	orrs	r3, r2
 8008daa:	81a3      	strh	r3, [r4, #12]
 8008dac:	4240      	negs	r0, r0
 8008dae:	e03a      	b.n	8008e26 <__swsetup_r+0xaa>
 8008db0:	0752      	lsls	r2, r2, #29
 8008db2:	d513      	bpl.n	8008ddc <__swsetup_r+0x60>
 8008db4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008db6:	2900      	cmp	r1, #0
 8008db8:	d008      	beq.n	8008dcc <__swsetup_r+0x50>
 8008dba:	0023      	movs	r3, r4
 8008dbc:	3344      	adds	r3, #68	@ 0x44
 8008dbe:	4299      	cmp	r1, r3
 8008dc0:	d002      	beq.n	8008dc8 <__swsetup_r+0x4c>
 8008dc2:	0028      	movs	r0, r5
 8008dc4:	f7ff f934 	bl	8008030 <_free_r>
 8008dc8:	2300      	movs	r3, #0
 8008dca:	6363      	str	r3, [r4, #52]	@ 0x34
 8008dcc:	2224      	movs	r2, #36	@ 0x24
 8008dce:	89a3      	ldrh	r3, [r4, #12]
 8008dd0:	4393      	bics	r3, r2
 8008dd2:	81a3      	strh	r3, [r4, #12]
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	6063      	str	r3, [r4, #4]
 8008dd8:	6923      	ldr	r3, [r4, #16]
 8008dda:	6023      	str	r3, [r4, #0]
 8008ddc:	2308      	movs	r3, #8
 8008dde:	89a2      	ldrh	r2, [r4, #12]
 8008de0:	4313      	orrs	r3, r2
 8008de2:	81a3      	strh	r3, [r4, #12]
 8008de4:	6923      	ldr	r3, [r4, #16]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d10b      	bne.n	8008e02 <__swsetup_r+0x86>
 8008dea:	21a0      	movs	r1, #160	@ 0xa0
 8008dec:	2280      	movs	r2, #128	@ 0x80
 8008dee:	89a3      	ldrh	r3, [r4, #12]
 8008df0:	0089      	lsls	r1, r1, #2
 8008df2:	0092      	lsls	r2, r2, #2
 8008df4:	400b      	ands	r3, r1
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d003      	beq.n	8008e02 <__swsetup_r+0x86>
 8008dfa:	0021      	movs	r1, r4
 8008dfc:	0028      	movs	r0, r5
 8008dfe:	f000 f88f 	bl	8008f20 <__smakebuf_r>
 8008e02:	230c      	movs	r3, #12
 8008e04:	5ee2      	ldrsh	r2, [r4, r3]
 8008e06:	2101      	movs	r1, #1
 8008e08:	0013      	movs	r3, r2
 8008e0a:	400b      	ands	r3, r1
 8008e0c:	420a      	tst	r2, r1
 8008e0e:	d00b      	beq.n	8008e28 <__swsetup_r+0xac>
 8008e10:	2300      	movs	r3, #0
 8008e12:	60a3      	str	r3, [r4, #8]
 8008e14:	6963      	ldr	r3, [r4, #20]
 8008e16:	425b      	negs	r3, r3
 8008e18:	61a3      	str	r3, [r4, #24]
 8008e1a:	2000      	movs	r0, #0
 8008e1c:	6923      	ldr	r3, [r4, #16]
 8008e1e:	4283      	cmp	r3, r0
 8008e20:	d101      	bne.n	8008e26 <__swsetup_r+0xaa>
 8008e22:	0613      	lsls	r3, r2, #24
 8008e24:	d4be      	bmi.n	8008da4 <__swsetup_r+0x28>
 8008e26:	bd70      	pop	{r4, r5, r6, pc}
 8008e28:	0791      	lsls	r1, r2, #30
 8008e2a:	d400      	bmi.n	8008e2e <__swsetup_r+0xb2>
 8008e2c:	6963      	ldr	r3, [r4, #20]
 8008e2e:	60a3      	str	r3, [r4, #8]
 8008e30:	e7f3      	b.n	8008e1a <__swsetup_r+0x9e>
 8008e32:	46c0      	nop			@ (mov r8, r8)
 8008e34:	20000064 	.word	0x20000064

08008e38 <_raise_r>:
 8008e38:	b570      	push	{r4, r5, r6, lr}
 8008e3a:	0004      	movs	r4, r0
 8008e3c:	000d      	movs	r5, r1
 8008e3e:	291f      	cmp	r1, #31
 8008e40:	d904      	bls.n	8008e4c <_raise_r+0x14>
 8008e42:	2316      	movs	r3, #22
 8008e44:	6003      	str	r3, [r0, #0]
 8008e46:	2001      	movs	r0, #1
 8008e48:	4240      	negs	r0, r0
 8008e4a:	bd70      	pop	{r4, r5, r6, pc}
 8008e4c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d004      	beq.n	8008e5c <_raise_r+0x24>
 8008e52:	008a      	lsls	r2, r1, #2
 8008e54:	189b      	adds	r3, r3, r2
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	2a00      	cmp	r2, #0
 8008e5a:	d108      	bne.n	8008e6e <_raise_r+0x36>
 8008e5c:	0020      	movs	r0, r4
 8008e5e:	f000 f831 	bl	8008ec4 <_getpid_r>
 8008e62:	002a      	movs	r2, r5
 8008e64:	0001      	movs	r1, r0
 8008e66:	0020      	movs	r0, r4
 8008e68:	f000 f81a 	bl	8008ea0 <_kill_r>
 8008e6c:	e7ed      	b.n	8008e4a <_raise_r+0x12>
 8008e6e:	2a01      	cmp	r2, #1
 8008e70:	d009      	beq.n	8008e86 <_raise_r+0x4e>
 8008e72:	1c51      	adds	r1, r2, #1
 8008e74:	d103      	bne.n	8008e7e <_raise_r+0x46>
 8008e76:	2316      	movs	r3, #22
 8008e78:	6003      	str	r3, [r0, #0]
 8008e7a:	2001      	movs	r0, #1
 8008e7c:	e7e5      	b.n	8008e4a <_raise_r+0x12>
 8008e7e:	2100      	movs	r1, #0
 8008e80:	0028      	movs	r0, r5
 8008e82:	6019      	str	r1, [r3, #0]
 8008e84:	4790      	blx	r2
 8008e86:	2000      	movs	r0, #0
 8008e88:	e7df      	b.n	8008e4a <_raise_r+0x12>
	...

08008e8c <raise>:
 8008e8c:	b510      	push	{r4, lr}
 8008e8e:	4b03      	ldr	r3, [pc, #12]	@ (8008e9c <raise+0x10>)
 8008e90:	0001      	movs	r1, r0
 8008e92:	6818      	ldr	r0, [r3, #0]
 8008e94:	f7ff ffd0 	bl	8008e38 <_raise_r>
 8008e98:	bd10      	pop	{r4, pc}
 8008e9a:	46c0      	nop			@ (mov r8, r8)
 8008e9c:	20000064 	.word	0x20000064

08008ea0 <_kill_r>:
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	b570      	push	{r4, r5, r6, lr}
 8008ea4:	4d06      	ldr	r5, [pc, #24]	@ (8008ec0 <_kill_r+0x20>)
 8008ea6:	0004      	movs	r4, r0
 8008ea8:	0008      	movs	r0, r1
 8008eaa:	0011      	movs	r1, r2
 8008eac:	602b      	str	r3, [r5, #0]
 8008eae:	f7f9 ff95 	bl	8002ddc <_kill>
 8008eb2:	1c43      	adds	r3, r0, #1
 8008eb4:	d103      	bne.n	8008ebe <_kill_r+0x1e>
 8008eb6:	682b      	ldr	r3, [r5, #0]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d000      	beq.n	8008ebe <_kill_r+0x1e>
 8008ebc:	6023      	str	r3, [r4, #0]
 8008ebe:	bd70      	pop	{r4, r5, r6, pc}
 8008ec0:	200014ac 	.word	0x200014ac

08008ec4 <_getpid_r>:
 8008ec4:	b510      	push	{r4, lr}
 8008ec6:	f7f9 ff83 	bl	8002dd0 <_getpid>
 8008eca:	bd10      	pop	{r4, pc}

08008ecc <__swhatbuf_r>:
 8008ecc:	b570      	push	{r4, r5, r6, lr}
 8008ece:	000e      	movs	r6, r1
 8008ed0:	001d      	movs	r5, r3
 8008ed2:	230e      	movs	r3, #14
 8008ed4:	5ec9      	ldrsh	r1, [r1, r3]
 8008ed6:	0014      	movs	r4, r2
 8008ed8:	b096      	sub	sp, #88	@ 0x58
 8008eda:	2900      	cmp	r1, #0
 8008edc:	da0c      	bge.n	8008ef8 <__swhatbuf_r+0x2c>
 8008ede:	89b2      	ldrh	r2, [r6, #12]
 8008ee0:	2380      	movs	r3, #128	@ 0x80
 8008ee2:	0011      	movs	r1, r2
 8008ee4:	4019      	ands	r1, r3
 8008ee6:	421a      	tst	r2, r3
 8008ee8:	d114      	bne.n	8008f14 <__swhatbuf_r+0x48>
 8008eea:	2380      	movs	r3, #128	@ 0x80
 8008eec:	00db      	lsls	r3, r3, #3
 8008eee:	2000      	movs	r0, #0
 8008ef0:	6029      	str	r1, [r5, #0]
 8008ef2:	6023      	str	r3, [r4, #0]
 8008ef4:	b016      	add	sp, #88	@ 0x58
 8008ef6:	bd70      	pop	{r4, r5, r6, pc}
 8008ef8:	466a      	mov	r2, sp
 8008efa:	f000 f853 	bl	8008fa4 <_fstat_r>
 8008efe:	2800      	cmp	r0, #0
 8008f00:	dbed      	blt.n	8008ede <__swhatbuf_r+0x12>
 8008f02:	23f0      	movs	r3, #240	@ 0xf0
 8008f04:	9901      	ldr	r1, [sp, #4]
 8008f06:	021b      	lsls	r3, r3, #8
 8008f08:	4019      	ands	r1, r3
 8008f0a:	4b04      	ldr	r3, [pc, #16]	@ (8008f1c <__swhatbuf_r+0x50>)
 8008f0c:	18c9      	adds	r1, r1, r3
 8008f0e:	424b      	negs	r3, r1
 8008f10:	4159      	adcs	r1, r3
 8008f12:	e7ea      	b.n	8008eea <__swhatbuf_r+0x1e>
 8008f14:	2100      	movs	r1, #0
 8008f16:	2340      	movs	r3, #64	@ 0x40
 8008f18:	e7e9      	b.n	8008eee <__swhatbuf_r+0x22>
 8008f1a:	46c0      	nop			@ (mov r8, r8)
 8008f1c:	ffffe000 	.word	0xffffe000

08008f20 <__smakebuf_r>:
 8008f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f22:	2602      	movs	r6, #2
 8008f24:	898b      	ldrh	r3, [r1, #12]
 8008f26:	0005      	movs	r5, r0
 8008f28:	000c      	movs	r4, r1
 8008f2a:	b085      	sub	sp, #20
 8008f2c:	4233      	tst	r3, r6
 8008f2e:	d007      	beq.n	8008f40 <__smakebuf_r+0x20>
 8008f30:	0023      	movs	r3, r4
 8008f32:	3347      	adds	r3, #71	@ 0x47
 8008f34:	6023      	str	r3, [r4, #0]
 8008f36:	6123      	str	r3, [r4, #16]
 8008f38:	2301      	movs	r3, #1
 8008f3a:	6163      	str	r3, [r4, #20]
 8008f3c:	b005      	add	sp, #20
 8008f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f40:	ab03      	add	r3, sp, #12
 8008f42:	aa02      	add	r2, sp, #8
 8008f44:	f7ff ffc2 	bl	8008ecc <__swhatbuf_r>
 8008f48:	9f02      	ldr	r7, [sp, #8]
 8008f4a:	9001      	str	r0, [sp, #4]
 8008f4c:	0039      	movs	r1, r7
 8008f4e:	0028      	movs	r0, r5
 8008f50:	f7fd fb3c 	bl	80065cc <_malloc_r>
 8008f54:	2800      	cmp	r0, #0
 8008f56:	d108      	bne.n	8008f6a <__smakebuf_r+0x4a>
 8008f58:	220c      	movs	r2, #12
 8008f5a:	5ea3      	ldrsh	r3, [r4, r2]
 8008f5c:	059a      	lsls	r2, r3, #22
 8008f5e:	d4ed      	bmi.n	8008f3c <__smakebuf_r+0x1c>
 8008f60:	2203      	movs	r2, #3
 8008f62:	4393      	bics	r3, r2
 8008f64:	431e      	orrs	r6, r3
 8008f66:	81a6      	strh	r6, [r4, #12]
 8008f68:	e7e2      	b.n	8008f30 <__smakebuf_r+0x10>
 8008f6a:	2380      	movs	r3, #128	@ 0x80
 8008f6c:	89a2      	ldrh	r2, [r4, #12]
 8008f6e:	6020      	str	r0, [r4, #0]
 8008f70:	4313      	orrs	r3, r2
 8008f72:	81a3      	strh	r3, [r4, #12]
 8008f74:	9b03      	ldr	r3, [sp, #12]
 8008f76:	6120      	str	r0, [r4, #16]
 8008f78:	6167      	str	r7, [r4, #20]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00c      	beq.n	8008f98 <__smakebuf_r+0x78>
 8008f7e:	0028      	movs	r0, r5
 8008f80:	230e      	movs	r3, #14
 8008f82:	5ee1      	ldrsh	r1, [r4, r3]
 8008f84:	f000 f820 	bl	8008fc8 <_isatty_r>
 8008f88:	2800      	cmp	r0, #0
 8008f8a:	d005      	beq.n	8008f98 <__smakebuf_r+0x78>
 8008f8c:	2303      	movs	r3, #3
 8008f8e:	89a2      	ldrh	r2, [r4, #12]
 8008f90:	439a      	bics	r2, r3
 8008f92:	3b02      	subs	r3, #2
 8008f94:	4313      	orrs	r3, r2
 8008f96:	81a3      	strh	r3, [r4, #12]
 8008f98:	89a3      	ldrh	r3, [r4, #12]
 8008f9a:	9a01      	ldr	r2, [sp, #4]
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	81a3      	strh	r3, [r4, #12]
 8008fa0:	e7cc      	b.n	8008f3c <__smakebuf_r+0x1c>
	...

08008fa4 <_fstat_r>:
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	b570      	push	{r4, r5, r6, lr}
 8008fa8:	4d06      	ldr	r5, [pc, #24]	@ (8008fc4 <_fstat_r+0x20>)
 8008faa:	0004      	movs	r4, r0
 8008fac:	0008      	movs	r0, r1
 8008fae:	0011      	movs	r1, r2
 8008fb0:	602b      	str	r3, [r5, #0]
 8008fb2:	f7f9 ff73 	bl	8002e9c <_fstat>
 8008fb6:	1c43      	adds	r3, r0, #1
 8008fb8:	d103      	bne.n	8008fc2 <_fstat_r+0x1e>
 8008fba:	682b      	ldr	r3, [r5, #0]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d000      	beq.n	8008fc2 <_fstat_r+0x1e>
 8008fc0:	6023      	str	r3, [r4, #0]
 8008fc2:	bd70      	pop	{r4, r5, r6, pc}
 8008fc4:	200014ac 	.word	0x200014ac

08008fc8 <_isatty_r>:
 8008fc8:	2300      	movs	r3, #0
 8008fca:	b570      	push	{r4, r5, r6, lr}
 8008fcc:	4d06      	ldr	r5, [pc, #24]	@ (8008fe8 <_isatty_r+0x20>)
 8008fce:	0004      	movs	r4, r0
 8008fd0:	0008      	movs	r0, r1
 8008fd2:	602b      	str	r3, [r5, #0]
 8008fd4:	f7f9 ff70 	bl	8002eb8 <_isatty>
 8008fd8:	1c43      	adds	r3, r0, #1
 8008fda:	d103      	bne.n	8008fe4 <_isatty_r+0x1c>
 8008fdc:	682b      	ldr	r3, [r5, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d000      	beq.n	8008fe4 <_isatty_r+0x1c>
 8008fe2:	6023      	str	r3, [r4, #0]
 8008fe4:	bd70      	pop	{r4, r5, r6, pc}
 8008fe6:	46c0      	nop			@ (mov r8, r8)
 8008fe8:	200014ac 	.word	0x200014ac

08008fec <_init>:
 8008fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fee:	46c0      	nop			@ (mov r8, r8)
 8008ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ff2:	bc08      	pop	{r3}
 8008ff4:	469e      	mov	lr, r3
 8008ff6:	4770      	bx	lr

08008ff8 <_fini>:
 8008ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ffa:	46c0      	nop			@ (mov r8, r8)
 8008ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ffe:	bc08      	pop	{r3}
 8009000:	469e      	mov	lr, r3
 8009002:	4770      	bx	lr


G1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008974  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  08008a38  08008a38  00009a38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e78  08008e78  0000a220  2**0
                  CONTENTS
  4 .ARM          00000000  08008e78  08008e78  0000a220  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008e78  08008e78  0000a220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e78  08008e78  00009e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e7c  08008e7c  00009e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000220  20000000  08008e80  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001274  20000220  080090a0  0000a220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001494  080090a0  0000a494  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a220  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001187a  00000000  00000000  0000a248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002acc  00000000  00000000  0001bac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  0001e590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000df9  00000000  00000000  0001f780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004385  00000000  00000000  00020579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014aad  00000000  00000000  000248fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007d8f1  00000000  00000000  000393ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6c9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005020  00000000  00000000  000b6ce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000bbd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000220 	.word	0x20000220
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008a1c 	.word	0x08008a1c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000224 	.word	0x20000224
 8000104:	08008a1c 	.word	0x08008a1c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ff69 	bl	8001314 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fea9 	bl	80011a4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff5b 	bl	8001314 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff51 	bl	8001314 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fed3 	bl	800122c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fec9 	bl	800122c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_dadd>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	4657      	mov	r7, sl
 80004ac:	464e      	mov	r6, r9
 80004ae:	4645      	mov	r5, r8
 80004b0:	46de      	mov	lr, fp
 80004b2:	b5e0      	push	{r5, r6, r7, lr}
 80004b4:	b083      	sub	sp, #12
 80004b6:	9000      	str	r0, [sp, #0]
 80004b8:	9101      	str	r1, [sp, #4]
 80004ba:	030c      	lsls	r4, r1, #12
 80004bc:	004f      	lsls	r7, r1, #1
 80004be:	0fce      	lsrs	r6, r1, #31
 80004c0:	0a61      	lsrs	r1, r4, #9
 80004c2:	9c00      	ldr	r4, [sp, #0]
 80004c4:	031d      	lsls	r5, r3, #12
 80004c6:	0f64      	lsrs	r4, r4, #29
 80004c8:	430c      	orrs	r4, r1
 80004ca:	9900      	ldr	r1, [sp, #0]
 80004cc:	9200      	str	r2, [sp, #0]
 80004ce:	9301      	str	r3, [sp, #4]
 80004d0:	00c8      	lsls	r0, r1, #3
 80004d2:	0059      	lsls	r1, r3, #1
 80004d4:	0d4b      	lsrs	r3, r1, #21
 80004d6:	4699      	mov	r9, r3
 80004d8:	9a00      	ldr	r2, [sp, #0]
 80004da:	9b01      	ldr	r3, [sp, #4]
 80004dc:	0a6d      	lsrs	r5, r5, #9
 80004de:	0fd9      	lsrs	r1, r3, #31
 80004e0:	0f53      	lsrs	r3, r2, #29
 80004e2:	432b      	orrs	r3, r5
 80004e4:	469a      	mov	sl, r3
 80004e6:	9b00      	ldr	r3, [sp, #0]
 80004e8:	0d7f      	lsrs	r7, r7, #21
 80004ea:	00da      	lsls	r2, r3, #3
 80004ec:	4694      	mov	ip, r2
 80004ee:	464a      	mov	r2, r9
 80004f0:	46b0      	mov	r8, r6
 80004f2:	1aba      	subs	r2, r7, r2
 80004f4:	428e      	cmp	r6, r1
 80004f6:	d100      	bne.n	80004fa <__aeabi_dadd+0x52>
 80004f8:	e0b0      	b.n	800065c <__aeabi_dadd+0x1b4>
 80004fa:	2a00      	cmp	r2, #0
 80004fc:	dc00      	bgt.n	8000500 <__aeabi_dadd+0x58>
 80004fe:	e078      	b.n	80005f2 <__aeabi_dadd+0x14a>
 8000500:	4649      	mov	r1, r9
 8000502:	2900      	cmp	r1, #0
 8000504:	d100      	bne.n	8000508 <__aeabi_dadd+0x60>
 8000506:	e0e9      	b.n	80006dc <__aeabi_dadd+0x234>
 8000508:	49c9      	ldr	r1, [pc, #804]	@ (8000830 <__aeabi_dadd+0x388>)
 800050a:	428f      	cmp	r7, r1
 800050c:	d100      	bne.n	8000510 <__aeabi_dadd+0x68>
 800050e:	e195      	b.n	800083c <__aeabi_dadd+0x394>
 8000510:	2501      	movs	r5, #1
 8000512:	2a38      	cmp	r2, #56	@ 0x38
 8000514:	dc16      	bgt.n	8000544 <__aeabi_dadd+0x9c>
 8000516:	2180      	movs	r1, #128	@ 0x80
 8000518:	4653      	mov	r3, sl
 800051a:	0409      	lsls	r1, r1, #16
 800051c:	430b      	orrs	r3, r1
 800051e:	469a      	mov	sl, r3
 8000520:	2a1f      	cmp	r2, #31
 8000522:	dd00      	ble.n	8000526 <__aeabi_dadd+0x7e>
 8000524:	e1e7      	b.n	80008f6 <__aeabi_dadd+0x44e>
 8000526:	2120      	movs	r1, #32
 8000528:	4655      	mov	r5, sl
 800052a:	1a8b      	subs	r3, r1, r2
 800052c:	4661      	mov	r1, ip
 800052e:	409d      	lsls	r5, r3
 8000530:	40d1      	lsrs	r1, r2
 8000532:	430d      	orrs	r5, r1
 8000534:	4661      	mov	r1, ip
 8000536:	4099      	lsls	r1, r3
 8000538:	1e4b      	subs	r3, r1, #1
 800053a:	4199      	sbcs	r1, r3
 800053c:	4653      	mov	r3, sl
 800053e:	40d3      	lsrs	r3, r2
 8000540:	430d      	orrs	r5, r1
 8000542:	1ae4      	subs	r4, r4, r3
 8000544:	1b45      	subs	r5, r0, r5
 8000546:	42a8      	cmp	r0, r5
 8000548:	4180      	sbcs	r0, r0
 800054a:	4240      	negs	r0, r0
 800054c:	1a24      	subs	r4, r4, r0
 800054e:	0223      	lsls	r3, r4, #8
 8000550:	d400      	bmi.n	8000554 <__aeabi_dadd+0xac>
 8000552:	e10f      	b.n	8000774 <__aeabi_dadd+0x2cc>
 8000554:	0264      	lsls	r4, r4, #9
 8000556:	0a64      	lsrs	r4, r4, #9
 8000558:	2c00      	cmp	r4, #0
 800055a:	d100      	bne.n	800055e <__aeabi_dadd+0xb6>
 800055c:	e139      	b.n	80007d2 <__aeabi_dadd+0x32a>
 800055e:	0020      	movs	r0, r4
 8000560:	f001 fe5e 	bl	8002220 <__clzsi2>
 8000564:	0003      	movs	r3, r0
 8000566:	3b08      	subs	r3, #8
 8000568:	2120      	movs	r1, #32
 800056a:	0028      	movs	r0, r5
 800056c:	1aca      	subs	r2, r1, r3
 800056e:	40d0      	lsrs	r0, r2
 8000570:	409c      	lsls	r4, r3
 8000572:	0002      	movs	r2, r0
 8000574:	409d      	lsls	r5, r3
 8000576:	4322      	orrs	r2, r4
 8000578:	429f      	cmp	r7, r3
 800057a:	dd00      	ble.n	800057e <__aeabi_dadd+0xd6>
 800057c:	e173      	b.n	8000866 <__aeabi_dadd+0x3be>
 800057e:	1bd8      	subs	r0, r3, r7
 8000580:	3001      	adds	r0, #1
 8000582:	1a09      	subs	r1, r1, r0
 8000584:	002c      	movs	r4, r5
 8000586:	408d      	lsls	r5, r1
 8000588:	40c4      	lsrs	r4, r0
 800058a:	1e6b      	subs	r3, r5, #1
 800058c:	419d      	sbcs	r5, r3
 800058e:	0013      	movs	r3, r2
 8000590:	40c2      	lsrs	r2, r0
 8000592:	408b      	lsls	r3, r1
 8000594:	4325      	orrs	r5, r4
 8000596:	2700      	movs	r7, #0
 8000598:	0014      	movs	r4, r2
 800059a:	431d      	orrs	r5, r3
 800059c:	076b      	lsls	r3, r5, #29
 800059e:	d009      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a0:	230f      	movs	r3, #15
 80005a2:	402b      	ands	r3, r5
 80005a4:	2b04      	cmp	r3, #4
 80005a6:	d005      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a8:	1d2b      	adds	r3, r5, #4
 80005aa:	42ab      	cmp	r3, r5
 80005ac:	41ad      	sbcs	r5, r5
 80005ae:	426d      	negs	r5, r5
 80005b0:	1964      	adds	r4, r4, r5
 80005b2:	001d      	movs	r5, r3
 80005b4:	0223      	lsls	r3, r4, #8
 80005b6:	d400      	bmi.n	80005ba <__aeabi_dadd+0x112>
 80005b8:	e12d      	b.n	8000816 <__aeabi_dadd+0x36e>
 80005ba:	4a9d      	ldr	r2, [pc, #628]	@ (8000830 <__aeabi_dadd+0x388>)
 80005bc:	3701      	adds	r7, #1
 80005be:	4297      	cmp	r7, r2
 80005c0:	d100      	bne.n	80005c4 <__aeabi_dadd+0x11c>
 80005c2:	e0d3      	b.n	800076c <__aeabi_dadd+0x2c4>
 80005c4:	4646      	mov	r6, r8
 80005c6:	499b      	ldr	r1, [pc, #620]	@ (8000834 <__aeabi_dadd+0x38c>)
 80005c8:	08ed      	lsrs	r5, r5, #3
 80005ca:	4021      	ands	r1, r4
 80005cc:	074a      	lsls	r2, r1, #29
 80005ce:	432a      	orrs	r2, r5
 80005d0:	057c      	lsls	r4, r7, #21
 80005d2:	024d      	lsls	r5, r1, #9
 80005d4:	0b2d      	lsrs	r5, r5, #12
 80005d6:	0d64      	lsrs	r4, r4, #21
 80005d8:	0524      	lsls	r4, r4, #20
 80005da:	432c      	orrs	r4, r5
 80005dc:	07f6      	lsls	r6, r6, #31
 80005de:	4334      	orrs	r4, r6
 80005e0:	0010      	movs	r0, r2
 80005e2:	0021      	movs	r1, r4
 80005e4:	b003      	add	sp, #12
 80005e6:	bcf0      	pop	{r4, r5, r6, r7}
 80005e8:	46bb      	mov	fp, r7
 80005ea:	46b2      	mov	sl, r6
 80005ec:	46a9      	mov	r9, r5
 80005ee:	46a0      	mov	r8, r4
 80005f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f2:	2a00      	cmp	r2, #0
 80005f4:	d100      	bne.n	80005f8 <__aeabi_dadd+0x150>
 80005f6:	e084      	b.n	8000702 <__aeabi_dadd+0x25a>
 80005f8:	464a      	mov	r2, r9
 80005fa:	1bd2      	subs	r2, r2, r7
 80005fc:	2f00      	cmp	r7, #0
 80005fe:	d000      	beq.n	8000602 <__aeabi_dadd+0x15a>
 8000600:	e16d      	b.n	80008de <__aeabi_dadd+0x436>
 8000602:	0025      	movs	r5, r4
 8000604:	4305      	orrs	r5, r0
 8000606:	d100      	bne.n	800060a <__aeabi_dadd+0x162>
 8000608:	e127      	b.n	800085a <__aeabi_dadd+0x3b2>
 800060a:	1e56      	subs	r6, r2, #1
 800060c:	2a01      	cmp	r2, #1
 800060e:	d100      	bne.n	8000612 <__aeabi_dadd+0x16a>
 8000610:	e23b      	b.n	8000a8a <__aeabi_dadd+0x5e2>
 8000612:	4d87      	ldr	r5, [pc, #540]	@ (8000830 <__aeabi_dadd+0x388>)
 8000614:	42aa      	cmp	r2, r5
 8000616:	d100      	bne.n	800061a <__aeabi_dadd+0x172>
 8000618:	e26a      	b.n	8000af0 <__aeabi_dadd+0x648>
 800061a:	2501      	movs	r5, #1
 800061c:	2e38      	cmp	r6, #56	@ 0x38
 800061e:	dc12      	bgt.n	8000646 <__aeabi_dadd+0x19e>
 8000620:	0032      	movs	r2, r6
 8000622:	2a1f      	cmp	r2, #31
 8000624:	dd00      	ble.n	8000628 <__aeabi_dadd+0x180>
 8000626:	e1f8      	b.n	8000a1a <__aeabi_dadd+0x572>
 8000628:	2620      	movs	r6, #32
 800062a:	0025      	movs	r5, r4
 800062c:	1ab6      	subs	r6, r6, r2
 800062e:	0007      	movs	r7, r0
 8000630:	4653      	mov	r3, sl
 8000632:	40b0      	lsls	r0, r6
 8000634:	40d4      	lsrs	r4, r2
 8000636:	40b5      	lsls	r5, r6
 8000638:	40d7      	lsrs	r7, r2
 800063a:	1e46      	subs	r6, r0, #1
 800063c:	41b0      	sbcs	r0, r6
 800063e:	1b1b      	subs	r3, r3, r4
 8000640:	469a      	mov	sl, r3
 8000642:	433d      	orrs	r5, r7
 8000644:	4305      	orrs	r5, r0
 8000646:	4662      	mov	r2, ip
 8000648:	1b55      	subs	r5, r2, r5
 800064a:	45ac      	cmp	ip, r5
 800064c:	4192      	sbcs	r2, r2
 800064e:	4653      	mov	r3, sl
 8000650:	4252      	negs	r2, r2
 8000652:	000e      	movs	r6, r1
 8000654:	464f      	mov	r7, r9
 8000656:	4688      	mov	r8, r1
 8000658:	1a9c      	subs	r4, r3, r2
 800065a:	e778      	b.n	800054e <__aeabi_dadd+0xa6>
 800065c:	2a00      	cmp	r2, #0
 800065e:	dc00      	bgt.n	8000662 <__aeabi_dadd+0x1ba>
 8000660:	e08e      	b.n	8000780 <__aeabi_dadd+0x2d8>
 8000662:	4649      	mov	r1, r9
 8000664:	2900      	cmp	r1, #0
 8000666:	d175      	bne.n	8000754 <__aeabi_dadd+0x2ac>
 8000668:	4661      	mov	r1, ip
 800066a:	4653      	mov	r3, sl
 800066c:	4319      	orrs	r1, r3
 800066e:	d100      	bne.n	8000672 <__aeabi_dadd+0x1ca>
 8000670:	e0f6      	b.n	8000860 <__aeabi_dadd+0x3b8>
 8000672:	1e51      	subs	r1, r2, #1
 8000674:	2a01      	cmp	r2, #1
 8000676:	d100      	bne.n	800067a <__aeabi_dadd+0x1d2>
 8000678:	e191      	b.n	800099e <__aeabi_dadd+0x4f6>
 800067a:	4d6d      	ldr	r5, [pc, #436]	@ (8000830 <__aeabi_dadd+0x388>)
 800067c:	42aa      	cmp	r2, r5
 800067e:	d100      	bne.n	8000682 <__aeabi_dadd+0x1da>
 8000680:	e0dc      	b.n	800083c <__aeabi_dadd+0x394>
 8000682:	2501      	movs	r5, #1
 8000684:	2938      	cmp	r1, #56	@ 0x38
 8000686:	dc14      	bgt.n	80006b2 <__aeabi_dadd+0x20a>
 8000688:	000a      	movs	r2, r1
 800068a:	2a1f      	cmp	r2, #31
 800068c:	dd00      	ble.n	8000690 <__aeabi_dadd+0x1e8>
 800068e:	e1a2      	b.n	80009d6 <__aeabi_dadd+0x52e>
 8000690:	2120      	movs	r1, #32
 8000692:	4653      	mov	r3, sl
 8000694:	1a89      	subs	r1, r1, r2
 8000696:	408b      	lsls	r3, r1
 8000698:	001d      	movs	r5, r3
 800069a:	4663      	mov	r3, ip
 800069c:	40d3      	lsrs	r3, r2
 800069e:	431d      	orrs	r5, r3
 80006a0:	4663      	mov	r3, ip
 80006a2:	408b      	lsls	r3, r1
 80006a4:	0019      	movs	r1, r3
 80006a6:	1e4b      	subs	r3, r1, #1
 80006a8:	4199      	sbcs	r1, r3
 80006aa:	4653      	mov	r3, sl
 80006ac:	40d3      	lsrs	r3, r2
 80006ae:	430d      	orrs	r5, r1
 80006b0:	18e4      	adds	r4, r4, r3
 80006b2:	182d      	adds	r5, r5, r0
 80006b4:	4285      	cmp	r5, r0
 80006b6:	4180      	sbcs	r0, r0
 80006b8:	4240      	negs	r0, r0
 80006ba:	1824      	adds	r4, r4, r0
 80006bc:	0223      	lsls	r3, r4, #8
 80006be:	d559      	bpl.n	8000774 <__aeabi_dadd+0x2cc>
 80006c0:	4b5b      	ldr	r3, [pc, #364]	@ (8000830 <__aeabi_dadd+0x388>)
 80006c2:	3701      	adds	r7, #1
 80006c4:	429f      	cmp	r7, r3
 80006c6:	d051      	beq.n	800076c <__aeabi_dadd+0x2c4>
 80006c8:	2101      	movs	r1, #1
 80006ca:	4b5a      	ldr	r3, [pc, #360]	@ (8000834 <__aeabi_dadd+0x38c>)
 80006cc:	086a      	lsrs	r2, r5, #1
 80006ce:	401c      	ands	r4, r3
 80006d0:	4029      	ands	r1, r5
 80006d2:	430a      	orrs	r2, r1
 80006d4:	07e5      	lsls	r5, r4, #31
 80006d6:	4315      	orrs	r5, r2
 80006d8:	0864      	lsrs	r4, r4, #1
 80006da:	e75f      	b.n	800059c <__aeabi_dadd+0xf4>
 80006dc:	4661      	mov	r1, ip
 80006de:	4653      	mov	r3, sl
 80006e0:	4319      	orrs	r1, r3
 80006e2:	d100      	bne.n	80006e6 <__aeabi_dadd+0x23e>
 80006e4:	e0bc      	b.n	8000860 <__aeabi_dadd+0x3b8>
 80006e6:	1e51      	subs	r1, r2, #1
 80006e8:	2a01      	cmp	r2, #1
 80006ea:	d100      	bne.n	80006ee <__aeabi_dadd+0x246>
 80006ec:	e164      	b.n	80009b8 <__aeabi_dadd+0x510>
 80006ee:	4d50      	ldr	r5, [pc, #320]	@ (8000830 <__aeabi_dadd+0x388>)
 80006f0:	42aa      	cmp	r2, r5
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dadd+0x24e>
 80006f4:	e16a      	b.n	80009cc <__aeabi_dadd+0x524>
 80006f6:	2501      	movs	r5, #1
 80006f8:	2938      	cmp	r1, #56	@ 0x38
 80006fa:	dd00      	ble.n	80006fe <__aeabi_dadd+0x256>
 80006fc:	e722      	b.n	8000544 <__aeabi_dadd+0x9c>
 80006fe:	000a      	movs	r2, r1
 8000700:	e70e      	b.n	8000520 <__aeabi_dadd+0x78>
 8000702:	4a4d      	ldr	r2, [pc, #308]	@ (8000838 <__aeabi_dadd+0x390>)
 8000704:	1c7d      	adds	r5, r7, #1
 8000706:	4215      	tst	r5, r2
 8000708:	d000      	beq.n	800070c <__aeabi_dadd+0x264>
 800070a:	e0d0      	b.n	80008ae <__aeabi_dadd+0x406>
 800070c:	0025      	movs	r5, r4
 800070e:	4662      	mov	r2, ip
 8000710:	4653      	mov	r3, sl
 8000712:	4305      	orrs	r5, r0
 8000714:	431a      	orrs	r2, r3
 8000716:	2f00      	cmp	r7, #0
 8000718:	d000      	beq.n	800071c <__aeabi_dadd+0x274>
 800071a:	e137      	b.n	800098c <__aeabi_dadd+0x4e4>
 800071c:	2d00      	cmp	r5, #0
 800071e:	d100      	bne.n	8000722 <__aeabi_dadd+0x27a>
 8000720:	e1a8      	b.n	8000a74 <__aeabi_dadd+0x5cc>
 8000722:	2a00      	cmp	r2, #0
 8000724:	d100      	bne.n	8000728 <__aeabi_dadd+0x280>
 8000726:	e16a      	b.n	80009fe <__aeabi_dadd+0x556>
 8000728:	4663      	mov	r3, ip
 800072a:	1ac5      	subs	r5, r0, r3
 800072c:	4653      	mov	r3, sl
 800072e:	1ae2      	subs	r2, r4, r3
 8000730:	42a8      	cmp	r0, r5
 8000732:	419b      	sbcs	r3, r3
 8000734:	425b      	negs	r3, r3
 8000736:	1ad3      	subs	r3, r2, r3
 8000738:	021a      	lsls	r2, r3, #8
 800073a:	d400      	bmi.n	800073e <__aeabi_dadd+0x296>
 800073c:	e203      	b.n	8000b46 <__aeabi_dadd+0x69e>
 800073e:	4663      	mov	r3, ip
 8000740:	1a1d      	subs	r5, r3, r0
 8000742:	45ac      	cmp	ip, r5
 8000744:	4192      	sbcs	r2, r2
 8000746:	4653      	mov	r3, sl
 8000748:	4252      	negs	r2, r2
 800074a:	1b1c      	subs	r4, r3, r4
 800074c:	000e      	movs	r6, r1
 800074e:	4688      	mov	r8, r1
 8000750:	1aa4      	subs	r4, r4, r2
 8000752:	e723      	b.n	800059c <__aeabi_dadd+0xf4>
 8000754:	4936      	ldr	r1, [pc, #216]	@ (8000830 <__aeabi_dadd+0x388>)
 8000756:	428f      	cmp	r7, r1
 8000758:	d070      	beq.n	800083c <__aeabi_dadd+0x394>
 800075a:	2501      	movs	r5, #1
 800075c:	2a38      	cmp	r2, #56	@ 0x38
 800075e:	dca8      	bgt.n	80006b2 <__aeabi_dadd+0x20a>
 8000760:	2180      	movs	r1, #128	@ 0x80
 8000762:	4653      	mov	r3, sl
 8000764:	0409      	lsls	r1, r1, #16
 8000766:	430b      	orrs	r3, r1
 8000768:	469a      	mov	sl, r3
 800076a:	e78e      	b.n	800068a <__aeabi_dadd+0x1e2>
 800076c:	003c      	movs	r4, r7
 800076e:	2500      	movs	r5, #0
 8000770:	2200      	movs	r2, #0
 8000772:	e731      	b.n	80005d8 <__aeabi_dadd+0x130>
 8000774:	2307      	movs	r3, #7
 8000776:	402b      	ands	r3, r5
 8000778:	2b00      	cmp	r3, #0
 800077a:	d000      	beq.n	800077e <__aeabi_dadd+0x2d6>
 800077c:	e710      	b.n	80005a0 <__aeabi_dadd+0xf8>
 800077e:	e093      	b.n	80008a8 <__aeabi_dadd+0x400>
 8000780:	2a00      	cmp	r2, #0
 8000782:	d074      	beq.n	800086e <__aeabi_dadd+0x3c6>
 8000784:	464a      	mov	r2, r9
 8000786:	1bd2      	subs	r2, r2, r7
 8000788:	2f00      	cmp	r7, #0
 800078a:	d100      	bne.n	800078e <__aeabi_dadd+0x2e6>
 800078c:	e0c7      	b.n	800091e <__aeabi_dadd+0x476>
 800078e:	4928      	ldr	r1, [pc, #160]	@ (8000830 <__aeabi_dadd+0x388>)
 8000790:	4589      	cmp	r9, r1
 8000792:	d100      	bne.n	8000796 <__aeabi_dadd+0x2ee>
 8000794:	e185      	b.n	8000aa2 <__aeabi_dadd+0x5fa>
 8000796:	2501      	movs	r5, #1
 8000798:	2a38      	cmp	r2, #56	@ 0x38
 800079a:	dc12      	bgt.n	80007c2 <__aeabi_dadd+0x31a>
 800079c:	2180      	movs	r1, #128	@ 0x80
 800079e:	0409      	lsls	r1, r1, #16
 80007a0:	430c      	orrs	r4, r1
 80007a2:	2a1f      	cmp	r2, #31
 80007a4:	dd00      	ble.n	80007a8 <__aeabi_dadd+0x300>
 80007a6:	e1ab      	b.n	8000b00 <__aeabi_dadd+0x658>
 80007a8:	2120      	movs	r1, #32
 80007aa:	0025      	movs	r5, r4
 80007ac:	1a89      	subs	r1, r1, r2
 80007ae:	0007      	movs	r7, r0
 80007b0:	4088      	lsls	r0, r1
 80007b2:	408d      	lsls	r5, r1
 80007b4:	40d7      	lsrs	r7, r2
 80007b6:	1e41      	subs	r1, r0, #1
 80007b8:	4188      	sbcs	r0, r1
 80007ba:	40d4      	lsrs	r4, r2
 80007bc:	433d      	orrs	r5, r7
 80007be:	4305      	orrs	r5, r0
 80007c0:	44a2      	add	sl, r4
 80007c2:	4465      	add	r5, ip
 80007c4:	4565      	cmp	r5, ip
 80007c6:	4192      	sbcs	r2, r2
 80007c8:	4252      	negs	r2, r2
 80007ca:	4452      	add	r2, sl
 80007cc:	0014      	movs	r4, r2
 80007ce:	464f      	mov	r7, r9
 80007d0:	e774      	b.n	80006bc <__aeabi_dadd+0x214>
 80007d2:	0028      	movs	r0, r5
 80007d4:	f001 fd24 	bl	8002220 <__clzsi2>
 80007d8:	0003      	movs	r3, r0
 80007da:	3318      	adds	r3, #24
 80007dc:	2b1f      	cmp	r3, #31
 80007de:	dc00      	bgt.n	80007e2 <__aeabi_dadd+0x33a>
 80007e0:	e6c2      	b.n	8000568 <__aeabi_dadd+0xc0>
 80007e2:	002a      	movs	r2, r5
 80007e4:	3808      	subs	r0, #8
 80007e6:	4082      	lsls	r2, r0
 80007e8:	429f      	cmp	r7, r3
 80007ea:	dd00      	ble.n	80007ee <__aeabi_dadd+0x346>
 80007ec:	e0a9      	b.n	8000942 <__aeabi_dadd+0x49a>
 80007ee:	1bdb      	subs	r3, r3, r7
 80007f0:	1c58      	adds	r0, r3, #1
 80007f2:	281f      	cmp	r0, #31
 80007f4:	dc00      	bgt.n	80007f8 <__aeabi_dadd+0x350>
 80007f6:	e1ac      	b.n	8000b52 <__aeabi_dadd+0x6aa>
 80007f8:	0015      	movs	r5, r2
 80007fa:	3b1f      	subs	r3, #31
 80007fc:	40dd      	lsrs	r5, r3
 80007fe:	2820      	cmp	r0, #32
 8000800:	d005      	beq.n	800080e <__aeabi_dadd+0x366>
 8000802:	2340      	movs	r3, #64	@ 0x40
 8000804:	1a1b      	subs	r3, r3, r0
 8000806:	409a      	lsls	r2, r3
 8000808:	1e53      	subs	r3, r2, #1
 800080a:	419a      	sbcs	r2, r3
 800080c:	4315      	orrs	r5, r2
 800080e:	2307      	movs	r3, #7
 8000810:	2700      	movs	r7, #0
 8000812:	402b      	ands	r3, r5
 8000814:	e7b0      	b.n	8000778 <__aeabi_dadd+0x2d0>
 8000816:	08ed      	lsrs	r5, r5, #3
 8000818:	4b05      	ldr	r3, [pc, #20]	@ (8000830 <__aeabi_dadd+0x388>)
 800081a:	0762      	lsls	r2, r4, #29
 800081c:	432a      	orrs	r2, r5
 800081e:	08e4      	lsrs	r4, r4, #3
 8000820:	429f      	cmp	r7, r3
 8000822:	d00f      	beq.n	8000844 <__aeabi_dadd+0x39c>
 8000824:	0324      	lsls	r4, r4, #12
 8000826:	0b25      	lsrs	r5, r4, #12
 8000828:	057c      	lsls	r4, r7, #21
 800082a:	0d64      	lsrs	r4, r4, #21
 800082c:	e6d4      	b.n	80005d8 <__aeabi_dadd+0x130>
 800082e:	46c0      	nop			@ (mov r8, r8)
 8000830:	000007ff 	.word	0x000007ff
 8000834:	ff7fffff 	.word	0xff7fffff
 8000838:	000007fe 	.word	0x000007fe
 800083c:	08c0      	lsrs	r0, r0, #3
 800083e:	0762      	lsls	r2, r4, #29
 8000840:	4302      	orrs	r2, r0
 8000842:	08e4      	lsrs	r4, r4, #3
 8000844:	0013      	movs	r3, r2
 8000846:	4323      	orrs	r3, r4
 8000848:	d100      	bne.n	800084c <__aeabi_dadd+0x3a4>
 800084a:	e186      	b.n	8000b5a <__aeabi_dadd+0x6b2>
 800084c:	2580      	movs	r5, #128	@ 0x80
 800084e:	032d      	lsls	r5, r5, #12
 8000850:	4325      	orrs	r5, r4
 8000852:	032d      	lsls	r5, r5, #12
 8000854:	4cc3      	ldr	r4, [pc, #780]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000856:	0b2d      	lsrs	r5, r5, #12
 8000858:	e6be      	b.n	80005d8 <__aeabi_dadd+0x130>
 800085a:	4660      	mov	r0, ip
 800085c:	4654      	mov	r4, sl
 800085e:	000e      	movs	r6, r1
 8000860:	0017      	movs	r7, r2
 8000862:	08c5      	lsrs	r5, r0, #3
 8000864:	e7d8      	b.n	8000818 <__aeabi_dadd+0x370>
 8000866:	4cc0      	ldr	r4, [pc, #768]	@ (8000b68 <__aeabi_dadd+0x6c0>)
 8000868:	1aff      	subs	r7, r7, r3
 800086a:	4014      	ands	r4, r2
 800086c:	e696      	b.n	800059c <__aeabi_dadd+0xf4>
 800086e:	4abf      	ldr	r2, [pc, #764]	@ (8000b6c <__aeabi_dadd+0x6c4>)
 8000870:	1c79      	adds	r1, r7, #1
 8000872:	4211      	tst	r1, r2
 8000874:	d16b      	bne.n	800094e <__aeabi_dadd+0x4a6>
 8000876:	0022      	movs	r2, r4
 8000878:	4302      	orrs	r2, r0
 800087a:	2f00      	cmp	r7, #0
 800087c:	d000      	beq.n	8000880 <__aeabi_dadd+0x3d8>
 800087e:	e0db      	b.n	8000a38 <__aeabi_dadd+0x590>
 8000880:	2a00      	cmp	r2, #0
 8000882:	d100      	bne.n	8000886 <__aeabi_dadd+0x3de>
 8000884:	e12d      	b.n	8000ae2 <__aeabi_dadd+0x63a>
 8000886:	4662      	mov	r2, ip
 8000888:	4653      	mov	r3, sl
 800088a:	431a      	orrs	r2, r3
 800088c:	d100      	bne.n	8000890 <__aeabi_dadd+0x3e8>
 800088e:	e0b6      	b.n	80009fe <__aeabi_dadd+0x556>
 8000890:	4663      	mov	r3, ip
 8000892:	18c5      	adds	r5, r0, r3
 8000894:	4285      	cmp	r5, r0
 8000896:	4180      	sbcs	r0, r0
 8000898:	4454      	add	r4, sl
 800089a:	4240      	negs	r0, r0
 800089c:	1824      	adds	r4, r4, r0
 800089e:	0223      	lsls	r3, r4, #8
 80008a0:	d502      	bpl.n	80008a8 <__aeabi_dadd+0x400>
 80008a2:	000f      	movs	r7, r1
 80008a4:	4bb0      	ldr	r3, [pc, #704]	@ (8000b68 <__aeabi_dadd+0x6c0>)
 80008a6:	401c      	ands	r4, r3
 80008a8:	003a      	movs	r2, r7
 80008aa:	0028      	movs	r0, r5
 80008ac:	e7d8      	b.n	8000860 <__aeabi_dadd+0x3b8>
 80008ae:	4662      	mov	r2, ip
 80008b0:	1a85      	subs	r5, r0, r2
 80008b2:	42a8      	cmp	r0, r5
 80008b4:	4192      	sbcs	r2, r2
 80008b6:	4653      	mov	r3, sl
 80008b8:	4252      	negs	r2, r2
 80008ba:	4691      	mov	r9, r2
 80008bc:	1ae3      	subs	r3, r4, r3
 80008be:	001a      	movs	r2, r3
 80008c0:	464b      	mov	r3, r9
 80008c2:	1ad2      	subs	r2, r2, r3
 80008c4:	0013      	movs	r3, r2
 80008c6:	4691      	mov	r9, r2
 80008c8:	021a      	lsls	r2, r3, #8
 80008ca:	d454      	bmi.n	8000976 <__aeabi_dadd+0x4ce>
 80008cc:	464a      	mov	r2, r9
 80008ce:	464c      	mov	r4, r9
 80008d0:	432a      	orrs	r2, r5
 80008d2:	d000      	beq.n	80008d6 <__aeabi_dadd+0x42e>
 80008d4:	e640      	b.n	8000558 <__aeabi_dadd+0xb0>
 80008d6:	2600      	movs	r6, #0
 80008d8:	2400      	movs	r4, #0
 80008da:	2500      	movs	r5, #0
 80008dc:	e67c      	b.n	80005d8 <__aeabi_dadd+0x130>
 80008de:	4da1      	ldr	r5, [pc, #644]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 80008e0:	45a9      	cmp	r9, r5
 80008e2:	d100      	bne.n	80008e6 <__aeabi_dadd+0x43e>
 80008e4:	e090      	b.n	8000a08 <__aeabi_dadd+0x560>
 80008e6:	2501      	movs	r5, #1
 80008e8:	2a38      	cmp	r2, #56	@ 0x38
 80008ea:	dd00      	ble.n	80008ee <__aeabi_dadd+0x446>
 80008ec:	e6ab      	b.n	8000646 <__aeabi_dadd+0x19e>
 80008ee:	2580      	movs	r5, #128	@ 0x80
 80008f0:	042d      	lsls	r5, r5, #16
 80008f2:	432c      	orrs	r4, r5
 80008f4:	e695      	b.n	8000622 <__aeabi_dadd+0x17a>
 80008f6:	0011      	movs	r1, r2
 80008f8:	4655      	mov	r5, sl
 80008fa:	3920      	subs	r1, #32
 80008fc:	40cd      	lsrs	r5, r1
 80008fe:	46a9      	mov	r9, r5
 8000900:	2a20      	cmp	r2, #32
 8000902:	d006      	beq.n	8000912 <__aeabi_dadd+0x46a>
 8000904:	2140      	movs	r1, #64	@ 0x40
 8000906:	4653      	mov	r3, sl
 8000908:	1a8a      	subs	r2, r1, r2
 800090a:	4093      	lsls	r3, r2
 800090c:	4662      	mov	r2, ip
 800090e:	431a      	orrs	r2, r3
 8000910:	4694      	mov	ip, r2
 8000912:	4665      	mov	r5, ip
 8000914:	1e6b      	subs	r3, r5, #1
 8000916:	419d      	sbcs	r5, r3
 8000918:	464b      	mov	r3, r9
 800091a:	431d      	orrs	r5, r3
 800091c:	e612      	b.n	8000544 <__aeabi_dadd+0x9c>
 800091e:	0021      	movs	r1, r4
 8000920:	4301      	orrs	r1, r0
 8000922:	d100      	bne.n	8000926 <__aeabi_dadd+0x47e>
 8000924:	e0c4      	b.n	8000ab0 <__aeabi_dadd+0x608>
 8000926:	1e51      	subs	r1, r2, #1
 8000928:	2a01      	cmp	r2, #1
 800092a:	d100      	bne.n	800092e <__aeabi_dadd+0x486>
 800092c:	e0fb      	b.n	8000b26 <__aeabi_dadd+0x67e>
 800092e:	4d8d      	ldr	r5, [pc, #564]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000930:	42aa      	cmp	r2, r5
 8000932:	d100      	bne.n	8000936 <__aeabi_dadd+0x48e>
 8000934:	e0b5      	b.n	8000aa2 <__aeabi_dadd+0x5fa>
 8000936:	2501      	movs	r5, #1
 8000938:	2938      	cmp	r1, #56	@ 0x38
 800093a:	dd00      	ble.n	800093e <__aeabi_dadd+0x496>
 800093c:	e741      	b.n	80007c2 <__aeabi_dadd+0x31a>
 800093e:	000a      	movs	r2, r1
 8000940:	e72f      	b.n	80007a2 <__aeabi_dadd+0x2fa>
 8000942:	4c89      	ldr	r4, [pc, #548]	@ (8000b68 <__aeabi_dadd+0x6c0>)
 8000944:	1aff      	subs	r7, r7, r3
 8000946:	4014      	ands	r4, r2
 8000948:	0762      	lsls	r2, r4, #29
 800094a:	08e4      	lsrs	r4, r4, #3
 800094c:	e76a      	b.n	8000824 <__aeabi_dadd+0x37c>
 800094e:	4a85      	ldr	r2, [pc, #532]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000950:	4291      	cmp	r1, r2
 8000952:	d100      	bne.n	8000956 <__aeabi_dadd+0x4ae>
 8000954:	e0e3      	b.n	8000b1e <__aeabi_dadd+0x676>
 8000956:	4663      	mov	r3, ip
 8000958:	18c2      	adds	r2, r0, r3
 800095a:	4282      	cmp	r2, r0
 800095c:	4180      	sbcs	r0, r0
 800095e:	0023      	movs	r3, r4
 8000960:	4240      	negs	r0, r0
 8000962:	4453      	add	r3, sl
 8000964:	181b      	adds	r3, r3, r0
 8000966:	07dd      	lsls	r5, r3, #31
 8000968:	085c      	lsrs	r4, r3, #1
 800096a:	2307      	movs	r3, #7
 800096c:	0852      	lsrs	r2, r2, #1
 800096e:	4315      	orrs	r5, r2
 8000970:	000f      	movs	r7, r1
 8000972:	402b      	ands	r3, r5
 8000974:	e700      	b.n	8000778 <__aeabi_dadd+0x2d0>
 8000976:	4663      	mov	r3, ip
 8000978:	1a1d      	subs	r5, r3, r0
 800097a:	45ac      	cmp	ip, r5
 800097c:	4192      	sbcs	r2, r2
 800097e:	4653      	mov	r3, sl
 8000980:	4252      	negs	r2, r2
 8000982:	1b1c      	subs	r4, r3, r4
 8000984:	000e      	movs	r6, r1
 8000986:	4688      	mov	r8, r1
 8000988:	1aa4      	subs	r4, r4, r2
 800098a:	e5e5      	b.n	8000558 <__aeabi_dadd+0xb0>
 800098c:	2d00      	cmp	r5, #0
 800098e:	d000      	beq.n	8000992 <__aeabi_dadd+0x4ea>
 8000990:	e091      	b.n	8000ab6 <__aeabi_dadd+0x60e>
 8000992:	2a00      	cmp	r2, #0
 8000994:	d138      	bne.n	8000a08 <__aeabi_dadd+0x560>
 8000996:	2480      	movs	r4, #128	@ 0x80
 8000998:	2600      	movs	r6, #0
 800099a:	0324      	lsls	r4, r4, #12
 800099c:	e756      	b.n	800084c <__aeabi_dadd+0x3a4>
 800099e:	4663      	mov	r3, ip
 80009a0:	18c5      	adds	r5, r0, r3
 80009a2:	4285      	cmp	r5, r0
 80009a4:	4180      	sbcs	r0, r0
 80009a6:	4454      	add	r4, sl
 80009a8:	4240      	negs	r0, r0
 80009aa:	1824      	adds	r4, r4, r0
 80009ac:	2701      	movs	r7, #1
 80009ae:	0223      	lsls	r3, r4, #8
 80009b0:	d400      	bmi.n	80009b4 <__aeabi_dadd+0x50c>
 80009b2:	e6df      	b.n	8000774 <__aeabi_dadd+0x2cc>
 80009b4:	2702      	movs	r7, #2
 80009b6:	e687      	b.n	80006c8 <__aeabi_dadd+0x220>
 80009b8:	4663      	mov	r3, ip
 80009ba:	1ac5      	subs	r5, r0, r3
 80009bc:	42a8      	cmp	r0, r5
 80009be:	4180      	sbcs	r0, r0
 80009c0:	4653      	mov	r3, sl
 80009c2:	4240      	negs	r0, r0
 80009c4:	1ae4      	subs	r4, r4, r3
 80009c6:	2701      	movs	r7, #1
 80009c8:	1a24      	subs	r4, r4, r0
 80009ca:	e5c0      	b.n	800054e <__aeabi_dadd+0xa6>
 80009cc:	0762      	lsls	r2, r4, #29
 80009ce:	08c0      	lsrs	r0, r0, #3
 80009d0:	4302      	orrs	r2, r0
 80009d2:	08e4      	lsrs	r4, r4, #3
 80009d4:	e736      	b.n	8000844 <__aeabi_dadd+0x39c>
 80009d6:	0011      	movs	r1, r2
 80009d8:	4653      	mov	r3, sl
 80009da:	3920      	subs	r1, #32
 80009dc:	40cb      	lsrs	r3, r1
 80009de:	4699      	mov	r9, r3
 80009e0:	2a20      	cmp	r2, #32
 80009e2:	d006      	beq.n	80009f2 <__aeabi_dadd+0x54a>
 80009e4:	2140      	movs	r1, #64	@ 0x40
 80009e6:	4653      	mov	r3, sl
 80009e8:	1a8a      	subs	r2, r1, r2
 80009ea:	4093      	lsls	r3, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	431a      	orrs	r2, r3
 80009f0:	4694      	mov	ip, r2
 80009f2:	4665      	mov	r5, ip
 80009f4:	1e6b      	subs	r3, r5, #1
 80009f6:	419d      	sbcs	r5, r3
 80009f8:	464b      	mov	r3, r9
 80009fa:	431d      	orrs	r5, r3
 80009fc:	e659      	b.n	80006b2 <__aeabi_dadd+0x20a>
 80009fe:	0762      	lsls	r2, r4, #29
 8000a00:	08c0      	lsrs	r0, r0, #3
 8000a02:	4302      	orrs	r2, r0
 8000a04:	08e4      	lsrs	r4, r4, #3
 8000a06:	e70d      	b.n	8000824 <__aeabi_dadd+0x37c>
 8000a08:	4653      	mov	r3, sl
 8000a0a:	075a      	lsls	r2, r3, #29
 8000a0c:	4663      	mov	r3, ip
 8000a0e:	08d8      	lsrs	r0, r3, #3
 8000a10:	4653      	mov	r3, sl
 8000a12:	000e      	movs	r6, r1
 8000a14:	4302      	orrs	r2, r0
 8000a16:	08dc      	lsrs	r4, r3, #3
 8000a18:	e714      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000a1a:	0015      	movs	r5, r2
 8000a1c:	0026      	movs	r6, r4
 8000a1e:	3d20      	subs	r5, #32
 8000a20:	40ee      	lsrs	r6, r5
 8000a22:	2a20      	cmp	r2, #32
 8000a24:	d003      	beq.n	8000a2e <__aeabi_dadd+0x586>
 8000a26:	2540      	movs	r5, #64	@ 0x40
 8000a28:	1aaa      	subs	r2, r5, r2
 8000a2a:	4094      	lsls	r4, r2
 8000a2c:	4320      	orrs	r0, r4
 8000a2e:	1e42      	subs	r2, r0, #1
 8000a30:	4190      	sbcs	r0, r2
 8000a32:	0005      	movs	r5, r0
 8000a34:	4335      	orrs	r5, r6
 8000a36:	e606      	b.n	8000646 <__aeabi_dadd+0x19e>
 8000a38:	2a00      	cmp	r2, #0
 8000a3a:	d07c      	beq.n	8000b36 <__aeabi_dadd+0x68e>
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	4653      	mov	r3, sl
 8000a40:	08c0      	lsrs	r0, r0, #3
 8000a42:	431a      	orrs	r2, r3
 8000a44:	d100      	bne.n	8000a48 <__aeabi_dadd+0x5a0>
 8000a46:	e6fa      	b.n	800083e <__aeabi_dadd+0x396>
 8000a48:	0762      	lsls	r2, r4, #29
 8000a4a:	4310      	orrs	r0, r2
 8000a4c:	2280      	movs	r2, #128	@ 0x80
 8000a4e:	08e4      	lsrs	r4, r4, #3
 8000a50:	0312      	lsls	r2, r2, #12
 8000a52:	4214      	tst	r4, r2
 8000a54:	d008      	beq.n	8000a68 <__aeabi_dadd+0x5c0>
 8000a56:	08d9      	lsrs	r1, r3, #3
 8000a58:	4211      	tst	r1, r2
 8000a5a:	d105      	bne.n	8000a68 <__aeabi_dadd+0x5c0>
 8000a5c:	4663      	mov	r3, ip
 8000a5e:	08d8      	lsrs	r0, r3, #3
 8000a60:	4653      	mov	r3, sl
 8000a62:	000c      	movs	r4, r1
 8000a64:	075b      	lsls	r3, r3, #29
 8000a66:	4318      	orrs	r0, r3
 8000a68:	0f42      	lsrs	r2, r0, #29
 8000a6a:	00c0      	lsls	r0, r0, #3
 8000a6c:	08c0      	lsrs	r0, r0, #3
 8000a6e:	0752      	lsls	r2, r2, #29
 8000a70:	4302      	orrs	r2, r0
 8000a72:	e6e7      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000a74:	2a00      	cmp	r2, #0
 8000a76:	d100      	bne.n	8000a7a <__aeabi_dadd+0x5d2>
 8000a78:	e72d      	b.n	80008d6 <__aeabi_dadd+0x42e>
 8000a7a:	4663      	mov	r3, ip
 8000a7c:	08d8      	lsrs	r0, r3, #3
 8000a7e:	4653      	mov	r3, sl
 8000a80:	075a      	lsls	r2, r3, #29
 8000a82:	000e      	movs	r6, r1
 8000a84:	4302      	orrs	r2, r0
 8000a86:	08dc      	lsrs	r4, r3, #3
 8000a88:	e6cc      	b.n	8000824 <__aeabi_dadd+0x37c>
 8000a8a:	4663      	mov	r3, ip
 8000a8c:	1a1d      	subs	r5, r3, r0
 8000a8e:	45ac      	cmp	ip, r5
 8000a90:	4192      	sbcs	r2, r2
 8000a92:	4653      	mov	r3, sl
 8000a94:	4252      	negs	r2, r2
 8000a96:	1b1c      	subs	r4, r3, r4
 8000a98:	000e      	movs	r6, r1
 8000a9a:	4688      	mov	r8, r1
 8000a9c:	1aa4      	subs	r4, r4, r2
 8000a9e:	3701      	adds	r7, #1
 8000aa0:	e555      	b.n	800054e <__aeabi_dadd+0xa6>
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	08d9      	lsrs	r1, r3, #3
 8000aa6:	4653      	mov	r3, sl
 8000aa8:	075a      	lsls	r2, r3, #29
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	08dc      	lsrs	r4, r3, #3
 8000aae:	e6c9      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000ab0:	4660      	mov	r0, ip
 8000ab2:	4654      	mov	r4, sl
 8000ab4:	e6d4      	b.n	8000860 <__aeabi_dadd+0x3b8>
 8000ab6:	08c0      	lsrs	r0, r0, #3
 8000ab8:	2a00      	cmp	r2, #0
 8000aba:	d100      	bne.n	8000abe <__aeabi_dadd+0x616>
 8000abc:	e6bf      	b.n	800083e <__aeabi_dadd+0x396>
 8000abe:	0762      	lsls	r2, r4, #29
 8000ac0:	4310      	orrs	r0, r2
 8000ac2:	2280      	movs	r2, #128	@ 0x80
 8000ac4:	08e4      	lsrs	r4, r4, #3
 8000ac6:	0312      	lsls	r2, r2, #12
 8000ac8:	4214      	tst	r4, r2
 8000aca:	d0cd      	beq.n	8000a68 <__aeabi_dadd+0x5c0>
 8000acc:	08dd      	lsrs	r5, r3, #3
 8000ace:	4215      	tst	r5, r2
 8000ad0:	d1ca      	bne.n	8000a68 <__aeabi_dadd+0x5c0>
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	08d8      	lsrs	r0, r3, #3
 8000ad6:	4653      	mov	r3, sl
 8000ad8:	075b      	lsls	r3, r3, #29
 8000ada:	000e      	movs	r6, r1
 8000adc:	002c      	movs	r4, r5
 8000ade:	4318      	orrs	r0, r3
 8000ae0:	e7c2      	b.n	8000a68 <__aeabi_dadd+0x5c0>
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	08d9      	lsrs	r1, r3, #3
 8000ae6:	4653      	mov	r3, sl
 8000ae8:	075a      	lsls	r2, r3, #29
 8000aea:	430a      	orrs	r2, r1
 8000aec:	08dc      	lsrs	r4, r3, #3
 8000aee:	e699      	b.n	8000824 <__aeabi_dadd+0x37c>
 8000af0:	4663      	mov	r3, ip
 8000af2:	08d8      	lsrs	r0, r3, #3
 8000af4:	4653      	mov	r3, sl
 8000af6:	075a      	lsls	r2, r3, #29
 8000af8:	000e      	movs	r6, r1
 8000afa:	4302      	orrs	r2, r0
 8000afc:	08dc      	lsrs	r4, r3, #3
 8000afe:	e6a1      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000b00:	0011      	movs	r1, r2
 8000b02:	0027      	movs	r7, r4
 8000b04:	3920      	subs	r1, #32
 8000b06:	40cf      	lsrs	r7, r1
 8000b08:	2a20      	cmp	r2, #32
 8000b0a:	d003      	beq.n	8000b14 <__aeabi_dadd+0x66c>
 8000b0c:	2140      	movs	r1, #64	@ 0x40
 8000b0e:	1a8a      	subs	r2, r1, r2
 8000b10:	4094      	lsls	r4, r2
 8000b12:	4320      	orrs	r0, r4
 8000b14:	1e42      	subs	r2, r0, #1
 8000b16:	4190      	sbcs	r0, r2
 8000b18:	0005      	movs	r5, r0
 8000b1a:	433d      	orrs	r5, r7
 8000b1c:	e651      	b.n	80007c2 <__aeabi_dadd+0x31a>
 8000b1e:	000c      	movs	r4, r1
 8000b20:	2500      	movs	r5, #0
 8000b22:	2200      	movs	r2, #0
 8000b24:	e558      	b.n	80005d8 <__aeabi_dadd+0x130>
 8000b26:	4460      	add	r0, ip
 8000b28:	4560      	cmp	r0, ip
 8000b2a:	4192      	sbcs	r2, r2
 8000b2c:	4454      	add	r4, sl
 8000b2e:	4252      	negs	r2, r2
 8000b30:	0005      	movs	r5, r0
 8000b32:	18a4      	adds	r4, r4, r2
 8000b34:	e73a      	b.n	80009ac <__aeabi_dadd+0x504>
 8000b36:	4653      	mov	r3, sl
 8000b38:	075a      	lsls	r2, r3, #29
 8000b3a:	4663      	mov	r3, ip
 8000b3c:	08d9      	lsrs	r1, r3, #3
 8000b3e:	4653      	mov	r3, sl
 8000b40:	430a      	orrs	r2, r1
 8000b42:	08dc      	lsrs	r4, r3, #3
 8000b44:	e67e      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000b46:	001a      	movs	r2, r3
 8000b48:	001c      	movs	r4, r3
 8000b4a:	432a      	orrs	r2, r5
 8000b4c:	d000      	beq.n	8000b50 <__aeabi_dadd+0x6a8>
 8000b4e:	e6ab      	b.n	80008a8 <__aeabi_dadd+0x400>
 8000b50:	e6c1      	b.n	80008d6 <__aeabi_dadd+0x42e>
 8000b52:	2120      	movs	r1, #32
 8000b54:	2500      	movs	r5, #0
 8000b56:	1a09      	subs	r1, r1, r0
 8000b58:	e519      	b.n	800058e <__aeabi_dadd+0xe6>
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2500      	movs	r5, #0
 8000b5e:	4c01      	ldr	r4, [pc, #4]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000b60:	e53a      	b.n	80005d8 <__aeabi_dadd+0x130>
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	000007ff 	.word	0x000007ff
 8000b68:	ff7fffff 	.word	0xff7fffff
 8000b6c:	000007fe 	.word	0x000007fe

08000b70 <__aeabi_ddiv>:
 8000b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b72:	46de      	mov	lr, fp
 8000b74:	4645      	mov	r5, r8
 8000b76:	4657      	mov	r7, sl
 8000b78:	464e      	mov	r6, r9
 8000b7a:	b5e0      	push	{r5, r6, r7, lr}
 8000b7c:	b087      	sub	sp, #28
 8000b7e:	9200      	str	r2, [sp, #0]
 8000b80:	9301      	str	r3, [sp, #4]
 8000b82:	030b      	lsls	r3, r1, #12
 8000b84:	0b1b      	lsrs	r3, r3, #12
 8000b86:	469b      	mov	fp, r3
 8000b88:	0fca      	lsrs	r2, r1, #31
 8000b8a:	004b      	lsls	r3, r1, #1
 8000b8c:	0004      	movs	r4, r0
 8000b8e:	4680      	mov	r8, r0
 8000b90:	0d5b      	lsrs	r3, r3, #21
 8000b92:	9202      	str	r2, [sp, #8]
 8000b94:	d100      	bne.n	8000b98 <__aeabi_ddiv+0x28>
 8000b96:	e16a      	b.n	8000e6e <__aeabi_ddiv+0x2fe>
 8000b98:	4ad4      	ldr	r2, [pc, #848]	@ (8000eec <__aeabi_ddiv+0x37c>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_ddiv+0x30>
 8000b9e:	e18c      	b.n	8000eba <__aeabi_ddiv+0x34a>
 8000ba0:	4659      	mov	r1, fp
 8000ba2:	0f42      	lsrs	r2, r0, #29
 8000ba4:	00c9      	lsls	r1, r1, #3
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	2180      	movs	r1, #128	@ 0x80
 8000baa:	0409      	lsls	r1, r1, #16
 8000bac:	4311      	orrs	r1, r2
 8000bae:	00c2      	lsls	r2, r0, #3
 8000bb0:	4690      	mov	r8, r2
 8000bb2:	4acf      	ldr	r2, [pc, #828]	@ (8000ef0 <__aeabi_ddiv+0x380>)
 8000bb4:	4689      	mov	r9, r1
 8000bb6:	4692      	mov	sl, r2
 8000bb8:	449a      	add	sl, r3
 8000bba:	2300      	movs	r3, #0
 8000bbc:	2400      	movs	r4, #0
 8000bbe:	9303      	str	r3, [sp, #12]
 8000bc0:	9e00      	ldr	r6, [sp, #0]
 8000bc2:	9f01      	ldr	r7, [sp, #4]
 8000bc4:	033b      	lsls	r3, r7, #12
 8000bc6:	0b1b      	lsrs	r3, r3, #12
 8000bc8:	469b      	mov	fp, r3
 8000bca:	007b      	lsls	r3, r7, #1
 8000bcc:	0030      	movs	r0, r6
 8000bce:	0d5b      	lsrs	r3, r3, #21
 8000bd0:	0ffd      	lsrs	r5, r7, #31
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_ddiv+0x68>
 8000bd6:	e128      	b.n	8000e2a <__aeabi_ddiv+0x2ba>
 8000bd8:	4ac4      	ldr	r2, [pc, #784]	@ (8000eec <__aeabi_ddiv+0x37c>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_ddiv+0x70>
 8000bde:	e177      	b.n	8000ed0 <__aeabi_ddiv+0x360>
 8000be0:	4659      	mov	r1, fp
 8000be2:	0f72      	lsrs	r2, r6, #29
 8000be4:	00c9      	lsls	r1, r1, #3
 8000be6:	430a      	orrs	r2, r1
 8000be8:	2180      	movs	r1, #128	@ 0x80
 8000bea:	0409      	lsls	r1, r1, #16
 8000bec:	4311      	orrs	r1, r2
 8000bee:	468b      	mov	fp, r1
 8000bf0:	49bf      	ldr	r1, [pc, #764]	@ (8000ef0 <__aeabi_ddiv+0x380>)
 8000bf2:	00f2      	lsls	r2, r6, #3
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	4651      	mov	r1, sl
 8000bf8:	4463      	add	r3, ip
 8000bfa:	1acb      	subs	r3, r1, r3
 8000bfc:	469a      	mov	sl, r3
 8000bfe:	2300      	movs	r3, #0
 8000c00:	9e02      	ldr	r6, [sp, #8]
 8000c02:	406e      	eors	r6, r5
 8000c04:	2c0f      	cmp	r4, #15
 8000c06:	d827      	bhi.n	8000c58 <__aeabi_ddiv+0xe8>
 8000c08:	49ba      	ldr	r1, [pc, #744]	@ (8000ef4 <__aeabi_ddiv+0x384>)
 8000c0a:	00a4      	lsls	r4, r4, #2
 8000c0c:	5909      	ldr	r1, [r1, r4]
 8000c0e:	468f      	mov	pc, r1
 8000c10:	46cb      	mov	fp, r9
 8000c12:	4642      	mov	r2, r8
 8000c14:	9e02      	ldr	r6, [sp, #8]
 8000c16:	9b03      	ldr	r3, [sp, #12]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d016      	beq.n	8000c4a <__aeabi_ddiv+0xda>
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_ddiv+0xb2>
 8000c20:	e2a6      	b.n	8001170 <__aeabi_ddiv+0x600>
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d000      	beq.n	8000c28 <__aeabi_ddiv+0xb8>
 8000c26:	e0df      	b.n	8000de8 <__aeabi_ddiv+0x278>
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	2400      	movs	r4, #0
 8000c2e:	4690      	mov	r8, r2
 8000c30:	051b      	lsls	r3, r3, #20
 8000c32:	4323      	orrs	r3, r4
 8000c34:	07f6      	lsls	r6, r6, #31
 8000c36:	4333      	orrs	r3, r6
 8000c38:	4640      	mov	r0, r8
 8000c3a:	0019      	movs	r1, r3
 8000c3c:	b007      	add	sp, #28
 8000c3e:	bcf0      	pop	{r4, r5, r6, r7}
 8000c40:	46bb      	mov	fp, r7
 8000c42:	46b2      	mov	sl, r6
 8000c44:	46a9      	mov	r9, r5
 8000c46:	46a0      	mov	r8, r4
 8000c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2400      	movs	r4, #0
 8000c4e:	4690      	mov	r8, r2
 8000c50:	4ba6      	ldr	r3, [pc, #664]	@ (8000eec <__aeabi_ddiv+0x37c>)
 8000c52:	e7ed      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000c54:	002e      	movs	r6, r5
 8000c56:	e7df      	b.n	8000c18 <__aeabi_ddiv+0xa8>
 8000c58:	45cb      	cmp	fp, r9
 8000c5a:	d200      	bcs.n	8000c5e <__aeabi_ddiv+0xee>
 8000c5c:	e1d4      	b.n	8001008 <__aeabi_ddiv+0x498>
 8000c5e:	d100      	bne.n	8000c62 <__aeabi_ddiv+0xf2>
 8000c60:	e1cf      	b.n	8001002 <__aeabi_ddiv+0x492>
 8000c62:	2301      	movs	r3, #1
 8000c64:	425b      	negs	r3, r3
 8000c66:	469c      	mov	ip, r3
 8000c68:	4644      	mov	r4, r8
 8000c6a:	4648      	mov	r0, r9
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	44e2      	add	sl, ip
 8000c70:	465b      	mov	r3, fp
 8000c72:	0e15      	lsrs	r5, r2, #24
 8000c74:	021b      	lsls	r3, r3, #8
 8000c76:	431d      	orrs	r5, r3
 8000c78:	0c19      	lsrs	r1, r3, #16
 8000c7a:	042b      	lsls	r3, r5, #16
 8000c7c:	0212      	lsls	r2, r2, #8
 8000c7e:	9500      	str	r5, [sp, #0]
 8000c80:	0c1d      	lsrs	r5, r3, #16
 8000c82:	4691      	mov	r9, r2
 8000c84:	9102      	str	r1, [sp, #8]
 8000c86:	9503      	str	r5, [sp, #12]
 8000c88:	f7ff fae0 	bl	800024c <__aeabi_uidivmod>
 8000c8c:	0002      	movs	r2, r0
 8000c8e:	436a      	muls	r2, r5
 8000c90:	040b      	lsls	r3, r1, #16
 8000c92:	0c21      	lsrs	r1, r4, #16
 8000c94:	4680      	mov	r8, r0
 8000c96:	4319      	orrs	r1, r3
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	d909      	bls.n	8000cb0 <__aeabi_ddiv+0x140>
 8000c9c:	9d00      	ldr	r5, [sp, #0]
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	46ac      	mov	ip, r5
 8000ca2:	425b      	negs	r3, r3
 8000ca4:	4461      	add	r1, ip
 8000ca6:	469c      	mov	ip, r3
 8000ca8:	44e0      	add	r8, ip
 8000caa:	428d      	cmp	r5, r1
 8000cac:	d800      	bhi.n	8000cb0 <__aeabi_ddiv+0x140>
 8000cae:	e1fb      	b.n	80010a8 <__aeabi_ddiv+0x538>
 8000cb0:	1a88      	subs	r0, r1, r2
 8000cb2:	9902      	ldr	r1, [sp, #8]
 8000cb4:	f7ff faca 	bl	800024c <__aeabi_uidivmod>
 8000cb8:	9a03      	ldr	r2, [sp, #12]
 8000cba:	0424      	lsls	r4, r4, #16
 8000cbc:	4342      	muls	r2, r0
 8000cbe:	0409      	lsls	r1, r1, #16
 8000cc0:	0c24      	lsrs	r4, r4, #16
 8000cc2:	0003      	movs	r3, r0
 8000cc4:	430c      	orrs	r4, r1
 8000cc6:	42a2      	cmp	r2, r4
 8000cc8:	d906      	bls.n	8000cd8 <__aeabi_ddiv+0x168>
 8000cca:	9900      	ldr	r1, [sp, #0]
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	468c      	mov	ip, r1
 8000cd0:	4464      	add	r4, ip
 8000cd2:	42a1      	cmp	r1, r4
 8000cd4:	d800      	bhi.n	8000cd8 <__aeabi_ddiv+0x168>
 8000cd6:	e1e1      	b.n	800109c <__aeabi_ddiv+0x52c>
 8000cd8:	1aa0      	subs	r0, r4, r2
 8000cda:	4642      	mov	r2, r8
 8000cdc:	0412      	lsls	r2, r2, #16
 8000cde:	431a      	orrs	r2, r3
 8000ce0:	4693      	mov	fp, r2
 8000ce2:	464b      	mov	r3, r9
 8000ce4:	4659      	mov	r1, fp
 8000ce6:	0c1b      	lsrs	r3, r3, #16
 8000ce8:	001d      	movs	r5, r3
 8000cea:	9304      	str	r3, [sp, #16]
 8000cec:	040b      	lsls	r3, r1, #16
 8000cee:	4649      	mov	r1, r9
 8000cf0:	0409      	lsls	r1, r1, #16
 8000cf2:	0c09      	lsrs	r1, r1, #16
 8000cf4:	000c      	movs	r4, r1
 8000cf6:	0c1b      	lsrs	r3, r3, #16
 8000cf8:	435c      	muls	r4, r3
 8000cfa:	0c12      	lsrs	r2, r2, #16
 8000cfc:	436b      	muls	r3, r5
 8000cfe:	4688      	mov	r8, r1
 8000d00:	4351      	muls	r1, r2
 8000d02:	436a      	muls	r2, r5
 8000d04:	0c25      	lsrs	r5, r4, #16
 8000d06:	46ac      	mov	ip, r5
 8000d08:	185b      	adds	r3, r3, r1
 8000d0a:	4463      	add	r3, ip
 8000d0c:	4299      	cmp	r1, r3
 8000d0e:	d903      	bls.n	8000d18 <__aeabi_ddiv+0x1a8>
 8000d10:	2180      	movs	r1, #128	@ 0x80
 8000d12:	0249      	lsls	r1, r1, #9
 8000d14:	468c      	mov	ip, r1
 8000d16:	4462      	add	r2, ip
 8000d18:	0c19      	lsrs	r1, r3, #16
 8000d1a:	0424      	lsls	r4, r4, #16
 8000d1c:	041b      	lsls	r3, r3, #16
 8000d1e:	0c24      	lsrs	r4, r4, #16
 8000d20:	188a      	adds	r2, r1, r2
 8000d22:	191c      	adds	r4, r3, r4
 8000d24:	4290      	cmp	r0, r2
 8000d26:	d302      	bcc.n	8000d2e <__aeabi_ddiv+0x1be>
 8000d28:	d116      	bne.n	8000d58 <__aeabi_ddiv+0x1e8>
 8000d2a:	42a7      	cmp	r7, r4
 8000d2c:	d214      	bcs.n	8000d58 <__aeabi_ddiv+0x1e8>
 8000d2e:	465b      	mov	r3, fp
 8000d30:	9d00      	ldr	r5, [sp, #0]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	444f      	add	r7, r9
 8000d36:	9305      	str	r3, [sp, #20]
 8000d38:	454f      	cmp	r7, r9
 8000d3a:	419b      	sbcs	r3, r3
 8000d3c:	46ac      	mov	ip, r5
 8000d3e:	425b      	negs	r3, r3
 8000d40:	4463      	add	r3, ip
 8000d42:	18c0      	adds	r0, r0, r3
 8000d44:	4285      	cmp	r5, r0
 8000d46:	d300      	bcc.n	8000d4a <__aeabi_ddiv+0x1da>
 8000d48:	e1a1      	b.n	800108e <__aeabi_ddiv+0x51e>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	d900      	bls.n	8000d50 <__aeabi_ddiv+0x1e0>
 8000d4e:	e1f6      	b.n	800113e <__aeabi_ddiv+0x5ce>
 8000d50:	d100      	bne.n	8000d54 <__aeabi_ddiv+0x1e4>
 8000d52:	e1f1      	b.n	8001138 <__aeabi_ddiv+0x5c8>
 8000d54:	9b05      	ldr	r3, [sp, #20]
 8000d56:	469b      	mov	fp, r3
 8000d58:	1b3c      	subs	r4, r7, r4
 8000d5a:	42a7      	cmp	r7, r4
 8000d5c:	41bf      	sbcs	r7, r7
 8000d5e:	9d00      	ldr	r5, [sp, #0]
 8000d60:	1a80      	subs	r0, r0, r2
 8000d62:	427f      	negs	r7, r7
 8000d64:	1bc0      	subs	r0, r0, r7
 8000d66:	4285      	cmp	r5, r0
 8000d68:	d100      	bne.n	8000d6c <__aeabi_ddiv+0x1fc>
 8000d6a:	e1d0      	b.n	800110e <__aeabi_ddiv+0x59e>
 8000d6c:	9902      	ldr	r1, [sp, #8]
 8000d6e:	f7ff fa6d 	bl	800024c <__aeabi_uidivmod>
 8000d72:	9a03      	ldr	r2, [sp, #12]
 8000d74:	040b      	lsls	r3, r1, #16
 8000d76:	4342      	muls	r2, r0
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	0007      	movs	r7, r0
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	428a      	cmp	r2, r1
 8000d80:	d900      	bls.n	8000d84 <__aeabi_ddiv+0x214>
 8000d82:	e178      	b.n	8001076 <__aeabi_ddiv+0x506>
 8000d84:	1a88      	subs	r0, r1, r2
 8000d86:	9902      	ldr	r1, [sp, #8]
 8000d88:	f7ff fa60 	bl	800024c <__aeabi_uidivmod>
 8000d8c:	9a03      	ldr	r2, [sp, #12]
 8000d8e:	0424      	lsls	r4, r4, #16
 8000d90:	4342      	muls	r2, r0
 8000d92:	0409      	lsls	r1, r1, #16
 8000d94:	0c24      	lsrs	r4, r4, #16
 8000d96:	0003      	movs	r3, r0
 8000d98:	430c      	orrs	r4, r1
 8000d9a:	42a2      	cmp	r2, r4
 8000d9c:	d900      	bls.n	8000da0 <__aeabi_ddiv+0x230>
 8000d9e:	e15d      	b.n	800105c <__aeabi_ddiv+0x4ec>
 8000da0:	4641      	mov	r1, r8
 8000da2:	1aa4      	subs	r4, r4, r2
 8000da4:	043a      	lsls	r2, r7, #16
 8000da6:	431a      	orrs	r2, r3
 8000da8:	9d04      	ldr	r5, [sp, #16]
 8000daa:	0413      	lsls	r3, r2, #16
 8000dac:	0c1b      	lsrs	r3, r3, #16
 8000dae:	4359      	muls	r1, r3
 8000db0:	4647      	mov	r7, r8
 8000db2:	436b      	muls	r3, r5
 8000db4:	469c      	mov	ip, r3
 8000db6:	0c10      	lsrs	r0, r2, #16
 8000db8:	4347      	muls	r7, r0
 8000dba:	0c0b      	lsrs	r3, r1, #16
 8000dbc:	44bc      	add	ip, r7
 8000dbe:	4463      	add	r3, ip
 8000dc0:	4368      	muls	r0, r5
 8000dc2:	429f      	cmp	r7, r3
 8000dc4:	d903      	bls.n	8000dce <__aeabi_ddiv+0x25e>
 8000dc6:	2580      	movs	r5, #128	@ 0x80
 8000dc8:	026d      	lsls	r5, r5, #9
 8000dca:	46ac      	mov	ip, r5
 8000dcc:	4460      	add	r0, ip
 8000dce:	0c1f      	lsrs	r7, r3, #16
 8000dd0:	0409      	lsls	r1, r1, #16
 8000dd2:	041b      	lsls	r3, r3, #16
 8000dd4:	0c09      	lsrs	r1, r1, #16
 8000dd6:	183f      	adds	r7, r7, r0
 8000dd8:	185b      	adds	r3, r3, r1
 8000dda:	42bc      	cmp	r4, r7
 8000ddc:	d200      	bcs.n	8000de0 <__aeabi_ddiv+0x270>
 8000dde:	e102      	b.n	8000fe6 <__aeabi_ddiv+0x476>
 8000de0:	d100      	bne.n	8000de4 <__aeabi_ddiv+0x274>
 8000de2:	e0fd      	b.n	8000fe0 <__aeabi_ddiv+0x470>
 8000de4:	2301      	movs	r3, #1
 8000de6:	431a      	orrs	r2, r3
 8000de8:	4b43      	ldr	r3, [pc, #268]	@ (8000ef8 <__aeabi_ddiv+0x388>)
 8000dea:	4453      	add	r3, sl
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	dc00      	bgt.n	8000df2 <__aeabi_ddiv+0x282>
 8000df0:	e0ae      	b.n	8000f50 <__aeabi_ddiv+0x3e0>
 8000df2:	0751      	lsls	r1, r2, #29
 8000df4:	d000      	beq.n	8000df8 <__aeabi_ddiv+0x288>
 8000df6:	e198      	b.n	800112a <__aeabi_ddiv+0x5ba>
 8000df8:	4659      	mov	r1, fp
 8000dfa:	01c9      	lsls	r1, r1, #7
 8000dfc:	d506      	bpl.n	8000e0c <__aeabi_ddiv+0x29c>
 8000dfe:	4659      	mov	r1, fp
 8000e00:	4b3e      	ldr	r3, [pc, #248]	@ (8000efc <__aeabi_ddiv+0x38c>)
 8000e02:	4019      	ands	r1, r3
 8000e04:	2380      	movs	r3, #128	@ 0x80
 8000e06:	468b      	mov	fp, r1
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	4453      	add	r3, sl
 8000e0c:	493c      	ldr	r1, [pc, #240]	@ (8000f00 <__aeabi_ddiv+0x390>)
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	dd00      	ble.n	8000e14 <__aeabi_ddiv+0x2a4>
 8000e12:	e71a      	b.n	8000c4a <__aeabi_ddiv+0xda>
 8000e14:	4659      	mov	r1, fp
 8000e16:	08d2      	lsrs	r2, r2, #3
 8000e18:	0749      	lsls	r1, r1, #29
 8000e1a:	4311      	orrs	r1, r2
 8000e1c:	465a      	mov	r2, fp
 8000e1e:	055b      	lsls	r3, r3, #21
 8000e20:	0254      	lsls	r4, r2, #9
 8000e22:	4688      	mov	r8, r1
 8000e24:	0b24      	lsrs	r4, r4, #12
 8000e26:	0d5b      	lsrs	r3, r3, #21
 8000e28:	e702      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000e2a:	465a      	mov	r2, fp
 8000e2c:	9b00      	ldr	r3, [sp, #0]
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	d100      	bne.n	8000e34 <__aeabi_ddiv+0x2c4>
 8000e32:	e07e      	b.n	8000f32 <__aeabi_ddiv+0x3c2>
 8000e34:	465b      	mov	r3, fp
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d100      	bne.n	8000e3c <__aeabi_ddiv+0x2cc>
 8000e3a:	e100      	b.n	800103e <__aeabi_ddiv+0x4ce>
 8000e3c:	4658      	mov	r0, fp
 8000e3e:	f001 f9ef 	bl	8002220 <__clzsi2>
 8000e42:	0002      	movs	r2, r0
 8000e44:	0003      	movs	r3, r0
 8000e46:	3a0b      	subs	r2, #11
 8000e48:	271d      	movs	r7, #29
 8000e4a:	9e00      	ldr	r6, [sp, #0]
 8000e4c:	1aba      	subs	r2, r7, r2
 8000e4e:	0019      	movs	r1, r3
 8000e50:	4658      	mov	r0, fp
 8000e52:	40d6      	lsrs	r6, r2
 8000e54:	3908      	subs	r1, #8
 8000e56:	4088      	lsls	r0, r1
 8000e58:	0032      	movs	r2, r6
 8000e5a:	4302      	orrs	r2, r0
 8000e5c:	4693      	mov	fp, r2
 8000e5e:	9a00      	ldr	r2, [sp, #0]
 8000e60:	408a      	lsls	r2, r1
 8000e62:	4928      	ldr	r1, [pc, #160]	@ (8000f04 <__aeabi_ddiv+0x394>)
 8000e64:	4453      	add	r3, sl
 8000e66:	468a      	mov	sl, r1
 8000e68:	449a      	add	sl, r3
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e6c8      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000e6e:	465b      	mov	r3, fp
 8000e70:	4303      	orrs	r3, r0
 8000e72:	4699      	mov	r9, r3
 8000e74:	d056      	beq.n	8000f24 <__aeabi_ddiv+0x3b4>
 8000e76:	465b      	mov	r3, fp
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d100      	bne.n	8000e7e <__aeabi_ddiv+0x30e>
 8000e7c:	e0cd      	b.n	800101a <__aeabi_ddiv+0x4aa>
 8000e7e:	4658      	mov	r0, fp
 8000e80:	f001 f9ce 	bl	8002220 <__clzsi2>
 8000e84:	230b      	movs	r3, #11
 8000e86:	425b      	negs	r3, r3
 8000e88:	469c      	mov	ip, r3
 8000e8a:	0002      	movs	r2, r0
 8000e8c:	4484      	add	ip, r0
 8000e8e:	4666      	mov	r6, ip
 8000e90:	231d      	movs	r3, #29
 8000e92:	1b9b      	subs	r3, r3, r6
 8000e94:	0026      	movs	r6, r4
 8000e96:	0011      	movs	r1, r2
 8000e98:	4658      	mov	r0, fp
 8000e9a:	40de      	lsrs	r6, r3
 8000e9c:	3908      	subs	r1, #8
 8000e9e:	4088      	lsls	r0, r1
 8000ea0:	0033      	movs	r3, r6
 8000ea2:	4303      	orrs	r3, r0
 8000ea4:	4699      	mov	r9, r3
 8000ea6:	0023      	movs	r3, r4
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	4698      	mov	r8, r3
 8000eac:	4b16      	ldr	r3, [pc, #88]	@ (8000f08 <__aeabi_ddiv+0x398>)
 8000eae:	2400      	movs	r4, #0
 8000eb0:	1a9b      	subs	r3, r3, r2
 8000eb2:	469a      	mov	sl, r3
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	9303      	str	r3, [sp, #12]
 8000eb8:	e682      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000eba:	465a      	mov	r2, fp
 8000ebc:	4302      	orrs	r2, r0
 8000ebe:	4691      	mov	r9, r2
 8000ec0:	d12a      	bne.n	8000f18 <__aeabi_ddiv+0x3a8>
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	469a      	mov	sl, r3
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	4690      	mov	r8, r2
 8000eca:	2408      	movs	r4, #8
 8000ecc:	9303      	str	r3, [sp, #12]
 8000ece:	e677      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000ed0:	465a      	mov	r2, fp
 8000ed2:	9b00      	ldr	r3, [sp, #0]
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f0c <__aeabi_ddiv+0x39c>)
 8000ed8:	469c      	mov	ip, r3
 8000eda:	44e2      	add	sl, ip
 8000edc:	2a00      	cmp	r2, #0
 8000ede:	d117      	bne.n	8000f10 <__aeabi_ddiv+0x3a0>
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	431c      	orrs	r4, r3
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	469b      	mov	fp, r3
 8000ee8:	3302      	adds	r3, #2
 8000eea:	e689      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000eec:	000007ff 	.word	0x000007ff
 8000ef0:	fffffc01 	.word	0xfffffc01
 8000ef4:	08008a90 	.word	0x08008a90
 8000ef8:	000003ff 	.word	0x000003ff
 8000efc:	feffffff 	.word	0xfeffffff
 8000f00:	000007fe 	.word	0x000007fe
 8000f04:	000003f3 	.word	0x000003f3
 8000f08:	fffffc0d 	.word	0xfffffc0d
 8000f0c:	fffff801 	.word	0xfffff801
 8000f10:	2303      	movs	r3, #3
 8000f12:	0032      	movs	r2, r6
 8000f14:	431c      	orrs	r4, r3
 8000f16:	e673      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000f18:	469a      	mov	sl, r3
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	46d9      	mov	r9, fp
 8000f1e:	240c      	movs	r4, #12
 8000f20:	9303      	str	r3, [sp, #12]
 8000f22:	e64d      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000f24:	2300      	movs	r3, #0
 8000f26:	4698      	mov	r8, r3
 8000f28:	469a      	mov	sl, r3
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	2404      	movs	r4, #4
 8000f2e:	9303      	str	r3, [sp, #12]
 8000f30:	e646      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000f32:	2301      	movs	r3, #1
 8000f34:	431c      	orrs	r4, r3
 8000f36:	2300      	movs	r3, #0
 8000f38:	469b      	mov	fp, r3
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	e660      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000f3e:	2300      	movs	r3, #0
 8000f40:	2480      	movs	r4, #128	@ 0x80
 8000f42:	4698      	mov	r8, r3
 8000f44:	2600      	movs	r6, #0
 8000f46:	4b92      	ldr	r3, [pc, #584]	@ (8001190 <__aeabi_ddiv+0x620>)
 8000f48:	0324      	lsls	r4, r4, #12
 8000f4a:	e671      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4252      	negs	r2, r2
 8000f50:	2101      	movs	r1, #1
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	2938      	cmp	r1, #56	@ 0x38
 8000f56:	dd00      	ble.n	8000f5a <__aeabi_ddiv+0x3ea>
 8000f58:	e666      	b.n	8000c28 <__aeabi_ddiv+0xb8>
 8000f5a:	291f      	cmp	r1, #31
 8000f5c:	dc00      	bgt.n	8000f60 <__aeabi_ddiv+0x3f0>
 8000f5e:	e0ab      	b.n	80010b8 <__aeabi_ddiv+0x548>
 8000f60:	201f      	movs	r0, #31
 8000f62:	4240      	negs	r0, r0
 8000f64:	1ac3      	subs	r3, r0, r3
 8000f66:	4658      	mov	r0, fp
 8000f68:	40d8      	lsrs	r0, r3
 8000f6a:	0003      	movs	r3, r0
 8000f6c:	2920      	cmp	r1, #32
 8000f6e:	d004      	beq.n	8000f7a <__aeabi_ddiv+0x40a>
 8000f70:	4658      	mov	r0, fp
 8000f72:	4988      	ldr	r1, [pc, #544]	@ (8001194 <__aeabi_ddiv+0x624>)
 8000f74:	4451      	add	r1, sl
 8000f76:	4088      	lsls	r0, r1
 8000f78:	4302      	orrs	r2, r0
 8000f7a:	1e51      	subs	r1, r2, #1
 8000f7c:	418a      	sbcs	r2, r1
 8000f7e:	431a      	orrs	r2, r3
 8000f80:	2307      	movs	r3, #7
 8000f82:	0019      	movs	r1, r3
 8000f84:	2400      	movs	r4, #0
 8000f86:	4011      	ands	r1, r2
 8000f88:	4213      	tst	r3, r2
 8000f8a:	d00c      	beq.n	8000fa6 <__aeabi_ddiv+0x436>
 8000f8c:	230f      	movs	r3, #15
 8000f8e:	4013      	ands	r3, r2
 8000f90:	2b04      	cmp	r3, #4
 8000f92:	d100      	bne.n	8000f96 <__aeabi_ddiv+0x426>
 8000f94:	e0f9      	b.n	800118a <__aeabi_ddiv+0x61a>
 8000f96:	1d11      	adds	r1, r2, #4
 8000f98:	4291      	cmp	r1, r2
 8000f9a:	419b      	sbcs	r3, r3
 8000f9c:	000a      	movs	r2, r1
 8000f9e:	425b      	negs	r3, r3
 8000fa0:	0759      	lsls	r1, r3, #29
 8000fa2:	025b      	lsls	r3, r3, #9
 8000fa4:	0b1c      	lsrs	r4, r3, #12
 8000fa6:	08d2      	lsrs	r2, r2, #3
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	4690      	mov	r8, r2
 8000fac:	2300      	movs	r3, #0
 8000fae:	e63f      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000fb0:	2480      	movs	r4, #128	@ 0x80
 8000fb2:	464b      	mov	r3, r9
 8000fb4:	0324      	lsls	r4, r4, #12
 8000fb6:	4223      	tst	r3, r4
 8000fb8:	d009      	beq.n	8000fce <__aeabi_ddiv+0x45e>
 8000fba:	465b      	mov	r3, fp
 8000fbc:	4223      	tst	r3, r4
 8000fbe:	d106      	bne.n	8000fce <__aeabi_ddiv+0x45e>
 8000fc0:	431c      	orrs	r4, r3
 8000fc2:	0324      	lsls	r4, r4, #12
 8000fc4:	002e      	movs	r6, r5
 8000fc6:	4690      	mov	r8, r2
 8000fc8:	4b71      	ldr	r3, [pc, #452]	@ (8001190 <__aeabi_ddiv+0x620>)
 8000fca:	0b24      	lsrs	r4, r4, #12
 8000fcc:	e630      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000fce:	2480      	movs	r4, #128	@ 0x80
 8000fd0:	464b      	mov	r3, r9
 8000fd2:	0324      	lsls	r4, r4, #12
 8000fd4:	431c      	orrs	r4, r3
 8000fd6:	0324      	lsls	r4, r4, #12
 8000fd8:	9e02      	ldr	r6, [sp, #8]
 8000fda:	4b6d      	ldr	r3, [pc, #436]	@ (8001190 <__aeabi_ddiv+0x620>)
 8000fdc:	0b24      	lsrs	r4, r4, #12
 8000fde:	e627      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d100      	bne.n	8000fe6 <__aeabi_ddiv+0x476>
 8000fe4:	e700      	b.n	8000de8 <__aeabi_ddiv+0x278>
 8000fe6:	9800      	ldr	r0, [sp, #0]
 8000fe8:	1e51      	subs	r1, r2, #1
 8000fea:	4684      	mov	ip, r0
 8000fec:	4464      	add	r4, ip
 8000fee:	4284      	cmp	r4, r0
 8000ff0:	d200      	bcs.n	8000ff4 <__aeabi_ddiv+0x484>
 8000ff2:	e084      	b.n	80010fe <__aeabi_ddiv+0x58e>
 8000ff4:	42bc      	cmp	r4, r7
 8000ff6:	d200      	bcs.n	8000ffa <__aeabi_ddiv+0x48a>
 8000ff8:	e0ae      	b.n	8001158 <__aeabi_ddiv+0x5e8>
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_ddiv+0x48e>
 8000ffc:	e0c1      	b.n	8001182 <__aeabi_ddiv+0x612>
 8000ffe:	000a      	movs	r2, r1
 8001000:	e6f0      	b.n	8000de4 <__aeabi_ddiv+0x274>
 8001002:	4542      	cmp	r2, r8
 8001004:	d900      	bls.n	8001008 <__aeabi_ddiv+0x498>
 8001006:	e62c      	b.n	8000c62 <__aeabi_ddiv+0xf2>
 8001008:	464b      	mov	r3, r9
 800100a:	07dc      	lsls	r4, r3, #31
 800100c:	0858      	lsrs	r0, r3, #1
 800100e:	4643      	mov	r3, r8
 8001010:	085b      	lsrs	r3, r3, #1
 8001012:	431c      	orrs	r4, r3
 8001014:	4643      	mov	r3, r8
 8001016:	07df      	lsls	r7, r3, #31
 8001018:	e62a      	b.n	8000c70 <__aeabi_ddiv+0x100>
 800101a:	f001 f901 	bl	8002220 <__clzsi2>
 800101e:	2315      	movs	r3, #21
 8001020:	469c      	mov	ip, r3
 8001022:	4484      	add	ip, r0
 8001024:	0002      	movs	r2, r0
 8001026:	4663      	mov	r3, ip
 8001028:	3220      	adds	r2, #32
 800102a:	2b1c      	cmp	r3, #28
 800102c:	dc00      	bgt.n	8001030 <__aeabi_ddiv+0x4c0>
 800102e:	e72e      	b.n	8000e8e <__aeabi_ddiv+0x31e>
 8001030:	0023      	movs	r3, r4
 8001032:	3808      	subs	r0, #8
 8001034:	4083      	lsls	r3, r0
 8001036:	4699      	mov	r9, r3
 8001038:	2300      	movs	r3, #0
 800103a:	4698      	mov	r8, r3
 800103c:	e736      	b.n	8000eac <__aeabi_ddiv+0x33c>
 800103e:	f001 f8ef 	bl	8002220 <__clzsi2>
 8001042:	0002      	movs	r2, r0
 8001044:	0003      	movs	r3, r0
 8001046:	3215      	adds	r2, #21
 8001048:	3320      	adds	r3, #32
 800104a:	2a1c      	cmp	r2, #28
 800104c:	dc00      	bgt.n	8001050 <__aeabi_ddiv+0x4e0>
 800104e:	e6fb      	b.n	8000e48 <__aeabi_ddiv+0x2d8>
 8001050:	9900      	ldr	r1, [sp, #0]
 8001052:	3808      	subs	r0, #8
 8001054:	4081      	lsls	r1, r0
 8001056:	2200      	movs	r2, #0
 8001058:	468b      	mov	fp, r1
 800105a:	e702      	b.n	8000e62 <__aeabi_ddiv+0x2f2>
 800105c:	9900      	ldr	r1, [sp, #0]
 800105e:	3b01      	subs	r3, #1
 8001060:	468c      	mov	ip, r1
 8001062:	4464      	add	r4, ip
 8001064:	42a1      	cmp	r1, r4
 8001066:	d900      	bls.n	800106a <__aeabi_ddiv+0x4fa>
 8001068:	e69a      	b.n	8000da0 <__aeabi_ddiv+0x230>
 800106a:	42a2      	cmp	r2, r4
 800106c:	d800      	bhi.n	8001070 <__aeabi_ddiv+0x500>
 800106e:	e697      	b.n	8000da0 <__aeabi_ddiv+0x230>
 8001070:	1e83      	subs	r3, r0, #2
 8001072:	4464      	add	r4, ip
 8001074:	e694      	b.n	8000da0 <__aeabi_ddiv+0x230>
 8001076:	46ac      	mov	ip, r5
 8001078:	4461      	add	r1, ip
 800107a:	3f01      	subs	r7, #1
 800107c:	428d      	cmp	r5, r1
 800107e:	d900      	bls.n	8001082 <__aeabi_ddiv+0x512>
 8001080:	e680      	b.n	8000d84 <__aeabi_ddiv+0x214>
 8001082:	428a      	cmp	r2, r1
 8001084:	d800      	bhi.n	8001088 <__aeabi_ddiv+0x518>
 8001086:	e67d      	b.n	8000d84 <__aeabi_ddiv+0x214>
 8001088:	1e87      	subs	r7, r0, #2
 800108a:	4461      	add	r1, ip
 800108c:	e67a      	b.n	8000d84 <__aeabi_ddiv+0x214>
 800108e:	4285      	cmp	r5, r0
 8001090:	d000      	beq.n	8001094 <__aeabi_ddiv+0x524>
 8001092:	e65f      	b.n	8000d54 <__aeabi_ddiv+0x1e4>
 8001094:	45b9      	cmp	r9, r7
 8001096:	d900      	bls.n	800109a <__aeabi_ddiv+0x52a>
 8001098:	e65c      	b.n	8000d54 <__aeabi_ddiv+0x1e4>
 800109a:	e656      	b.n	8000d4a <__aeabi_ddiv+0x1da>
 800109c:	42a2      	cmp	r2, r4
 800109e:	d800      	bhi.n	80010a2 <__aeabi_ddiv+0x532>
 80010a0:	e61a      	b.n	8000cd8 <__aeabi_ddiv+0x168>
 80010a2:	1e83      	subs	r3, r0, #2
 80010a4:	4464      	add	r4, ip
 80010a6:	e617      	b.n	8000cd8 <__aeabi_ddiv+0x168>
 80010a8:	428a      	cmp	r2, r1
 80010aa:	d800      	bhi.n	80010ae <__aeabi_ddiv+0x53e>
 80010ac:	e600      	b.n	8000cb0 <__aeabi_ddiv+0x140>
 80010ae:	46ac      	mov	ip, r5
 80010b0:	1e83      	subs	r3, r0, #2
 80010b2:	4698      	mov	r8, r3
 80010b4:	4461      	add	r1, ip
 80010b6:	e5fb      	b.n	8000cb0 <__aeabi_ddiv+0x140>
 80010b8:	4837      	ldr	r0, [pc, #220]	@ (8001198 <__aeabi_ddiv+0x628>)
 80010ba:	0014      	movs	r4, r2
 80010bc:	4450      	add	r0, sl
 80010be:	4082      	lsls	r2, r0
 80010c0:	465b      	mov	r3, fp
 80010c2:	0017      	movs	r7, r2
 80010c4:	4083      	lsls	r3, r0
 80010c6:	40cc      	lsrs	r4, r1
 80010c8:	1e7a      	subs	r2, r7, #1
 80010ca:	4197      	sbcs	r7, r2
 80010cc:	4323      	orrs	r3, r4
 80010ce:	433b      	orrs	r3, r7
 80010d0:	001a      	movs	r2, r3
 80010d2:	465b      	mov	r3, fp
 80010d4:	40cb      	lsrs	r3, r1
 80010d6:	0751      	lsls	r1, r2, #29
 80010d8:	d009      	beq.n	80010ee <__aeabi_ddiv+0x57e>
 80010da:	210f      	movs	r1, #15
 80010dc:	4011      	ands	r1, r2
 80010de:	2904      	cmp	r1, #4
 80010e0:	d005      	beq.n	80010ee <__aeabi_ddiv+0x57e>
 80010e2:	1d11      	adds	r1, r2, #4
 80010e4:	4291      	cmp	r1, r2
 80010e6:	4192      	sbcs	r2, r2
 80010e8:	4252      	negs	r2, r2
 80010ea:	189b      	adds	r3, r3, r2
 80010ec:	000a      	movs	r2, r1
 80010ee:	0219      	lsls	r1, r3, #8
 80010f0:	d400      	bmi.n	80010f4 <__aeabi_ddiv+0x584>
 80010f2:	e755      	b.n	8000fa0 <__aeabi_ddiv+0x430>
 80010f4:	2200      	movs	r2, #0
 80010f6:	2301      	movs	r3, #1
 80010f8:	2400      	movs	r4, #0
 80010fa:	4690      	mov	r8, r2
 80010fc:	e598      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 80010fe:	000a      	movs	r2, r1
 8001100:	42bc      	cmp	r4, r7
 8001102:	d000      	beq.n	8001106 <__aeabi_ddiv+0x596>
 8001104:	e66e      	b.n	8000de4 <__aeabi_ddiv+0x274>
 8001106:	454b      	cmp	r3, r9
 8001108:	d000      	beq.n	800110c <__aeabi_ddiv+0x59c>
 800110a:	e66b      	b.n	8000de4 <__aeabi_ddiv+0x274>
 800110c:	e66c      	b.n	8000de8 <__aeabi_ddiv+0x278>
 800110e:	4b23      	ldr	r3, [pc, #140]	@ (800119c <__aeabi_ddiv+0x62c>)
 8001110:	4a23      	ldr	r2, [pc, #140]	@ (80011a0 <__aeabi_ddiv+0x630>)
 8001112:	4453      	add	r3, sl
 8001114:	4592      	cmp	sl, r2
 8001116:	da00      	bge.n	800111a <__aeabi_ddiv+0x5aa>
 8001118:	e718      	b.n	8000f4c <__aeabi_ddiv+0x3dc>
 800111a:	2101      	movs	r1, #1
 800111c:	4249      	negs	r1, r1
 800111e:	1d0a      	adds	r2, r1, #4
 8001120:	428a      	cmp	r2, r1
 8001122:	4189      	sbcs	r1, r1
 8001124:	4249      	negs	r1, r1
 8001126:	448b      	add	fp, r1
 8001128:	e666      	b.n	8000df8 <__aeabi_ddiv+0x288>
 800112a:	210f      	movs	r1, #15
 800112c:	4011      	ands	r1, r2
 800112e:	2904      	cmp	r1, #4
 8001130:	d100      	bne.n	8001134 <__aeabi_ddiv+0x5c4>
 8001132:	e661      	b.n	8000df8 <__aeabi_ddiv+0x288>
 8001134:	0011      	movs	r1, r2
 8001136:	e7f2      	b.n	800111e <__aeabi_ddiv+0x5ae>
 8001138:	42bc      	cmp	r4, r7
 800113a:	d800      	bhi.n	800113e <__aeabi_ddiv+0x5ce>
 800113c:	e60a      	b.n	8000d54 <__aeabi_ddiv+0x1e4>
 800113e:	2302      	movs	r3, #2
 8001140:	425b      	negs	r3, r3
 8001142:	469c      	mov	ip, r3
 8001144:	9900      	ldr	r1, [sp, #0]
 8001146:	444f      	add	r7, r9
 8001148:	454f      	cmp	r7, r9
 800114a:	419b      	sbcs	r3, r3
 800114c:	44e3      	add	fp, ip
 800114e:	468c      	mov	ip, r1
 8001150:	425b      	negs	r3, r3
 8001152:	4463      	add	r3, ip
 8001154:	18c0      	adds	r0, r0, r3
 8001156:	e5ff      	b.n	8000d58 <__aeabi_ddiv+0x1e8>
 8001158:	4649      	mov	r1, r9
 800115a:	9d00      	ldr	r5, [sp, #0]
 800115c:	0048      	lsls	r0, r1, #1
 800115e:	4548      	cmp	r0, r9
 8001160:	4189      	sbcs	r1, r1
 8001162:	46ac      	mov	ip, r5
 8001164:	4249      	negs	r1, r1
 8001166:	4461      	add	r1, ip
 8001168:	4681      	mov	r9, r0
 800116a:	3a02      	subs	r2, #2
 800116c:	1864      	adds	r4, r4, r1
 800116e:	e7c7      	b.n	8001100 <__aeabi_ddiv+0x590>
 8001170:	2480      	movs	r4, #128	@ 0x80
 8001172:	465b      	mov	r3, fp
 8001174:	0324      	lsls	r4, r4, #12
 8001176:	431c      	orrs	r4, r3
 8001178:	0324      	lsls	r4, r4, #12
 800117a:	4690      	mov	r8, r2
 800117c:	4b04      	ldr	r3, [pc, #16]	@ (8001190 <__aeabi_ddiv+0x620>)
 800117e:	0b24      	lsrs	r4, r4, #12
 8001180:	e556      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8001182:	4599      	cmp	r9, r3
 8001184:	d3e8      	bcc.n	8001158 <__aeabi_ddiv+0x5e8>
 8001186:	000a      	movs	r2, r1
 8001188:	e7bd      	b.n	8001106 <__aeabi_ddiv+0x596>
 800118a:	2300      	movs	r3, #0
 800118c:	e708      	b.n	8000fa0 <__aeabi_ddiv+0x430>
 800118e:	46c0      	nop			@ (mov r8, r8)
 8001190:	000007ff 	.word	0x000007ff
 8001194:	0000043e 	.word	0x0000043e
 8001198:	0000041e 	.word	0x0000041e
 800119c:	000003ff 	.word	0x000003ff
 80011a0:	fffffc02 	.word	0xfffffc02

080011a4 <__eqdf2>:
 80011a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a6:	4657      	mov	r7, sl
 80011a8:	46de      	mov	lr, fp
 80011aa:	464e      	mov	r6, r9
 80011ac:	4645      	mov	r5, r8
 80011ae:	b5e0      	push	{r5, r6, r7, lr}
 80011b0:	000d      	movs	r5, r1
 80011b2:	0004      	movs	r4, r0
 80011b4:	0fe8      	lsrs	r0, r5, #31
 80011b6:	4683      	mov	fp, r0
 80011b8:	0309      	lsls	r1, r1, #12
 80011ba:	0fd8      	lsrs	r0, r3, #31
 80011bc:	0b09      	lsrs	r1, r1, #12
 80011be:	4682      	mov	sl, r0
 80011c0:	4819      	ldr	r0, [pc, #100]	@ (8001228 <__eqdf2+0x84>)
 80011c2:	468c      	mov	ip, r1
 80011c4:	031f      	lsls	r7, r3, #12
 80011c6:	0069      	lsls	r1, r5, #1
 80011c8:	005e      	lsls	r6, r3, #1
 80011ca:	0d49      	lsrs	r1, r1, #21
 80011cc:	0b3f      	lsrs	r7, r7, #12
 80011ce:	0d76      	lsrs	r6, r6, #21
 80011d0:	4281      	cmp	r1, r0
 80011d2:	d018      	beq.n	8001206 <__eqdf2+0x62>
 80011d4:	4286      	cmp	r6, r0
 80011d6:	d00f      	beq.n	80011f8 <__eqdf2+0x54>
 80011d8:	2001      	movs	r0, #1
 80011da:	42b1      	cmp	r1, r6
 80011dc:	d10d      	bne.n	80011fa <__eqdf2+0x56>
 80011de:	45bc      	cmp	ip, r7
 80011e0:	d10b      	bne.n	80011fa <__eqdf2+0x56>
 80011e2:	4294      	cmp	r4, r2
 80011e4:	d109      	bne.n	80011fa <__eqdf2+0x56>
 80011e6:	45d3      	cmp	fp, sl
 80011e8:	d01c      	beq.n	8001224 <__eqdf2+0x80>
 80011ea:	2900      	cmp	r1, #0
 80011ec:	d105      	bne.n	80011fa <__eqdf2+0x56>
 80011ee:	4660      	mov	r0, ip
 80011f0:	4320      	orrs	r0, r4
 80011f2:	1e43      	subs	r3, r0, #1
 80011f4:	4198      	sbcs	r0, r3
 80011f6:	e000      	b.n	80011fa <__eqdf2+0x56>
 80011f8:	2001      	movs	r0, #1
 80011fa:	bcf0      	pop	{r4, r5, r6, r7}
 80011fc:	46bb      	mov	fp, r7
 80011fe:	46b2      	mov	sl, r6
 8001200:	46a9      	mov	r9, r5
 8001202:	46a0      	mov	r8, r4
 8001204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001206:	2001      	movs	r0, #1
 8001208:	428e      	cmp	r6, r1
 800120a:	d1f6      	bne.n	80011fa <__eqdf2+0x56>
 800120c:	4661      	mov	r1, ip
 800120e:	4339      	orrs	r1, r7
 8001210:	000f      	movs	r7, r1
 8001212:	4317      	orrs	r7, r2
 8001214:	4327      	orrs	r7, r4
 8001216:	d1f0      	bne.n	80011fa <__eqdf2+0x56>
 8001218:	465b      	mov	r3, fp
 800121a:	4652      	mov	r2, sl
 800121c:	1a98      	subs	r0, r3, r2
 800121e:	1e43      	subs	r3, r0, #1
 8001220:	4198      	sbcs	r0, r3
 8001222:	e7ea      	b.n	80011fa <__eqdf2+0x56>
 8001224:	2000      	movs	r0, #0
 8001226:	e7e8      	b.n	80011fa <__eqdf2+0x56>
 8001228:	000007ff 	.word	0x000007ff

0800122c <__gedf2>:
 800122c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800122e:	4657      	mov	r7, sl
 8001230:	464e      	mov	r6, r9
 8001232:	4645      	mov	r5, r8
 8001234:	46de      	mov	lr, fp
 8001236:	b5e0      	push	{r5, r6, r7, lr}
 8001238:	000d      	movs	r5, r1
 800123a:	030f      	lsls	r7, r1, #12
 800123c:	0b39      	lsrs	r1, r7, #12
 800123e:	b083      	sub	sp, #12
 8001240:	0004      	movs	r4, r0
 8001242:	4680      	mov	r8, r0
 8001244:	9101      	str	r1, [sp, #4]
 8001246:	0058      	lsls	r0, r3, #1
 8001248:	0fe9      	lsrs	r1, r5, #31
 800124a:	4f31      	ldr	r7, [pc, #196]	@ (8001310 <__gedf2+0xe4>)
 800124c:	0d40      	lsrs	r0, r0, #21
 800124e:	468c      	mov	ip, r1
 8001250:	006e      	lsls	r6, r5, #1
 8001252:	0319      	lsls	r1, r3, #12
 8001254:	4682      	mov	sl, r0
 8001256:	4691      	mov	r9, r2
 8001258:	0d76      	lsrs	r6, r6, #21
 800125a:	0b09      	lsrs	r1, r1, #12
 800125c:	0fd8      	lsrs	r0, r3, #31
 800125e:	42be      	cmp	r6, r7
 8001260:	d01f      	beq.n	80012a2 <__gedf2+0x76>
 8001262:	45ba      	cmp	sl, r7
 8001264:	d00f      	beq.n	8001286 <__gedf2+0x5a>
 8001266:	2e00      	cmp	r6, #0
 8001268:	d12f      	bne.n	80012ca <__gedf2+0x9e>
 800126a:	4655      	mov	r5, sl
 800126c:	9e01      	ldr	r6, [sp, #4]
 800126e:	4334      	orrs	r4, r6
 8001270:	2d00      	cmp	r5, #0
 8001272:	d127      	bne.n	80012c4 <__gedf2+0x98>
 8001274:	430a      	orrs	r2, r1
 8001276:	d03a      	beq.n	80012ee <__gedf2+0xc2>
 8001278:	2c00      	cmp	r4, #0
 800127a:	d145      	bne.n	8001308 <__gedf2+0xdc>
 800127c:	2800      	cmp	r0, #0
 800127e:	d11a      	bne.n	80012b6 <__gedf2+0x8a>
 8001280:	2001      	movs	r0, #1
 8001282:	4240      	negs	r0, r0
 8001284:	e017      	b.n	80012b6 <__gedf2+0x8a>
 8001286:	4311      	orrs	r1, r2
 8001288:	d13b      	bne.n	8001302 <__gedf2+0xd6>
 800128a:	2e00      	cmp	r6, #0
 800128c:	d102      	bne.n	8001294 <__gedf2+0x68>
 800128e:	9f01      	ldr	r7, [sp, #4]
 8001290:	4327      	orrs	r7, r4
 8001292:	d0f3      	beq.n	800127c <__gedf2+0x50>
 8001294:	4584      	cmp	ip, r0
 8001296:	d109      	bne.n	80012ac <__gedf2+0x80>
 8001298:	4663      	mov	r3, ip
 800129a:	2b00      	cmp	r3, #0
 800129c:	d0f0      	beq.n	8001280 <__gedf2+0x54>
 800129e:	4660      	mov	r0, ip
 80012a0:	e009      	b.n	80012b6 <__gedf2+0x8a>
 80012a2:	9f01      	ldr	r7, [sp, #4]
 80012a4:	4327      	orrs	r7, r4
 80012a6:	d12c      	bne.n	8001302 <__gedf2+0xd6>
 80012a8:	45b2      	cmp	sl, r6
 80012aa:	d024      	beq.n	80012f6 <__gedf2+0xca>
 80012ac:	4663      	mov	r3, ip
 80012ae:	2002      	movs	r0, #2
 80012b0:	3b01      	subs	r3, #1
 80012b2:	4018      	ands	r0, r3
 80012b4:	3801      	subs	r0, #1
 80012b6:	b003      	add	sp, #12
 80012b8:	bcf0      	pop	{r4, r5, r6, r7}
 80012ba:	46bb      	mov	fp, r7
 80012bc:	46b2      	mov	sl, r6
 80012be:	46a9      	mov	r9, r5
 80012c0:	46a0      	mov	r8, r4
 80012c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c4:	2c00      	cmp	r4, #0
 80012c6:	d0d9      	beq.n	800127c <__gedf2+0x50>
 80012c8:	e7e4      	b.n	8001294 <__gedf2+0x68>
 80012ca:	4654      	mov	r4, sl
 80012cc:	2c00      	cmp	r4, #0
 80012ce:	d0ed      	beq.n	80012ac <__gedf2+0x80>
 80012d0:	4584      	cmp	ip, r0
 80012d2:	d1eb      	bne.n	80012ac <__gedf2+0x80>
 80012d4:	4556      	cmp	r6, sl
 80012d6:	dce9      	bgt.n	80012ac <__gedf2+0x80>
 80012d8:	dbde      	blt.n	8001298 <__gedf2+0x6c>
 80012da:	9b01      	ldr	r3, [sp, #4]
 80012dc:	428b      	cmp	r3, r1
 80012de:	d8e5      	bhi.n	80012ac <__gedf2+0x80>
 80012e0:	d1da      	bne.n	8001298 <__gedf2+0x6c>
 80012e2:	45c8      	cmp	r8, r9
 80012e4:	d8e2      	bhi.n	80012ac <__gedf2+0x80>
 80012e6:	2000      	movs	r0, #0
 80012e8:	45c8      	cmp	r8, r9
 80012ea:	d2e4      	bcs.n	80012b6 <__gedf2+0x8a>
 80012ec:	e7d4      	b.n	8001298 <__gedf2+0x6c>
 80012ee:	2000      	movs	r0, #0
 80012f0:	2c00      	cmp	r4, #0
 80012f2:	d0e0      	beq.n	80012b6 <__gedf2+0x8a>
 80012f4:	e7da      	b.n	80012ac <__gedf2+0x80>
 80012f6:	4311      	orrs	r1, r2
 80012f8:	d103      	bne.n	8001302 <__gedf2+0xd6>
 80012fa:	4584      	cmp	ip, r0
 80012fc:	d1d6      	bne.n	80012ac <__gedf2+0x80>
 80012fe:	2000      	movs	r0, #0
 8001300:	e7d9      	b.n	80012b6 <__gedf2+0x8a>
 8001302:	2002      	movs	r0, #2
 8001304:	4240      	negs	r0, r0
 8001306:	e7d6      	b.n	80012b6 <__gedf2+0x8a>
 8001308:	4584      	cmp	ip, r0
 800130a:	d0e6      	beq.n	80012da <__gedf2+0xae>
 800130c:	e7ce      	b.n	80012ac <__gedf2+0x80>
 800130e:	46c0      	nop			@ (mov r8, r8)
 8001310:	000007ff 	.word	0x000007ff

08001314 <__ledf2>:
 8001314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001316:	4657      	mov	r7, sl
 8001318:	464e      	mov	r6, r9
 800131a:	4645      	mov	r5, r8
 800131c:	46de      	mov	lr, fp
 800131e:	b5e0      	push	{r5, r6, r7, lr}
 8001320:	000d      	movs	r5, r1
 8001322:	030f      	lsls	r7, r1, #12
 8001324:	0004      	movs	r4, r0
 8001326:	4680      	mov	r8, r0
 8001328:	0fe8      	lsrs	r0, r5, #31
 800132a:	0b39      	lsrs	r1, r7, #12
 800132c:	4684      	mov	ip, r0
 800132e:	b083      	sub	sp, #12
 8001330:	0058      	lsls	r0, r3, #1
 8001332:	4f30      	ldr	r7, [pc, #192]	@ (80013f4 <__ledf2+0xe0>)
 8001334:	0d40      	lsrs	r0, r0, #21
 8001336:	9101      	str	r1, [sp, #4]
 8001338:	031e      	lsls	r6, r3, #12
 800133a:	0069      	lsls	r1, r5, #1
 800133c:	4682      	mov	sl, r0
 800133e:	4691      	mov	r9, r2
 8001340:	0d49      	lsrs	r1, r1, #21
 8001342:	0b36      	lsrs	r6, r6, #12
 8001344:	0fd8      	lsrs	r0, r3, #31
 8001346:	42b9      	cmp	r1, r7
 8001348:	d020      	beq.n	800138c <__ledf2+0x78>
 800134a:	45ba      	cmp	sl, r7
 800134c:	d00f      	beq.n	800136e <__ledf2+0x5a>
 800134e:	2900      	cmp	r1, #0
 8001350:	d12b      	bne.n	80013aa <__ledf2+0x96>
 8001352:	9901      	ldr	r1, [sp, #4]
 8001354:	430c      	orrs	r4, r1
 8001356:	4651      	mov	r1, sl
 8001358:	2900      	cmp	r1, #0
 800135a:	d137      	bne.n	80013cc <__ledf2+0xb8>
 800135c:	4332      	orrs	r2, r6
 800135e:	d038      	beq.n	80013d2 <__ledf2+0xbe>
 8001360:	2c00      	cmp	r4, #0
 8001362:	d144      	bne.n	80013ee <__ledf2+0xda>
 8001364:	2800      	cmp	r0, #0
 8001366:	d119      	bne.n	800139c <__ledf2+0x88>
 8001368:	2001      	movs	r0, #1
 800136a:	4240      	negs	r0, r0
 800136c:	e016      	b.n	800139c <__ledf2+0x88>
 800136e:	4316      	orrs	r6, r2
 8001370:	d113      	bne.n	800139a <__ledf2+0x86>
 8001372:	2900      	cmp	r1, #0
 8001374:	d102      	bne.n	800137c <__ledf2+0x68>
 8001376:	9f01      	ldr	r7, [sp, #4]
 8001378:	4327      	orrs	r7, r4
 800137a:	d0f3      	beq.n	8001364 <__ledf2+0x50>
 800137c:	4584      	cmp	ip, r0
 800137e:	d020      	beq.n	80013c2 <__ledf2+0xae>
 8001380:	4663      	mov	r3, ip
 8001382:	2002      	movs	r0, #2
 8001384:	3b01      	subs	r3, #1
 8001386:	4018      	ands	r0, r3
 8001388:	3801      	subs	r0, #1
 800138a:	e007      	b.n	800139c <__ledf2+0x88>
 800138c:	9f01      	ldr	r7, [sp, #4]
 800138e:	4327      	orrs	r7, r4
 8001390:	d103      	bne.n	800139a <__ledf2+0x86>
 8001392:	458a      	cmp	sl, r1
 8001394:	d1f4      	bne.n	8001380 <__ledf2+0x6c>
 8001396:	4316      	orrs	r6, r2
 8001398:	d01f      	beq.n	80013da <__ledf2+0xc6>
 800139a:	2002      	movs	r0, #2
 800139c:	b003      	add	sp, #12
 800139e:	bcf0      	pop	{r4, r5, r6, r7}
 80013a0:	46bb      	mov	fp, r7
 80013a2:	46b2      	mov	sl, r6
 80013a4:	46a9      	mov	r9, r5
 80013a6:	46a0      	mov	r8, r4
 80013a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013aa:	4654      	mov	r4, sl
 80013ac:	2c00      	cmp	r4, #0
 80013ae:	d0e7      	beq.n	8001380 <__ledf2+0x6c>
 80013b0:	4584      	cmp	ip, r0
 80013b2:	d1e5      	bne.n	8001380 <__ledf2+0x6c>
 80013b4:	4551      	cmp	r1, sl
 80013b6:	dce3      	bgt.n	8001380 <__ledf2+0x6c>
 80013b8:	db03      	blt.n	80013c2 <__ledf2+0xae>
 80013ba:	9b01      	ldr	r3, [sp, #4]
 80013bc:	42b3      	cmp	r3, r6
 80013be:	d8df      	bhi.n	8001380 <__ledf2+0x6c>
 80013c0:	d00f      	beq.n	80013e2 <__ledf2+0xce>
 80013c2:	4663      	mov	r3, ip
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0cf      	beq.n	8001368 <__ledf2+0x54>
 80013c8:	4660      	mov	r0, ip
 80013ca:	e7e7      	b.n	800139c <__ledf2+0x88>
 80013cc:	2c00      	cmp	r4, #0
 80013ce:	d0c9      	beq.n	8001364 <__ledf2+0x50>
 80013d0:	e7d4      	b.n	800137c <__ledf2+0x68>
 80013d2:	2000      	movs	r0, #0
 80013d4:	2c00      	cmp	r4, #0
 80013d6:	d0e1      	beq.n	800139c <__ledf2+0x88>
 80013d8:	e7d2      	b.n	8001380 <__ledf2+0x6c>
 80013da:	4584      	cmp	ip, r0
 80013dc:	d1d0      	bne.n	8001380 <__ledf2+0x6c>
 80013de:	2000      	movs	r0, #0
 80013e0:	e7dc      	b.n	800139c <__ledf2+0x88>
 80013e2:	45c8      	cmp	r8, r9
 80013e4:	d8cc      	bhi.n	8001380 <__ledf2+0x6c>
 80013e6:	2000      	movs	r0, #0
 80013e8:	45c8      	cmp	r8, r9
 80013ea:	d2d7      	bcs.n	800139c <__ledf2+0x88>
 80013ec:	e7e9      	b.n	80013c2 <__ledf2+0xae>
 80013ee:	4584      	cmp	ip, r0
 80013f0:	d0e3      	beq.n	80013ba <__ledf2+0xa6>
 80013f2:	e7c5      	b.n	8001380 <__ledf2+0x6c>
 80013f4:	000007ff 	.word	0x000007ff

080013f8 <__aeabi_dmul>:
 80013f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fa:	4657      	mov	r7, sl
 80013fc:	46de      	mov	lr, fp
 80013fe:	464e      	mov	r6, r9
 8001400:	4645      	mov	r5, r8
 8001402:	b5e0      	push	{r5, r6, r7, lr}
 8001404:	001f      	movs	r7, r3
 8001406:	030b      	lsls	r3, r1, #12
 8001408:	0b1b      	lsrs	r3, r3, #12
 800140a:	0016      	movs	r6, r2
 800140c:	469a      	mov	sl, r3
 800140e:	0fca      	lsrs	r2, r1, #31
 8001410:	004b      	lsls	r3, r1, #1
 8001412:	0004      	movs	r4, r0
 8001414:	4693      	mov	fp, r2
 8001416:	b087      	sub	sp, #28
 8001418:	0d5b      	lsrs	r3, r3, #21
 800141a:	d100      	bne.n	800141e <__aeabi_dmul+0x26>
 800141c:	e0d5      	b.n	80015ca <__aeabi_dmul+0x1d2>
 800141e:	4abb      	ldr	r2, [pc, #748]	@ (800170c <__aeabi_dmul+0x314>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d100      	bne.n	8001426 <__aeabi_dmul+0x2e>
 8001424:	e0f8      	b.n	8001618 <__aeabi_dmul+0x220>
 8001426:	4651      	mov	r1, sl
 8001428:	0f42      	lsrs	r2, r0, #29
 800142a:	00c9      	lsls	r1, r1, #3
 800142c:	430a      	orrs	r2, r1
 800142e:	2180      	movs	r1, #128	@ 0x80
 8001430:	0409      	lsls	r1, r1, #16
 8001432:	4311      	orrs	r1, r2
 8001434:	00c2      	lsls	r2, r0, #3
 8001436:	4691      	mov	r9, r2
 8001438:	4ab5      	ldr	r2, [pc, #724]	@ (8001710 <__aeabi_dmul+0x318>)
 800143a:	468a      	mov	sl, r1
 800143c:	189d      	adds	r5, r3, r2
 800143e:	2300      	movs	r3, #0
 8001440:	4698      	mov	r8, r3
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	033c      	lsls	r4, r7, #12
 8001446:	007b      	lsls	r3, r7, #1
 8001448:	0ffa      	lsrs	r2, r7, #31
 800144a:	0030      	movs	r0, r6
 800144c:	0b24      	lsrs	r4, r4, #12
 800144e:	0d5b      	lsrs	r3, r3, #21
 8001450:	9200      	str	r2, [sp, #0]
 8001452:	d100      	bne.n	8001456 <__aeabi_dmul+0x5e>
 8001454:	e096      	b.n	8001584 <__aeabi_dmul+0x18c>
 8001456:	4aad      	ldr	r2, [pc, #692]	@ (800170c <__aeabi_dmul+0x314>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d031      	beq.n	80014c0 <__aeabi_dmul+0xc8>
 800145c:	0f72      	lsrs	r2, r6, #29
 800145e:	00e4      	lsls	r4, r4, #3
 8001460:	4322      	orrs	r2, r4
 8001462:	2480      	movs	r4, #128	@ 0x80
 8001464:	0424      	lsls	r4, r4, #16
 8001466:	4314      	orrs	r4, r2
 8001468:	4aa9      	ldr	r2, [pc, #676]	@ (8001710 <__aeabi_dmul+0x318>)
 800146a:	00f0      	lsls	r0, r6, #3
 800146c:	4694      	mov	ip, r2
 800146e:	4463      	add	r3, ip
 8001470:	195b      	adds	r3, r3, r5
 8001472:	1c5a      	adds	r2, r3, #1
 8001474:	9201      	str	r2, [sp, #4]
 8001476:	4642      	mov	r2, r8
 8001478:	2600      	movs	r6, #0
 800147a:	2a0a      	cmp	r2, #10
 800147c:	dc42      	bgt.n	8001504 <__aeabi_dmul+0x10c>
 800147e:	465a      	mov	r2, fp
 8001480:	9900      	ldr	r1, [sp, #0]
 8001482:	404a      	eors	r2, r1
 8001484:	4693      	mov	fp, r2
 8001486:	4642      	mov	r2, r8
 8001488:	2a02      	cmp	r2, #2
 800148a:	dc32      	bgt.n	80014f2 <__aeabi_dmul+0xfa>
 800148c:	3a01      	subs	r2, #1
 800148e:	2a01      	cmp	r2, #1
 8001490:	d900      	bls.n	8001494 <__aeabi_dmul+0x9c>
 8001492:	e149      	b.n	8001728 <__aeabi_dmul+0x330>
 8001494:	2e02      	cmp	r6, #2
 8001496:	d100      	bne.n	800149a <__aeabi_dmul+0xa2>
 8001498:	e0ca      	b.n	8001630 <__aeabi_dmul+0x238>
 800149a:	2e01      	cmp	r6, #1
 800149c:	d13d      	bne.n	800151a <__aeabi_dmul+0x122>
 800149e:	2300      	movs	r3, #0
 80014a0:	2400      	movs	r4, #0
 80014a2:	2200      	movs	r2, #0
 80014a4:	0010      	movs	r0, r2
 80014a6:	465a      	mov	r2, fp
 80014a8:	051b      	lsls	r3, r3, #20
 80014aa:	4323      	orrs	r3, r4
 80014ac:	07d2      	lsls	r2, r2, #31
 80014ae:	4313      	orrs	r3, r2
 80014b0:	0019      	movs	r1, r3
 80014b2:	b007      	add	sp, #28
 80014b4:	bcf0      	pop	{r4, r5, r6, r7}
 80014b6:	46bb      	mov	fp, r7
 80014b8:	46b2      	mov	sl, r6
 80014ba:	46a9      	mov	r9, r5
 80014bc:	46a0      	mov	r8, r4
 80014be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014c0:	4b92      	ldr	r3, [pc, #584]	@ (800170c <__aeabi_dmul+0x314>)
 80014c2:	4326      	orrs	r6, r4
 80014c4:	18eb      	adds	r3, r5, r3
 80014c6:	2e00      	cmp	r6, #0
 80014c8:	d100      	bne.n	80014cc <__aeabi_dmul+0xd4>
 80014ca:	e0bb      	b.n	8001644 <__aeabi_dmul+0x24c>
 80014cc:	2203      	movs	r2, #3
 80014ce:	4641      	mov	r1, r8
 80014d0:	4311      	orrs	r1, r2
 80014d2:	465a      	mov	r2, fp
 80014d4:	4688      	mov	r8, r1
 80014d6:	9900      	ldr	r1, [sp, #0]
 80014d8:	404a      	eors	r2, r1
 80014da:	2180      	movs	r1, #128	@ 0x80
 80014dc:	0109      	lsls	r1, r1, #4
 80014de:	468c      	mov	ip, r1
 80014e0:	0029      	movs	r1, r5
 80014e2:	4461      	add	r1, ip
 80014e4:	9101      	str	r1, [sp, #4]
 80014e6:	4641      	mov	r1, r8
 80014e8:	290a      	cmp	r1, #10
 80014ea:	dd00      	ble.n	80014ee <__aeabi_dmul+0xf6>
 80014ec:	e233      	b.n	8001956 <__aeabi_dmul+0x55e>
 80014ee:	4693      	mov	fp, r2
 80014f0:	2603      	movs	r6, #3
 80014f2:	4642      	mov	r2, r8
 80014f4:	2701      	movs	r7, #1
 80014f6:	4097      	lsls	r7, r2
 80014f8:	21a6      	movs	r1, #166	@ 0xa6
 80014fa:	003a      	movs	r2, r7
 80014fc:	00c9      	lsls	r1, r1, #3
 80014fe:	400a      	ands	r2, r1
 8001500:	420f      	tst	r7, r1
 8001502:	d031      	beq.n	8001568 <__aeabi_dmul+0x170>
 8001504:	9e02      	ldr	r6, [sp, #8]
 8001506:	2e02      	cmp	r6, #2
 8001508:	d100      	bne.n	800150c <__aeabi_dmul+0x114>
 800150a:	e235      	b.n	8001978 <__aeabi_dmul+0x580>
 800150c:	2e03      	cmp	r6, #3
 800150e:	d100      	bne.n	8001512 <__aeabi_dmul+0x11a>
 8001510:	e1d2      	b.n	80018b8 <__aeabi_dmul+0x4c0>
 8001512:	4654      	mov	r4, sl
 8001514:	4648      	mov	r0, r9
 8001516:	2e01      	cmp	r6, #1
 8001518:	d0c1      	beq.n	800149e <__aeabi_dmul+0xa6>
 800151a:	9a01      	ldr	r2, [sp, #4]
 800151c:	4b7d      	ldr	r3, [pc, #500]	@ (8001714 <__aeabi_dmul+0x31c>)
 800151e:	4694      	mov	ip, r2
 8001520:	4463      	add	r3, ip
 8001522:	2b00      	cmp	r3, #0
 8001524:	dc00      	bgt.n	8001528 <__aeabi_dmul+0x130>
 8001526:	e0c0      	b.n	80016aa <__aeabi_dmul+0x2b2>
 8001528:	0742      	lsls	r2, r0, #29
 800152a:	d009      	beq.n	8001540 <__aeabi_dmul+0x148>
 800152c:	220f      	movs	r2, #15
 800152e:	4002      	ands	r2, r0
 8001530:	2a04      	cmp	r2, #4
 8001532:	d005      	beq.n	8001540 <__aeabi_dmul+0x148>
 8001534:	1d02      	adds	r2, r0, #4
 8001536:	4282      	cmp	r2, r0
 8001538:	4180      	sbcs	r0, r0
 800153a:	4240      	negs	r0, r0
 800153c:	1824      	adds	r4, r4, r0
 800153e:	0010      	movs	r0, r2
 8001540:	01e2      	lsls	r2, r4, #7
 8001542:	d506      	bpl.n	8001552 <__aeabi_dmul+0x15a>
 8001544:	4b74      	ldr	r3, [pc, #464]	@ (8001718 <__aeabi_dmul+0x320>)
 8001546:	9a01      	ldr	r2, [sp, #4]
 8001548:	401c      	ands	r4, r3
 800154a:	2380      	movs	r3, #128	@ 0x80
 800154c:	4694      	mov	ip, r2
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	4463      	add	r3, ip
 8001552:	4a72      	ldr	r2, [pc, #456]	@ (800171c <__aeabi_dmul+0x324>)
 8001554:	4293      	cmp	r3, r2
 8001556:	dc6b      	bgt.n	8001630 <__aeabi_dmul+0x238>
 8001558:	0762      	lsls	r2, r4, #29
 800155a:	08c0      	lsrs	r0, r0, #3
 800155c:	0264      	lsls	r4, r4, #9
 800155e:	055b      	lsls	r3, r3, #21
 8001560:	4302      	orrs	r2, r0
 8001562:	0b24      	lsrs	r4, r4, #12
 8001564:	0d5b      	lsrs	r3, r3, #21
 8001566:	e79d      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001568:	2190      	movs	r1, #144	@ 0x90
 800156a:	0089      	lsls	r1, r1, #2
 800156c:	420f      	tst	r7, r1
 800156e:	d163      	bne.n	8001638 <__aeabi_dmul+0x240>
 8001570:	2288      	movs	r2, #136	@ 0x88
 8001572:	423a      	tst	r2, r7
 8001574:	d100      	bne.n	8001578 <__aeabi_dmul+0x180>
 8001576:	e0d7      	b.n	8001728 <__aeabi_dmul+0x330>
 8001578:	9b00      	ldr	r3, [sp, #0]
 800157a:	46a2      	mov	sl, r4
 800157c:	469b      	mov	fp, r3
 800157e:	4681      	mov	r9, r0
 8001580:	9602      	str	r6, [sp, #8]
 8001582:	e7bf      	b.n	8001504 <__aeabi_dmul+0x10c>
 8001584:	0023      	movs	r3, r4
 8001586:	4333      	orrs	r3, r6
 8001588:	d100      	bne.n	800158c <__aeabi_dmul+0x194>
 800158a:	e07f      	b.n	800168c <__aeabi_dmul+0x294>
 800158c:	2c00      	cmp	r4, #0
 800158e:	d100      	bne.n	8001592 <__aeabi_dmul+0x19a>
 8001590:	e1ad      	b.n	80018ee <__aeabi_dmul+0x4f6>
 8001592:	0020      	movs	r0, r4
 8001594:	f000 fe44 	bl	8002220 <__clzsi2>
 8001598:	0002      	movs	r2, r0
 800159a:	0003      	movs	r3, r0
 800159c:	3a0b      	subs	r2, #11
 800159e:	201d      	movs	r0, #29
 80015a0:	0019      	movs	r1, r3
 80015a2:	1a82      	subs	r2, r0, r2
 80015a4:	0030      	movs	r0, r6
 80015a6:	3908      	subs	r1, #8
 80015a8:	40d0      	lsrs	r0, r2
 80015aa:	408c      	lsls	r4, r1
 80015ac:	4304      	orrs	r4, r0
 80015ae:	0030      	movs	r0, r6
 80015b0:	4088      	lsls	r0, r1
 80015b2:	4a5b      	ldr	r2, [pc, #364]	@ (8001720 <__aeabi_dmul+0x328>)
 80015b4:	1aeb      	subs	r3, r5, r3
 80015b6:	4694      	mov	ip, r2
 80015b8:	4463      	add	r3, ip
 80015ba:	1c5a      	adds	r2, r3, #1
 80015bc:	9201      	str	r2, [sp, #4]
 80015be:	4642      	mov	r2, r8
 80015c0:	2600      	movs	r6, #0
 80015c2:	2a0a      	cmp	r2, #10
 80015c4:	dc00      	bgt.n	80015c8 <__aeabi_dmul+0x1d0>
 80015c6:	e75a      	b.n	800147e <__aeabi_dmul+0x86>
 80015c8:	e79c      	b.n	8001504 <__aeabi_dmul+0x10c>
 80015ca:	4653      	mov	r3, sl
 80015cc:	4303      	orrs	r3, r0
 80015ce:	4699      	mov	r9, r3
 80015d0:	d054      	beq.n	800167c <__aeabi_dmul+0x284>
 80015d2:	4653      	mov	r3, sl
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d100      	bne.n	80015da <__aeabi_dmul+0x1e2>
 80015d8:	e177      	b.n	80018ca <__aeabi_dmul+0x4d2>
 80015da:	4650      	mov	r0, sl
 80015dc:	f000 fe20 	bl	8002220 <__clzsi2>
 80015e0:	230b      	movs	r3, #11
 80015e2:	425b      	negs	r3, r3
 80015e4:	469c      	mov	ip, r3
 80015e6:	0002      	movs	r2, r0
 80015e8:	4484      	add	ip, r0
 80015ea:	0011      	movs	r1, r2
 80015ec:	4650      	mov	r0, sl
 80015ee:	3908      	subs	r1, #8
 80015f0:	4088      	lsls	r0, r1
 80015f2:	231d      	movs	r3, #29
 80015f4:	4680      	mov	r8, r0
 80015f6:	4660      	mov	r0, ip
 80015f8:	1a1b      	subs	r3, r3, r0
 80015fa:	0020      	movs	r0, r4
 80015fc:	40d8      	lsrs	r0, r3
 80015fe:	0003      	movs	r3, r0
 8001600:	4640      	mov	r0, r8
 8001602:	4303      	orrs	r3, r0
 8001604:	469a      	mov	sl, r3
 8001606:	0023      	movs	r3, r4
 8001608:	408b      	lsls	r3, r1
 800160a:	4699      	mov	r9, r3
 800160c:	2300      	movs	r3, #0
 800160e:	4d44      	ldr	r5, [pc, #272]	@ (8001720 <__aeabi_dmul+0x328>)
 8001610:	4698      	mov	r8, r3
 8001612:	1aad      	subs	r5, r5, r2
 8001614:	9302      	str	r3, [sp, #8]
 8001616:	e715      	b.n	8001444 <__aeabi_dmul+0x4c>
 8001618:	4652      	mov	r2, sl
 800161a:	4302      	orrs	r2, r0
 800161c:	4691      	mov	r9, r2
 800161e:	d126      	bne.n	800166e <__aeabi_dmul+0x276>
 8001620:	2200      	movs	r2, #0
 8001622:	001d      	movs	r5, r3
 8001624:	2302      	movs	r3, #2
 8001626:	4692      	mov	sl, r2
 8001628:	3208      	adds	r2, #8
 800162a:	4690      	mov	r8, r2
 800162c:	9302      	str	r3, [sp, #8]
 800162e:	e709      	b.n	8001444 <__aeabi_dmul+0x4c>
 8001630:	2400      	movs	r4, #0
 8001632:	2200      	movs	r2, #0
 8001634:	4b35      	ldr	r3, [pc, #212]	@ (800170c <__aeabi_dmul+0x314>)
 8001636:	e735      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001638:	2300      	movs	r3, #0
 800163a:	2480      	movs	r4, #128	@ 0x80
 800163c:	469b      	mov	fp, r3
 800163e:	0324      	lsls	r4, r4, #12
 8001640:	4b32      	ldr	r3, [pc, #200]	@ (800170c <__aeabi_dmul+0x314>)
 8001642:	e72f      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001644:	2202      	movs	r2, #2
 8001646:	4641      	mov	r1, r8
 8001648:	4311      	orrs	r1, r2
 800164a:	2280      	movs	r2, #128	@ 0x80
 800164c:	0112      	lsls	r2, r2, #4
 800164e:	4694      	mov	ip, r2
 8001650:	002a      	movs	r2, r5
 8001652:	4462      	add	r2, ip
 8001654:	4688      	mov	r8, r1
 8001656:	9201      	str	r2, [sp, #4]
 8001658:	290a      	cmp	r1, #10
 800165a:	dd00      	ble.n	800165e <__aeabi_dmul+0x266>
 800165c:	e752      	b.n	8001504 <__aeabi_dmul+0x10c>
 800165e:	465a      	mov	r2, fp
 8001660:	2000      	movs	r0, #0
 8001662:	9900      	ldr	r1, [sp, #0]
 8001664:	0004      	movs	r4, r0
 8001666:	404a      	eors	r2, r1
 8001668:	4693      	mov	fp, r2
 800166a:	2602      	movs	r6, #2
 800166c:	e70b      	b.n	8001486 <__aeabi_dmul+0x8e>
 800166e:	220c      	movs	r2, #12
 8001670:	001d      	movs	r5, r3
 8001672:	2303      	movs	r3, #3
 8001674:	4681      	mov	r9, r0
 8001676:	4690      	mov	r8, r2
 8001678:	9302      	str	r3, [sp, #8]
 800167a:	e6e3      	b.n	8001444 <__aeabi_dmul+0x4c>
 800167c:	2300      	movs	r3, #0
 800167e:	469a      	mov	sl, r3
 8001680:	3304      	adds	r3, #4
 8001682:	4698      	mov	r8, r3
 8001684:	3b03      	subs	r3, #3
 8001686:	2500      	movs	r5, #0
 8001688:	9302      	str	r3, [sp, #8]
 800168a:	e6db      	b.n	8001444 <__aeabi_dmul+0x4c>
 800168c:	4642      	mov	r2, r8
 800168e:	3301      	adds	r3, #1
 8001690:	431a      	orrs	r2, r3
 8001692:	002b      	movs	r3, r5
 8001694:	4690      	mov	r8, r2
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	9201      	str	r2, [sp, #4]
 800169a:	4642      	mov	r2, r8
 800169c:	2400      	movs	r4, #0
 800169e:	2000      	movs	r0, #0
 80016a0:	2601      	movs	r6, #1
 80016a2:	2a0a      	cmp	r2, #10
 80016a4:	dc00      	bgt.n	80016a8 <__aeabi_dmul+0x2b0>
 80016a6:	e6ea      	b.n	800147e <__aeabi_dmul+0x86>
 80016a8:	e72c      	b.n	8001504 <__aeabi_dmul+0x10c>
 80016aa:	2201      	movs	r2, #1
 80016ac:	1ad2      	subs	r2, r2, r3
 80016ae:	2a38      	cmp	r2, #56	@ 0x38
 80016b0:	dd00      	ble.n	80016b4 <__aeabi_dmul+0x2bc>
 80016b2:	e6f4      	b.n	800149e <__aeabi_dmul+0xa6>
 80016b4:	2a1f      	cmp	r2, #31
 80016b6:	dc00      	bgt.n	80016ba <__aeabi_dmul+0x2c2>
 80016b8:	e12a      	b.n	8001910 <__aeabi_dmul+0x518>
 80016ba:	211f      	movs	r1, #31
 80016bc:	4249      	negs	r1, r1
 80016be:	1acb      	subs	r3, r1, r3
 80016c0:	0021      	movs	r1, r4
 80016c2:	40d9      	lsrs	r1, r3
 80016c4:	000b      	movs	r3, r1
 80016c6:	2a20      	cmp	r2, #32
 80016c8:	d005      	beq.n	80016d6 <__aeabi_dmul+0x2de>
 80016ca:	4a16      	ldr	r2, [pc, #88]	@ (8001724 <__aeabi_dmul+0x32c>)
 80016cc:	9d01      	ldr	r5, [sp, #4]
 80016ce:	4694      	mov	ip, r2
 80016d0:	4465      	add	r5, ip
 80016d2:	40ac      	lsls	r4, r5
 80016d4:	4320      	orrs	r0, r4
 80016d6:	1e42      	subs	r2, r0, #1
 80016d8:	4190      	sbcs	r0, r2
 80016da:	4318      	orrs	r0, r3
 80016dc:	2307      	movs	r3, #7
 80016de:	0019      	movs	r1, r3
 80016e0:	2400      	movs	r4, #0
 80016e2:	4001      	ands	r1, r0
 80016e4:	4203      	tst	r3, r0
 80016e6:	d00c      	beq.n	8001702 <__aeabi_dmul+0x30a>
 80016e8:	230f      	movs	r3, #15
 80016ea:	4003      	ands	r3, r0
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d100      	bne.n	80016f2 <__aeabi_dmul+0x2fa>
 80016f0:	e140      	b.n	8001974 <__aeabi_dmul+0x57c>
 80016f2:	1d03      	adds	r3, r0, #4
 80016f4:	4283      	cmp	r3, r0
 80016f6:	41a4      	sbcs	r4, r4
 80016f8:	0018      	movs	r0, r3
 80016fa:	4264      	negs	r4, r4
 80016fc:	0761      	lsls	r1, r4, #29
 80016fe:	0264      	lsls	r4, r4, #9
 8001700:	0b24      	lsrs	r4, r4, #12
 8001702:	08c2      	lsrs	r2, r0, #3
 8001704:	2300      	movs	r3, #0
 8001706:	430a      	orrs	r2, r1
 8001708:	e6cc      	b.n	80014a4 <__aeabi_dmul+0xac>
 800170a:	46c0      	nop			@ (mov r8, r8)
 800170c:	000007ff 	.word	0x000007ff
 8001710:	fffffc01 	.word	0xfffffc01
 8001714:	000003ff 	.word	0x000003ff
 8001718:	feffffff 	.word	0xfeffffff
 800171c:	000007fe 	.word	0x000007fe
 8001720:	fffffc0d 	.word	0xfffffc0d
 8001724:	0000043e 	.word	0x0000043e
 8001728:	4649      	mov	r1, r9
 800172a:	464a      	mov	r2, r9
 800172c:	0409      	lsls	r1, r1, #16
 800172e:	0c09      	lsrs	r1, r1, #16
 8001730:	000d      	movs	r5, r1
 8001732:	0c16      	lsrs	r6, r2, #16
 8001734:	0c02      	lsrs	r2, r0, #16
 8001736:	0400      	lsls	r0, r0, #16
 8001738:	0c00      	lsrs	r0, r0, #16
 800173a:	4345      	muls	r5, r0
 800173c:	46ac      	mov	ip, r5
 800173e:	0005      	movs	r5, r0
 8001740:	4375      	muls	r5, r6
 8001742:	46a8      	mov	r8, r5
 8001744:	0015      	movs	r5, r2
 8001746:	000f      	movs	r7, r1
 8001748:	4375      	muls	r5, r6
 800174a:	9200      	str	r2, [sp, #0]
 800174c:	9502      	str	r5, [sp, #8]
 800174e:	002a      	movs	r2, r5
 8001750:	9d00      	ldr	r5, [sp, #0]
 8001752:	436f      	muls	r7, r5
 8001754:	4665      	mov	r5, ip
 8001756:	0c2d      	lsrs	r5, r5, #16
 8001758:	46a9      	mov	r9, r5
 800175a:	4447      	add	r7, r8
 800175c:	444f      	add	r7, r9
 800175e:	45b8      	cmp	r8, r7
 8001760:	d905      	bls.n	800176e <__aeabi_dmul+0x376>
 8001762:	0015      	movs	r5, r2
 8001764:	2280      	movs	r2, #128	@ 0x80
 8001766:	0252      	lsls	r2, r2, #9
 8001768:	4690      	mov	r8, r2
 800176a:	4445      	add	r5, r8
 800176c:	9502      	str	r5, [sp, #8]
 800176e:	0c3d      	lsrs	r5, r7, #16
 8001770:	9503      	str	r5, [sp, #12]
 8001772:	4665      	mov	r5, ip
 8001774:	042d      	lsls	r5, r5, #16
 8001776:	043f      	lsls	r7, r7, #16
 8001778:	0c2d      	lsrs	r5, r5, #16
 800177a:	46ac      	mov	ip, r5
 800177c:	003d      	movs	r5, r7
 800177e:	4465      	add	r5, ip
 8001780:	9504      	str	r5, [sp, #16]
 8001782:	0c25      	lsrs	r5, r4, #16
 8001784:	0424      	lsls	r4, r4, #16
 8001786:	0c24      	lsrs	r4, r4, #16
 8001788:	46ac      	mov	ip, r5
 800178a:	0025      	movs	r5, r4
 800178c:	4375      	muls	r5, r6
 800178e:	46a8      	mov	r8, r5
 8001790:	4665      	mov	r5, ip
 8001792:	000f      	movs	r7, r1
 8001794:	4369      	muls	r1, r5
 8001796:	4441      	add	r1, r8
 8001798:	4689      	mov	r9, r1
 800179a:	4367      	muls	r7, r4
 800179c:	0c39      	lsrs	r1, r7, #16
 800179e:	4449      	add	r1, r9
 80017a0:	436e      	muls	r6, r5
 80017a2:	4588      	cmp	r8, r1
 80017a4:	d903      	bls.n	80017ae <__aeabi_dmul+0x3b6>
 80017a6:	2280      	movs	r2, #128	@ 0x80
 80017a8:	0252      	lsls	r2, r2, #9
 80017aa:	4690      	mov	r8, r2
 80017ac:	4446      	add	r6, r8
 80017ae:	0c0d      	lsrs	r5, r1, #16
 80017b0:	46a8      	mov	r8, r5
 80017b2:	0035      	movs	r5, r6
 80017b4:	4445      	add	r5, r8
 80017b6:	9505      	str	r5, [sp, #20]
 80017b8:	9d03      	ldr	r5, [sp, #12]
 80017ba:	043f      	lsls	r7, r7, #16
 80017bc:	46a8      	mov	r8, r5
 80017be:	0c3f      	lsrs	r7, r7, #16
 80017c0:	0409      	lsls	r1, r1, #16
 80017c2:	19c9      	adds	r1, r1, r7
 80017c4:	4488      	add	r8, r1
 80017c6:	4645      	mov	r5, r8
 80017c8:	9503      	str	r5, [sp, #12]
 80017ca:	4655      	mov	r5, sl
 80017cc:	042e      	lsls	r6, r5, #16
 80017ce:	0c36      	lsrs	r6, r6, #16
 80017d0:	0c2f      	lsrs	r7, r5, #16
 80017d2:	0035      	movs	r5, r6
 80017d4:	4345      	muls	r5, r0
 80017d6:	4378      	muls	r0, r7
 80017d8:	4681      	mov	r9, r0
 80017da:	0038      	movs	r0, r7
 80017dc:	46a8      	mov	r8, r5
 80017de:	0c2d      	lsrs	r5, r5, #16
 80017e0:	46aa      	mov	sl, r5
 80017e2:	9a00      	ldr	r2, [sp, #0]
 80017e4:	4350      	muls	r0, r2
 80017e6:	4372      	muls	r2, r6
 80017e8:	444a      	add	r2, r9
 80017ea:	4452      	add	r2, sl
 80017ec:	4591      	cmp	r9, r2
 80017ee:	d903      	bls.n	80017f8 <__aeabi_dmul+0x400>
 80017f0:	2580      	movs	r5, #128	@ 0x80
 80017f2:	026d      	lsls	r5, r5, #9
 80017f4:	46a9      	mov	r9, r5
 80017f6:	4448      	add	r0, r9
 80017f8:	0c15      	lsrs	r5, r2, #16
 80017fa:	46a9      	mov	r9, r5
 80017fc:	4645      	mov	r5, r8
 80017fe:	042d      	lsls	r5, r5, #16
 8001800:	0c2d      	lsrs	r5, r5, #16
 8001802:	46a8      	mov	r8, r5
 8001804:	4665      	mov	r5, ip
 8001806:	437d      	muls	r5, r7
 8001808:	0412      	lsls	r2, r2, #16
 800180a:	4448      	add	r0, r9
 800180c:	4490      	add	r8, r2
 800180e:	46a9      	mov	r9, r5
 8001810:	0032      	movs	r2, r6
 8001812:	4665      	mov	r5, ip
 8001814:	4362      	muls	r2, r4
 8001816:	436e      	muls	r6, r5
 8001818:	437c      	muls	r4, r7
 800181a:	0c17      	lsrs	r7, r2, #16
 800181c:	1936      	adds	r6, r6, r4
 800181e:	19bf      	adds	r7, r7, r6
 8001820:	42bc      	cmp	r4, r7
 8001822:	d903      	bls.n	800182c <__aeabi_dmul+0x434>
 8001824:	2480      	movs	r4, #128	@ 0x80
 8001826:	0264      	lsls	r4, r4, #9
 8001828:	46a4      	mov	ip, r4
 800182a:	44e1      	add	r9, ip
 800182c:	9c02      	ldr	r4, [sp, #8]
 800182e:	9e03      	ldr	r6, [sp, #12]
 8001830:	46a4      	mov	ip, r4
 8001832:	9d05      	ldr	r5, [sp, #20]
 8001834:	4466      	add	r6, ip
 8001836:	428e      	cmp	r6, r1
 8001838:	4189      	sbcs	r1, r1
 800183a:	46ac      	mov	ip, r5
 800183c:	0412      	lsls	r2, r2, #16
 800183e:	043c      	lsls	r4, r7, #16
 8001840:	0c12      	lsrs	r2, r2, #16
 8001842:	18a2      	adds	r2, r4, r2
 8001844:	4462      	add	r2, ip
 8001846:	4249      	negs	r1, r1
 8001848:	1854      	adds	r4, r2, r1
 800184a:	4446      	add	r6, r8
 800184c:	46a4      	mov	ip, r4
 800184e:	4546      	cmp	r6, r8
 8001850:	41a4      	sbcs	r4, r4
 8001852:	4682      	mov	sl, r0
 8001854:	4264      	negs	r4, r4
 8001856:	46a0      	mov	r8, r4
 8001858:	42aa      	cmp	r2, r5
 800185a:	4192      	sbcs	r2, r2
 800185c:	458c      	cmp	ip, r1
 800185e:	4189      	sbcs	r1, r1
 8001860:	44e2      	add	sl, ip
 8001862:	44d0      	add	r8, sl
 8001864:	4249      	negs	r1, r1
 8001866:	4252      	negs	r2, r2
 8001868:	430a      	orrs	r2, r1
 800186a:	45a0      	cmp	r8, r4
 800186c:	41a4      	sbcs	r4, r4
 800186e:	4582      	cmp	sl, r0
 8001870:	4189      	sbcs	r1, r1
 8001872:	4264      	negs	r4, r4
 8001874:	4249      	negs	r1, r1
 8001876:	430c      	orrs	r4, r1
 8001878:	4641      	mov	r1, r8
 800187a:	0c3f      	lsrs	r7, r7, #16
 800187c:	19d2      	adds	r2, r2, r7
 800187e:	1912      	adds	r2, r2, r4
 8001880:	0dcc      	lsrs	r4, r1, #23
 8001882:	9904      	ldr	r1, [sp, #16]
 8001884:	0270      	lsls	r0, r6, #9
 8001886:	4308      	orrs	r0, r1
 8001888:	1e41      	subs	r1, r0, #1
 800188a:	4188      	sbcs	r0, r1
 800188c:	4641      	mov	r1, r8
 800188e:	444a      	add	r2, r9
 8001890:	0df6      	lsrs	r6, r6, #23
 8001892:	0252      	lsls	r2, r2, #9
 8001894:	4330      	orrs	r0, r6
 8001896:	0249      	lsls	r1, r1, #9
 8001898:	4314      	orrs	r4, r2
 800189a:	4308      	orrs	r0, r1
 800189c:	01d2      	lsls	r2, r2, #7
 800189e:	d535      	bpl.n	800190c <__aeabi_dmul+0x514>
 80018a0:	2201      	movs	r2, #1
 80018a2:	0843      	lsrs	r3, r0, #1
 80018a4:	4002      	ands	r2, r0
 80018a6:	4313      	orrs	r3, r2
 80018a8:	07e0      	lsls	r0, r4, #31
 80018aa:	4318      	orrs	r0, r3
 80018ac:	0864      	lsrs	r4, r4, #1
 80018ae:	e634      	b.n	800151a <__aeabi_dmul+0x122>
 80018b0:	9b00      	ldr	r3, [sp, #0]
 80018b2:	46a2      	mov	sl, r4
 80018b4:	469b      	mov	fp, r3
 80018b6:	4681      	mov	r9, r0
 80018b8:	2480      	movs	r4, #128	@ 0x80
 80018ba:	4653      	mov	r3, sl
 80018bc:	0324      	lsls	r4, r4, #12
 80018be:	431c      	orrs	r4, r3
 80018c0:	0324      	lsls	r4, r4, #12
 80018c2:	464a      	mov	r2, r9
 80018c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001980 <__aeabi_dmul+0x588>)
 80018c6:	0b24      	lsrs	r4, r4, #12
 80018c8:	e5ec      	b.n	80014a4 <__aeabi_dmul+0xac>
 80018ca:	f000 fca9 	bl	8002220 <__clzsi2>
 80018ce:	2315      	movs	r3, #21
 80018d0:	469c      	mov	ip, r3
 80018d2:	4484      	add	ip, r0
 80018d4:	0002      	movs	r2, r0
 80018d6:	4663      	mov	r3, ip
 80018d8:	3220      	adds	r2, #32
 80018da:	2b1c      	cmp	r3, #28
 80018dc:	dc00      	bgt.n	80018e0 <__aeabi_dmul+0x4e8>
 80018de:	e684      	b.n	80015ea <__aeabi_dmul+0x1f2>
 80018e0:	2300      	movs	r3, #0
 80018e2:	4699      	mov	r9, r3
 80018e4:	0023      	movs	r3, r4
 80018e6:	3808      	subs	r0, #8
 80018e8:	4083      	lsls	r3, r0
 80018ea:	469a      	mov	sl, r3
 80018ec:	e68e      	b.n	800160c <__aeabi_dmul+0x214>
 80018ee:	f000 fc97 	bl	8002220 <__clzsi2>
 80018f2:	0002      	movs	r2, r0
 80018f4:	0003      	movs	r3, r0
 80018f6:	3215      	adds	r2, #21
 80018f8:	3320      	adds	r3, #32
 80018fa:	2a1c      	cmp	r2, #28
 80018fc:	dc00      	bgt.n	8001900 <__aeabi_dmul+0x508>
 80018fe:	e64e      	b.n	800159e <__aeabi_dmul+0x1a6>
 8001900:	0002      	movs	r2, r0
 8001902:	0034      	movs	r4, r6
 8001904:	3a08      	subs	r2, #8
 8001906:	2000      	movs	r0, #0
 8001908:	4094      	lsls	r4, r2
 800190a:	e652      	b.n	80015b2 <__aeabi_dmul+0x1ba>
 800190c:	9301      	str	r3, [sp, #4]
 800190e:	e604      	b.n	800151a <__aeabi_dmul+0x122>
 8001910:	4b1c      	ldr	r3, [pc, #112]	@ (8001984 <__aeabi_dmul+0x58c>)
 8001912:	0021      	movs	r1, r4
 8001914:	469c      	mov	ip, r3
 8001916:	0003      	movs	r3, r0
 8001918:	9d01      	ldr	r5, [sp, #4]
 800191a:	40d3      	lsrs	r3, r2
 800191c:	4465      	add	r5, ip
 800191e:	40a9      	lsls	r1, r5
 8001920:	4319      	orrs	r1, r3
 8001922:	0003      	movs	r3, r0
 8001924:	40ab      	lsls	r3, r5
 8001926:	1e58      	subs	r0, r3, #1
 8001928:	4183      	sbcs	r3, r0
 800192a:	4319      	orrs	r1, r3
 800192c:	0008      	movs	r0, r1
 800192e:	40d4      	lsrs	r4, r2
 8001930:	074b      	lsls	r3, r1, #29
 8001932:	d009      	beq.n	8001948 <__aeabi_dmul+0x550>
 8001934:	230f      	movs	r3, #15
 8001936:	400b      	ands	r3, r1
 8001938:	2b04      	cmp	r3, #4
 800193a:	d005      	beq.n	8001948 <__aeabi_dmul+0x550>
 800193c:	1d0b      	adds	r3, r1, #4
 800193e:	428b      	cmp	r3, r1
 8001940:	4180      	sbcs	r0, r0
 8001942:	4240      	negs	r0, r0
 8001944:	1824      	adds	r4, r4, r0
 8001946:	0018      	movs	r0, r3
 8001948:	0223      	lsls	r3, r4, #8
 800194a:	d400      	bmi.n	800194e <__aeabi_dmul+0x556>
 800194c:	e6d6      	b.n	80016fc <__aeabi_dmul+0x304>
 800194e:	2301      	movs	r3, #1
 8001950:	2400      	movs	r4, #0
 8001952:	2200      	movs	r2, #0
 8001954:	e5a6      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001956:	290f      	cmp	r1, #15
 8001958:	d1aa      	bne.n	80018b0 <__aeabi_dmul+0x4b8>
 800195a:	2380      	movs	r3, #128	@ 0x80
 800195c:	4652      	mov	r2, sl
 800195e:	031b      	lsls	r3, r3, #12
 8001960:	421a      	tst	r2, r3
 8001962:	d0a9      	beq.n	80018b8 <__aeabi_dmul+0x4c0>
 8001964:	421c      	tst	r4, r3
 8001966:	d1a7      	bne.n	80018b8 <__aeabi_dmul+0x4c0>
 8001968:	431c      	orrs	r4, r3
 800196a:	9b00      	ldr	r3, [sp, #0]
 800196c:	0002      	movs	r2, r0
 800196e:	469b      	mov	fp, r3
 8001970:	4b03      	ldr	r3, [pc, #12]	@ (8001980 <__aeabi_dmul+0x588>)
 8001972:	e597      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001974:	2400      	movs	r4, #0
 8001976:	e6c1      	b.n	80016fc <__aeabi_dmul+0x304>
 8001978:	2400      	movs	r4, #0
 800197a:	4b01      	ldr	r3, [pc, #4]	@ (8001980 <__aeabi_dmul+0x588>)
 800197c:	0022      	movs	r2, r4
 800197e:	e591      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001980:	000007ff 	.word	0x000007ff
 8001984:	0000041e 	.word	0x0000041e

08001988 <__aeabi_dsub>:
 8001988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800198a:	464e      	mov	r6, r9
 800198c:	4645      	mov	r5, r8
 800198e:	46de      	mov	lr, fp
 8001990:	4657      	mov	r7, sl
 8001992:	b5e0      	push	{r5, r6, r7, lr}
 8001994:	b085      	sub	sp, #20
 8001996:	9000      	str	r0, [sp, #0]
 8001998:	9101      	str	r1, [sp, #4]
 800199a:	030c      	lsls	r4, r1, #12
 800199c:	004f      	lsls	r7, r1, #1
 800199e:	0fce      	lsrs	r6, r1, #31
 80019a0:	0a61      	lsrs	r1, r4, #9
 80019a2:	9c00      	ldr	r4, [sp, #0]
 80019a4:	46b0      	mov	r8, r6
 80019a6:	0f64      	lsrs	r4, r4, #29
 80019a8:	430c      	orrs	r4, r1
 80019aa:	9900      	ldr	r1, [sp, #0]
 80019ac:	0d7f      	lsrs	r7, r7, #21
 80019ae:	00c8      	lsls	r0, r1, #3
 80019b0:	0011      	movs	r1, r2
 80019b2:	001a      	movs	r2, r3
 80019b4:	031b      	lsls	r3, r3, #12
 80019b6:	469c      	mov	ip, r3
 80019b8:	9100      	str	r1, [sp, #0]
 80019ba:	9201      	str	r2, [sp, #4]
 80019bc:	0051      	lsls	r1, r2, #1
 80019be:	0d4b      	lsrs	r3, r1, #21
 80019c0:	4699      	mov	r9, r3
 80019c2:	9b01      	ldr	r3, [sp, #4]
 80019c4:	9d00      	ldr	r5, [sp, #0]
 80019c6:	0fd9      	lsrs	r1, r3, #31
 80019c8:	4663      	mov	r3, ip
 80019ca:	0f6a      	lsrs	r2, r5, #29
 80019cc:	0a5b      	lsrs	r3, r3, #9
 80019ce:	4313      	orrs	r3, r2
 80019d0:	00ea      	lsls	r2, r5, #3
 80019d2:	4694      	mov	ip, r2
 80019d4:	4693      	mov	fp, r2
 80019d6:	4ac1      	ldr	r2, [pc, #772]	@ (8001cdc <__aeabi_dsub+0x354>)
 80019d8:	9003      	str	r0, [sp, #12]
 80019da:	9302      	str	r3, [sp, #8]
 80019dc:	4591      	cmp	r9, r2
 80019de:	d100      	bne.n	80019e2 <__aeabi_dsub+0x5a>
 80019e0:	e0cd      	b.n	8001b7e <__aeabi_dsub+0x1f6>
 80019e2:	2501      	movs	r5, #1
 80019e4:	4069      	eors	r1, r5
 80019e6:	464d      	mov	r5, r9
 80019e8:	1b7d      	subs	r5, r7, r5
 80019ea:	46aa      	mov	sl, r5
 80019ec:	428e      	cmp	r6, r1
 80019ee:	d100      	bne.n	80019f2 <__aeabi_dsub+0x6a>
 80019f0:	e080      	b.n	8001af4 <__aeabi_dsub+0x16c>
 80019f2:	2d00      	cmp	r5, #0
 80019f4:	dc00      	bgt.n	80019f8 <__aeabi_dsub+0x70>
 80019f6:	e335      	b.n	8002064 <__aeabi_dsub+0x6dc>
 80019f8:	4649      	mov	r1, r9
 80019fa:	2900      	cmp	r1, #0
 80019fc:	d100      	bne.n	8001a00 <__aeabi_dsub+0x78>
 80019fe:	e0df      	b.n	8001bc0 <__aeabi_dsub+0x238>
 8001a00:	4297      	cmp	r7, r2
 8001a02:	d100      	bne.n	8001a06 <__aeabi_dsub+0x7e>
 8001a04:	e194      	b.n	8001d30 <__aeabi_dsub+0x3a8>
 8001a06:	4652      	mov	r2, sl
 8001a08:	2501      	movs	r5, #1
 8001a0a:	2a38      	cmp	r2, #56	@ 0x38
 8001a0c:	dc19      	bgt.n	8001a42 <__aeabi_dsub+0xba>
 8001a0e:	2280      	movs	r2, #128	@ 0x80
 8001a10:	9b02      	ldr	r3, [sp, #8]
 8001a12:	0412      	lsls	r2, r2, #16
 8001a14:	4313      	orrs	r3, r2
 8001a16:	9302      	str	r3, [sp, #8]
 8001a18:	4652      	mov	r2, sl
 8001a1a:	2a1f      	cmp	r2, #31
 8001a1c:	dd00      	ble.n	8001a20 <__aeabi_dsub+0x98>
 8001a1e:	e1e3      	b.n	8001de8 <__aeabi_dsub+0x460>
 8001a20:	4653      	mov	r3, sl
 8001a22:	2220      	movs	r2, #32
 8001a24:	4661      	mov	r1, ip
 8001a26:	9d02      	ldr	r5, [sp, #8]
 8001a28:	1ad2      	subs	r2, r2, r3
 8001a2a:	4095      	lsls	r5, r2
 8001a2c:	40d9      	lsrs	r1, r3
 8001a2e:	430d      	orrs	r5, r1
 8001a30:	4661      	mov	r1, ip
 8001a32:	4091      	lsls	r1, r2
 8001a34:	000a      	movs	r2, r1
 8001a36:	1e51      	subs	r1, r2, #1
 8001a38:	418a      	sbcs	r2, r1
 8001a3a:	4315      	orrs	r5, r2
 8001a3c:	9a02      	ldr	r2, [sp, #8]
 8001a3e:	40da      	lsrs	r2, r3
 8001a40:	1aa4      	subs	r4, r4, r2
 8001a42:	1b45      	subs	r5, r0, r5
 8001a44:	42a8      	cmp	r0, r5
 8001a46:	4180      	sbcs	r0, r0
 8001a48:	4240      	negs	r0, r0
 8001a4a:	1a24      	subs	r4, r4, r0
 8001a4c:	0223      	lsls	r3, r4, #8
 8001a4e:	d400      	bmi.n	8001a52 <__aeabi_dsub+0xca>
 8001a50:	e13d      	b.n	8001cce <__aeabi_dsub+0x346>
 8001a52:	0264      	lsls	r4, r4, #9
 8001a54:	0a64      	lsrs	r4, r4, #9
 8001a56:	2c00      	cmp	r4, #0
 8001a58:	d100      	bne.n	8001a5c <__aeabi_dsub+0xd4>
 8001a5a:	e147      	b.n	8001cec <__aeabi_dsub+0x364>
 8001a5c:	0020      	movs	r0, r4
 8001a5e:	f000 fbdf 	bl	8002220 <__clzsi2>
 8001a62:	0003      	movs	r3, r0
 8001a64:	3b08      	subs	r3, #8
 8001a66:	2120      	movs	r1, #32
 8001a68:	0028      	movs	r0, r5
 8001a6a:	1aca      	subs	r2, r1, r3
 8001a6c:	40d0      	lsrs	r0, r2
 8001a6e:	409c      	lsls	r4, r3
 8001a70:	0002      	movs	r2, r0
 8001a72:	409d      	lsls	r5, r3
 8001a74:	4322      	orrs	r2, r4
 8001a76:	429f      	cmp	r7, r3
 8001a78:	dd00      	ble.n	8001a7c <__aeabi_dsub+0xf4>
 8001a7a:	e177      	b.n	8001d6c <__aeabi_dsub+0x3e4>
 8001a7c:	1bd8      	subs	r0, r3, r7
 8001a7e:	3001      	adds	r0, #1
 8001a80:	1a09      	subs	r1, r1, r0
 8001a82:	002c      	movs	r4, r5
 8001a84:	408d      	lsls	r5, r1
 8001a86:	40c4      	lsrs	r4, r0
 8001a88:	1e6b      	subs	r3, r5, #1
 8001a8a:	419d      	sbcs	r5, r3
 8001a8c:	0013      	movs	r3, r2
 8001a8e:	40c2      	lsrs	r2, r0
 8001a90:	408b      	lsls	r3, r1
 8001a92:	4325      	orrs	r5, r4
 8001a94:	2700      	movs	r7, #0
 8001a96:	0014      	movs	r4, r2
 8001a98:	431d      	orrs	r5, r3
 8001a9a:	076b      	lsls	r3, r5, #29
 8001a9c:	d009      	beq.n	8001ab2 <__aeabi_dsub+0x12a>
 8001a9e:	230f      	movs	r3, #15
 8001aa0:	402b      	ands	r3, r5
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d005      	beq.n	8001ab2 <__aeabi_dsub+0x12a>
 8001aa6:	1d2b      	adds	r3, r5, #4
 8001aa8:	42ab      	cmp	r3, r5
 8001aaa:	41ad      	sbcs	r5, r5
 8001aac:	426d      	negs	r5, r5
 8001aae:	1964      	adds	r4, r4, r5
 8001ab0:	001d      	movs	r5, r3
 8001ab2:	0223      	lsls	r3, r4, #8
 8001ab4:	d400      	bmi.n	8001ab8 <__aeabi_dsub+0x130>
 8001ab6:	e140      	b.n	8001d3a <__aeabi_dsub+0x3b2>
 8001ab8:	4a88      	ldr	r2, [pc, #544]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001aba:	3701      	adds	r7, #1
 8001abc:	4297      	cmp	r7, r2
 8001abe:	d100      	bne.n	8001ac2 <__aeabi_dsub+0x13a>
 8001ac0:	e101      	b.n	8001cc6 <__aeabi_dsub+0x33e>
 8001ac2:	2601      	movs	r6, #1
 8001ac4:	4643      	mov	r3, r8
 8001ac6:	4986      	ldr	r1, [pc, #536]	@ (8001ce0 <__aeabi_dsub+0x358>)
 8001ac8:	08ed      	lsrs	r5, r5, #3
 8001aca:	4021      	ands	r1, r4
 8001acc:	074a      	lsls	r2, r1, #29
 8001ace:	432a      	orrs	r2, r5
 8001ad0:	057c      	lsls	r4, r7, #21
 8001ad2:	024d      	lsls	r5, r1, #9
 8001ad4:	0b2d      	lsrs	r5, r5, #12
 8001ad6:	0d64      	lsrs	r4, r4, #21
 8001ad8:	401e      	ands	r6, r3
 8001ada:	0524      	lsls	r4, r4, #20
 8001adc:	432c      	orrs	r4, r5
 8001ade:	07f6      	lsls	r6, r6, #31
 8001ae0:	4334      	orrs	r4, r6
 8001ae2:	0010      	movs	r0, r2
 8001ae4:	0021      	movs	r1, r4
 8001ae6:	b005      	add	sp, #20
 8001ae8:	bcf0      	pop	{r4, r5, r6, r7}
 8001aea:	46bb      	mov	fp, r7
 8001aec:	46b2      	mov	sl, r6
 8001aee:	46a9      	mov	r9, r5
 8001af0:	46a0      	mov	r8, r4
 8001af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001af4:	2d00      	cmp	r5, #0
 8001af6:	dc00      	bgt.n	8001afa <__aeabi_dsub+0x172>
 8001af8:	e2d0      	b.n	800209c <__aeabi_dsub+0x714>
 8001afa:	4649      	mov	r1, r9
 8001afc:	2900      	cmp	r1, #0
 8001afe:	d000      	beq.n	8001b02 <__aeabi_dsub+0x17a>
 8001b00:	e0d4      	b.n	8001cac <__aeabi_dsub+0x324>
 8001b02:	4661      	mov	r1, ip
 8001b04:	9b02      	ldr	r3, [sp, #8]
 8001b06:	4319      	orrs	r1, r3
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dsub+0x184>
 8001b0a:	e12b      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001b0c:	1e69      	subs	r1, r5, #1
 8001b0e:	2d01      	cmp	r5, #1
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dsub+0x18c>
 8001b12:	e1d9      	b.n	8001ec8 <__aeabi_dsub+0x540>
 8001b14:	4295      	cmp	r5, r2
 8001b16:	d100      	bne.n	8001b1a <__aeabi_dsub+0x192>
 8001b18:	e10a      	b.n	8001d30 <__aeabi_dsub+0x3a8>
 8001b1a:	2501      	movs	r5, #1
 8001b1c:	2938      	cmp	r1, #56	@ 0x38
 8001b1e:	dc17      	bgt.n	8001b50 <__aeabi_dsub+0x1c8>
 8001b20:	468a      	mov	sl, r1
 8001b22:	4653      	mov	r3, sl
 8001b24:	2b1f      	cmp	r3, #31
 8001b26:	dd00      	ble.n	8001b2a <__aeabi_dsub+0x1a2>
 8001b28:	e1e7      	b.n	8001efa <__aeabi_dsub+0x572>
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	1ad2      	subs	r2, r2, r3
 8001b2e:	9b02      	ldr	r3, [sp, #8]
 8001b30:	4661      	mov	r1, ip
 8001b32:	4093      	lsls	r3, r2
 8001b34:	001d      	movs	r5, r3
 8001b36:	4653      	mov	r3, sl
 8001b38:	40d9      	lsrs	r1, r3
 8001b3a:	4663      	mov	r3, ip
 8001b3c:	4093      	lsls	r3, r2
 8001b3e:	001a      	movs	r2, r3
 8001b40:	430d      	orrs	r5, r1
 8001b42:	1e51      	subs	r1, r2, #1
 8001b44:	418a      	sbcs	r2, r1
 8001b46:	4653      	mov	r3, sl
 8001b48:	4315      	orrs	r5, r2
 8001b4a:	9a02      	ldr	r2, [sp, #8]
 8001b4c:	40da      	lsrs	r2, r3
 8001b4e:	18a4      	adds	r4, r4, r2
 8001b50:	182d      	adds	r5, r5, r0
 8001b52:	4285      	cmp	r5, r0
 8001b54:	4180      	sbcs	r0, r0
 8001b56:	4240      	negs	r0, r0
 8001b58:	1824      	adds	r4, r4, r0
 8001b5a:	0223      	lsls	r3, r4, #8
 8001b5c:	d400      	bmi.n	8001b60 <__aeabi_dsub+0x1d8>
 8001b5e:	e0b6      	b.n	8001cce <__aeabi_dsub+0x346>
 8001b60:	4b5e      	ldr	r3, [pc, #376]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001b62:	3701      	adds	r7, #1
 8001b64:	429f      	cmp	r7, r3
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dsub+0x1e2>
 8001b68:	e0ad      	b.n	8001cc6 <__aeabi_dsub+0x33e>
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	4b5c      	ldr	r3, [pc, #368]	@ (8001ce0 <__aeabi_dsub+0x358>)
 8001b6e:	086a      	lsrs	r2, r5, #1
 8001b70:	401c      	ands	r4, r3
 8001b72:	4029      	ands	r1, r5
 8001b74:	430a      	orrs	r2, r1
 8001b76:	07e5      	lsls	r5, r4, #31
 8001b78:	4315      	orrs	r5, r2
 8001b7a:	0864      	lsrs	r4, r4, #1
 8001b7c:	e78d      	b.n	8001a9a <__aeabi_dsub+0x112>
 8001b7e:	4a59      	ldr	r2, [pc, #356]	@ (8001ce4 <__aeabi_dsub+0x35c>)
 8001b80:	9b02      	ldr	r3, [sp, #8]
 8001b82:	4692      	mov	sl, r2
 8001b84:	4662      	mov	r2, ip
 8001b86:	44ba      	add	sl, r7
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	d02c      	beq.n	8001be6 <__aeabi_dsub+0x25e>
 8001b8c:	428e      	cmp	r6, r1
 8001b8e:	d02e      	beq.n	8001bee <__aeabi_dsub+0x266>
 8001b90:	4652      	mov	r2, sl
 8001b92:	2a00      	cmp	r2, #0
 8001b94:	d060      	beq.n	8001c58 <__aeabi_dsub+0x2d0>
 8001b96:	2f00      	cmp	r7, #0
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x214>
 8001b9a:	e0db      	b.n	8001d54 <__aeabi_dsub+0x3cc>
 8001b9c:	4663      	mov	r3, ip
 8001b9e:	000e      	movs	r6, r1
 8001ba0:	9c02      	ldr	r4, [sp, #8]
 8001ba2:	08d8      	lsrs	r0, r3, #3
 8001ba4:	0762      	lsls	r2, r4, #29
 8001ba6:	4302      	orrs	r2, r0
 8001ba8:	08e4      	lsrs	r4, r4, #3
 8001baa:	0013      	movs	r3, r2
 8001bac:	4323      	orrs	r3, r4
 8001bae:	d100      	bne.n	8001bb2 <__aeabi_dsub+0x22a>
 8001bb0:	e254      	b.n	800205c <__aeabi_dsub+0x6d4>
 8001bb2:	2580      	movs	r5, #128	@ 0x80
 8001bb4:	032d      	lsls	r5, r5, #12
 8001bb6:	4325      	orrs	r5, r4
 8001bb8:	032d      	lsls	r5, r5, #12
 8001bba:	4c48      	ldr	r4, [pc, #288]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001bbc:	0b2d      	lsrs	r5, r5, #12
 8001bbe:	e78c      	b.n	8001ada <__aeabi_dsub+0x152>
 8001bc0:	4661      	mov	r1, ip
 8001bc2:	9b02      	ldr	r3, [sp, #8]
 8001bc4:	4319      	orrs	r1, r3
 8001bc6:	d100      	bne.n	8001bca <__aeabi_dsub+0x242>
 8001bc8:	e0cc      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001bca:	0029      	movs	r1, r5
 8001bcc:	3901      	subs	r1, #1
 8001bce:	2d01      	cmp	r5, #1
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dsub+0x24c>
 8001bd2:	e188      	b.n	8001ee6 <__aeabi_dsub+0x55e>
 8001bd4:	4295      	cmp	r5, r2
 8001bd6:	d100      	bne.n	8001bda <__aeabi_dsub+0x252>
 8001bd8:	e0aa      	b.n	8001d30 <__aeabi_dsub+0x3a8>
 8001bda:	2501      	movs	r5, #1
 8001bdc:	2938      	cmp	r1, #56	@ 0x38
 8001bde:	dd00      	ble.n	8001be2 <__aeabi_dsub+0x25a>
 8001be0:	e72f      	b.n	8001a42 <__aeabi_dsub+0xba>
 8001be2:	468a      	mov	sl, r1
 8001be4:	e718      	b.n	8001a18 <__aeabi_dsub+0x90>
 8001be6:	2201      	movs	r2, #1
 8001be8:	4051      	eors	r1, r2
 8001bea:	428e      	cmp	r6, r1
 8001bec:	d1d0      	bne.n	8001b90 <__aeabi_dsub+0x208>
 8001bee:	4653      	mov	r3, sl
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d100      	bne.n	8001bf6 <__aeabi_dsub+0x26e>
 8001bf4:	e0be      	b.n	8001d74 <__aeabi_dsub+0x3ec>
 8001bf6:	2f00      	cmp	r7, #0
 8001bf8:	d000      	beq.n	8001bfc <__aeabi_dsub+0x274>
 8001bfa:	e138      	b.n	8001e6e <__aeabi_dsub+0x4e6>
 8001bfc:	46ca      	mov	sl, r9
 8001bfe:	0022      	movs	r2, r4
 8001c00:	4302      	orrs	r2, r0
 8001c02:	d100      	bne.n	8001c06 <__aeabi_dsub+0x27e>
 8001c04:	e1e2      	b.n	8001fcc <__aeabi_dsub+0x644>
 8001c06:	4653      	mov	r3, sl
 8001c08:	1e59      	subs	r1, r3, #1
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d100      	bne.n	8001c10 <__aeabi_dsub+0x288>
 8001c0e:	e20d      	b.n	800202c <__aeabi_dsub+0x6a4>
 8001c10:	4a32      	ldr	r2, [pc, #200]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001c12:	4592      	cmp	sl, r2
 8001c14:	d100      	bne.n	8001c18 <__aeabi_dsub+0x290>
 8001c16:	e1d2      	b.n	8001fbe <__aeabi_dsub+0x636>
 8001c18:	2701      	movs	r7, #1
 8001c1a:	2938      	cmp	r1, #56	@ 0x38
 8001c1c:	dc13      	bgt.n	8001c46 <__aeabi_dsub+0x2be>
 8001c1e:	291f      	cmp	r1, #31
 8001c20:	dd00      	ble.n	8001c24 <__aeabi_dsub+0x29c>
 8001c22:	e1ee      	b.n	8002002 <__aeabi_dsub+0x67a>
 8001c24:	2220      	movs	r2, #32
 8001c26:	9b02      	ldr	r3, [sp, #8]
 8001c28:	1a52      	subs	r2, r2, r1
 8001c2a:	0025      	movs	r5, r4
 8001c2c:	0007      	movs	r7, r0
 8001c2e:	469a      	mov	sl, r3
 8001c30:	40cc      	lsrs	r4, r1
 8001c32:	4090      	lsls	r0, r2
 8001c34:	4095      	lsls	r5, r2
 8001c36:	40cf      	lsrs	r7, r1
 8001c38:	44a2      	add	sl, r4
 8001c3a:	1e42      	subs	r2, r0, #1
 8001c3c:	4190      	sbcs	r0, r2
 8001c3e:	4653      	mov	r3, sl
 8001c40:	432f      	orrs	r7, r5
 8001c42:	4307      	orrs	r7, r0
 8001c44:	9302      	str	r3, [sp, #8]
 8001c46:	003d      	movs	r5, r7
 8001c48:	4465      	add	r5, ip
 8001c4a:	4565      	cmp	r5, ip
 8001c4c:	4192      	sbcs	r2, r2
 8001c4e:	9b02      	ldr	r3, [sp, #8]
 8001c50:	4252      	negs	r2, r2
 8001c52:	464f      	mov	r7, r9
 8001c54:	18d4      	adds	r4, r2, r3
 8001c56:	e780      	b.n	8001b5a <__aeabi_dsub+0x1d2>
 8001c58:	4a23      	ldr	r2, [pc, #140]	@ (8001ce8 <__aeabi_dsub+0x360>)
 8001c5a:	1c7d      	adds	r5, r7, #1
 8001c5c:	4215      	tst	r5, r2
 8001c5e:	d000      	beq.n	8001c62 <__aeabi_dsub+0x2da>
 8001c60:	e0aa      	b.n	8001db8 <__aeabi_dsub+0x430>
 8001c62:	4662      	mov	r2, ip
 8001c64:	0025      	movs	r5, r4
 8001c66:	9b02      	ldr	r3, [sp, #8]
 8001c68:	4305      	orrs	r5, r0
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	2f00      	cmp	r7, #0
 8001c6e:	d000      	beq.n	8001c72 <__aeabi_dsub+0x2ea>
 8001c70:	e0f5      	b.n	8001e5e <__aeabi_dsub+0x4d6>
 8001c72:	2d00      	cmp	r5, #0
 8001c74:	d100      	bne.n	8001c78 <__aeabi_dsub+0x2f0>
 8001c76:	e16b      	b.n	8001f50 <__aeabi_dsub+0x5c8>
 8001c78:	2a00      	cmp	r2, #0
 8001c7a:	d100      	bne.n	8001c7e <__aeabi_dsub+0x2f6>
 8001c7c:	e152      	b.n	8001f24 <__aeabi_dsub+0x59c>
 8001c7e:	4663      	mov	r3, ip
 8001c80:	1ac5      	subs	r5, r0, r3
 8001c82:	9b02      	ldr	r3, [sp, #8]
 8001c84:	1ae2      	subs	r2, r4, r3
 8001c86:	42a8      	cmp	r0, r5
 8001c88:	419b      	sbcs	r3, r3
 8001c8a:	425b      	negs	r3, r3
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	021a      	lsls	r2, r3, #8
 8001c90:	d400      	bmi.n	8001c94 <__aeabi_dsub+0x30c>
 8001c92:	e1d5      	b.n	8002040 <__aeabi_dsub+0x6b8>
 8001c94:	4663      	mov	r3, ip
 8001c96:	1a1d      	subs	r5, r3, r0
 8001c98:	45ac      	cmp	ip, r5
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	2601      	movs	r6, #1
 8001c9e:	9b02      	ldr	r3, [sp, #8]
 8001ca0:	4252      	negs	r2, r2
 8001ca2:	1b1c      	subs	r4, r3, r4
 8001ca4:	4688      	mov	r8, r1
 8001ca6:	1aa4      	subs	r4, r4, r2
 8001ca8:	400e      	ands	r6, r1
 8001caa:	e6f6      	b.n	8001a9a <__aeabi_dsub+0x112>
 8001cac:	4297      	cmp	r7, r2
 8001cae:	d03f      	beq.n	8001d30 <__aeabi_dsub+0x3a8>
 8001cb0:	4652      	mov	r2, sl
 8001cb2:	2501      	movs	r5, #1
 8001cb4:	2a38      	cmp	r2, #56	@ 0x38
 8001cb6:	dd00      	ble.n	8001cba <__aeabi_dsub+0x332>
 8001cb8:	e74a      	b.n	8001b50 <__aeabi_dsub+0x1c8>
 8001cba:	2280      	movs	r2, #128	@ 0x80
 8001cbc:	9b02      	ldr	r3, [sp, #8]
 8001cbe:	0412      	lsls	r2, r2, #16
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	9302      	str	r3, [sp, #8]
 8001cc4:	e72d      	b.n	8001b22 <__aeabi_dsub+0x19a>
 8001cc6:	003c      	movs	r4, r7
 8001cc8:	2500      	movs	r5, #0
 8001cca:	2200      	movs	r2, #0
 8001ccc:	e705      	b.n	8001ada <__aeabi_dsub+0x152>
 8001cce:	2307      	movs	r3, #7
 8001cd0:	402b      	ands	r3, r5
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d000      	beq.n	8001cd8 <__aeabi_dsub+0x350>
 8001cd6:	e6e2      	b.n	8001a9e <__aeabi_dsub+0x116>
 8001cd8:	e06b      	b.n	8001db2 <__aeabi_dsub+0x42a>
 8001cda:	46c0      	nop			@ (mov r8, r8)
 8001cdc:	000007ff 	.word	0x000007ff
 8001ce0:	ff7fffff 	.word	0xff7fffff
 8001ce4:	fffff801 	.word	0xfffff801
 8001ce8:	000007fe 	.word	0x000007fe
 8001cec:	0028      	movs	r0, r5
 8001cee:	f000 fa97 	bl	8002220 <__clzsi2>
 8001cf2:	0003      	movs	r3, r0
 8001cf4:	3318      	adds	r3, #24
 8001cf6:	2b1f      	cmp	r3, #31
 8001cf8:	dc00      	bgt.n	8001cfc <__aeabi_dsub+0x374>
 8001cfa:	e6b4      	b.n	8001a66 <__aeabi_dsub+0xde>
 8001cfc:	002a      	movs	r2, r5
 8001cfe:	3808      	subs	r0, #8
 8001d00:	4082      	lsls	r2, r0
 8001d02:	429f      	cmp	r7, r3
 8001d04:	dd00      	ble.n	8001d08 <__aeabi_dsub+0x380>
 8001d06:	e0b9      	b.n	8001e7c <__aeabi_dsub+0x4f4>
 8001d08:	1bdb      	subs	r3, r3, r7
 8001d0a:	1c58      	adds	r0, r3, #1
 8001d0c:	281f      	cmp	r0, #31
 8001d0e:	dc00      	bgt.n	8001d12 <__aeabi_dsub+0x38a>
 8001d10:	e1a0      	b.n	8002054 <__aeabi_dsub+0x6cc>
 8001d12:	0015      	movs	r5, r2
 8001d14:	3b1f      	subs	r3, #31
 8001d16:	40dd      	lsrs	r5, r3
 8001d18:	2820      	cmp	r0, #32
 8001d1a:	d005      	beq.n	8001d28 <__aeabi_dsub+0x3a0>
 8001d1c:	2340      	movs	r3, #64	@ 0x40
 8001d1e:	1a1b      	subs	r3, r3, r0
 8001d20:	409a      	lsls	r2, r3
 8001d22:	1e53      	subs	r3, r2, #1
 8001d24:	419a      	sbcs	r2, r3
 8001d26:	4315      	orrs	r5, r2
 8001d28:	2307      	movs	r3, #7
 8001d2a:	2700      	movs	r7, #0
 8001d2c:	402b      	ands	r3, r5
 8001d2e:	e7d0      	b.n	8001cd2 <__aeabi_dsub+0x34a>
 8001d30:	08c0      	lsrs	r0, r0, #3
 8001d32:	0762      	lsls	r2, r4, #29
 8001d34:	4302      	orrs	r2, r0
 8001d36:	08e4      	lsrs	r4, r4, #3
 8001d38:	e737      	b.n	8001baa <__aeabi_dsub+0x222>
 8001d3a:	08ea      	lsrs	r2, r5, #3
 8001d3c:	0763      	lsls	r3, r4, #29
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	4bd3      	ldr	r3, [pc, #844]	@ (8002090 <__aeabi_dsub+0x708>)
 8001d42:	08e4      	lsrs	r4, r4, #3
 8001d44:	429f      	cmp	r7, r3
 8001d46:	d100      	bne.n	8001d4a <__aeabi_dsub+0x3c2>
 8001d48:	e72f      	b.n	8001baa <__aeabi_dsub+0x222>
 8001d4a:	0324      	lsls	r4, r4, #12
 8001d4c:	0b25      	lsrs	r5, r4, #12
 8001d4e:	057c      	lsls	r4, r7, #21
 8001d50:	0d64      	lsrs	r4, r4, #21
 8001d52:	e6c2      	b.n	8001ada <__aeabi_dsub+0x152>
 8001d54:	46ca      	mov	sl, r9
 8001d56:	0022      	movs	r2, r4
 8001d58:	4302      	orrs	r2, r0
 8001d5a:	d158      	bne.n	8001e0e <__aeabi_dsub+0x486>
 8001d5c:	4663      	mov	r3, ip
 8001d5e:	000e      	movs	r6, r1
 8001d60:	9c02      	ldr	r4, [sp, #8]
 8001d62:	9303      	str	r3, [sp, #12]
 8001d64:	9b03      	ldr	r3, [sp, #12]
 8001d66:	4657      	mov	r7, sl
 8001d68:	08da      	lsrs	r2, r3, #3
 8001d6a:	e7e7      	b.n	8001d3c <__aeabi_dsub+0x3b4>
 8001d6c:	4cc9      	ldr	r4, [pc, #804]	@ (8002094 <__aeabi_dsub+0x70c>)
 8001d6e:	1aff      	subs	r7, r7, r3
 8001d70:	4014      	ands	r4, r2
 8001d72:	e692      	b.n	8001a9a <__aeabi_dsub+0x112>
 8001d74:	4dc8      	ldr	r5, [pc, #800]	@ (8002098 <__aeabi_dsub+0x710>)
 8001d76:	1c7a      	adds	r2, r7, #1
 8001d78:	422a      	tst	r2, r5
 8001d7a:	d000      	beq.n	8001d7e <__aeabi_dsub+0x3f6>
 8001d7c:	e084      	b.n	8001e88 <__aeabi_dsub+0x500>
 8001d7e:	0022      	movs	r2, r4
 8001d80:	4302      	orrs	r2, r0
 8001d82:	2f00      	cmp	r7, #0
 8001d84:	d000      	beq.n	8001d88 <__aeabi_dsub+0x400>
 8001d86:	e0ef      	b.n	8001f68 <__aeabi_dsub+0x5e0>
 8001d88:	2a00      	cmp	r2, #0
 8001d8a:	d100      	bne.n	8001d8e <__aeabi_dsub+0x406>
 8001d8c:	e0e5      	b.n	8001f5a <__aeabi_dsub+0x5d2>
 8001d8e:	4662      	mov	r2, ip
 8001d90:	9902      	ldr	r1, [sp, #8]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	d100      	bne.n	8001d98 <__aeabi_dsub+0x410>
 8001d96:	e0c5      	b.n	8001f24 <__aeabi_dsub+0x59c>
 8001d98:	4663      	mov	r3, ip
 8001d9a:	18c5      	adds	r5, r0, r3
 8001d9c:	468c      	mov	ip, r1
 8001d9e:	4285      	cmp	r5, r0
 8001da0:	4180      	sbcs	r0, r0
 8001da2:	4464      	add	r4, ip
 8001da4:	4240      	negs	r0, r0
 8001da6:	1824      	adds	r4, r4, r0
 8001da8:	0223      	lsls	r3, r4, #8
 8001daa:	d502      	bpl.n	8001db2 <__aeabi_dsub+0x42a>
 8001dac:	4bb9      	ldr	r3, [pc, #740]	@ (8002094 <__aeabi_dsub+0x70c>)
 8001dae:	3701      	adds	r7, #1
 8001db0:	401c      	ands	r4, r3
 8001db2:	46ba      	mov	sl, r7
 8001db4:	9503      	str	r5, [sp, #12]
 8001db6:	e7d5      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001db8:	4662      	mov	r2, ip
 8001dba:	1a85      	subs	r5, r0, r2
 8001dbc:	42a8      	cmp	r0, r5
 8001dbe:	4192      	sbcs	r2, r2
 8001dc0:	4252      	negs	r2, r2
 8001dc2:	4691      	mov	r9, r2
 8001dc4:	9b02      	ldr	r3, [sp, #8]
 8001dc6:	1ae3      	subs	r3, r4, r3
 8001dc8:	001a      	movs	r2, r3
 8001dca:	464b      	mov	r3, r9
 8001dcc:	1ad2      	subs	r2, r2, r3
 8001dce:	0013      	movs	r3, r2
 8001dd0:	4691      	mov	r9, r2
 8001dd2:	021a      	lsls	r2, r3, #8
 8001dd4:	d46c      	bmi.n	8001eb0 <__aeabi_dsub+0x528>
 8001dd6:	464a      	mov	r2, r9
 8001dd8:	464c      	mov	r4, r9
 8001dda:	432a      	orrs	r2, r5
 8001ddc:	d000      	beq.n	8001de0 <__aeabi_dsub+0x458>
 8001dde:	e63a      	b.n	8001a56 <__aeabi_dsub+0xce>
 8001de0:	2600      	movs	r6, #0
 8001de2:	2400      	movs	r4, #0
 8001de4:	2500      	movs	r5, #0
 8001de6:	e678      	b.n	8001ada <__aeabi_dsub+0x152>
 8001de8:	9902      	ldr	r1, [sp, #8]
 8001dea:	4653      	mov	r3, sl
 8001dec:	000d      	movs	r5, r1
 8001dee:	3a20      	subs	r2, #32
 8001df0:	40d5      	lsrs	r5, r2
 8001df2:	2b20      	cmp	r3, #32
 8001df4:	d006      	beq.n	8001e04 <__aeabi_dsub+0x47c>
 8001df6:	2240      	movs	r2, #64	@ 0x40
 8001df8:	1ad2      	subs	r2, r2, r3
 8001dfa:	000b      	movs	r3, r1
 8001dfc:	4093      	lsls	r3, r2
 8001dfe:	4662      	mov	r2, ip
 8001e00:	431a      	orrs	r2, r3
 8001e02:	4693      	mov	fp, r2
 8001e04:	465b      	mov	r3, fp
 8001e06:	1e5a      	subs	r2, r3, #1
 8001e08:	4193      	sbcs	r3, r2
 8001e0a:	431d      	orrs	r5, r3
 8001e0c:	e619      	b.n	8001a42 <__aeabi_dsub+0xba>
 8001e0e:	4653      	mov	r3, sl
 8001e10:	1e5a      	subs	r2, r3, #1
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d100      	bne.n	8001e18 <__aeabi_dsub+0x490>
 8001e16:	e0c6      	b.n	8001fa6 <__aeabi_dsub+0x61e>
 8001e18:	4e9d      	ldr	r6, [pc, #628]	@ (8002090 <__aeabi_dsub+0x708>)
 8001e1a:	45b2      	cmp	sl, r6
 8001e1c:	d100      	bne.n	8001e20 <__aeabi_dsub+0x498>
 8001e1e:	e6bd      	b.n	8001b9c <__aeabi_dsub+0x214>
 8001e20:	4688      	mov	r8, r1
 8001e22:	000e      	movs	r6, r1
 8001e24:	2501      	movs	r5, #1
 8001e26:	2a38      	cmp	r2, #56	@ 0x38
 8001e28:	dc10      	bgt.n	8001e4c <__aeabi_dsub+0x4c4>
 8001e2a:	2a1f      	cmp	r2, #31
 8001e2c:	dc7f      	bgt.n	8001f2e <__aeabi_dsub+0x5a6>
 8001e2e:	2120      	movs	r1, #32
 8001e30:	0025      	movs	r5, r4
 8001e32:	1a89      	subs	r1, r1, r2
 8001e34:	0007      	movs	r7, r0
 8001e36:	4088      	lsls	r0, r1
 8001e38:	408d      	lsls	r5, r1
 8001e3a:	40d7      	lsrs	r7, r2
 8001e3c:	40d4      	lsrs	r4, r2
 8001e3e:	1e41      	subs	r1, r0, #1
 8001e40:	4188      	sbcs	r0, r1
 8001e42:	9b02      	ldr	r3, [sp, #8]
 8001e44:	433d      	orrs	r5, r7
 8001e46:	1b1b      	subs	r3, r3, r4
 8001e48:	4305      	orrs	r5, r0
 8001e4a:	9302      	str	r3, [sp, #8]
 8001e4c:	4662      	mov	r2, ip
 8001e4e:	1b55      	subs	r5, r2, r5
 8001e50:	45ac      	cmp	ip, r5
 8001e52:	4192      	sbcs	r2, r2
 8001e54:	9b02      	ldr	r3, [sp, #8]
 8001e56:	4252      	negs	r2, r2
 8001e58:	464f      	mov	r7, r9
 8001e5a:	1a9c      	subs	r4, r3, r2
 8001e5c:	e5f6      	b.n	8001a4c <__aeabi_dsub+0xc4>
 8001e5e:	2d00      	cmp	r5, #0
 8001e60:	d000      	beq.n	8001e64 <__aeabi_dsub+0x4dc>
 8001e62:	e0b7      	b.n	8001fd4 <__aeabi_dsub+0x64c>
 8001e64:	2a00      	cmp	r2, #0
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dsub+0x4e2>
 8001e68:	e0f0      	b.n	800204c <__aeabi_dsub+0x6c4>
 8001e6a:	2601      	movs	r6, #1
 8001e6c:	400e      	ands	r6, r1
 8001e6e:	4663      	mov	r3, ip
 8001e70:	9802      	ldr	r0, [sp, #8]
 8001e72:	08d9      	lsrs	r1, r3, #3
 8001e74:	0742      	lsls	r2, r0, #29
 8001e76:	430a      	orrs	r2, r1
 8001e78:	08c4      	lsrs	r4, r0, #3
 8001e7a:	e696      	b.n	8001baa <__aeabi_dsub+0x222>
 8001e7c:	4c85      	ldr	r4, [pc, #532]	@ (8002094 <__aeabi_dsub+0x70c>)
 8001e7e:	1aff      	subs	r7, r7, r3
 8001e80:	4014      	ands	r4, r2
 8001e82:	0762      	lsls	r2, r4, #29
 8001e84:	08e4      	lsrs	r4, r4, #3
 8001e86:	e760      	b.n	8001d4a <__aeabi_dsub+0x3c2>
 8001e88:	4981      	ldr	r1, [pc, #516]	@ (8002090 <__aeabi_dsub+0x708>)
 8001e8a:	428a      	cmp	r2, r1
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dsub+0x508>
 8001e8e:	e0c9      	b.n	8002024 <__aeabi_dsub+0x69c>
 8001e90:	4663      	mov	r3, ip
 8001e92:	18c1      	adds	r1, r0, r3
 8001e94:	4281      	cmp	r1, r0
 8001e96:	4180      	sbcs	r0, r0
 8001e98:	9b02      	ldr	r3, [sp, #8]
 8001e9a:	4240      	negs	r0, r0
 8001e9c:	18e3      	adds	r3, r4, r3
 8001e9e:	181b      	adds	r3, r3, r0
 8001ea0:	07dd      	lsls	r5, r3, #31
 8001ea2:	085c      	lsrs	r4, r3, #1
 8001ea4:	2307      	movs	r3, #7
 8001ea6:	0849      	lsrs	r1, r1, #1
 8001ea8:	430d      	orrs	r5, r1
 8001eaa:	0017      	movs	r7, r2
 8001eac:	402b      	ands	r3, r5
 8001eae:	e710      	b.n	8001cd2 <__aeabi_dsub+0x34a>
 8001eb0:	4663      	mov	r3, ip
 8001eb2:	1a1d      	subs	r5, r3, r0
 8001eb4:	45ac      	cmp	ip, r5
 8001eb6:	4192      	sbcs	r2, r2
 8001eb8:	2601      	movs	r6, #1
 8001eba:	9b02      	ldr	r3, [sp, #8]
 8001ebc:	4252      	negs	r2, r2
 8001ebe:	1b1c      	subs	r4, r3, r4
 8001ec0:	4688      	mov	r8, r1
 8001ec2:	1aa4      	subs	r4, r4, r2
 8001ec4:	400e      	ands	r6, r1
 8001ec6:	e5c6      	b.n	8001a56 <__aeabi_dsub+0xce>
 8001ec8:	4663      	mov	r3, ip
 8001eca:	18c5      	adds	r5, r0, r3
 8001ecc:	9b02      	ldr	r3, [sp, #8]
 8001ece:	4285      	cmp	r5, r0
 8001ed0:	4180      	sbcs	r0, r0
 8001ed2:	469c      	mov	ip, r3
 8001ed4:	4240      	negs	r0, r0
 8001ed6:	4464      	add	r4, ip
 8001ed8:	1824      	adds	r4, r4, r0
 8001eda:	2701      	movs	r7, #1
 8001edc:	0223      	lsls	r3, r4, #8
 8001ede:	d400      	bmi.n	8001ee2 <__aeabi_dsub+0x55a>
 8001ee0:	e6f5      	b.n	8001cce <__aeabi_dsub+0x346>
 8001ee2:	2702      	movs	r7, #2
 8001ee4:	e641      	b.n	8001b6a <__aeabi_dsub+0x1e2>
 8001ee6:	4663      	mov	r3, ip
 8001ee8:	1ac5      	subs	r5, r0, r3
 8001eea:	42a8      	cmp	r0, r5
 8001eec:	4180      	sbcs	r0, r0
 8001eee:	9b02      	ldr	r3, [sp, #8]
 8001ef0:	4240      	negs	r0, r0
 8001ef2:	1ae4      	subs	r4, r4, r3
 8001ef4:	2701      	movs	r7, #1
 8001ef6:	1a24      	subs	r4, r4, r0
 8001ef8:	e5a8      	b.n	8001a4c <__aeabi_dsub+0xc4>
 8001efa:	9d02      	ldr	r5, [sp, #8]
 8001efc:	4652      	mov	r2, sl
 8001efe:	002b      	movs	r3, r5
 8001f00:	3a20      	subs	r2, #32
 8001f02:	40d3      	lsrs	r3, r2
 8001f04:	0019      	movs	r1, r3
 8001f06:	4653      	mov	r3, sl
 8001f08:	2b20      	cmp	r3, #32
 8001f0a:	d006      	beq.n	8001f1a <__aeabi_dsub+0x592>
 8001f0c:	2240      	movs	r2, #64	@ 0x40
 8001f0e:	1ad2      	subs	r2, r2, r3
 8001f10:	002b      	movs	r3, r5
 8001f12:	4093      	lsls	r3, r2
 8001f14:	4662      	mov	r2, ip
 8001f16:	431a      	orrs	r2, r3
 8001f18:	4693      	mov	fp, r2
 8001f1a:	465d      	mov	r5, fp
 8001f1c:	1e6b      	subs	r3, r5, #1
 8001f1e:	419d      	sbcs	r5, r3
 8001f20:	430d      	orrs	r5, r1
 8001f22:	e615      	b.n	8001b50 <__aeabi_dsub+0x1c8>
 8001f24:	0762      	lsls	r2, r4, #29
 8001f26:	08c0      	lsrs	r0, r0, #3
 8001f28:	4302      	orrs	r2, r0
 8001f2a:	08e4      	lsrs	r4, r4, #3
 8001f2c:	e70d      	b.n	8001d4a <__aeabi_dsub+0x3c2>
 8001f2e:	0011      	movs	r1, r2
 8001f30:	0027      	movs	r7, r4
 8001f32:	3920      	subs	r1, #32
 8001f34:	40cf      	lsrs	r7, r1
 8001f36:	2a20      	cmp	r2, #32
 8001f38:	d005      	beq.n	8001f46 <__aeabi_dsub+0x5be>
 8001f3a:	2140      	movs	r1, #64	@ 0x40
 8001f3c:	1a8a      	subs	r2, r1, r2
 8001f3e:	4094      	lsls	r4, r2
 8001f40:	0025      	movs	r5, r4
 8001f42:	4305      	orrs	r5, r0
 8001f44:	9503      	str	r5, [sp, #12]
 8001f46:	9d03      	ldr	r5, [sp, #12]
 8001f48:	1e6a      	subs	r2, r5, #1
 8001f4a:	4195      	sbcs	r5, r2
 8001f4c:	433d      	orrs	r5, r7
 8001f4e:	e77d      	b.n	8001e4c <__aeabi_dsub+0x4c4>
 8001f50:	2a00      	cmp	r2, #0
 8001f52:	d100      	bne.n	8001f56 <__aeabi_dsub+0x5ce>
 8001f54:	e744      	b.n	8001de0 <__aeabi_dsub+0x458>
 8001f56:	2601      	movs	r6, #1
 8001f58:	400e      	ands	r6, r1
 8001f5a:	4663      	mov	r3, ip
 8001f5c:	08d9      	lsrs	r1, r3, #3
 8001f5e:	9b02      	ldr	r3, [sp, #8]
 8001f60:	075a      	lsls	r2, r3, #29
 8001f62:	430a      	orrs	r2, r1
 8001f64:	08dc      	lsrs	r4, r3, #3
 8001f66:	e6f0      	b.n	8001d4a <__aeabi_dsub+0x3c2>
 8001f68:	2a00      	cmp	r2, #0
 8001f6a:	d028      	beq.n	8001fbe <__aeabi_dsub+0x636>
 8001f6c:	4662      	mov	r2, ip
 8001f6e:	9f02      	ldr	r7, [sp, #8]
 8001f70:	08c0      	lsrs	r0, r0, #3
 8001f72:	433a      	orrs	r2, r7
 8001f74:	d100      	bne.n	8001f78 <__aeabi_dsub+0x5f0>
 8001f76:	e6dc      	b.n	8001d32 <__aeabi_dsub+0x3aa>
 8001f78:	0762      	lsls	r2, r4, #29
 8001f7a:	4310      	orrs	r0, r2
 8001f7c:	2280      	movs	r2, #128	@ 0x80
 8001f7e:	08e4      	lsrs	r4, r4, #3
 8001f80:	0312      	lsls	r2, r2, #12
 8001f82:	4214      	tst	r4, r2
 8001f84:	d009      	beq.n	8001f9a <__aeabi_dsub+0x612>
 8001f86:	08fd      	lsrs	r5, r7, #3
 8001f88:	4215      	tst	r5, r2
 8001f8a:	d106      	bne.n	8001f9a <__aeabi_dsub+0x612>
 8001f8c:	4663      	mov	r3, ip
 8001f8e:	2601      	movs	r6, #1
 8001f90:	002c      	movs	r4, r5
 8001f92:	08d8      	lsrs	r0, r3, #3
 8001f94:	077b      	lsls	r3, r7, #29
 8001f96:	4318      	orrs	r0, r3
 8001f98:	400e      	ands	r6, r1
 8001f9a:	0f42      	lsrs	r2, r0, #29
 8001f9c:	00c0      	lsls	r0, r0, #3
 8001f9e:	08c0      	lsrs	r0, r0, #3
 8001fa0:	0752      	lsls	r2, r2, #29
 8001fa2:	4302      	orrs	r2, r0
 8001fa4:	e601      	b.n	8001baa <__aeabi_dsub+0x222>
 8001fa6:	4663      	mov	r3, ip
 8001fa8:	1a1d      	subs	r5, r3, r0
 8001faa:	45ac      	cmp	ip, r5
 8001fac:	4192      	sbcs	r2, r2
 8001fae:	9b02      	ldr	r3, [sp, #8]
 8001fb0:	4252      	negs	r2, r2
 8001fb2:	1b1c      	subs	r4, r3, r4
 8001fb4:	000e      	movs	r6, r1
 8001fb6:	4688      	mov	r8, r1
 8001fb8:	2701      	movs	r7, #1
 8001fba:	1aa4      	subs	r4, r4, r2
 8001fbc:	e546      	b.n	8001a4c <__aeabi_dsub+0xc4>
 8001fbe:	4663      	mov	r3, ip
 8001fc0:	08d9      	lsrs	r1, r3, #3
 8001fc2:	9b02      	ldr	r3, [sp, #8]
 8001fc4:	075a      	lsls	r2, r3, #29
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	08dc      	lsrs	r4, r3, #3
 8001fca:	e5ee      	b.n	8001baa <__aeabi_dsub+0x222>
 8001fcc:	4663      	mov	r3, ip
 8001fce:	9c02      	ldr	r4, [sp, #8]
 8001fd0:	9303      	str	r3, [sp, #12]
 8001fd2:	e6c7      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001fd4:	08c0      	lsrs	r0, r0, #3
 8001fd6:	2a00      	cmp	r2, #0
 8001fd8:	d100      	bne.n	8001fdc <__aeabi_dsub+0x654>
 8001fda:	e6aa      	b.n	8001d32 <__aeabi_dsub+0x3aa>
 8001fdc:	0762      	lsls	r2, r4, #29
 8001fde:	4310      	orrs	r0, r2
 8001fe0:	2280      	movs	r2, #128	@ 0x80
 8001fe2:	08e4      	lsrs	r4, r4, #3
 8001fe4:	0312      	lsls	r2, r2, #12
 8001fe6:	4214      	tst	r4, r2
 8001fe8:	d0d7      	beq.n	8001f9a <__aeabi_dsub+0x612>
 8001fea:	9f02      	ldr	r7, [sp, #8]
 8001fec:	08fd      	lsrs	r5, r7, #3
 8001fee:	4215      	tst	r5, r2
 8001ff0:	d1d3      	bne.n	8001f9a <__aeabi_dsub+0x612>
 8001ff2:	4663      	mov	r3, ip
 8001ff4:	2601      	movs	r6, #1
 8001ff6:	08d8      	lsrs	r0, r3, #3
 8001ff8:	077b      	lsls	r3, r7, #29
 8001ffa:	002c      	movs	r4, r5
 8001ffc:	4318      	orrs	r0, r3
 8001ffe:	400e      	ands	r6, r1
 8002000:	e7cb      	b.n	8001f9a <__aeabi_dsub+0x612>
 8002002:	000a      	movs	r2, r1
 8002004:	0027      	movs	r7, r4
 8002006:	3a20      	subs	r2, #32
 8002008:	40d7      	lsrs	r7, r2
 800200a:	2920      	cmp	r1, #32
 800200c:	d005      	beq.n	800201a <__aeabi_dsub+0x692>
 800200e:	2240      	movs	r2, #64	@ 0x40
 8002010:	1a52      	subs	r2, r2, r1
 8002012:	4094      	lsls	r4, r2
 8002014:	0025      	movs	r5, r4
 8002016:	4305      	orrs	r5, r0
 8002018:	9503      	str	r5, [sp, #12]
 800201a:	9d03      	ldr	r5, [sp, #12]
 800201c:	1e6a      	subs	r2, r5, #1
 800201e:	4195      	sbcs	r5, r2
 8002020:	432f      	orrs	r7, r5
 8002022:	e610      	b.n	8001c46 <__aeabi_dsub+0x2be>
 8002024:	0014      	movs	r4, r2
 8002026:	2500      	movs	r5, #0
 8002028:	2200      	movs	r2, #0
 800202a:	e556      	b.n	8001ada <__aeabi_dsub+0x152>
 800202c:	9b02      	ldr	r3, [sp, #8]
 800202e:	4460      	add	r0, ip
 8002030:	4699      	mov	r9, r3
 8002032:	4560      	cmp	r0, ip
 8002034:	4192      	sbcs	r2, r2
 8002036:	444c      	add	r4, r9
 8002038:	4252      	negs	r2, r2
 800203a:	0005      	movs	r5, r0
 800203c:	18a4      	adds	r4, r4, r2
 800203e:	e74c      	b.n	8001eda <__aeabi_dsub+0x552>
 8002040:	001a      	movs	r2, r3
 8002042:	001c      	movs	r4, r3
 8002044:	432a      	orrs	r2, r5
 8002046:	d000      	beq.n	800204a <__aeabi_dsub+0x6c2>
 8002048:	e6b3      	b.n	8001db2 <__aeabi_dsub+0x42a>
 800204a:	e6c9      	b.n	8001de0 <__aeabi_dsub+0x458>
 800204c:	2480      	movs	r4, #128	@ 0x80
 800204e:	2600      	movs	r6, #0
 8002050:	0324      	lsls	r4, r4, #12
 8002052:	e5ae      	b.n	8001bb2 <__aeabi_dsub+0x22a>
 8002054:	2120      	movs	r1, #32
 8002056:	2500      	movs	r5, #0
 8002058:	1a09      	subs	r1, r1, r0
 800205a:	e517      	b.n	8001a8c <__aeabi_dsub+0x104>
 800205c:	2200      	movs	r2, #0
 800205e:	2500      	movs	r5, #0
 8002060:	4c0b      	ldr	r4, [pc, #44]	@ (8002090 <__aeabi_dsub+0x708>)
 8002062:	e53a      	b.n	8001ada <__aeabi_dsub+0x152>
 8002064:	2d00      	cmp	r5, #0
 8002066:	d100      	bne.n	800206a <__aeabi_dsub+0x6e2>
 8002068:	e5f6      	b.n	8001c58 <__aeabi_dsub+0x2d0>
 800206a:	464b      	mov	r3, r9
 800206c:	1bda      	subs	r2, r3, r7
 800206e:	4692      	mov	sl, r2
 8002070:	2f00      	cmp	r7, #0
 8002072:	d100      	bne.n	8002076 <__aeabi_dsub+0x6ee>
 8002074:	e66f      	b.n	8001d56 <__aeabi_dsub+0x3ce>
 8002076:	2a38      	cmp	r2, #56	@ 0x38
 8002078:	dc05      	bgt.n	8002086 <__aeabi_dsub+0x6fe>
 800207a:	2680      	movs	r6, #128	@ 0x80
 800207c:	0436      	lsls	r6, r6, #16
 800207e:	4334      	orrs	r4, r6
 8002080:	4688      	mov	r8, r1
 8002082:	000e      	movs	r6, r1
 8002084:	e6d1      	b.n	8001e2a <__aeabi_dsub+0x4a2>
 8002086:	4688      	mov	r8, r1
 8002088:	000e      	movs	r6, r1
 800208a:	2501      	movs	r5, #1
 800208c:	e6de      	b.n	8001e4c <__aeabi_dsub+0x4c4>
 800208e:	46c0      	nop			@ (mov r8, r8)
 8002090:	000007ff 	.word	0x000007ff
 8002094:	ff7fffff 	.word	0xff7fffff
 8002098:	000007fe 	.word	0x000007fe
 800209c:	2d00      	cmp	r5, #0
 800209e:	d100      	bne.n	80020a2 <__aeabi_dsub+0x71a>
 80020a0:	e668      	b.n	8001d74 <__aeabi_dsub+0x3ec>
 80020a2:	464b      	mov	r3, r9
 80020a4:	1bd9      	subs	r1, r3, r7
 80020a6:	2f00      	cmp	r7, #0
 80020a8:	d101      	bne.n	80020ae <__aeabi_dsub+0x726>
 80020aa:	468a      	mov	sl, r1
 80020ac:	e5a7      	b.n	8001bfe <__aeabi_dsub+0x276>
 80020ae:	2701      	movs	r7, #1
 80020b0:	2938      	cmp	r1, #56	@ 0x38
 80020b2:	dd00      	ble.n	80020b6 <__aeabi_dsub+0x72e>
 80020b4:	e5c7      	b.n	8001c46 <__aeabi_dsub+0x2be>
 80020b6:	2280      	movs	r2, #128	@ 0x80
 80020b8:	0412      	lsls	r2, r2, #16
 80020ba:	4314      	orrs	r4, r2
 80020bc:	e5af      	b.n	8001c1e <__aeabi_dsub+0x296>
 80020be:	46c0      	nop			@ (mov r8, r8)

080020c0 <__aeabi_dcmpun>:
 80020c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020c2:	46c6      	mov	lr, r8
 80020c4:	031e      	lsls	r6, r3, #12
 80020c6:	0b36      	lsrs	r6, r6, #12
 80020c8:	46b0      	mov	r8, r6
 80020ca:	4e0d      	ldr	r6, [pc, #52]	@ (8002100 <__aeabi_dcmpun+0x40>)
 80020cc:	030c      	lsls	r4, r1, #12
 80020ce:	004d      	lsls	r5, r1, #1
 80020d0:	005f      	lsls	r7, r3, #1
 80020d2:	b500      	push	{lr}
 80020d4:	0b24      	lsrs	r4, r4, #12
 80020d6:	0d6d      	lsrs	r5, r5, #21
 80020d8:	0d7f      	lsrs	r7, r7, #21
 80020da:	42b5      	cmp	r5, r6
 80020dc:	d00b      	beq.n	80020f6 <__aeabi_dcmpun+0x36>
 80020de:	4908      	ldr	r1, [pc, #32]	@ (8002100 <__aeabi_dcmpun+0x40>)
 80020e0:	2000      	movs	r0, #0
 80020e2:	428f      	cmp	r7, r1
 80020e4:	d104      	bne.n	80020f0 <__aeabi_dcmpun+0x30>
 80020e6:	4646      	mov	r6, r8
 80020e8:	4316      	orrs	r6, r2
 80020ea:	0030      	movs	r0, r6
 80020ec:	1e43      	subs	r3, r0, #1
 80020ee:	4198      	sbcs	r0, r3
 80020f0:	bc80      	pop	{r7}
 80020f2:	46b8      	mov	r8, r7
 80020f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020f6:	4304      	orrs	r4, r0
 80020f8:	2001      	movs	r0, #1
 80020fa:	2c00      	cmp	r4, #0
 80020fc:	d1f8      	bne.n	80020f0 <__aeabi_dcmpun+0x30>
 80020fe:	e7ee      	b.n	80020de <__aeabi_dcmpun+0x1e>
 8002100:	000007ff 	.word	0x000007ff

08002104 <__aeabi_d2iz>:
 8002104:	000b      	movs	r3, r1
 8002106:	0002      	movs	r2, r0
 8002108:	b570      	push	{r4, r5, r6, lr}
 800210a:	4d16      	ldr	r5, [pc, #88]	@ (8002164 <__aeabi_d2iz+0x60>)
 800210c:	030c      	lsls	r4, r1, #12
 800210e:	b082      	sub	sp, #8
 8002110:	0049      	lsls	r1, r1, #1
 8002112:	2000      	movs	r0, #0
 8002114:	9200      	str	r2, [sp, #0]
 8002116:	9301      	str	r3, [sp, #4]
 8002118:	0b24      	lsrs	r4, r4, #12
 800211a:	0d49      	lsrs	r1, r1, #21
 800211c:	0fde      	lsrs	r6, r3, #31
 800211e:	42a9      	cmp	r1, r5
 8002120:	dd04      	ble.n	800212c <__aeabi_d2iz+0x28>
 8002122:	4811      	ldr	r0, [pc, #68]	@ (8002168 <__aeabi_d2iz+0x64>)
 8002124:	4281      	cmp	r1, r0
 8002126:	dd03      	ble.n	8002130 <__aeabi_d2iz+0x2c>
 8002128:	4b10      	ldr	r3, [pc, #64]	@ (800216c <__aeabi_d2iz+0x68>)
 800212a:	18f0      	adds	r0, r6, r3
 800212c:	b002      	add	sp, #8
 800212e:	bd70      	pop	{r4, r5, r6, pc}
 8002130:	2080      	movs	r0, #128	@ 0x80
 8002132:	0340      	lsls	r0, r0, #13
 8002134:	4320      	orrs	r0, r4
 8002136:	4c0e      	ldr	r4, [pc, #56]	@ (8002170 <__aeabi_d2iz+0x6c>)
 8002138:	1a64      	subs	r4, r4, r1
 800213a:	2c1f      	cmp	r4, #31
 800213c:	dd08      	ble.n	8002150 <__aeabi_d2iz+0x4c>
 800213e:	4b0d      	ldr	r3, [pc, #52]	@ (8002174 <__aeabi_d2iz+0x70>)
 8002140:	1a5b      	subs	r3, r3, r1
 8002142:	40d8      	lsrs	r0, r3
 8002144:	0003      	movs	r3, r0
 8002146:	4258      	negs	r0, r3
 8002148:	2e00      	cmp	r6, #0
 800214a:	d1ef      	bne.n	800212c <__aeabi_d2iz+0x28>
 800214c:	0018      	movs	r0, r3
 800214e:	e7ed      	b.n	800212c <__aeabi_d2iz+0x28>
 8002150:	4b09      	ldr	r3, [pc, #36]	@ (8002178 <__aeabi_d2iz+0x74>)
 8002152:	9a00      	ldr	r2, [sp, #0]
 8002154:	469c      	mov	ip, r3
 8002156:	0003      	movs	r3, r0
 8002158:	4461      	add	r1, ip
 800215a:	408b      	lsls	r3, r1
 800215c:	40e2      	lsrs	r2, r4
 800215e:	4313      	orrs	r3, r2
 8002160:	e7f1      	b.n	8002146 <__aeabi_d2iz+0x42>
 8002162:	46c0      	nop			@ (mov r8, r8)
 8002164:	000003fe 	.word	0x000003fe
 8002168:	0000041d 	.word	0x0000041d
 800216c:	7fffffff 	.word	0x7fffffff
 8002170:	00000433 	.word	0x00000433
 8002174:	00000413 	.word	0x00000413
 8002178:	fffffbed 	.word	0xfffffbed

0800217c <__aeabi_i2d>:
 800217c:	b570      	push	{r4, r5, r6, lr}
 800217e:	2800      	cmp	r0, #0
 8002180:	d016      	beq.n	80021b0 <__aeabi_i2d+0x34>
 8002182:	17c3      	asrs	r3, r0, #31
 8002184:	18c5      	adds	r5, r0, r3
 8002186:	405d      	eors	r5, r3
 8002188:	0fc4      	lsrs	r4, r0, #31
 800218a:	0028      	movs	r0, r5
 800218c:	f000 f848 	bl	8002220 <__clzsi2>
 8002190:	4b10      	ldr	r3, [pc, #64]	@ (80021d4 <__aeabi_i2d+0x58>)
 8002192:	1a1b      	subs	r3, r3, r0
 8002194:	055b      	lsls	r3, r3, #21
 8002196:	0d5b      	lsrs	r3, r3, #21
 8002198:	280a      	cmp	r0, #10
 800219a:	dc14      	bgt.n	80021c6 <__aeabi_i2d+0x4a>
 800219c:	0002      	movs	r2, r0
 800219e:	002e      	movs	r6, r5
 80021a0:	3215      	adds	r2, #21
 80021a2:	4096      	lsls	r6, r2
 80021a4:	220b      	movs	r2, #11
 80021a6:	1a12      	subs	r2, r2, r0
 80021a8:	40d5      	lsrs	r5, r2
 80021aa:	032d      	lsls	r5, r5, #12
 80021ac:	0b2d      	lsrs	r5, r5, #12
 80021ae:	e003      	b.n	80021b8 <__aeabi_i2d+0x3c>
 80021b0:	2400      	movs	r4, #0
 80021b2:	2300      	movs	r3, #0
 80021b4:	2500      	movs	r5, #0
 80021b6:	2600      	movs	r6, #0
 80021b8:	051b      	lsls	r3, r3, #20
 80021ba:	432b      	orrs	r3, r5
 80021bc:	07e4      	lsls	r4, r4, #31
 80021be:	4323      	orrs	r3, r4
 80021c0:	0030      	movs	r0, r6
 80021c2:	0019      	movs	r1, r3
 80021c4:	bd70      	pop	{r4, r5, r6, pc}
 80021c6:	380b      	subs	r0, #11
 80021c8:	4085      	lsls	r5, r0
 80021ca:	032d      	lsls	r5, r5, #12
 80021cc:	2600      	movs	r6, #0
 80021ce:	0b2d      	lsrs	r5, r5, #12
 80021d0:	e7f2      	b.n	80021b8 <__aeabi_i2d+0x3c>
 80021d2:	46c0      	nop			@ (mov r8, r8)
 80021d4:	0000041e 	.word	0x0000041e

080021d8 <__aeabi_ui2d>:
 80021d8:	b510      	push	{r4, lr}
 80021da:	1e04      	subs	r4, r0, #0
 80021dc:	d010      	beq.n	8002200 <__aeabi_ui2d+0x28>
 80021de:	f000 f81f 	bl	8002220 <__clzsi2>
 80021e2:	4b0e      	ldr	r3, [pc, #56]	@ (800221c <__aeabi_ui2d+0x44>)
 80021e4:	1a1b      	subs	r3, r3, r0
 80021e6:	055b      	lsls	r3, r3, #21
 80021e8:	0d5b      	lsrs	r3, r3, #21
 80021ea:	280a      	cmp	r0, #10
 80021ec:	dc0f      	bgt.n	800220e <__aeabi_ui2d+0x36>
 80021ee:	220b      	movs	r2, #11
 80021f0:	0021      	movs	r1, r4
 80021f2:	1a12      	subs	r2, r2, r0
 80021f4:	40d1      	lsrs	r1, r2
 80021f6:	3015      	adds	r0, #21
 80021f8:	030a      	lsls	r2, r1, #12
 80021fa:	4084      	lsls	r4, r0
 80021fc:	0b12      	lsrs	r2, r2, #12
 80021fe:	e001      	b.n	8002204 <__aeabi_ui2d+0x2c>
 8002200:	2300      	movs	r3, #0
 8002202:	2200      	movs	r2, #0
 8002204:	051b      	lsls	r3, r3, #20
 8002206:	4313      	orrs	r3, r2
 8002208:	0020      	movs	r0, r4
 800220a:	0019      	movs	r1, r3
 800220c:	bd10      	pop	{r4, pc}
 800220e:	0022      	movs	r2, r4
 8002210:	380b      	subs	r0, #11
 8002212:	4082      	lsls	r2, r0
 8002214:	0312      	lsls	r2, r2, #12
 8002216:	2400      	movs	r4, #0
 8002218:	0b12      	lsrs	r2, r2, #12
 800221a:	e7f3      	b.n	8002204 <__aeabi_ui2d+0x2c>
 800221c:	0000041e 	.word	0x0000041e

08002220 <__clzsi2>:
 8002220:	211c      	movs	r1, #28
 8002222:	2301      	movs	r3, #1
 8002224:	041b      	lsls	r3, r3, #16
 8002226:	4298      	cmp	r0, r3
 8002228:	d301      	bcc.n	800222e <__clzsi2+0xe>
 800222a:	0c00      	lsrs	r0, r0, #16
 800222c:	3910      	subs	r1, #16
 800222e:	0a1b      	lsrs	r3, r3, #8
 8002230:	4298      	cmp	r0, r3
 8002232:	d301      	bcc.n	8002238 <__clzsi2+0x18>
 8002234:	0a00      	lsrs	r0, r0, #8
 8002236:	3908      	subs	r1, #8
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	4298      	cmp	r0, r3
 800223c:	d301      	bcc.n	8002242 <__clzsi2+0x22>
 800223e:	0900      	lsrs	r0, r0, #4
 8002240:	3904      	subs	r1, #4
 8002242:	a202      	add	r2, pc, #8	@ (adr r2, 800224c <__clzsi2+0x2c>)
 8002244:	5c10      	ldrb	r0, [r2, r0]
 8002246:	1840      	adds	r0, r0, r1
 8002248:	4770      	bx	lr
 800224a:	46c0      	nop			@ (mov r8, r8)
 800224c:	02020304 	.word	0x02020304
 8002250:	01010101 	.word	0x01010101
	...

0800225c <is_ack_packet>:
		.length = 1,
		.data = {0},
		.crc = 0x15
};

uint8_t is_ack_packet(comms_packet_t *packet){
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
	if(packet->identifier != 0){
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <is_ack_packet+0x14>
		return 0;
 800226c:	2300      	movs	r3, #0
 800226e:	e00c      	b.n	800228a <is_ack_packet+0x2e>
	}

	if(packet->length != 1){
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	785b      	ldrb	r3, [r3, #1]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d001      	beq.n	800227c <is_ack_packet+0x20>
		return 0;
 8002278:	2300      	movs	r3, #0
 800227a:	e006      	b.n	800228a <is_ack_packet+0x2e>
	}

	if(packet->data[0] != 0){
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	789b      	ldrb	r3, [r3, #2]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <is_ack_packet+0x2c>
		return 0;
 8002284:	2300      	movs	r3, #0
 8002286:	e000      	b.n	800228a <is_ack_packet+0x2e>
	}

	return 1;
 8002288:	2301      	movs	r3, #1
}
 800228a:	0018      	movs	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	b002      	add	sp, #8
 8002290:	bd80      	pop	{r7, pc}
	...

08002294 <comms_init>:
// TODO: Find a way to test if the buffer is working correctly
static void comms_buffer_write(comms_packet_t packet);

uint8_t crc8(uint8_t *data, size_t len);

void comms_init(UART_HandleTypeDef *huart1){
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
	comms.huart = huart1;
 800229c:	4b11      	ldr	r3, [pc, #68]	@ (80022e4 <comms_init+0x50>)
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	601a      	str	r2, [r3, #0]
	comms.state = COMMS_ID_STATE;
 80022a2:	4b10      	ldr	r3, [pc, #64]	@ (80022e4 <comms_init+0x50>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	721a      	strb	r2, [r3, #8]

	// Create comms buffer
    comms_packet_buffer* rb = (comms_packet_buffer*)malloc(sizeof(comms_packet_buffer));
 80022a8:	2008      	movs	r0, #8
 80022aa:	f003 fe7b 	bl	8005fa4 <malloc>
 80022ae:	0003      	movs	r3, r0
 80022b0:	60fb      	str	r3, [r7, #12]
    rb->buffer = (comms_packet_t*)malloc(COMMS_BUFFER_CAPACITY * sizeof(comms_packet_t));
 80022b2:	23af      	movs	r3, #175	@ 0xaf
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	0018      	movs	r0, r3
 80022b8:	f003 fe74 	bl	8005fa4 <malloc>
 80022bc:	0003      	movs	r3, r0
 80022be:	001a      	movs	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	601a      	str	r2, [r3, #0]
    rb->size = 0;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	711a      	strb	r2, [r3, #4]
    rb->head = 0;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	715a      	strb	r2, [r3, #5]
    rb->tail = 0;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	719a      	strb	r2, [r3, #6]
    comms.buffer = rb;
 80022d6:	4b03      	ldr	r3, [pc, #12]	@ (80022e4 <comms_init+0x50>)
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	605a      	str	r2, [r3, #4]
}
 80022dc:	46c0      	nop			@ (mov r8, r8)
 80022de:	46bd      	mov	sp, r7
 80022e0:	b004      	add	sp, #16
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	2000023c 	.word	0x2000023c

080022e8 <comms_state_machine>:

// TODO: UART receive error handing
void comms_state_machine(){
 80022e8:	b5b0      	push	{r4, r5, r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af06      	add	r7, sp, #24
	switch (comms.state) {
 80022ee:	4b45      	ldr	r3, [pc, #276]	@ (8002404 <comms_state_machine+0x11c>)
 80022f0:	7a1b      	ldrb	r3, [r3, #8]
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d036      	beq.n	8002364 <comms_state_machine+0x7c>
 80022f6:	dd00      	ble.n	80022fa <comms_state_machine+0x12>
 80022f8:	e077      	b.n	80023ea <comms_state_machine+0x102>
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d022      	beq.n	8002344 <comms_state_machine+0x5c>
 80022fe:	dd00      	ble.n	8002302 <comms_state_machine+0x1a>
 8002300:	e073      	b.n	80023ea <comms_state_machine+0x102>
 8002302:	2b00      	cmp	r3, #0
 8002304:	d002      	beq.n	800230c <comms_state_machine+0x24>
 8002306:	2b01      	cmp	r3, #1
 8002308:	d00e      	beq.n	8002328 <comms_state_machine+0x40>
				}
				comms.state = COMMS_ID_STATE;
			}
			break;
		default:
			break;
 800230a:	e06e      	b.n	80023ea <comms_state_machine+0x102>
			if(HAL_UART_Receive(comms.huart, &(temporary_packet.identifier), 1, 1000) == HAL_OK){
 800230c:	4b3d      	ldr	r3, [pc, #244]	@ (8002404 <comms_state_machine+0x11c>)
 800230e:	6818      	ldr	r0, [r3, #0]
 8002310:	23fa      	movs	r3, #250	@ 0xfa
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	493c      	ldr	r1, [pc, #240]	@ (8002408 <comms_state_machine+0x120>)
 8002316:	2201      	movs	r2, #1
 8002318:	f002 f936 	bl	8004588 <HAL_UART_Receive>
 800231c:	1e03      	subs	r3, r0, #0
 800231e:	d166      	bne.n	80023ee <comms_state_machine+0x106>
				comms.state = COMMS_LENGTH_STATE;
 8002320:	4b38      	ldr	r3, [pc, #224]	@ (8002404 <comms_state_machine+0x11c>)
 8002322:	2201      	movs	r2, #1
 8002324:	721a      	strb	r2, [r3, #8]
			break;
 8002326:	e062      	b.n	80023ee <comms_state_machine+0x106>
			if(HAL_UART_Receive(comms.huart, &(temporary_packet.length), 1, 1000) == HAL_OK){
 8002328:	4b36      	ldr	r3, [pc, #216]	@ (8002404 <comms_state_machine+0x11c>)
 800232a:	6818      	ldr	r0, [r3, #0]
 800232c:	23fa      	movs	r3, #250	@ 0xfa
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4936      	ldr	r1, [pc, #216]	@ (800240c <comms_state_machine+0x124>)
 8002332:	2201      	movs	r2, #1
 8002334:	f002 f928 	bl	8004588 <HAL_UART_Receive>
 8002338:	1e03      	subs	r3, r0, #0
 800233a:	d15a      	bne.n	80023f2 <comms_state_machine+0x10a>
				comms.state = COMMS_DATA_STATE;
 800233c:	4b31      	ldr	r3, [pc, #196]	@ (8002404 <comms_state_machine+0x11c>)
 800233e:	2202      	movs	r2, #2
 8002340:	721a      	strb	r2, [r3, #8]
			break;
 8002342:	e056      	b.n	80023f2 <comms_state_machine+0x10a>
			if(HAL_UART_Receive(comms.huart, (temporary_packet.data), (temporary_packet.length), 1000)== HAL_OK){
 8002344:	4b2f      	ldr	r3, [pc, #188]	@ (8002404 <comms_state_machine+0x11c>)
 8002346:	6818      	ldr	r0, [r3, #0]
 8002348:	4b2f      	ldr	r3, [pc, #188]	@ (8002408 <comms_state_machine+0x120>)
 800234a:	785b      	ldrb	r3, [r3, #1]
 800234c:	001a      	movs	r2, r3
 800234e:	23fa      	movs	r3, #250	@ 0xfa
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	492f      	ldr	r1, [pc, #188]	@ (8002410 <comms_state_machine+0x128>)
 8002354:	f002 f918 	bl	8004588 <HAL_UART_Receive>
 8002358:	1e03      	subs	r3, r0, #0
 800235a:	d14c      	bne.n	80023f6 <comms_state_machine+0x10e>
				comms.state = COMMS_CRC_STATE;
 800235c:	4b29      	ldr	r3, [pc, #164]	@ (8002404 <comms_state_machine+0x11c>)
 800235e:	2203      	movs	r2, #3
 8002360:	721a      	strb	r2, [r3, #8]
			break;
 8002362:	e048      	b.n	80023f6 <comms_state_machine+0x10e>
			if(HAL_UART_Receive(comms.huart, &(temporary_packet.crc), 1, 1000) == HAL_OK){
 8002364:	4b27      	ldr	r3, [pc, #156]	@ (8002404 <comms_state_machine+0x11c>)
 8002366:	6818      	ldr	r0, [r3, #0]
 8002368:	23fa      	movs	r3, #250	@ 0xfa
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4929      	ldr	r1, [pc, #164]	@ (8002414 <comms_state_machine+0x12c>)
 800236e:	2201      	movs	r2, #1
 8002370:	f002 f90a 	bl	8004588 <HAL_UART_Receive>
 8002374:	1e03      	subs	r3, r0, #0
 8002376:	d140      	bne.n	80023fa <comms_state_machine+0x112>
				uint8_t crc = crc8((uint8_t*)&temporary_packet, (temporary_packet.length + 2));	// Add 2 to the data length to accommodate the identifier byte and length byte
 8002378:	4b23      	ldr	r3, [pc, #140]	@ (8002408 <comms_state_machine+0x120>)
 800237a:	785b      	ldrb	r3, [r3, #1]
 800237c:	3302      	adds	r3, #2
 800237e:	001a      	movs	r2, r3
 8002380:	1dfc      	adds	r4, r7, #7
 8002382:	4b21      	ldr	r3, [pc, #132]	@ (8002408 <comms_state_machine+0x120>)
 8002384:	0011      	movs	r1, r2
 8002386:	0018      	movs	r0, r3
 8002388:	f000 f8f6 	bl	8002578 <crc8>
 800238c:	0003      	movs	r3, r0
 800238e:	7023      	strb	r3, [r4, #0]
				if(crc == temporary_packet.crc){
 8002390:	4b1d      	ldr	r3, [pc, #116]	@ (8002408 <comms_state_machine+0x120>)
 8002392:	2222      	movs	r2, #34	@ 0x22
 8002394:	5c9b      	ldrb	r3, [r3, r2]
 8002396:	1dfa      	adds	r2, r7, #7
 8002398:	7812      	ldrb	r2, [r2, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d11d      	bne.n	80023da <comms_state_machine+0xf2>
					if(!is_ack_packet(&temporary_packet)){
 800239e:	4b1a      	ldr	r3, [pc, #104]	@ (8002408 <comms_state_machine+0x120>)
 80023a0:	0018      	movs	r0, r3
 80023a2:	f7ff ff5b 	bl	800225c <is_ack_packet>
 80023a6:	1e03      	subs	r3, r0, #0
 80023a8:	d11b      	bne.n	80023e2 <comms_state_machine+0xfa>
						comms_buffer_write(temporary_packet);
 80023aa:	4b17      	ldr	r3, [pc, #92]	@ (8002408 <comms_state_machine+0x120>)
 80023ac:	466a      	mov	r2, sp
 80023ae:	0011      	movs	r1, r2
 80023b0:	001a      	movs	r2, r3
 80023b2:	3210      	adds	r2, #16
 80023b4:	ca31      	ldmia	r2!, {r0, r4, r5}
 80023b6:	c131      	stmia	r1!, {r0, r4, r5}
 80023b8:	6810      	ldr	r0, [r2, #0]
 80023ba:	6008      	str	r0, [r1, #0]
 80023bc:	8890      	ldrh	r0, [r2, #4]
 80023be:	8088      	strh	r0, [r1, #4]
 80023c0:	7992      	ldrb	r2, [r2, #6]
 80023c2:	718a      	strb	r2, [r1, #6]
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	6859      	ldr	r1, [r3, #4]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f000 f868 	bl	80024a0 <comms_buffer_write>
						comms_send_packet(&acknowledge_packet);
 80023d0:	4b11      	ldr	r3, [pc, #68]	@ (8002418 <comms_state_machine+0x130>)
 80023d2:	0018      	movs	r0, r3
 80023d4:	f000 f824 	bl	8002420 <comms_send_packet>
 80023d8:	e003      	b.n	80023e2 <comms_state_machine+0xfa>
					comms_send_packet(&retransmit_packet);
 80023da:	4b10      	ldr	r3, [pc, #64]	@ (800241c <comms_state_machine+0x134>)
 80023dc:	0018      	movs	r0, r3
 80023de:	f000 f81f 	bl	8002420 <comms_send_packet>
				comms.state = COMMS_ID_STATE;
 80023e2:	4b08      	ldr	r3, [pc, #32]	@ (8002404 <comms_state_machine+0x11c>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	721a      	strb	r2, [r3, #8]
			break;
 80023e8:	e007      	b.n	80023fa <comms_state_machine+0x112>
			break;
 80023ea:	46c0      	nop			@ (mov r8, r8)
 80023ec:	e006      	b.n	80023fc <comms_state_machine+0x114>
			break;
 80023ee:	46c0      	nop			@ (mov r8, r8)
 80023f0:	e004      	b.n	80023fc <comms_state_machine+0x114>
			break;
 80023f2:	46c0      	nop			@ (mov r8, r8)
 80023f4:	e002      	b.n	80023fc <comms_state_machine+0x114>
			break;
 80023f6:	46c0      	nop			@ (mov r8, r8)
 80023f8:	e000      	b.n	80023fc <comms_state_machine+0x114>
			break;
 80023fa:	46c0      	nop			@ (mov r8, r8)
	}
}
 80023fc:	46c0      	nop			@ (mov r8, r8)
 80023fe:	46bd      	mov	sp, r7
 8002400:	b002      	add	sp, #8
 8002402:	bdb0      	pop	{r4, r5, r7, pc}
 8002404:	2000023c 	.word	0x2000023c
 8002408:	20000248 	.word	0x20000248
 800240c:	20000249 	.word	0x20000249
 8002410:	2000024a 	.word	0x2000024a
 8002414:	2000026a 	.word	0x2000026a
 8002418:	20000024 	.word	0x20000024
 800241c:	20000000 	.word	0x20000000

08002420 <comms_send_packet>:

void comms_send_packet(comms_packet_t *packet) {
 8002420:	b590      	push	{r4, r7, lr}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
    uint8_t i;
    HAL_UART_Transmit(comms.huart, &(packet->identifier), 1, 100);
 8002428:	4b1c      	ldr	r3, [pc, #112]	@ (800249c <comms_send_packet+0x7c>)
 800242a:	6818      	ldr	r0, [r3, #0]
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	2364      	movs	r3, #100	@ 0x64
 8002430:	2201      	movs	r2, #1
 8002432:	f002 f809 	bl	8004448 <HAL_UART_Transmit>
    HAL_UART_Transmit(comms.huart, &(packet->length), 1, 100);
 8002436:	4b19      	ldr	r3, [pc, #100]	@ (800249c <comms_send_packet+0x7c>)
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	1c59      	adds	r1, r3, #1
 800243e:	2364      	movs	r3, #100	@ 0x64
 8002440:	2201      	movs	r2, #1
 8002442:	f002 f801 	bl	8004448 <HAL_UART_Transmit>
    for (i = 0; i < packet->length; ++i) {
 8002446:	230f      	movs	r3, #15
 8002448:	18fb      	adds	r3, r7, r3
 800244a:	2200      	movs	r2, #0
 800244c:	701a      	strb	r2, [r3, #0]
 800244e:	e010      	b.n	8002472 <comms_send_packet+0x52>
        HAL_UART_Transmit(comms.huart, &(packet->data[i]), 1, 100);
 8002450:	4b12      	ldr	r3, [pc, #72]	@ (800249c <comms_send_packet+0x7c>)
 8002452:	6818      	ldr	r0, [r3, #0]
 8002454:	240f      	movs	r4, #15
 8002456:	193b      	adds	r3, r7, r4
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	18d3      	adds	r3, r2, r3
 800245e:	1c99      	adds	r1, r3, #2
 8002460:	2364      	movs	r3, #100	@ 0x64
 8002462:	2201      	movs	r2, #1
 8002464:	f001 fff0 	bl	8004448 <HAL_UART_Transmit>
    for (i = 0; i < packet->length; ++i) {
 8002468:	193b      	adds	r3, r7, r4
 800246a:	193a      	adds	r2, r7, r4
 800246c:	7812      	ldrb	r2, [r2, #0]
 800246e:	3201      	adds	r2, #1
 8002470:	701a      	strb	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	785b      	ldrb	r3, [r3, #1]
 8002476:	220f      	movs	r2, #15
 8002478:	18ba      	adds	r2, r7, r2
 800247a:	7812      	ldrb	r2, [r2, #0]
 800247c:	429a      	cmp	r2, r3
 800247e:	d3e7      	bcc.n	8002450 <comms_send_packet+0x30>
    }
    HAL_UART_Transmit(comms.huart, &(packet->crc), 1, 100);
 8002480:	4b06      	ldr	r3, [pc, #24]	@ (800249c <comms_send_packet+0x7c>)
 8002482:	6818      	ldr	r0, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3322      	adds	r3, #34	@ 0x22
 8002488:	0019      	movs	r1, r3
 800248a:	2364      	movs	r3, #100	@ 0x64
 800248c:	2201      	movs	r2, #1
 800248e:	f001 ffdb 	bl	8004448 <HAL_UART_Transmit>
}
 8002492:	46c0      	nop			@ (mov r8, r8)
 8002494:	46bd      	mov	sp, r7
 8002496:	b005      	add	sp, #20
 8002498:	bd90      	pop	{r4, r7, pc}
 800249a:	46c0      	nop			@ (mov r8, r8)
 800249c:	2000023c 	.word	0x2000023c

080024a0 <comms_buffer_write>:
	    packet.crc = 0;
	    comms_send_packet(&packet);
	    }
	}

static void comms_buffer_write(comms_packet_t packet){
 80024a0:	b084      	sub	sp, #16
 80024a2:	b5b0      	push	{r4, r5, r7, lr}
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	2410      	movs	r4, #16
 80024a8:	193c      	adds	r4, r7, r4
 80024aa:	6020      	str	r0, [r4, #0]
 80024ac:	6061      	str	r1, [r4, #4]
 80024ae:	60a2      	str	r2, [r4, #8]
 80024b0:	60e3      	str	r3, [r4, #12]
	if(comms.buffer->size == COMMS_BUFFER_CAPACITY){
 80024b2:	4b27      	ldr	r3, [pc, #156]	@ (8002550 <comms_buffer_write+0xb0>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	791b      	ldrb	r3, [r3, #4]
 80024b8:	2b0a      	cmp	r3, #10
 80024ba:	d10e      	bne.n	80024da <comms_buffer_write+0x3a>
		// Buffer is full, overwrite the oldest data
		comms.buffer->tail = (comms.buffer->tail + 1) % COMMS_BUFFER_CAPACITY;
 80024bc:	4b24      	ldr	r3, [pc, #144]	@ (8002550 <comms_buffer_write+0xb0>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	799b      	ldrb	r3, [r3, #6]
 80024c2:	3301      	adds	r3, #1
 80024c4:	210a      	movs	r1, #10
 80024c6:	0018      	movs	r0, r3
 80024c8:	f7fd ffaa 	bl	8000420 <__aeabi_idivmod>
 80024cc:	000b      	movs	r3, r1
 80024ce:	001a      	movs	r2, r3
 80024d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002550 <comms_buffer_write+0xb0>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	719a      	strb	r2, [r3, #6]
 80024d8:	e005      	b.n	80024e6 <comms_buffer_write+0x46>
	}else{
		comms.buffer->size++;
 80024da:	4b1d      	ldr	r3, [pc, #116]	@ (8002550 <comms_buffer_write+0xb0>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	791a      	ldrb	r2, [r3, #4]
 80024e0:	3201      	adds	r2, #1
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	711a      	strb	r2, [r3, #4]
	}
	comms.buffer->buffer[comms.buffer->head] = packet;
 80024e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002550 <comms_buffer_write+0xb0>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4b18      	ldr	r3, [pc, #96]	@ (8002550 <comms_buffer_write+0xb0>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	795b      	ldrb	r3, [r3, #5]
 80024f2:	0019      	movs	r1, r3
 80024f4:	000b      	movs	r3, r1
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	185b      	adds	r3, r3, r1
 80024fa:	00d9      	lsls	r1, r3, #3
 80024fc:	1acb      	subs	r3, r1, r3
 80024fe:	18d2      	adds	r2, r2, r3
 8002500:	2310      	movs	r3, #16
 8002502:	18fb      	adds	r3, r7, r3
 8002504:	0010      	movs	r0, r2
 8002506:	0019      	movs	r1, r3
 8002508:	2323      	movs	r3, #35	@ 0x23
 800250a:	001a      	movs	r2, r3
 800250c:	f004 fc1c 	bl	8006d48 <memcpy>
	comms.buffer->head = (comms.buffer->head + 1) % COMMS_BUFFER_CAPACITY;
 8002510:	4b0f      	ldr	r3, [pc, #60]	@ (8002550 <comms_buffer_write+0xb0>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	795b      	ldrb	r3, [r3, #5]
 8002516:	3301      	adds	r3, #1
 8002518:	210a      	movs	r1, #10
 800251a:	0018      	movs	r0, r3
 800251c:	f7fd ff80 	bl	8000420 <__aeabi_idivmod>
 8002520:	000b      	movs	r3, r1
 8002522:	001a      	movs	r2, r3
 8002524:	4b0a      	ldr	r3, [pc, #40]	@ (8002550 <comms_buffer_write+0xb0>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	715a      	strb	r2, [r3, #5]

	// Update previous packet
	memcpy(&previous_packet, &temporary_packet, sizeof(comms_packet_t));
 800252c:	4b09      	ldr	r3, [pc, #36]	@ (8002554 <comms_buffer_write+0xb4>)
 800252e:	4a0a      	ldr	r2, [pc, #40]	@ (8002558 <comms_buffer_write+0xb8>)
 8002530:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002532:	c313      	stmia	r3!, {r0, r1, r4}
 8002534:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002536:	c313      	stmia	r3!, {r0, r1, r4}
 8002538:	ca03      	ldmia	r2!, {r0, r1}
 800253a:	c303      	stmia	r3!, {r0, r1}
 800253c:	8811      	ldrh	r1, [r2, #0]
 800253e:	8019      	strh	r1, [r3, #0]
 8002540:	7892      	ldrb	r2, [r2, #2]
 8002542:	709a      	strb	r2, [r3, #2]
}
 8002544:	46c0      	nop			@ (mov r8, r8)
 8002546:	46bd      	mov	sp, r7
 8002548:	bcb0      	pop	{r4, r5, r7}
 800254a:	bc08      	pop	{r3}
 800254c:	b004      	add	sp, #16
 800254e:	4718      	bx	r3
 8002550:	2000023c 	.word	0x2000023c
 8002554:	2000026c 	.word	0x2000026c
 8002558:	20000248 	.word	0x20000248

0800255c <comms_buffer_is_empty>:

uint8_t comms_buffer_is_full(){
	return comms.buffer->size == COMMS_BUFFER_CAPACITY;
}

uint8_t comms_buffer_is_empty(){
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
	return comms.buffer->size == 0;
 8002560:	4b04      	ldr	r3, [pc, #16]	@ (8002574 <comms_buffer_is_empty+0x18>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	791b      	ldrb	r3, [r3, #4]
 8002566:	425a      	negs	r2, r3
 8002568:	4153      	adcs	r3, r2
 800256a:	b2db      	uxtb	r3, r3
}
 800256c:	0018      	movs	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	46c0      	nop			@ (mov r8, r8)
 8002574:	2000023c 	.word	0x2000023c

08002578 <crc8>:

uint8_t crc8(uint8_t *data, size_t len) {
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0x00;
 8002582:	2317      	movs	r3, #23
 8002584:	18fb      	adds	r3, r7, r3
 8002586:	2200      	movs	r2, #0
 8002588:	701a      	strb	r2, [r3, #0]
    size_t i, j;

    for (i = 0; i < len; ++i) {
 800258a:	2300      	movs	r3, #0
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	e02b      	b.n	80025e8 <crc8+0x70>
        crc ^= data[i];
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	18d3      	adds	r3, r2, r3
 8002596:	7819      	ldrb	r1, [r3, #0]
 8002598:	2217      	movs	r2, #23
 800259a:	18bb      	adds	r3, r7, r2
 800259c:	18ba      	adds	r2, r7, r2
 800259e:	7812      	ldrb	r2, [r2, #0]
 80025a0:	404a      	eors	r2, r1
 80025a2:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < 8; ++j) {
 80025a4:	2300      	movs	r3, #0
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	e018      	b.n	80025dc <crc8+0x64>
            if (crc & 0x80) {
 80025aa:	2117      	movs	r1, #23
 80025ac:	187b      	adds	r3, r7, r1
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	b25b      	sxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	da09      	bge.n	80025ca <crc8+0x52>
                crc = (crc << 1) ^ 0x07;
 80025b6:	187b      	adds	r3, r7, r1
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	b25b      	sxtb	r3, r3
 80025be:	2207      	movs	r2, #7
 80025c0:	4053      	eors	r3, r2
 80025c2:	b25a      	sxtb	r2, r3
 80025c4:	187b      	adds	r3, r7, r1
 80025c6:	701a      	strb	r2, [r3, #0]
 80025c8:	e005      	b.n	80025d6 <crc8+0x5e>
            } else {
                crc <<= 1;
 80025ca:	2317      	movs	r3, #23
 80025cc:	18fa      	adds	r2, r7, r3
 80025ce:	18fb      	adds	r3, r7, r3
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	18db      	adds	r3, r3, r3
 80025d4:	7013      	strb	r3, [r2, #0]
        for (j = 0; j < 8; ++j) {
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	3301      	adds	r3, #1
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2b07      	cmp	r3, #7
 80025e0:	d9e3      	bls.n	80025aa <crc8+0x32>
    for (i = 0; i < len; ++i) {
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	3301      	adds	r3, #1
 80025e6:	613b      	str	r3, [r7, #16]
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d3cf      	bcc.n	8002590 <crc8+0x18>
            }
        }
    }
    return crc;
 80025f0:	2317      	movs	r3, #23
 80025f2:	18fb      	adds	r3, r7, r3
 80025f4:	781b      	ldrb	r3, [r3, #0]
}
 80025f6:	0018      	movs	r0, r3
 80025f8:	46bd      	mov	sp, r7
 80025fa:	b006      	add	sp, #24
 80025fc:	bd80      	pop	{r7, pc}
	...

08002600 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4a06      	ldr	r2, [pc, #24]	@ (8002628 <vApplicationGetIdleTaskMemory+0x28>)
 8002610:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	4a05      	ldr	r2, [pc, #20]	@ (800262c <vApplicationGetIdleTaskMemory+0x2c>)
 8002616:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2280      	movs	r2, #128	@ 0x80
 800261c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800261e:	46c0      	nop			@ (mov r8, r8)
 8002620:	46bd      	mov	sp, r7
 8002622:	b004      	add	sp, #16
 8002624:	bd80      	pop	{r7, pc}
 8002626:	46c0      	nop			@ (mov r8, r8)
 8002628:	20000290 	.word	0x20000290
 800262c:	200002e4 	.word	0x200002e4

08002630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002630:	b5b0      	push	{r4, r5, r7, lr}
 8002632:	b08e      	sub	sp, #56	@ 0x38
 8002634:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002636:	f000 fbdb 	bl	8002df0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800263a:	f000 f83b 	bl	80026b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800263e:	f000 f951 	bl	80028e4 <MX_GPIO_Init>
  MX_TIM6_Init();
 8002642:	f000 f8e3 	bl	800280c <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8002646:	f000 f91d 	bl	8002884 <MX_USART2_UART_Init>
  MX_ADC_Init();
 800264a:	f000 f883 	bl	8002754 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 800264e:	4b14      	ldr	r3, [pc, #80]	@ (80026a0 <main+0x70>)
 8002650:	0018      	movs	r0, r3
 8002652:	f001 fd6f 	bl	8004134 <HAL_TIM_Base_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002656:	251c      	movs	r5, #28
 8002658:	197b      	adds	r3, r7, r5
 800265a:	4a12      	ldr	r2, [pc, #72]	@ (80026a4 <main+0x74>)
 800265c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800265e:	c313      	stmia	r3!, {r0, r1, r4}
 8002660:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002662:	c313      	stmia	r3!, {r0, r1, r4}
 8002664:	6812      	ldr	r2, [r2, #0]
 8002666:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002668:	197b      	adds	r3, r7, r5
 800266a:	2100      	movs	r1, #0
 800266c:	0018      	movs	r0, r3
 800266e:	f002 fbf0 	bl	8004e52 <osThreadCreate>
 8002672:	0002      	movs	r2, r0
 8002674:	4b0c      	ldr	r3, [pc, #48]	@ (80026a8 <main+0x78>)
 8002676:	601a      	str	r2, [r3, #0]

  /* definition and creation of commsTask */
  osThreadDef(commsTask, StartCommsTask, osPriorityIdle, 0, 128);
 8002678:	003b      	movs	r3, r7
 800267a:	4a0c      	ldr	r2, [pc, #48]	@ (80026ac <main+0x7c>)
 800267c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800267e:	c313      	stmia	r3!, {r0, r1, r4}
 8002680:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002682:	c313      	stmia	r3!, {r0, r1, r4}
 8002684:	6812      	ldr	r2, [r2, #0]
 8002686:	601a      	str	r2, [r3, #0]
  commsTaskHandle = osThreadCreate(osThread(commsTask), NULL);
 8002688:	003b      	movs	r3, r7
 800268a:	2100      	movs	r1, #0
 800268c:	0018      	movs	r0, r3
 800268e:	f002 fbe0 	bl	8004e52 <osThreadCreate>
 8002692:	0002      	movs	r2, r0
 8002694:	4b06      	ldr	r3, [pc, #24]	@ (80026b0 <main+0x80>)
 8002696:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002698:	f002 fbd3 	bl	8004e42 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800269c:	46c0      	nop			@ (mov r8, r8)
 800269e:	e7fd      	b.n	800269c <main+0x6c>
 80026a0:	20000524 	.word	0x20000524
 80026a4:	08008a44 	.word	0x08008a44
 80026a8:	200005f4 	.word	0x200005f4
 80026ac:	08008a6c 	.word	0x08008a6c
 80026b0:	200005f8 	.word	0x200005f8

080026b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026b4:	b590      	push	{r4, r7, lr}
 80026b6:	b091      	sub	sp, #68	@ 0x44
 80026b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026ba:	2410      	movs	r4, #16
 80026bc:	193b      	adds	r3, r7, r4
 80026be:	0018      	movs	r0, r3
 80026c0:	2330      	movs	r3, #48	@ 0x30
 80026c2:	001a      	movs	r2, r3
 80026c4:	2100      	movs	r1, #0
 80026c6:	f004 fa9b 	bl	8006c00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026ca:	003b      	movs	r3, r7
 80026cc:	0018      	movs	r0, r3
 80026ce:	2310      	movs	r3, #16
 80026d0:	001a      	movs	r2, r3
 80026d2:	2100      	movs	r1, #0
 80026d4:	f004 fa94 	bl	8006c00 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80026d8:	0021      	movs	r1, r4
 80026da:	187b      	adds	r3, r7, r1
 80026dc:	2212      	movs	r2, #18
 80026de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026e0:	187b      	adds	r3, r7, r1
 80026e2:	2201      	movs	r2, #1
 80026e4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80026e6:	187b      	adds	r3, r7, r1
 80026e8:	2201      	movs	r2, #1
 80026ea:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026ec:	187b      	adds	r3, r7, r1
 80026ee:	2210      	movs	r2, #16
 80026f0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80026f2:	187b      	adds	r3, r7, r1
 80026f4:	2210      	movs	r2, #16
 80026f6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026f8:	187b      	adds	r3, r7, r1
 80026fa:	2202      	movs	r2, #2
 80026fc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80026fe:	187b      	adds	r3, r7, r1
 8002700:	2200      	movs	r2, #0
 8002702:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002704:	187b      	adds	r3, r7, r1
 8002706:	22a0      	movs	r2, #160	@ 0xa0
 8002708:	0392      	lsls	r2, r2, #14
 800270a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800270c:	187b      	adds	r3, r7, r1
 800270e:	2200      	movs	r2, #0
 8002710:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002712:	187b      	adds	r3, r7, r1
 8002714:	0018      	movs	r0, r3
 8002716:	f001 f85f 	bl	80037d8 <HAL_RCC_OscConfig>
 800271a:	1e03      	subs	r3, r0, #0
 800271c:	d001      	beq.n	8002722 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800271e:	f000 f981 	bl	8002a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002722:	003b      	movs	r3, r7
 8002724:	2207      	movs	r2, #7
 8002726:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002728:	003b      	movs	r3, r7
 800272a:	2202      	movs	r2, #2
 800272c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800272e:	003b      	movs	r3, r7
 8002730:	2200      	movs	r2, #0
 8002732:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002734:	003b      	movs	r3, r7
 8002736:	2200      	movs	r2, #0
 8002738:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800273a:	003b      	movs	r3, r7
 800273c:	2101      	movs	r1, #1
 800273e:	0018      	movs	r0, r3
 8002740:	f001 fb64 	bl	8003e0c <HAL_RCC_ClockConfig>
 8002744:	1e03      	subs	r3, r0, #0
 8002746:	d001      	beq.n	800274c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002748:	f000 f96c 	bl	8002a24 <Error_Handler>
  }
}
 800274c:	46c0      	nop			@ (mov r8, r8)
 800274e:	46bd      	mov	sp, r7
 8002750:	b011      	add	sp, #68	@ 0x44
 8002752:	bd90      	pop	{r4, r7, pc}

08002754 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800275a:	1d3b      	adds	r3, r7, #4
 800275c:	0018      	movs	r0, r3
 800275e:	230c      	movs	r3, #12
 8002760:	001a      	movs	r2, r3
 8002762:	2100      	movs	r1, #0
 8002764:	f004 fa4c 	bl	8006c00 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002768:	4b26      	ldr	r3, [pc, #152]	@ (8002804 <MX_ADC_Init+0xb0>)
 800276a:	4a27      	ldr	r2, [pc, #156]	@ (8002808 <MX_ADC_Init+0xb4>)
 800276c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800276e:	4b25      	ldr	r3, [pc, #148]	@ (8002804 <MX_ADC_Init+0xb0>)
 8002770:	2200      	movs	r2, #0
 8002772:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002774:	4b23      	ldr	r3, [pc, #140]	@ (8002804 <MX_ADC_Init+0xb0>)
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800277a:	4b22      	ldr	r3, [pc, #136]	@ (8002804 <MX_ADC_Init+0xb0>)
 800277c:	2200      	movs	r2, #0
 800277e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002780:	4b20      	ldr	r3, [pc, #128]	@ (8002804 <MX_ADC_Init+0xb0>)
 8002782:	2201      	movs	r2, #1
 8002784:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002786:	4b1f      	ldr	r3, [pc, #124]	@ (8002804 <MX_ADC_Init+0xb0>)
 8002788:	2204      	movs	r2, #4
 800278a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800278c:	4b1d      	ldr	r3, [pc, #116]	@ (8002804 <MX_ADC_Init+0xb0>)
 800278e:	2200      	movs	r2, #0
 8002790:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002792:	4b1c      	ldr	r3, [pc, #112]	@ (8002804 <MX_ADC_Init+0xb0>)
 8002794:	2200      	movs	r2, #0
 8002796:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002798:	4b1a      	ldr	r3, [pc, #104]	@ (8002804 <MX_ADC_Init+0xb0>)
 800279a:	2200      	movs	r2, #0
 800279c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800279e:	4b19      	ldr	r3, [pc, #100]	@ (8002804 <MX_ADC_Init+0xb0>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027a4:	4b17      	ldr	r3, [pc, #92]	@ (8002804 <MX_ADC_Init+0xb0>)
 80027a6:	22c2      	movs	r2, #194	@ 0xc2
 80027a8:	32ff      	adds	r2, #255	@ 0xff
 80027aa:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027ac:	4b15      	ldr	r3, [pc, #84]	@ (8002804 <MX_ADC_Init+0xb0>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80027b2:	4b14      	ldr	r3, [pc, #80]	@ (8002804 <MX_ADC_Init+0xb0>)
 80027b4:	2224      	movs	r2, #36	@ 0x24
 80027b6:	2100      	movs	r1, #0
 80027b8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80027ba:	4b12      	ldr	r3, [pc, #72]	@ (8002804 <MX_ADC_Init+0xb0>)
 80027bc:	2201      	movs	r2, #1
 80027be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80027c0:	4b10      	ldr	r3, [pc, #64]	@ (8002804 <MX_ADC_Init+0xb0>)
 80027c2:	0018      	movs	r0, r3
 80027c4:	f000 fb78 	bl	8002eb8 <HAL_ADC_Init>
 80027c8:	1e03      	subs	r3, r0, #0
 80027ca:	d001      	beq.n	80027d0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80027cc:	f000 f92a 	bl	8002a24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80027d0:	1d3b      	adds	r3, r7, #4
 80027d2:	220b      	movs	r2, #11
 80027d4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80027d6:	1d3b      	adds	r3, r7, #4
 80027d8:	2280      	movs	r2, #128	@ 0x80
 80027da:	0152      	lsls	r2, r2, #5
 80027dc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80027de:	1d3b      	adds	r3, r7, #4
 80027e0:	2280      	movs	r2, #128	@ 0x80
 80027e2:	0552      	lsls	r2, r2, #21
 80027e4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80027e6:	1d3a      	adds	r2, r7, #4
 80027e8:	4b06      	ldr	r3, [pc, #24]	@ (8002804 <MX_ADC_Init+0xb0>)
 80027ea:	0011      	movs	r1, r2
 80027ec:	0018      	movs	r0, r3
 80027ee:	f000 fca3 	bl	8003138 <HAL_ADC_ConfigChannel>
 80027f2:	1e03      	subs	r3, r0, #0
 80027f4:	d001      	beq.n	80027fa <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80027f6:	f000 f915 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80027fa:	46c0      	nop			@ (mov r8, r8)
 80027fc:	46bd      	mov	sp, r7
 80027fe:	b004      	add	sp, #16
 8002800:	bd80      	pop	{r7, pc}
 8002802:	46c0      	nop			@ (mov r8, r8)
 8002804:	200004e4 	.word	0x200004e4
 8002808:	40012400 	.word	0x40012400

0800280c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002812:	003b      	movs	r3, r7
 8002814:	0018      	movs	r0, r3
 8002816:	2308      	movs	r3, #8
 8002818:	001a      	movs	r2, r3
 800281a:	2100      	movs	r1, #0
 800281c:	f004 f9f0 	bl	8006c00 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002820:	4b15      	ldr	r3, [pc, #84]	@ (8002878 <MX_TIM6_Init+0x6c>)
 8002822:	4a16      	ldr	r2, [pc, #88]	@ (800287c <MX_TIM6_Init+0x70>)
 8002824:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 47;
 8002826:	4b14      	ldr	r3, [pc, #80]	@ (8002878 <MX_TIM6_Init+0x6c>)
 8002828:	222f      	movs	r2, #47	@ 0x2f
 800282a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800282c:	4b12      	ldr	r3, [pc, #72]	@ (8002878 <MX_TIM6_Init+0x6c>)
 800282e:	2200      	movs	r2, #0
 8002830:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002832:	4b11      	ldr	r3, [pc, #68]	@ (8002878 <MX_TIM6_Init+0x6c>)
 8002834:	4a12      	ldr	r2, [pc, #72]	@ (8002880 <MX_TIM6_Init+0x74>)
 8002836:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002838:	4b0f      	ldr	r3, [pc, #60]	@ (8002878 <MX_TIM6_Init+0x6c>)
 800283a:	2200      	movs	r2, #0
 800283c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800283e:	4b0e      	ldr	r3, [pc, #56]	@ (8002878 <MX_TIM6_Init+0x6c>)
 8002840:	0018      	movs	r0, r3
 8002842:	f001 fc27 	bl	8004094 <HAL_TIM_Base_Init>
 8002846:	1e03      	subs	r3, r0, #0
 8002848:	d001      	beq.n	800284e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800284a:	f000 f8eb 	bl	8002a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800284e:	003b      	movs	r3, r7
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002854:	003b      	movs	r3, r7
 8002856:	2200      	movs	r2, #0
 8002858:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800285a:	003a      	movs	r2, r7
 800285c:	4b06      	ldr	r3, [pc, #24]	@ (8002878 <MX_TIM6_Init+0x6c>)
 800285e:	0011      	movs	r1, r2
 8002860:	0018      	movs	r0, r3
 8002862:	f001 fd3f 	bl	80042e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002866:	1e03      	subs	r3, r0, #0
 8002868:	d001      	beq.n	800286e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800286a:	f000 f8db 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800286e:	46c0      	nop			@ (mov r8, r8)
 8002870:	46bd      	mov	sp, r7
 8002872:	b002      	add	sp, #8
 8002874:	bd80      	pop	{r7, pc}
 8002876:	46c0      	nop			@ (mov r8, r8)
 8002878:	20000524 	.word	0x20000524
 800287c:	40001000 	.word	0x40001000
 8002880:	0000ffff 	.word	0x0000ffff

08002884 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002888:	4b14      	ldr	r3, [pc, #80]	@ (80028dc <MX_USART2_UART_Init+0x58>)
 800288a:	4a15      	ldr	r2, [pc, #84]	@ (80028e0 <MX_USART2_UART_Init+0x5c>)
 800288c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800288e:	4b13      	ldr	r3, [pc, #76]	@ (80028dc <MX_USART2_UART_Init+0x58>)
 8002890:	22e1      	movs	r2, #225	@ 0xe1
 8002892:	0252      	lsls	r2, r2, #9
 8002894:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002896:	4b11      	ldr	r3, [pc, #68]	@ (80028dc <MX_USART2_UART_Init+0x58>)
 8002898:	2200      	movs	r2, #0
 800289a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800289c:	4b0f      	ldr	r3, [pc, #60]	@ (80028dc <MX_USART2_UART_Init+0x58>)
 800289e:	2200      	movs	r2, #0
 80028a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028a2:	4b0e      	ldr	r3, [pc, #56]	@ (80028dc <MX_USART2_UART_Init+0x58>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028a8:	4b0c      	ldr	r3, [pc, #48]	@ (80028dc <MX_USART2_UART_Init+0x58>)
 80028aa:	220c      	movs	r2, #12
 80028ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ae:	4b0b      	ldr	r3, [pc, #44]	@ (80028dc <MX_USART2_UART_Init+0x58>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028b4:	4b09      	ldr	r3, [pc, #36]	@ (80028dc <MX_USART2_UART_Init+0x58>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028ba:	4b08      	ldr	r3, [pc, #32]	@ (80028dc <MX_USART2_UART_Init+0x58>)
 80028bc:	2200      	movs	r2, #0
 80028be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028c0:	4b06      	ldr	r3, [pc, #24]	@ (80028dc <MX_USART2_UART_Init+0x58>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028c6:	4b05      	ldr	r3, [pc, #20]	@ (80028dc <MX_USART2_UART_Init+0x58>)
 80028c8:	0018      	movs	r0, r3
 80028ca:	f001 fd69 	bl	80043a0 <HAL_UART_Init>
 80028ce:	1e03      	subs	r3, r0, #0
 80028d0:	d001      	beq.n	80028d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80028d2:	f000 f8a7 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028d6:	46c0      	nop			@ (mov r8, r8)
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	2000056c 	.word	0x2000056c
 80028e0:	40004400 	.word	0x40004400

080028e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028e4:	b590      	push	{r4, r7, lr}
 80028e6:	b089      	sub	sp, #36	@ 0x24
 80028e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ea:	240c      	movs	r4, #12
 80028ec:	193b      	adds	r3, r7, r4
 80028ee:	0018      	movs	r0, r3
 80028f0:	2314      	movs	r3, #20
 80028f2:	001a      	movs	r2, r3
 80028f4:	2100      	movs	r1, #0
 80028f6:	f004 f983 	bl	8006c00 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028fa:	4b33      	ldr	r3, [pc, #204]	@ (80029c8 <MX_GPIO_Init+0xe4>)
 80028fc:	695a      	ldr	r2, [r3, #20]
 80028fe:	4b32      	ldr	r3, [pc, #200]	@ (80029c8 <MX_GPIO_Init+0xe4>)
 8002900:	2180      	movs	r1, #128	@ 0x80
 8002902:	0309      	lsls	r1, r1, #12
 8002904:	430a      	orrs	r2, r1
 8002906:	615a      	str	r2, [r3, #20]
 8002908:	4b2f      	ldr	r3, [pc, #188]	@ (80029c8 <MX_GPIO_Init+0xe4>)
 800290a:	695a      	ldr	r2, [r3, #20]
 800290c:	2380      	movs	r3, #128	@ 0x80
 800290e:	031b      	lsls	r3, r3, #12
 8002910:	4013      	ands	r3, r2
 8002912:	60bb      	str	r3, [r7, #8]
 8002914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002916:	4b2c      	ldr	r3, [pc, #176]	@ (80029c8 <MX_GPIO_Init+0xe4>)
 8002918:	695a      	ldr	r2, [r3, #20]
 800291a:	4b2b      	ldr	r3, [pc, #172]	@ (80029c8 <MX_GPIO_Init+0xe4>)
 800291c:	2180      	movs	r1, #128	@ 0x80
 800291e:	0289      	lsls	r1, r1, #10
 8002920:	430a      	orrs	r2, r1
 8002922:	615a      	str	r2, [r3, #20]
 8002924:	4b28      	ldr	r3, [pc, #160]	@ (80029c8 <MX_GPIO_Init+0xe4>)
 8002926:	695a      	ldr	r2, [r3, #20]
 8002928:	2380      	movs	r3, #128	@ 0x80
 800292a:	029b      	lsls	r3, r3, #10
 800292c:	4013      	ands	r3, r2
 800292e:	607b      	str	r3, [r7, #4]
 8002930:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8002932:	2390      	movs	r3, #144	@ 0x90
 8002934:	05db      	lsls	r3, r3, #23
 8002936:	2200      	movs	r2, #0
 8002938:	2102      	movs	r1, #2
 800293a:	0018      	movs	r0, r3
 800293c:	f000 ff2e 	bl	800379c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8002940:	23c0      	movs	r3, #192	@ 0xc0
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4821      	ldr	r0, [pc, #132]	@ (80029cc <MX_GPIO_Init+0xe8>)
 8002946:	2200      	movs	r2, #0
 8002948:	0019      	movs	r1, r3
 800294a:	f000 ff27 	bl	800379c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800294e:	193b      	adds	r3, r7, r4
 8002950:	2201      	movs	r2, #1
 8002952:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002954:	193b      	adds	r3, r7, r4
 8002956:	2290      	movs	r2, #144	@ 0x90
 8002958:	0352      	lsls	r2, r2, #13
 800295a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	193b      	adds	r3, r7, r4
 800295e:	2200      	movs	r2, #0
 8002960:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002962:	193a      	adds	r2, r7, r4
 8002964:	2390      	movs	r3, #144	@ 0x90
 8002966:	05db      	lsls	r3, r3, #23
 8002968:	0011      	movs	r1, r2
 800296a:	0018      	movs	r0, r3
 800296c:	f000 fda6 	bl	80034bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002970:	193b      	adds	r3, r7, r4
 8002972:	2202      	movs	r2, #2
 8002974:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002976:	193b      	adds	r3, r7, r4
 8002978:	2201      	movs	r2, #1
 800297a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297c:	193b      	adds	r3, r7, r4
 800297e:	2200      	movs	r2, #0
 8002980:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002982:	193b      	adds	r3, r7, r4
 8002984:	2200      	movs	r2, #0
 8002986:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002988:	193a      	adds	r2, r7, r4
 800298a:	2390      	movs	r3, #144	@ 0x90
 800298c:	05db      	lsls	r3, r3, #23
 800298e:	0011      	movs	r1, r2
 8002990:	0018      	movs	r0, r3
 8002992:	f000 fd93 	bl	80034bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8002996:	0021      	movs	r1, r4
 8002998:	187b      	adds	r3, r7, r1
 800299a:	22c0      	movs	r2, #192	@ 0xc0
 800299c:	0092      	lsls	r2, r2, #2
 800299e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a0:	187b      	adds	r3, r7, r1
 80029a2:	2201      	movs	r2, #1
 80029a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	187b      	adds	r3, r7, r1
 80029a8:	2200      	movs	r2, #0
 80029aa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ac:	187b      	adds	r3, r7, r1
 80029ae:	2200      	movs	r2, #0
 80029b0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029b2:	187b      	adds	r3, r7, r1
 80029b4:	4a05      	ldr	r2, [pc, #20]	@ (80029cc <MX_GPIO_Init+0xe8>)
 80029b6:	0019      	movs	r1, r3
 80029b8:	0010      	movs	r0, r2
 80029ba:	f000 fd7f 	bl	80034bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80029be:	46c0      	nop			@ (mov r8, r8)
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b009      	add	sp, #36	@ 0x24
 80029c4:	bd90      	pop	{r4, r7, pc}
 80029c6:	46c0      	nop			@ (mov r8, r8)
 80029c8:	40021000 	.word	0x40021000
 80029cc:	48000800 	.word	0x48000800

080029d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80029d8:	2001      	movs	r0, #1
 80029da:	f002 fa87 	bl	8004eec <osDelay>
 80029de:	e7fb      	b.n	80029d8 <StartDefaultTask+0x8>

080029e0 <StartCommsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommsTask */
void StartCommsTask(void const * argument)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommsTask */
	comms_init(&huart2);
 80029e8:	4b0c      	ldr	r3, [pc, #48]	@ (8002a1c <StartCommsTask+0x3c>)
 80029ea:	0018      	movs	r0, r3
 80029ec:	f7ff fc52 	bl	8002294 <comms_init>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80029f0:	2380      	movs	r3, #128	@ 0x80
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	480a      	ldr	r0, [pc, #40]	@ (8002a20 <StartCommsTask+0x40>)
 80029f6:	2201      	movs	r2, #1
 80029f8:	0019      	movs	r1, r3
 80029fa:	f000 fecf 	bl	800379c <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
	  comms_state_machine();
 80029fe:	f7ff fc73 	bl	80022e8 <comms_state_machine>
	  if(!comms_buffer_is_empty()){
 8002a02:	f7ff fdab 	bl	800255c <comms_buffer_is_empty>
 8002a06:	1e03      	subs	r3, r0, #0
 8002a08:	d1f9      	bne.n	80029fe <StartCommsTask+0x1e>
		  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 1);
 8002a0a:	2380      	movs	r3, #128	@ 0x80
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	4804      	ldr	r0, [pc, #16]	@ (8002a20 <StartCommsTask+0x40>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	0019      	movs	r1, r3
 8002a14:	f000 fec2 	bl	800379c <HAL_GPIO_WritePin>
	  comms_state_machine();
 8002a18:	e7f1      	b.n	80029fe <StartCommsTask+0x1e>
 8002a1a:	46c0      	nop			@ (mov r8, r8)
 8002a1c:	2000056c 	.word	0x2000056c
 8002a20:	48000800 	.word	0x48000800

08002a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a28:	b672      	cpsid	i
}
 8002a2a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a2c:	46c0      	nop			@ (mov r8, r8)
 8002a2e:	e7fd      	b.n	8002a2c <Error_Handler+0x8>

08002a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a36:	4b12      	ldr	r3, [pc, #72]	@ (8002a80 <HAL_MspInit+0x50>)
 8002a38:	699a      	ldr	r2, [r3, #24]
 8002a3a:	4b11      	ldr	r3, [pc, #68]	@ (8002a80 <HAL_MspInit+0x50>)
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	619a      	str	r2, [r3, #24]
 8002a42:	4b0f      	ldr	r3, [pc, #60]	@ (8002a80 <HAL_MspInit+0x50>)
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	2201      	movs	r2, #1
 8002a48:	4013      	ands	r3, r2
 8002a4a:	607b      	str	r3, [r7, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002a80 <HAL_MspInit+0x50>)
 8002a50:	69da      	ldr	r2, [r3, #28]
 8002a52:	4b0b      	ldr	r3, [pc, #44]	@ (8002a80 <HAL_MspInit+0x50>)
 8002a54:	2180      	movs	r1, #128	@ 0x80
 8002a56:	0549      	lsls	r1, r1, #21
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	61da      	str	r2, [r3, #28]
 8002a5c:	4b08      	ldr	r3, [pc, #32]	@ (8002a80 <HAL_MspInit+0x50>)
 8002a5e:	69da      	ldr	r2, [r3, #28]
 8002a60:	2380      	movs	r3, #128	@ 0x80
 8002a62:	055b      	lsls	r3, r3, #21
 8002a64:	4013      	ands	r3, r2
 8002a66:	603b      	str	r3, [r7, #0]
 8002a68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	425b      	negs	r3, r3
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2103      	movs	r1, #3
 8002a72:	0018      	movs	r0, r3
 8002a74:	f000 fd00 	bl	8003478 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a78:	46c0      	nop			@ (mov r8, r8)
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	b002      	add	sp, #8
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40021000 	.word	0x40021000

08002a84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a84:	b590      	push	{r4, r7, lr}
 8002a86:	b08b      	sub	sp, #44	@ 0x2c
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a8c:	2414      	movs	r4, #20
 8002a8e:	193b      	adds	r3, r7, r4
 8002a90:	0018      	movs	r0, r3
 8002a92:	2314      	movs	r3, #20
 8002a94:	001a      	movs	r2, r3
 8002a96:	2100      	movs	r1, #0
 8002a98:	f004 f8b2 	bl	8006c00 <memset>
  if(hadc->Instance==ADC1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a18      	ldr	r2, [pc, #96]	@ (8002b04 <HAL_ADC_MspInit+0x80>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d12a      	bne.n	8002afc <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002aa6:	4b18      	ldr	r3, [pc, #96]	@ (8002b08 <HAL_ADC_MspInit+0x84>)
 8002aa8:	699a      	ldr	r2, [r3, #24]
 8002aaa:	4b17      	ldr	r3, [pc, #92]	@ (8002b08 <HAL_ADC_MspInit+0x84>)
 8002aac:	2180      	movs	r1, #128	@ 0x80
 8002aae:	0089      	lsls	r1, r1, #2
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	619a      	str	r2, [r3, #24]
 8002ab4:	4b14      	ldr	r3, [pc, #80]	@ (8002b08 <HAL_ADC_MspInit+0x84>)
 8002ab6:	699a      	ldr	r2, [r3, #24]
 8002ab8:	2380      	movs	r3, #128	@ 0x80
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4013      	ands	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
 8002ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ac2:	4b11      	ldr	r3, [pc, #68]	@ (8002b08 <HAL_ADC_MspInit+0x84>)
 8002ac4:	695a      	ldr	r2, [r3, #20]
 8002ac6:	4b10      	ldr	r3, [pc, #64]	@ (8002b08 <HAL_ADC_MspInit+0x84>)
 8002ac8:	2180      	movs	r1, #128	@ 0x80
 8002aca:	0309      	lsls	r1, r1, #12
 8002acc:	430a      	orrs	r2, r1
 8002ace:	615a      	str	r2, [r3, #20]
 8002ad0:	4b0d      	ldr	r3, [pc, #52]	@ (8002b08 <HAL_ADC_MspInit+0x84>)
 8002ad2:	695a      	ldr	r2, [r3, #20]
 8002ad4:	2380      	movs	r3, #128	@ 0x80
 8002ad6:	031b      	lsls	r3, r3, #12
 8002ad8:	4013      	ands	r3, r2
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PC1     ------> ADC_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002ade:	193b      	adds	r3, r7, r4
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ae4:	193b      	adds	r3, r7, r4
 8002ae6:	2203      	movs	r2, #3
 8002ae8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aea:	193b      	adds	r3, r7, r4
 8002aec:	2200      	movs	r2, #0
 8002aee:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002af0:	193b      	adds	r3, r7, r4
 8002af2:	4a06      	ldr	r2, [pc, #24]	@ (8002b0c <HAL_ADC_MspInit+0x88>)
 8002af4:	0019      	movs	r1, r3
 8002af6:	0010      	movs	r0, r2
 8002af8:	f000 fce0 	bl	80034bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002afc:	46c0      	nop			@ (mov r8, r8)
 8002afe:	46bd      	mov	sp, r7
 8002b00:	b00b      	add	sp, #44	@ 0x2c
 8002b02:	bd90      	pop	{r4, r7, pc}
 8002b04:	40012400 	.word	0x40012400
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	48000800 	.word	0x48000800

08002b10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a09      	ldr	r2, [pc, #36]	@ (8002b44 <HAL_TIM_Base_MspInit+0x34>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d10b      	bne.n	8002b3a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002b22:	4b09      	ldr	r3, [pc, #36]	@ (8002b48 <HAL_TIM_Base_MspInit+0x38>)
 8002b24:	69da      	ldr	r2, [r3, #28]
 8002b26:	4b08      	ldr	r3, [pc, #32]	@ (8002b48 <HAL_TIM_Base_MspInit+0x38>)
 8002b28:	2110      	movs	r1, #16
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	61da      	str	r2, [r3, #28]
 8002b2e:	4b06      	ldr	r3, [pc, #24]	@ (8002b48 <HAL_TIM_Base_MspInit+0x38>)
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	2210      	movs	r2, #16
 8002b34:	4013      	ands	r3, r2
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002b3a:	46c0      	nop			@ (mov r8, r8)
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	b004      	add	sp, #16
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	46c0      	nop			@ (mov r8, r8)
 8002b44:	40001000 	.word	0x40001000
 8002b48:	40021000 	.word	0x40021000

08002b4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b4c:	b590      	push	{r4, r7, lr}
 8002b4e:	b08b      	sub	sp, #44	@ 0x2c
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b54:	2414      	movs	r4, #20
 8002b56:	193b      	adds	r3, r7, r4
 8002b58:	0018      	movs	r0, r3
 8002b5a:	2314      	movs	r3, #20
 8002b5c:	001a      	movs	r2, r3
 8002b5e:	2100      	movs	r1, #0
 8002b60:	f004 f84e 	bl	8006c00 <memset>
  if(huart->Instance==USART2)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a1c      	ldr	r2, [pc, #112]	@ (8002bdc <HAL_UART_MspInit+0x90>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d132      	bne.n	8002bd4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8002be0 <HAL_UART_MspInit+0x94>)
 8002b70:	69da      	ldr	r2, [r3, #28]
 8002b72:	4b1b      	ldr	r3, [pc, #108]	@ (8002be0 <HAL_UART_MspInit+0x94>)
 8002b74:	2180      	movs	r1, #128	@ 0x80
 8002b76:	0289      	lsls	r1, r1, #10
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	61da      	str	r2, [r3, #28]
 8002b7c:	4b18      	ldr	r3, [pc, #96]	@ (8002be0 <HAL_UART_MspInit+0x94>)
 8002b7e:	69da      	ldr	r2, [r3, #28]
 8002b80:	2380      	movs	r3, #128	@ 0x80
 8002b82:	029b      	lsls	r3, r3, #10
 8002b84:	4013      	ands	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
 8002b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b8a:	4b15      	ldr	r3, [pc, #84]	@ (8002be0 <HAL_UART_MspInit+0x94>)
 8002b8c:	695a      	ldr	r2, [r3, #20]
 8002b8e:	4b14      	ldr	r3, [pc, #80]	@ (8002be0 <HAL_UART_MspInit+0x94>)
 8002b90:	2180      	movs	r1, #128	@ 0x80
 8002b92:	0289      	lsls	r1, r1, #10
 8002b94:	430a      	orrs	r2, r1
 8002b96:	615a      	str	r2, [r3, #20]
 8002b98:	4b11      	ldr	r3, [pc, #68]	@ (8002be0 <HAL_UART_MspInit+0x94>)
 8002b9a:	695a      	ldr	r2, [r3, #20]
 8002b9c:	2380      	movs	r3, #128	@ 0x80
 8002b9e:	029b      	lsls	r3, r3, #10
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8002ba6:	0021      	movs	r1, r4
 8002ba8:	187b      	adds	r3, r7, r1
 8002baa:	4a0e      	ldr	r2, [pc, #56]	@ (8002be4 <HAL_UART_MspInit+0x98>)
 8002bac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bae:	187b      	adds	r3, r7, r1
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb4:	187b      	adds	r3, r7, r1
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bba:	187b      	adds	r3, r7, r1
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002bc0:	187b      	adds	r3, r7, r1
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc6:	187a      	adds	r2, r7, r1
 8002bc8:	2390      	movs	r3, #144	@ 0x90
 8002bca:	05db      	lsls	r3, r3, #23
 8002bcc:	0011      	movs	r1, r2
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f000 fc74 	bl	80034bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002bd4:	46c0      	nop			@ (mov r8, r8)
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	b00b      	add	sp, #44	@ 0x2c
 8002bda:	bd90      	pop	{r4, r7, pc}
 8002bdc:	40004400 	.word	0x40004400
 8002be0:	40021000 	.word	0x40021000
 8002be4:	00008004 	.word	0x00008004

08002be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bec:	46c0      	nop			@ (mov r8, r8)
 8002bee:	e7fd      	b.n	8002bec <NMI_Handler+0x4>

08002bf0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bf4:	46c0      	nop			@ (mov r8, r8)
 8002bf6:	e7fd      	b.n	8002bf4 <HardFault_Handler+0x4>

08002bf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bfc:	f000 f940 	bl	8002e80 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002c00:	f002 fe86 	bl	8005910 <xTaskGetSchedulerState>
 8002c04:	0003      	movs	r3, r0
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d001      	beq.n	8002c0e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002c0a:	f002 ffe5 	bl	8005bd8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c0e:	46c0      	nop			@ (mov r8, r8)
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  return 1;
 8002c18:	2301      	movs	r3, #1
}
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <_kill>:

int _kill(int pid, int sig)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c2a:	f004 f855 	bl	8006cd8 <__errno>
 8002c2e:	0003      	movs	r3, r0
 8002c30:	2216      	movs	r2, #22
 8002c32:	601a      	str	r2, [r3, #0]
  return -1;
 8002c34:	2301      	movs	r3, #1
 8002c36:	425b      	negs	r3, r3
}
 8002c38:	0018      	movs	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	b002      	add	sp, #8
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <_exit>:

void _exit (int status)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c48:	2301      	movs	r3, #1
 8002c4a:	425a      	negs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	0011      	movs	r1, r2
 8002c50:	0018      	movs	r0, r3
 8002c52:	f7ff ffe5 	bl	8002c20 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c56:	46c0      	nop			@ (mov r8, r8)
 8002c58:	e7fd      	b.n	8002c56 <_exit+0x16>

08002c5a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b086      	sub	sp, #24
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	60f8      	str	r0, [r7, #12]
 8002c62:	60b9      	str	r1, [r7, #8]
 8002c64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c66:	2300      	movs	r3, #0
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	e00a      	b.n	8002c82 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c6c:	e000      	b.n	8002c70 <_read+0x16>
 8002c6e:	bf00      	nop
 8002c70:	0001      	movs	r1, r0
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	1c5a      	adds	r2, r3, #1
 8002c76:	60ba      	str	r2, [r7, #8]
 8002c78:	b2ca      	uxtb	r2, r1
 8002c7a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	dbf0      	blt.n	8002c6c <_read+0x12>
  }

  return len;
 8002c8a:	687b      	ldr	r3, [r7, #4]
}
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	b006      	add	sp, #24
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	e009      	b.n	8002cba <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	1c5a      	adds	r2, r3, #1
 8002caa:	60ba      	str	r2, [r7, #8]
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	0018      	movs	r0, r3
 8002cb0:	e000      	b.n	8002cb4 <_write+0x20>
 8002cb2:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	617b      	str	r3, [r7, #20]
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	dbf1      	blt.n	8002ca6 <_write+0x12>
  }
  return len;
 8002cc2:	687b      	ldr	r3, [r7, #4]
}
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	b006      	add	sp, #24
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <_close>:

int _close(int file)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	425b      	negs	r3, r3
}
 8002cd8:	0018      	movs	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	b002      	add	sp, #8
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2280      	movs	r2, #128	@ 0x80
 8002cee:	0192      	lsls	r2, r2, #6
 8002cf0:	605a      	str	r2, [r3, #4]
  return 0;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b002      	add	sp, #8
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <_isatty>:

int _isatty(int file)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d04:	2301      	movs	r3, #1
}
 8002d06:	0018      	movs	r0, r3
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	b002      	add	sp, #8
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b084      	sub	sp, #16
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	60f8      	str	r0, [r7, #12]
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b004      	add	sp, #16
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d2c:	4a14      	ldr	r2, [pc, #80]	@ (8002d80 <_sbrk+0x5c>)
 8002d2e:	4b15      	ldr	r3, [pc, #84]	@ (8002d84 <_sbrk+0x60>)
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d38:	4b13      	ldr	r3, [pc, #76]	@ (8002d88 <_sbrk+0x64>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d102      	bne.n	8002d46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d40:	4b11      	ldr	r3, [pc, #68]	@ (8002d88 <_sbrk+0x64>)
 8002d42:	4a12      	ldr	r2, [pc, #72]	@ (8002d8c <_sbrk+0x68>)
 8002d44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d46:	4b10      	ldr	r3, [pc, #64]	@ (8002d88 <_sbrk+0x64>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	18d3      	adds	r3, r2, r3
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d207      	bcs.n	8002d64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d54:	f003 ffc0 	bl	8006cd8 <__errno>
 8002d58:	0003      	movs	r3, r0
 8002d5a:	220c      	movs	r2, #12
 8002d5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	425b      	negs	r3, r3
 8002d62:	e009      	b.n	8002d78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d64:	4b08      	ldr	r3, [pc, #32]	@ (8002d88 <_sbrk+0x64>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d6a:	4b07      	ldr	r3, [pc, #28]	@ (8002d88 <_sbrk+0x64>)
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	18d2      	adds	r2, r2, r3
 8002d72:	4b05      	ldr	r3, [pc, #20]	@ (8002d88 <_sbrk+0x64>)
 8002d74:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002d76:	68fb      	ldr	r3, [r7, #12]
}
 8002d78:	0018      	movs	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	b006      	add	sp, #24
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	20002000 	.word	0x20002000
 8002d84:	00000400 	.word	0x00000400
 8002d88:	200005fc 	.word	0x200005fc
 8002d8c:	20001498 	.word	0x20001498

08002d90 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002d94:	46c0      	nop			@ (mov r8, r8)
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
	...

08002d9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d9c:	480d      	ldr	r0, [pc, #52]	@ (8002dd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d9e:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8002da0:	f7ff fff6 	bl	8002d90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002da4:	480c      	ldr	r0, [pc, #48]	@ (8002dd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002da6:	490d      	ldr	r1, [pc, #52]	@ (8002ddc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002da8:	4a0d      	ldr	r2, [pc, #52]	@ (8002de0 <LoopForever+0xe>)
  movs r3, #0
 8002daa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dac:	e002      	b.n	8002db4 <LoopCopyDataInit>

08002dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002db2:	3304      	adds	r3, #4

08002db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002db8:	d3f9      	bcc.n	8002dae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dba:	4a0a      	ldr	r2, [pc, #40]	@ (8002de4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002dbc:	4c0a      	ldr	r4, [pc, #40]	@ (8002de8 <LoopForever+0x16>)
  movs r3, #0
 8002dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dc0:	e001      	b.n	8002dc6 <LoopFillZerobss>

08002dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dc4:	3204      	adds	r2, #4

08002dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dc8:	d3fb      	bcc.n	8002dc2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002dca:	f003 ff8b 	bl	8006ce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002dce:	f7ff fc2f 	bl	8002630 <main>

08002dd2 <LoopForever>:

LoopForever:
    b LoopForever
 8002dd2:	e7fe      	b.n	8002dd2 <LoopForever>
  ldr   r0, =_estack
 8002dd4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002dd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ddc:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8002de0:	08008e80 	.word	0x08008e80
  ldr r2, =_sbss
 8002de4:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8002de8:	20001494 	.word	0x20001494

08002dec <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002dec:	e7fe      	b.n	8002dec <ADC1_COMP_IRQHandler>
	...

08002df0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002df4:	4b07      	ldr	r3, [pc, #28]	@ (8002e14 <HAL_Init+0x24>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	4b06      	ldr	r3, [pc, #24]	@ (8002e14 <HAL_Init+0x24>)
 8002dfa:	2110      	movs	r1, #16
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002e00:	2003      	movs	r0, #3
 8002e02:	f000 f809 	bl	8002e18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e06:	f7ff fe13 	bl	8002a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	46c0      	nop			@ (mov r8, r8)
 8002e14:	40022000 	.word	0x40022000

08002e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e18:	b590      	push	{r4, r7, lr}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e20:	4b14      	ldr	r3, [pc, #80]	@ (8002e74 <HAL_InitTick+0x5c>)
 8002e22:	681c      	ldr	r4, [r3, #0]
 8002e24:	4b14      	ldr	r3, [pc, #80]	@ (8002e78 <HAL_InitTick+0x60>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	0019      	movs	r1, r3
 8002e2a:	23fa      	movs	r3, #250	@ 0xfa
 8002e2c:	0098      	lsls	r0, r3, #2
 8002e2e:	f7fd f987 	bl	8000140 <__udivsi3>
 8002e32:	0003      	movs	r3, r0
 8002e34:	0019      	movs	r1, r3
 8002e36:	0020      	movs	r0, r4
 8002e38:	f7fd f982 	bl	8000140 <__udivsi3>
 8002e3c:	0003      	movs	r3, r0
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f000 fb2f 	bl	80034a2 <HAL_SYSTICK_Config>
 8002e44:	1e03      	subs	r3, r0, #0
 8002e46:	d001      	beq.n	8002e4c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e00f      	b.n	8002e6c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b03      	cmp	r3, #3
 8002e50:	d80b      	bhi.n	8002e6a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	2301      	movs	r3, #1
 8002e56:	425b      	negs	r3, r3
 8002e58:	2200      	movs	r2, #0
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f000 fb0c 	bl	8003478 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e60:	4b06      	ldr	r3, [pc, #24]	@ (8002e7c <HAL_InitTick+0x64>)
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
 8002e68:	e000      	b.n	8002e6c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
}
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	b003      	add	sp, #12
 8002e72:	bd90      	pop	{r4, r7, pc}
 8002e74:	20000048 	.word	0x20000048
 8002e78:	20000050 	.word	0x20000050
 8002e7c:	2000004c 	.word	0x2000004c

08002e80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e84:	4b05      	ldr	r3, [pc, #20]	@ (8002e9c <HAL_IncTick+0x1c>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	001a      	movs	r2, r3
 8002e8a:	4b05      	ldr	r3, [pc, #20]	@ (8002ea0 <HAL_IncTick+0x20>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	18d2      	adds	r2, r2, r3
 8002e90:	4b03      	ldr	r3, [pc, #12]	@ (8002ea0 <HAL_IncTick+0x20>)
 8002e92:	601a      	str	r2, [r3, #0]
}
 8002e94:	46c0      	nop			@ (mov r8, r8)
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	46c0      	nop			@ (mov r8, r8)
 8002e9c:	20000050 	.word	0x20000050
 8002ea0:	20000600 	.word	0x20000600

08002ea4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ea8:	4b02      	ldr	r3, [pc, #8]	@ (8002eb4 <HAL_GetTick+0x10>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
}
 8002eac:	0018      	movs	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	46c0      	nop			@ (mov r8, r8)
 8002eb4:	20000600 	.word	0x20000600

08002eb8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ec0:	230f      	movs	r3, #15
 8002ec2:	18fb      	adds	r3, r7, r3
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e125      	b.n	8003122 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10a      	bne.n	8002ef4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2234      	movs	r2, #52	@ 0x34
 8002ee8:	2100      	movs	r1, #0
 8002eea:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f7ff fdc8 	bl	8002a84 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef8:	2210      	movs	r2, #16
 8002efa:	4013      	ands	r3, r2
 8002efc:	d000      	beq.n	8002f00 <HAL_ADC_Init+0x48>
 8002efe:	e103      	b.n	8003108 <HAL_ADC_Init+0x250>
 8002f00:	230f      	movs	r3, #15
 8002f02:	18fb      	adds	r3, r7, r3
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d000      	beq.n	8002f0c <HAL_ADC_Init+0x54>
 8002f0a:	e0fd      	b.n	8003108 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	2204      	movs	r2, #4
 8002f14:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002f16:	d000      	beq.n	8002f1a <HAL_ADC_Init+0x62>
 8002f18:	e0f6      	b.n	8003108 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f1e:	4a83      	ldr	r2, [pc, #524]	@ (800312c <HAL_ADC_Init+0x274>)
 8002f20:	4013      	ands	r3, r2
 8002f22:	2202      	movs	r2, #2
 8002f24:	431a      	orrs	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	2203      	movs	r2, #3
 8002f32:	4013      	ands	r3, r2
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d112      	bne.n	8002f5e <HAL_ADC_Init+0xa6>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	4013      	ands	r3, r2
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d009      	beq.n	8002f5a <HAL_ADC_Init+0xa2>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68da      	ldr	r2, [r3, #12]
 8002f4c:	2380      	movs	r3, #128	@ 0x80
 8002f4e:	021b      	lsls	r3, r3, #8
 8002f50:	401a      	ands	r2, r3
 8002f52:	2380      	movs	r3, #128	@ 0x80
 8002f54:	021b      	lsls	r3, r3, #8
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d101      	bne.n	8002f5e <HAL_ADC_Init+0xa6>
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <HAL_ADC_Init+0xa8>
 8002f5e:	2300      	movs	r3, #0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d116      	bne.n	8002f92 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	2218      	movs	r2, #24
 8002f6c:	4393      	bics	r3, r2
 8002f6e:	0019      	movs	r1, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	0899      	lsrs	r1, r3, #2
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68da      	ldr	r2, [r3, #12]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4964      	ldr	r1, [pc, #400]	@ (8003130 <HAL_ADC_Init+0x278>)
 8002f9e:	400a      	ands	r2, r1
 8002fa0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	7e1b      	ldrb	r3, [r3, #24]
 8002fa6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	7e5b      	ldrb	r3, [r3, #25]
 8002fac:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fae:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	7e9b      	ldrb	r3, [r3, #26]
 8002fb4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002fb6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d002      	beq.n	8002fc6 <HAL_ADC_Init+0x10e>
 8002fc0:	2380      	movs	r3, #128	@ 0x80
 8002fc2:	015b      	lsls	r3, r3, #5
 8002fc4:	e000      	b.n	8002fc8 <HAL_ADC_Init+0x110>
 8002fc6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002fc8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002fce:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d101      	bne.n	8002fdc <HAL_ADC_Init+0x124>
 8002fd8:	2304      	movs	r3, #4
 8002fda:	e000      	b.n	8002fde <HAL_ADC_Init+0x126>
 8002fdc:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002fde:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2124      	movs	r1, #36	@ 0x24
 8002fe4:	5c5b      	ldrb	r3, [r3, r1]
 8002fe6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002fe8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	7edb      	ldrb	r3, [r3, #27]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d115      	bne.n	8003024 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	7e9b      	ldrb	r3, [r3, #26]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d105      	bne.n	800300c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2280      	movs	r2, #128	@ 0x80
 8003004:	0252      	lsls	r2, r2, #9
 8003006:	4313      	orrs	r3, r2
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	e00b      	b.n	8003024 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003010:	2220      	movs	r2, #32
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800301c:	2201      	movs	r2, #1
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	69da      	ldr	r2, [r3, #28]
 8003028:	23c2      	movs	r3, #194	@ 0xc2
 800302a:	33ff      	adds	r3, #255	@ 0xff
 800302c:	429a      	cmp	r2, r3
 800302e:	d007      	beq.n	8003040 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003038:	4313      	orrs	r3, r2
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	4313      	orrs	r3, r2
 800303e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68d9      	ldr	r1, [r3, #12]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	430a      	orrs	r2, r1
 800304e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003054:	2380      	movs	r3, #128	@ 0x80
 8003056:	055b      	lsls	r3, r3, #21
 8003058:	429a      	cmp	r2, r3
 800305a:	d01b      	beq.n	8003094 <HAL_ADC_Init+0x1dc>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003060:	2b01      	cmp	r3, #1
 8003062:	d017      	beq.n	8003094 <HAL_ADC_Init+0x1dc>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003068:	2b02      	cmp	r3, #2
 800306a:	d013      	beq.n	8003094 <HAL_ADC_Init+0x1dc>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003070:	2b03      	cmp	r3, #3
 8003072:	d00f      	beq.n	8003094 <HAL_ADC_Init+0x1dc>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003078:	2b04      	cmp	r3, #4
 800307a:	d00b      	beq.n	8003094 <HAL_ADC_Init+0x1dc>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003080:	2b05      	cmp	r3, #5
 8003082:	d007      	beq.n	8003094 <HAL_ADC_Init+0x1dc>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003088:	2b06      	cmp	r3, #6
 800308a:	d003      	beq.n	8003094 <HAL_ADC_Init+0x1dc>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003090:	2b07      	cmp	r3, #7
 8003092:	d112      	bne.n	80030ba <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695a      	ldr	r2, [r3, #20]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2107      	movs	r1, #7
 80030a0:	438a      	bics	r2, r1
 80030a2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6959      	ldr	r1, [r3, #20]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ae:	2207      	movs	r2, #7
 80030b0:	401a      	ands	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	4a1c      	ldr	r2, [pc, #112]	@ (8003134 <HAL_ADC_Init+0x27c>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d10b      	bne.n	80030e2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d4:	2203      	movs	r2, #3
 80030d6:	4393      	bics	r3, r2
 80030d8:	2201      	movs	r2, #1
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80030e0:	e01c      	b.n	800311c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e6:	2212      	movs	r2, #18
 80030e8:	4393      	bics	r3, r2
 80030ea:	2210      	movs	r2, #16
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030f6:	2201      	movs	r2, #1
 80030f8:	431a      	orrs	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80030fe:	230f      	movs	r3, #15
 8003100:	18fb      	adds	r3, r7, r3
 8003102:	2201      	movs	r2, #1
 8003104:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003106:	e009      	b.n	800311c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800310c:	2210      	movs	r2, #16
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003114:	230f      	movs	r3, #15
 8003116:	18fb      	adds	r3, r7, r3
 8003118:	2201      	movs	r2, #1
 800311a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800311c:	230f      	movs	r3, #15
 800311e:	18fb      	adds	r3, r7, r3
 8003120:	781b      	ldrb	r3, [r3, #0]
}
 8003122:	0018      	movs	r0, r3
 8003124:	46bd      	mov	sp, r7
 8003126:	b004      	add	sp, #16
 8003128:	bd80      	pop	{r7, pc}
 800312a:	46c0      	nop			@ (mov r8, r8)
 800312c:	fffffefd 	.word	0xfffffefd
 8003130:	fffe0219 	.word	0xfffe0219
 8003134:	833fffe7 	.word	0x833fffe7

08003138 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003142:	230f      	movs	r3, #15
 8003144:	18fb      	adds	r3, r7, r3
 8003146:	2200      	movs	r2, #0
 8003148:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800314a:	2300      	movs	r3, #0
 800314c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003152:	2380      	movs	r3, #128	@ 0x80
 8003154:	055b      	lsls	r3, r3, #21
 8003156:	429a      	cmp	r2, r3
 8003158:	d011      	beq.n	800317e <HAL_ADC_ConfigChannel+0x46>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315e:	2b01      	cmp	r3, #1
 8003160:	d00d      	beq.n	800317e <HAL_ADC_ConfigChannel+0x46>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003166:	2b02      	cmp	r3, #2
 8003168:	d009      	beq.n	800317e <HAL_ADC_ConfigChannel+0x46>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800316e:	2b03      	cmp	r3, #3
 8003170:	d005      	beq.n	800317e <HAL_ADC_ConfigChannel+0x46>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003176:	2b04      	cmp	r3, #4
 8003178:	d001      	beq.n	800317e <HAL_ADC_ConfigChannel+0x46>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2234      	movs	r2, #52	@ 0x34
 8003182:	5c9b      	ldrb	r3, [r3, r2]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d101      	bne.n	800318c <HAL_ADC_ConfigChannel+0x54>
 8003188:	2302      	movs	r3, #2
 800318a:	e0d0      	b.n	800332e <HAL_ADC_ConfigChannel+0x1f6>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2234      	movs	r2, #52	@ 0x34
 8003190:	2101      	movs	r1, #1
 8003192:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	2204      	movs	r2, #4
 800319c:	4013      	ands	r3, r2
 800319e:	d000      	beq.n	80031a2 <HAL_ADC_ConfigChannel+0x6a>
 80031a0:	e0b4      	b.n	800330c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	4a64      	ldr	r2, [pc, #400]	@ (8003338 <HAL_ADC_ConfigChannel+0x200>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d100      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x76>
 80031ac:	e082      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2201      	movs	r2, #1
 80031ba:	409a      	lsls	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031c8:	2380      	movs	r3, #128	@ 0x80
 80031ca:	055b      	lsls	r3, r3, #21
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d037      	beq.n	8003240 <HAL_ADC_ConfigChannel+0x108>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d033      	beq.n	8003240 <HAL_ADC_ConfigChannel+0x108>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d02f      	beq.n	8003240 <HAL_ADC_ConfigChannel+0x108>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e4:	2b03      	cmp	r3, #3
 80031e6:	d02b      	beq.n	8003240 <HAL_ADC_ConfigChannel+0x108>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ec:	2b04      	cmp	r3, #4
 80031ee:	d027      	beq.n	8003240 <HAL_ADC_ConfigChannel+0x108>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f4:	2b05      	cmp	r3, #5
 80031f6:	d023      	beq.n	8003240 <HAL_ADC_ConfigChannel+0x108>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031fc:	2b06      	cmp	r3, #6
 80031fe:	d01f      	beq.n	8003240 <HAL_ADC_ConfigChannel+0x108>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003204:	2b07      	cmp	r3, #7
 8003206:	d01b      	beq.n	8003240 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	2107      	movs	r1, #7
 8003214:	400b      	ands	r3, r1
 8003216:	429a      	cmp	r2, r3
 8003218:	d012      	beq.n	8003240 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695a      	ldr	r2, [r3, #20]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2107      	movs	r1, #7
 8003226:	438a      	bics	r2, r1
 8003228:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6959      	ldr	r1, [r3, #20]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2207      	movs	r2, #7
 8003236:	401a      	ands	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2b10      	cmp	r3, #16
 8003246:	d007      	beq.n	8003258 <HAL_ADC_ConfigChannel+0x120>
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b11      	cmp	r3, #17
 800324e:	d003      	beq.n	8003258 <HAL_ADC_ConfigChannel+0x120>
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b12      	cmp	r3, #18
 8003256:	d163      	bne.n	8003320 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003258:	4b38      	ldr	r3, [pc, #224]	@ (800333c <HAL_ADC_ConfigChannel+0x204>)
 800325a:	6819      	ldr	r1, [r3, #0]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b10      	cmp	r3, #16
 8003262:	d009      	beq.n	8003278 <HAL_ADC_ConfigChannel+0x140>
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2b11      	cmp	r3, #17
 800326a:	d102      	bne.n	8003272 <HAL_ADC_ConfigChannel+0x13a>
 800326c:	2380      	movs	r3, #128	@ 0x80
 800326e:	03db      	lsls	r3, r3, #15
 8003270:	e004      	b.n	800327c <HAL_ADC_ConfigChannel+0x144>
 8003272:	2380      	movs	r3, #128	@ 0x80
 8003274:	045b      	lsls	r3, r3, #17
 8003276:	e001      	b.n	800327c <HAL_ADC_ConfigChannel+0x144>
 8003278:	2380      	movs	r3, #128	@ 0x80
 800327a:	041b      	lsls	r3, r3, #16
 800327c:	4a2f      	ldr	r2, [pc, #188]	@ (800333c <HAL_ADC_ConfigChannel+0x204>)
 800327e:	430b      	orrs	r3, r1
 8003280:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2b10      	cmp	r3, #16
 8003288:	d14a      	bne.n	8003320 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800328a:	4b2d      	ldr	r3, [pc, #180]	@ (8003340 <HAL_ADC_ConfigChannel+0x208>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	492d      	ldr	r1, [pc, #180]	@ (8003344 <HAL_ADC_ConfigChannel+0x20c>)
 8003290:	0018      	movs	r0, r3
 8003292:	f7fc ff55 	bl	8000140 <__udivsi3>
 8003296:	0003      	movs	r3, r0
 8003298:	001a      	movs	r2, r3
 800329a:	0013      	movs	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	189b      	adds	r3, r3, r2
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032a4:	e002      	b.n	80032ac <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	3b01      	subs	r3, #1
 80032aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f9      	bne.n	80032a6 <HAL_ADC_ConfigChannel+0x16e>
 80032b2:	e035      	b.n	8003320 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2101      	movs	r1, #1
 80032c0:	4099      	lsls	r1, r3
 80032c2:	000b      	movs	r3, r1
 80032c4:	43d9      	mvns	r1, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	400a      	ands	r2, r1
 80032cc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b10      	cmp	r3, #16
 80032d4:	d007      	beq.n	80032e6 <HAL_ADC_ConfigChannel+0x1ae>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b11      	cmp	r3, #17
 80032dc:	d003      	beq.n	80032e6 <HAL_ADC_ConfigChannel+0x1ae>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2b12      	cmp	r3, #18
 80032e4:	d11c      	bne.n	8003320 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80032e6:	4b15      	ldr	r3, [pc, #84]	@ (800333c <HAL_ADC_ConfigChannel+0x204>)
 80032e8:	6819      	ldr	r1, [r3, #0]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2b10      	cmp	r3, #16
 80032f0:	d007      	beq.n	8003302 <HAL_ADC_ConfigChannel+0x1ca>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b11      	cmp	r3, #17
 80032f8:	d101      	bne.n	80032fe <HAL_ADC_ConfigChannel+0x1c6>
 80032fa:	4b13      	ldr	r3, [pc, #76]	@ (8003348 <HAL_ADC_ConfigChannel+0x210>)
 80032fc:	e002      	b.n	8003304 <HAL_ADC_ConfigChannel+0x1cc>
 80032fe:	4b13      	ldr	r3, [pc, #76]	@ (800334c <HAL_ADC_ConfigChannel+0x214>)
 8003300:	e000      	b.n	8003304 <HAL_ADC_ConfigChannel+0x1cc>
 8003302:	4b13      	ldr	r3, [pc, #76]	@ (8003350 <HAL_ADC_ConfigChannel+0x218>)
 8003304:	4a0d      	ldr	r2, [pc, #52]	@ (800333c <HAL_ADC_ConfigChannel+0x204>)
 8003306:	400b      	ands	r3, r1
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	e009      	b.n	8003320 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003310:	2220      	movs	r2, #32
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003318:	230f      	movs	r3, #15
 800331a:	18fb      	adds	r3, r7, r3
 800331c:	2201      	movs	r2, #1
 800331e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2234      	movs	r2, #52	@ 0x34
 8003324:	2100      	movs	r1, #0
 8003326:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003328:	230f      	movs	r3, #15
 800332a:	18fb      	adds	r3, r7, r3
 800332c:	781b      	ldrb	r3, [r3, #0]
}
 800332e:	0018      	movs	r0, r3
 8003330:	46bd      	mov	sp, r7
 8003332:	b004      	add	sp, #16
 8003334:	bd80      	pop	{r7, pc}
 8003336:	46c0      	nop			@ (mov r8, r8)
 8003338:	00001001 	.word	0x00001001
 800333c:	40012708 	.word	0x40012708
 8003340:	20000048 	.word	0x20000048
 8003344:	000f4240 	.word	0x000f4240
 8003348:	ffbfffff 	.word	0xffbfffff
 800334c:	feffffff 	.word	0xfeffffff
 8003350:	ff7fffff 	.word	0xff7fffff

08003354 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003354:	b590      	push	{r4, r7, lr}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	0002      	movs	r2, r0
 800335c:	6039      	str	r1, [r7, #0]
 800335e:	1dfb      	adds	r3, r7, #7
 8003360:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003362:	1dfb      	adds	r3, r7, #7
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2b7f      	cmp	r3, #127	@ 0x7f
 8003368:	d828      	bhi.n	80033bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800336a:	4a2f      	ldr	r2, [pc, #188]	@ (8003428 <__NVIC_SetPriority+0xd4>)
 800336c:	1dfb      	adds	r3, r7, #7
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	b25b      	sxtb	r3, r3
 8003372:	089b      	lsrs	r3, r3, #2
 8003374:	33c0      	adds	r3, #192	@ 0xc0
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	589b      	ldr	r3, [r3, r2]
 800337a:	1dfa      	adds	r2, r7, #7
 800337c:	7812      	ldrb	r2, [r2, #0]
 800337e:	0011      	movs	r1, r2
 8003380:	2203      	movs	r2, #3
 8003382:	400a      	ands	r2, r1
 8003384:	00d2      	lsls	r2, r2, #3
 8003386:	21ff      	movs	r1, #255	@ 0xff
 8003388:	4091      	lsls	r1, r2
 800338a:	000a      	movs	r2, r1
 800338c:	43d2      	mvns	r2, r2
 800338e:	401a      	ands	r2, r3
 8003390:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	019b      	lsls	r3, r3, #6
 8003396:	22ff      	movs	r2, #255	@ 0xff
 8003398:	401a      	ands	r2, r3
 800339a:	1dfb      	adds	r3, r7, #7
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	0018      	movs	r0, r3
 80033a0:	2303      	movs	r3, #3
 80033a2:	4003      	ands	r3, r0
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033a8:	481f      	ldr	r0, [pc, #124]	@ (8003428 <__NVIC_SetPriority+0xd4>)
 80033aa:	1dfb      	adds	r3, r7, #7
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	b25b      	sxtb	r3, r3
 80033b0:	089b      	lsrs	r3, r3, #2
 80033b2:	430a      	orrs	r2, r1
 80033b4:	33c0      	adds	r3, #192	@ 0xc0
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80033ba:	e031      	b.n	8003420 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033bc:	4a1b      	ldr	r2, [pc, #108]	@ (800342c <__NVIC_SetPriority+0xd8>)
 80033be:	1dfb      	adds	r3, r7, #7
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	0019      	movs	r1, r3
 80033c4:	230f      	movs	r3, #15
 80033c6:	400b      	ands	r3, r1
 80033c8:	3b08      	subs	r3, #8
 80033ca:	089b      	lsrs	r3, r3, #2
 80033cc:	3306      	adds	r3, #6
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	18d3      	adds	r3, r2, r3
 80033d2:	3304      	adds	r3, #4
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	1dfa      	adds	r2, r7, #7
 80033d8:	7812      	ldrb	r2, [r2, #0]
 80033da:	0011      	movs	r1, r2
 80033dc:	2203      	movs	r2, #3
 80033de:	400a      	ands	r2, r1
 80033e0:	00d2      	lsls	r2, r2, #3
 80033e2:	21ff      	movs	r1, #255	@ 0xff
 80033e4:	4091      	lsls	r1, r2
 80033e6:	000a      	movs	r2, r1
 80033e8:	43d2      	mvns	r2, r2
 80033ea:	401a      	ands	r2, r3
 80033ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	019b      	lsls	r3, r3, #6
 80033f2:	22ff      	movs	r2, #255	@ 0xff
 80033f4:	401a      	ands	r2, r3
 80033f6:	1dfb      	adds	r3, r7, #7
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	0018      	movs	r0, r3
 80033fc:	2303      	movs	r3, #3
 80033fe:	4003      	ands	r3, r0
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003404:	4809      	ldr	r0, [pc, #36]	@ (800342c <__NVIC_SetPriority+0xd8>)
 8003406:	1dfb      	adds	r3, r7, #7
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	001c      	movs	r4, r3
 800340c:	230f      	movs	r3, #15
 800340e:	4023      	ands	r3, r4
 8003410:	3b08      	subs	r3, #8
 8003412:	089b      	lsrs	r3, r3, #2
 8003414:	430a      	orrs	r2, r1
 8003416:	3306      	adds	r3, #6
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	18c3      	adds	r3, r0, r3
 800341c:	3304      	adds	r3, #4
 800341e:	601a      	str	r2, [r3, #0]
}
 8003420:	46c0      	nop			@ (mov r8, r8)
 8003422:	46bd      	mov	sp, r7
 8003424:	b003      	add	sp, #12
 8003426:	bd90      	pop	{r4, r7, pc}
 8003428:	e000e100 	.word	0xe000e100
 800342c:	e000ed00 	.word	0xe000ed00

08003430 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	1e5a      	subs	r2, r3, #1
 800343c:	2380      	movs	r3, #128	@ 0x80
 800343e:	045b      	lsls	r3, r3, #17
 8003440:	429a      	cmp	r2, r3
 8003442:	d301      	bcc.n	8003448 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003444:	2301      	movs	r3, #1
 8003446:	e010      	b.n	800346a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003448:	4b0a      	ldr	r3, [pc, #40]	@ (8003474 <SysTick_Config+0x44>)
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	3a01      	subs	r2, #1
 800344e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003450:	2301      	movs	r3, #1
 8003452:	425b      	negs	r3, r3
 8003454:	2103      	movs	r1, #3
 8003456:	0018      	movs	r0, r3
 8003458:	f7ff ff7c 	bl	8003354 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800345c:	4b05      	ldr	r3, [pc, #20]	@ (8003474 <SysTick_Config+0x44>)
 800345e:	2200      	movs	r2, #0
 8003460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003462:	4b04      	ldr	r3, [pc, #16]	@ (8003474 <SysTick_Config+0x44>)
 8003464:	2207      	movs	r2, #7
 8003466:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003468:	2300      	movs	r3, #0
}
 800346a:	0018      	movs	r0, r3
 800346c:	46bd      	mov	sp, r7
 800346e:	b002      	add	sp, #8
 8003470:	bd80      	pop	{r7, pc}
 8003472:	46c0      	nop			@ (mov r8, r8)
 8003474:	e000e010 	.word	0xe000e010

08003478 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	607a      	str	r2, [r7, #4]
 8003482:	210f      	movs	r1, #15
 8003484:	187b      	adds	r3, r7, r1
 8003486:	1c02      	adds	r2, r0, #0
 8003488:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	187b      	adds	r3, r7, r1
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	b25b      	sxtb	r3, r3
 8003492:	0011      	movs	r1, r2
 8003494:	0018      	movs	r0, r3
 8003496:	f7ff ff5d 	bl	8003354 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800349a:	46c0      	nop			@ (mov r8, r8)
 800349c:	46bd      	mov	sp, r7
 800349e:	b004      	add	sp, #16
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b082      	sub	sp, #8
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	0018      	movs	r0, r3
 80034ae:	f7ff ffbf 	bl	8003430 <SysTick_Config>
 80034b2:	0003      	movs	r3, r0
}
 80034b4:	0018      	movs	r0, r3
 80034b6:	46bd      	mov	sp, r7
 80034b8:	b002      	add	sp, #8
 80034ba:	bd80      	pop	{r7, pc}

080034bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034ca:	e14f      	b.n	800376c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2101      	movs	r1, #1
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	4091      	lsls	r1, r2
 80034d6:	000a      	movs	r2, r1
 80034d8:	4013      	ands	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d100      	bne.n	80034e4 <HAL_GPIO_Init+0x28>
 80034e2:	e140      	b.n	8003766 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	2203      	movs	r2, #3
 80034ea:	4013      	ands	r3, r2
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d005      	beq.n	80034fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2203      	movs	r2, #3
 80034f6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d130      	bne.n	800355e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	2203      	movs	r2, #3
 8003508:	409a      	lsls	r2, r3
 800350a:	0013      	movs	r3, r2
 800350c:	43da      	mvns	r2, r3
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	4013      	ands	r3, r2
 8003512:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	409a      	lsls	r2, r3
 800351e:	0013      	movs	r3, r2
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4313      	orrs	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003532:	2201      	movs	r2, #1
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	409a      	lsls	r2, r3
 8003538:	0013      	movs	r3, r2
 800353a:	43da      	mvns	r2, r3
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	4013      	ands	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	091b      	lsrs	r3, r3, #4
 8003548:	2201      	movs	r2, #1
 800354a:	401a      	ands	r2, r3
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	409a      	lsls	r2, r3
 8003550:	0013      	movs	r3, r2
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	4313      	orrs	r3, r2
 8003556:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2203      	movs	r2, #3
 8003564:	4013      	ands	r3, r2
 8003566:	2b03      	cmp	r3, #3
 8003568:	d017      	beq.n	800359a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	2203      	movs	r2, #3
 8003576:	409a      	lsls	r2, r3
 8003578:	0013      	movs	r3, r2
 800357a:	43da      	mvns	r2, r3
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	4013      	ands	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	409a      	lsls	r2, r3
 800358c:	0013      	movs	r3, r2
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	4313      	orrs	r3, r2
 8003592:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2203      	movs	r2, #3
 80035a0:	4013      	ands	r3, r2
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d123      	bne.n	80035ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	08da      	lsrs	r2, r3, #3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	3208      	adds	r2, #8
 80035ae:	0092      	lsls	r2, r2, #2
 80035b0:	58d3      	ldr	r3, [r2, r3]
 80035b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	2207      	movs	r2, #7
 80035b8:	4013      	ands	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	220f      	movs	r2, #15
 80035be:	409a      	lsls	r2, r3
 80035c0:	0013      	movs	r3, r2
 80035c2:	43da      	mvns	r2, r3
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4013      	ands	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	691a      	ldr	r2, [r3, #16]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2107      	movs	r1, #7
 80035d2:	400b      	ands	r3, r1
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	409a      	lsls	r2, r3
 80035d8:	0013      	movs	r3, r2
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	08da      	lsrs	r2, r3, #3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3208      	adds	r2, #8
 80035e8:	0092      	lsls	r2, r2, #2
 80035ea:	6939      	ldr	r1, [r7, #16]
 80035ec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	2203      	movs	r2, #3
 80035fa:	409a      	lsls	r2, r3
 80035fc:	0013      	movs	r3, r2
 80035fe:	43da      	mvns	r2, r3
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	4013      	ands	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2203      	movs	r2, #3
 800360c:	401a      	ands	r2, r3
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	409a      	lsls	r2, r3
 8003614:	0013      	movs	r3, r2
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4313      	orrs	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	23c0      	movs	r3, #192	@ 0xc0
 8003628:	029b      	lsls	r3, r3, #10
 800362a:	4013      	ands	r3, r2
 800362c:	d100      	bne.n	8003630 <HAL_GPIO_Init+0x174>
 800362e:	e09a      	b.n	8003766 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003630:	4b54      	ldr	r3, [pc, #336]	@ (8003784 <HAL_GPIO_Init+0x2c8>)
 8003632:	699a      	ldr	r2, [r3, #24]
 8003634:	4b53      	ldr	r3, [pc, #332]	@ (8003784 <HAL_GPIO_Init+0x2c8>)
 8003636:	2101      	movs	r1, #1
 8003638:	430a      	orrs	r2, r1
 800363a:	619a      	str	r2, [r3, #24]
 800363c:	4b51      	ldr	r3, [pc, #324]	@ (8003784 <HAL_GPIO_Init+0x2c8>)
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	2201      	movs	r2, #1
 8003642:	4013      	ands	r3, r2
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003648:	4a4f      	ldr	r2, [pc, #316]	@ (8003788 <HAL_GPIO_Init+0x2cc>)
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	089b      	lsrs	r3, r3, #2
 800364e:	3302      	adds	r3, #2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	589b      	ldr	r3, [r3, r2]
 8003654:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2203      	movs	r2, #3
 800365a:	4013      	ands	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	220f      	movs	r2, #15
 8003660:	409a      	lsls	r2, r3
 8003662:	0013      	movs	r3, r2
 8003664:	43da      	mvns	r2, r3
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	4013      	ands	r3, r2
 800366a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	2390      	movs	r3, #144	@ 0x90
 8003670:	05db      	lsls	r3, r3, #23
 8003672:	429a      	cmp	r2, r3
 8003674:	d013      	beq.n	800369e <HAL_GPIO_Init+0x1e2>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a44      	ldr	r2, [pc, #272]	@ (800378c <HAL_GPIO_Init+0x2d0>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d00d      	beq.n	800369a <HAL_GPIO_Init+0x1de>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a43      	ldr	r2, [pc, #268]	@ (8003790 <HAL_GPIO_Init+0x2d4>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d007      	beq.n	8003696 <HAL_GPIO_Init+0x1da>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a42      	ldr	r2, [pc, #264]	@ (8003794 <HAL_GPIO_Init+0x2d8>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d101      	bne.n	8003692 <HAL_GPIO_Init+0x1d6>
 800368e:	2303      	movs	r3, #3
 8003690:	e006      	b.n	80036a0 <HAL_GPIO_Init+0x1e4>
 8003692:	2305      	movs	r3, #5
 8003694:	e004      	b.n	80036a0 <HAL_GPIO_Init+0x1e4>
 8003696:	2302      	movs	r3, #2
 8003698:	e002      	b.n	80036a0 <HAL_GPIO_Init+0x1e4>
 800369a:	2301      	movs	r3, #1
 800369c:	e000      	b.n	80036a0 <HAL_GPIO_Init+0x1e4>
 800369e:	2300      	movs	r3, #0
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	2103      	movs	r1, #3
 80036a4:	400a      	ands	r2, r1
 80036a6:	0092      	lsls	r2, r2, #2
 80036a8:	4093      	lsls	r3, r2
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036b0:	4935      	ldr	r1, [pc, #212]	@ (8003788 <HAL_GPIO_Init+0x2cc>)
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	089b      	lsrs	r3, r3, #2
 80036b6:	3302      	adds	r3, #2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036be:	4b36      	ldr	r3, [pc, #216]	@ (8003798 <HAL_GPIO_Init+0x2dc>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	43da      	mvns	r2, r3
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	4013      	ands	r3, r2
 80036cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	2380      	movs	r3, #128	@ 0x80
 80036d4:	035b      	lsls	r3, r3, #13
 80036d6:	4013      	ands	r3, r2
 80036d8:	d003      	beq.n	80036e2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	4313      	orrs	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80036e2:	4b2d      	ldr	r3, [pc, #180]	@ (8003798 <HAL_GPIO_Init+0x2dc>)
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80036e8:	4b2b      	ldr	r3, [pc, #172]	@ (8003798 <HAL_GPIO_Init+0x2dc>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	43da      	mvns	r2, r3
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	4013      	ands	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	2380      	movs	r3, #128	@ 0x80
 80036fe:	039b      	lsls	r3, r3, #14
 8003700:	4013      	ands	r3, r2
 8003702:	d003      	beq.n	800370c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	4313      	orrs	r3, r2
 800370a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800370c:	4b22      	ldr	r3, [pc, #136]	@ (8003798 <HAL_GPIO_Init+0x2dc>)
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003712:	4b21      	ldr	r3, [pc, #132]	@ (8003798 <HAL_GPIO_Init+0x2dc>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	43da      	mvns	r2, r3
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	4013      	ands	r3, r2
 8003720:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	2380      	movs	r3, #128	@ 0x80
 8003728:	029b      	lsls	r3, r3, #10
 800372a:	4013      	ands	r3, r2
 800372c:	d003      	beq.n	8003736 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4313      	orrs	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003736:	4b18      	ldr	r3, [pc, #96]	@ (8003798 <HAL_GPIO_Init+0x2dc>)
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800373c:	4b16      	ldr	r3, [pc, #88]	@ (8003798 <HAL_GPIO_Init+0x2dc>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	43da      	mvns	r2, r3
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	4013      	ands	r3, r2
 800374a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	2380      	movs	r3, #128	@ 0x80
 8003752:	025b      	lsls	r3, r3, #9
 8003754:	4013      	ands	r3, r2
 8003756:	d003      	beq.n	8003760 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4313      	orrs	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003760:	4b0d      	ldr	r3, [pc, #52]	@ (8003798 <HAL_GPIO_Init+0x2dc>)
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	3301      	adds	r3, #1
 800376a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	40da      	lsrs	r2, r3
 8003774:	1e13      	subs	r3, r2, #0
 8003776:	d000      	beq.n	800377a <HAL_GPIO_Init+0x2be>
 8003778:	e6a8      	b.n	80034cc <HAL_GPIO_Init+0x10>
  } 
}
 800377a:	46c0      	nop			@ (mov r8, r8)
 800377c:	46c0      	nop			@ (mov r8, r8)
 800377e:	46bd      	mov	sp, r7
 8003780:	b006      	add	sp, #24
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40021000 	.word	0x40021000
 8003788:	40010000 	.word	0x40010000
 800378c:	48000400 	.word	0x48000400
 8003790:	48000800 	.word	0x48000800
 8003794:	48000c00 	.word	0x48000c00
 8003798:	40010400 	.word	0x40010400

0800379c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	0008      	movs	r0, r1
 80037a6:	0011      	movs	r1, r2
 80037a8:	1cbb      	adds	r3, r7, #2
 80037aa:	1c02      	adds	r2, r0, #0
 80037ac:	801a      	strh	r2, [r3, #0]
 80037ae:	1c7b      	adds	r3, r7, #1
 80037b0:	1c0a      	adds	r2, r1, #0
 80037b2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037b4:	1c7b      	adds	r3, r7, #1
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d004      	beq.n	80037c6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037bc:	1cbb      	adds	r3, r7, #2
 80037be:	881a      	ldrh	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037c4:	e003      	b.n	80037ce <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037c6:	1cbb      	adds	r3, r7, #2
 80037c8:	881a      	ldrh	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	46bd      	mov	sp, r7
 80037d2:	b002      	add	sp, #8
 80037d4:	bd80      	pop	{r7, pc}
	...

080037d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b088      	sub	sp, #32
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e301      	b.n	8003dee <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2201      	movs	r2, #1
 80037f0:	4013      	ands	r3, r2
 80037f2:	d100      	bne.n	80037f6 <HAL_RCC_OscConfig+0x1e>
 80037f4:	e08d      	b.n	8003912 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80037f6:	4bc3      	ldr	r3, [pc, #780]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	220c      	movs	r2, #12
 80037fc:	4013      	ands	r3, r2
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d00e      	beq.n	8003820 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003802:	4bc0      	ldr	r3, [pc, #768]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	220c      	movs	r2, #12
 8003808:	4013      	ands	r3, r2
 800380a:	2b08      	cmp	r3, #8
 800380c:	d116      	bne.n	800383c <HAL_RCC_OscConfig+0x64>
 800380e:	4bbd      	ldr	r3, [pc, #756]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	2380      	movs	r3, #128	@ 0x80
 8003814:	025b      	lsls	r3, r3, #9
 8003816:	401a      	ands	r2, r3
 8003818:	2380      	movs	r3, #128	@ 0x80
 800381a:	025b      	lsls	r3, r3, #9
 800381c:	429a      	cmp	r2, r3
 800381e:	d10d      	bne.n	800383c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003820:	4bb8      	ldr	r3, [pc, #736]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	2380      	movs	r3, #128	@ 0x80
 8003826:	029b      	lsls	r3, r3, #10
 8003828:	4013      	ands	r3, r2
 800382a:	d100      	bne.n	800382e <HAL_RCC_OscConfig+0x56>
 800382c:	e070      	b.n	8003910 <HAL_RCC_OscConfig+0x138>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d000      	beq.n	8003838 <HAL_RCC_OscConfig+0x60>
 8003836:	e06b      	b.n	8003910 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e2d8      	b.n	8003dee <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d107      	bne.n	8003854 <HAL_RCC_OscConfig+0x7c>
 8003844:	4baf      	ldr	r3, [pc, #700]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	4bae      	ldr	r3, [pc, #696]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 800384a:	2180      	movs	r1, #128	@ 0x80
 800384c:	0249      	lsls	r1, r1, #9
 800384e:	430a      	orrs	r2, r1
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	e02f      	b.n	80038b4 <HAL_RCC_OscConfig+0xdc>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10c      	bne.n	8003876 <HAL_RCC_OscConfig+0x9e>
 800385c:	4ba9      	ldr	r3, [pc, #676]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	4ba8      	ldr	r3, [pc, #672]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 8003862:	49a9      	ldr	r1, [pc, #676]	@ (8003b08 <HAL_RCC_OscConfig+0x330>)
 8003864:	400a      	ands	r2, r1
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	4ba6      	ldr	r3, [pc, #664]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	4ba5      	ldr	r3, [pc, #660]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 800386e:	49a7      	ldr	r1, [pc, #668]	@ (8003b0c <HAL_RCC_OscConfig+0x334>)
 8003870:	400a      	ands	r2, r1
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	e01e      	b.n	80038b4 <HAL_RCC_OscConfig+0xdc>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b05      	cmp	r3, #5
 800387c:	d10e      	bne.n	800389c <HAL_RCC_OscConfig+0xc4>
 800387e:	4ba1      	ldr	r3, [pc, #644]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	4ba0      	ldr	r3, [pc, #640]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 8003884:	2180      	movs	r1, #128	@ 0x80
 8003886:	02c9      	lsls	r1, r1, #11
 8003888:	430a      	orrs	r2, r1
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	4b9d      	ldr	r3, [pc, #628]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	4b9c      	ldr	r3, [pc, #624]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 8003892:	2180      	movs	r1, #128	@ 0x80
 8003894:	0249      	lsls	r1, r1, #9
 8003896:	430a      	orrs	r2, r1
 8003898:	601a      	str	r2, [r3, #0]
 800389a:	e00b      	b.n	80038b4 <HAL_RCC_OscConfig+0xdc>
 800389c:	4b99      	ldr	r3, [pc, #612]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	4b98      	ldr	r3, [pc, #608]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 80038a2:	4999      	ldr	r1, [pc, #612]	@ (8003b08 <HAL_RCC_OscConfig+0x330>)
 80038a4:	400a      	ands	r2, r1
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	4b96      	ldr	r3, [pc, #600]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	4b95      	ldr	r3, [pc, #596]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 80038ae:	4997      	ldr	r1, [pc, #604]	@ (8003b0c <HAL_RCC_OscConfig+0x334>)
 80038b0:	400a      	ands	r2, r1
 80038b2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d014      	beq.n	80038e6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038bc:	f7ff faf2 	bl	8002ea4 <HAL_GetTick>
 80038c0:	0003      	movs	r3, r0
 80038c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c4:	e008      	b.n	80038d8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038c6:	f7ff faed 	bl	8002ea4 <HAL_GetTick>
 80038ca:	0002      	movs	r2, r0
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b64      	cmp	r3, #100	@ 0x64
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e28a      	b.n	8003dee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038d8:	4b8a      	ldr	r3, [pc, #552]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	2380      	movs	r3, #128	@ 0x80
 80038de:	029b      	lsls	r3, r3, #10
 80038e0:	4013      	ands	r3, r2
 80038e2:	d0f0      	beq.n	80038c6 <HAL_RCC_OscConfig+0xee>
 80038e4:	e015      	b.n	8003912 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e6:	f7ff fadd 	bl	8002ea4 <HAL_GetTick>
 80038ea:	0003      	movs	r3, r0
 80038ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038f0:	f7ff fad8 	bl	8002ea4 <HAL_GetTick>
 80038f4:	0002      	movs	r2, r0
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b64      	cmp	r3, #100	@ 0x64
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e275      	b.n	8003dee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003902:	4b80      	ldr	r3, [pc, #512]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	2380      	movs	r3, #128	@ 0x80
 8003908:	029b      	lsls	r3, r3, #10
 800390a:	4013      	ands	r3, r2
 800390c:	d1f0      	bne.n	80038f0 <HAL_RCC_OscConfig+0x118>
 800390e:	e000      	b.n	8003912 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003910:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2202      	movs	r2, #2
 8003918:	4013      	ands	r3, r2
 800391a:	d100      	bne.n	800391e <HAL_RCC_OscConfig+0x146>
 800391c:	e069      	b.n	80039f2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800391e:	4b79      	ldr	r3, [pc, #484]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	220c      	movs	r2, #12
 8003924:	4013      	ands	r3, r2
 8003926:	d00b      	beq.n	8003940 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003928:	4b76      	ldr	r3, [pc, #472]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	220c      	movs	r2, #12
 800392e:	4013      	ands	r3, r2
 8003930:	2b08      	cmp	r3, #8
 8003932:	d11c      	bne.n	800396e <HAL_RCC_OscConfig+0x196>
 8003934:	4b73      	ldr	r3, [pc, #460]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	2380      	movs	r3, #128	@ 0x80
 800393a:	025b      	lsls	r3, r3, #9
 800393c:	4013      	ands	r3, r2
 800393e:	d116      	bne.n	800396e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003940:	4b70      	ldr	r3, [pc, #448]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2202      	movs	r2, #2
 8003946:	4013      	ands	r3, r2
 8003948:	d005      	beq.n	8003956 <HAL_RCC_OscConfig+0x17e>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d001      	beq.n	8003956 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e24b      	b.n	8003dee <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003956:	4b6b      	ldr	r3, [pc, #428]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	22f8      	movs	r2, #248	@ 0xf8
 800395c:	4393      	bics	r3, r2
 800395e:	0019      	movs	r1, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	00da      	lsls	r2, r3, #3
 8003966:	4b67      	ldr	r3, [pc, #412]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 8003968:	430a      	orrs	r2, r1
 800396a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800396c:	e041      	b.n	80039f2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d024      	beq.n	80039c0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003976:	4b63      	ldr	r3, [pc, #396]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	4b62      	ldr	r3, [pc, #392]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 800397c:	2101      	movs	r1, #1
 800397e:	430a      	orrs	r2, r1
 8003980:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003982:	f7ff fa8f 	bl	8002ea4 <HAL_GetTick>
 8003986:	0003      	movs	r3, r0
 8003988:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800398c:	f7ff fa8a 	bl	8002ea4 <HAL_GetTick>
 8003990:	0002      	movs	r2, r0
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e227      	b.n	8003dee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800399e:	4b59      	ldr	r3, [pc, #356]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2202      	movs	r2, #2
 80039a4:	4013      	ands	r3, r2
 80039a6:	d0f1      	beq.n	800398c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a8:	4b56      	ldr	r3, [pc, #344]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	22f8      	movs	r2, #248	@ 0xf8
 80039ae:	4393      	bics	r3, r2
 80039b0:	0019      	movs	r1, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	00da      	lsls	r2, r3, #3
 80039b8:	4b52      	ldr	r3, [pc, #328]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 80039ba:	430a      	orrs	r2, r1
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	e018      	b.n	80039f2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039c0:	4b50      	ldr	r3, [pc, #320]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	4b4f      	ldr	r3, [pc, #316]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 80039c6:	2101      	movs	r1, #1
 80039c8:	438a      	bics	r2, r1
 80039ca:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039cc:	f7ff fa6a 	bl	8002ea4 <HAL_GetTick>
 80039d0:	0003      	movs	r3, r0
 80039d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039d4:	e008      	b.n	80039e8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039d6:	f7ff fa65 	bl	8002ea4 <HAL_GetTick>
 80039da:	0002      	movs	r2, r0
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e202      	b.n	8003dee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039e8:	4b46      	ldr	r3, [pc, #280]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2202      	movs	r2, #2
 80039ee:	4013      	ands	r3, r2
 80039f0:	d1f1      	bne.n	80039d6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2208      	movs	r2, #8
 80039f8:	4013      	ands	r3, r2
 80039fa:	d036      	beq.n	8003a6a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	69db      	ldr	r3, [r3, #28]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d019      	beq.n	8003a38 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a04:	4b3f      	ldr	r3, [pc, #252]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 8003a06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a08:	4b3e      	ldr	r3, [pc, #248]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a10:	f7ff fa48 	bl	8002ea4 <HAL_GetTick>
 8003a14:	0003      	movs	r3, r0
 8003a16:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a18:	e008      	b.n	8003a2c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a1a:	f7ff fa43 	bl	8002ea4 <HAL_GetTick>
 8003a1e:	0002      	movs	r2, r0
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e1e0      	b.n	8003dee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a2c:	4b35      	ldr	r3, [pc, #212]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a30:	2202      	movs	r2, #2
 8003a32:	4013      	ands	r3, r2
 8003a34:	d0f1      	beq.n	8003a1a <HAL_RCC_OscConfig+0x242>
 8003a36:	e018      	b.n	8003a6a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a38:	4b32      	ldr	r3, [pc, #200]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 8003a3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a3c:	4b31      	ldr	r3, [pc, #196]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 8003a3e:	2101      	movs	r1, #1
 8003a40:	438a      	bics	r2, r1
 8003a42:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a44:	f7ff fa2e 	bl	8002ea4 <HAL_GetTick>
 8003a48:	0003      	movs	r3, r0
 8003a4a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a4c:	e008      	b.n	8003a60 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a4e:	f7ff fa29 	bl	8002ea4 <HAL_GetTick>
 8003a52:	0002      	movs	r2, r0
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e1c6      	b.n	8003dee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a60:	4b28      	ldr	r3, [pc, #160]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 8003a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a64:	2202      	movs	r2, #2
 8003a66:	4013      	ands	r3, r2
 8003a68:	d1f1      	bne.n	8003a4e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2204      	movs	r2, #4
 8003a70:	4013      	ands	r3, r2
 8003a72:	d100      	bne.n	8003a76 <HAL_RCC_OscConfig+0x29e>
 8003a74:	e0b4      	b.n	8003be0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a76:	201f      	movs	r0, #31
 8003a78:	183b      	adds	r3, r7, r0
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a7e:	4b21      	ldr	r3, [pc, #132]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 8003a80:	69da      	ldr	r2, [r3, #28]
 8003a82:	2380      	movs	r3, #128	@ 0x80
 8003a84:	055b      	lsls	r3, r3, #21
 8003a86:	4013      	ands	r3, r2
 8003a88:	d110      	bne.n	8003aac <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 8003a8c:	69da      	ldr	r2, [r3, #28]
 8003a8e:	4b1d      	ldr	r3, [pc, #116]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 8003a90:	2180      	movs	r1, #128	@ 0x80
 8003a92:	0549      	lsls	r1, r1, #21
 8003a94:	430a      	orrs	r2, r1
 8003a96:	61da      	str	r2, [r3, #28]
 8003a98:	4b1a      	ldr	r3, [pc, #104]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 8003a9a:	69da      	ldr	r2, [r3, #28]
 8003a9c:	2380      	movs	r3, #128	@ 0x80
 8003a9e:	055b      	lsls	r3, r3, #21
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003aa6:	183b      	adds	r3, r7, r0
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aac:	4b18      	ldr	r3, [pc, #96]	@ (8003b10 <HAL_RCC_OscConfig+0x338>)
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	2380      	movs	r3, #128	@ 0x80
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	d11a      	bne.n	8003aee <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ab8:	4b15      	ldr	r3, [pc, #84]	@ (8003b10 <HAL_RCC_OscConfig+0x338>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	4b14      	ldr	r3, [pc, #80]	@ (8003b10 <HAL_RCC_OscConfig+0x338>)
 8003abe:	2180      	movs	r1, #128	@ 0x80
 8003ac0:	0049      	lsls	r1, r1, #1
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ac6:	f7ff f9ed 	bl	8002ea4 <HAL_GetTick>
 8003aca:	0003      	movs	r3, r0
 8003acc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad0:	f7ff f9e8 	bl	8002ea4 <HAL_GetTick>
 8003ad4:	0002      	movs	r2, r0
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b64      	cmp	r3, #100	@ 0x64
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e185      	b.n	8003dee <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8003b10 <HAL_RCC_OscConfig+0x338>)
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	2380      	movs	r3, #128	@ 0x80
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	4013      	ands	r3, r2
 8003aec:	d0f0      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d10e      	bne.n	8003b14 <HAL_RCC_OscConfig+0x33c>
 8003af6:	4b03      	ldr	r3, [pc, #12]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 8003af8:	6a1a      	ldr	r2, [r3, #32]
 8003afa:	4b02      	ldr	r3, [pc, #8]	@ (8003b04 <HAL_RCC_OscConfig+0x32c>)
 8003afc:	2101      	movs	r1, #1
 8003afe:	430a      	orrs	r2, r1
 8003b00:	621a      	str	r2, [r3, #32]
 8003b02:	e035      	b.n	8003b70 <HAL_RCC_OscConfig+0x398>
 8003b04:	40021000 	.word	0x40021000
 8003b08:	fffeffff 	.word	0xfffeffff
 8003b0c:	fffbffff 	.word	0xfffbffff
 8003b10:	40007000 	.word	0x40007000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10c      	bne.n	8003b36 <HAL_RCC_OscConfig+0x35e>
 8003b1c:	4bb6      	ldr	r3, [pc, #728]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003b1e:	6a1a      	ldr	r2, [r3, #32]
 8003b20:	4bb5      	ldr	r3, [pc, #724]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003b22:	2101      	movs	r1, #1
 8003b24:	438a      	bics	r2, r1
 8003b26:	621a      	str	r2, [r3, #32]
 8003b28:	4bb3      	ldr	r3, [pc, #716]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003b2a:	6a1a      	ldr	r2, [r3, #32]
 8003b2c:	4bb2      	ldr	r3, [pc, #712]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003b2e:	2104      	movs	r1, #4
 8003b30:	438a      	bics	r2, r1
 8003b32:	621a      	str	r2, [r3, #32]
 8003b34:	e01c      	b.n	8003b70 <HAL_RCC_OscConfig+0x398>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	2b05      	cmp	r3, #5
 8003b3c:	d10c      	bne.n	8003b58 <HAL_RCC_OscConfig+0x380>
 8003b3e:	4bae      	ldr	r3, [pc, #696]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003b40:	6a1a      	ldr	r2, [r3, #32]
 8003b42:	4bad      	ldr	r3, [pc, #692]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003b44:	2104      	movs	r1, #4
 8003b46:	430a      	orrs	r2, r1
 8003b48:	621a      	str	r2, [r3, #32]
 8003b4a:	4bab      	ldr	r3, [pc, #684]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003b4c:	6a1a      	ldr	r2, [r3, #32]
 8003b4e:	4baa      	ldr	r3, [pc, #680]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003b50:	2101      	movs	r1, #1
 8003b52:	430a      	orrs	r2, r1
 8003b54:	621a      	str	r2, [r3, #32]
 8003b56:	e00b      	b.n	8003b70 <HAL_RCC_OscConfig+0x398>
 8003b58:	4ba7      	ldr	r3, [pc, #668]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003b5a:	6a1a      	ldr	r2, [r3, #32]
 8003b5c:	4ba6      	ldr	r3, [pc, #664]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003b5e:	2101      	movs	r1, #1
 8003b60:	438a      	bics	r2, r1
 8003b62:	621a      	str	r2, [r3, #32]
 8003b64:	4ba4      	ldr	r3, [pc, #656]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003b66:	6a1a      	ldr	r2, [r3, #32]
 8003b68:	4ba3      	ldr	r3, [pc, #652]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003b6a:	2104      	movs	r1, #4
 8003b6c:	438a      	bics	r2, r1
 8003b6e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d014      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b78:	f7ff f994 	bl	8002ea4 <HAL_GetTick>
 8003b7c:	0003      	movs	r3, r0
 8003b7e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b80:	e009      	b.n	8003b96 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b82:	f7ff f98f 	bl	8002ea4 <HAL_GetTick>
 8003b86:	0002      	movs	r2, r0
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	4a9b      	ldr	r2, [pc, #620]	@ (8003dfc <HAL_RCC_OscConfig+0x624>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e12b      	b.n	8003dee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b96:	4b98      	ldr	r3, [pc, #608]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	d0f0      	beq.n	8003b82 <HAL_RCC_OscConfig+0x3aa>
 8003ba0:	e013      	b.n	8003bca <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ba2:	f7ff f97f 	bl	8002ea4 <HAL_GetTick>
 8003ba6:	0003      	movs	r3, r0
 8003ba8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003baa:	e009      	b.n	8003bc0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bac:	f7ff f97a 	bl	8002ea4 <HAL_GetTick>
 8003bb0:	0002      	movs	r2, r0
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	4a91      	ldr	r2, [pc, #580]	@ (8003dfc <HAL_RCC_OscConfig+0x624>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e116      	b.n	8003dee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc0:	4b8d      	ldr	r3, [pc, #564]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	d1f0      	bne.n	8003bac <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bca:	231f      	movs	r3, #31
 8003bcc:	18fb      	adds	r3, r7, r3
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d105      	bne.n	8003be0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bd4:	4b88      	ldr	r3, [pc, #544]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003bd6:	69da      	ldr	r2, [r3, #28]
 8003bd8:	4b87      	ldr	r3, [pc, #540]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003bda:	4989      	ldr	r1, [pc, #548]	@ (8003e00 <HAL_RCC_OscConfig+0x628>)
 8003bdc:	400a      	ands	r2, r1
 8003bde:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2210      	movs	r2, #16
 8003be6:	4013      	ands	r3, r2
 8003be8:	d063      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d12a      	bne.n	8003c48 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003bf2:	4b81      	ldr	r3, [pc, #516]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003bf4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bf6:	4b80      	ldr	r3, [pc, #512]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003bf8:	2104      	movs	r1, #4
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003bfe:	4b7e      	ldr	r3, [pc, #504]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003c00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c02:	4b7d      	ldr	r3, [pc, #500]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003c04:	2101      	movs	r1, #1
 8003c06:	430a      	orrs	r2, r1
 8003c08:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c0a:	f7ff f94b 	bl	8002ea4 <HAL_GetTick>
 8003c0e:	0003      	movs	r3, r0
 8003c10:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003c14:	f7ff f946 	bl	8002ea4 <HAL_GetTick>
 8003c18:	0002      	movs	r2, r0
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e0e3      	b.n	8003dee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003c26:	4b74      	ldr	r3, [pc, #464]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	d0f1      	beq.n	8003c14 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003c30:	4b71      	ldr	r3, [pc, #452]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003c32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c34:	22f8      	movs	r2, #248	@ 0xf8
 8003c36:	4393      	bics	r3, r2
 8003c38:	0019      	movs	r1, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	00da      	lsls	r2, r3, #3
 8003c40:	4b6d      	ldr	r3, [pc, #436]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003c42:	430a      	orrs	r2, r1
 8003c44:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c46:	e034      	b.n	8003cb2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	3305      	adds	r3, #5
 8003c4e:	d111      	bne.n	8003c74 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003c50:	4b69      	ldr	r3, [pc, #420]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003c52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c54:	4b68      	ldr	r3, [pc, #416]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003c56:	2104      	movs	r1, #4
 8003c58:	438a      	bics	r2, r1
 8003c5a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003c5c:	4b66      	ldr	r3, [pc, #408]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003c5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c60:	22f8      	movs	r2, #248	@ 0xf8
 8003c62:	4393      	bics	r3, r2
 8003c64:	0019      	movs	r1, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	00da      	lsls	r2, r3, #3
 8003c6c:	4b62      	ldr	r3, [pc, #392]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c72:	e01e      	b.n	8003cb2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003c74:	4b60      	ldr	r3, [pc, #384]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003c76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c78:	4b5f      	ldr	r3, [pc, #380]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003c7a:	2104      	movs	r1, #4
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003c80:	4b5d      	ldr	r3, [pc, #372]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003c82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c84:	4b5c      	ldr	r3, [pc, #368]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003c86:	2101      	movs	r1, #1
 8003c88:	438a      	bics	r2, r1
 8003c8a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c8c:	f7ff f90a 	bl	8002ea4 <HAL_GetTick>
 8003c90:	0003      	movs	r3, r0
 8003c92:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003c96:	f7ff f905 	bl	8002ea4 <HAL_GetTick>
 8003c9a:	0002      	movs	r2, r0
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e0a2      	b.n	8003dee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003ca8:	4b53      	ldr	r3, [pc, #332]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cac:	2202      	movs	r2, #2
 8003cae:	4013      	ands	r3, r2
 8003cb0:	d1f1      	bne.n	8003c96 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d100      	bne.n	8003cbc <HAL_RCC_OscConfig+0x4e4>
 8003cba:	e097      	b.n	8003dec <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cbc:	4b4e      	ldr	r3, [pc, #312]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	220c      	movs	r2, #12
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d100      	bne.n	8003cca <HAL_RCC_OscConfig+0x4f2>
 8003cc8:	e06b      	b.n	8003da2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d14c      	bne.n	8003d6c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cd2:	4b49      	ldr	r3, [pc, #292]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	4b48      	ldr	r3, [pc, #288]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003cd8:	494a      	ldr	r1, [pc, #296]	@ (8003e04 <HAL_RCC_OscConfig+0x62c>)
 8003cda:	400a      	ands	r2, r1
 8003cdc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cde:	f7ff f8e1 	bl	8002ea4 <HAL_GetTick>
 8003ce2:	0003      	movs	r3, r0
 8003ce4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ce8:	f7ff f8dc 	bl	8002ea4 <HAL_GetTick>
 8003cec:	0002      	movs	r2, r0
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e079      	b.n	8003dee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cfa:	4b3f      	ldr	r3, [pc, #252]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	2380      	movs	r3, #128	@ 0x80
 8003d00:	049b      	lsls	r3, r3, #18
 8003d02:	4013      	ands	r3, r2
 8003d04:	d1f0      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d06:	4b3c      	ldr	r3, [pc, #240]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0a:	220f      	movs	r2, #15
 8003d0c:	4393      	bics	r3, r2
 8003d0e:	0019      	movs	r1, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d14:	4b38      	ldr	r3, [pc, #224]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003d16:	430a      	orrs	r2, r1
 8003d18:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003d1a:	4b37      	ldr	r3, [pc, #220]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	4a3a      	ldr	r2, [pc, #232]	@ (8003e08 <HAL_RCC_OscConfig+0x630>)
 8003d20:	4013      	ands	r3, r2
 8003d22:	0019      	movs	r1, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	4b32      	ldr	r3, [pc, #200]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003d30:	430a      	orrs	r2, r1
 8003d32:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d34:	4b30      	ldr	r3, [pc, #192]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	4b2f      	ldr	r3, [pc, #188]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003d3a:	2180      	movs	r1, #128	@ 0x80
 8003d3c:	0449      	lsls	r1, r1, #17
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d42:	f7ff f8af 	bl	8002ea4 <HAL_GetTick>
 8003d46:	0003      	movs	r3, r0
 8003d48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d4c:	f7ff f8aa 	bl	8002ea4 <HAL_GetTick>
 8003d50:	0002      	movs	r2, r0
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e047      	b.n	8003dee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d5e:	4b26      	ldr	r3, [pc, #152]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	2380      	movs	r3, #128	@ 0x80
 8003d64:	049b      	lsls	r3, r3, #18
 8003d66:	4013      	ands	r3, r2
 8003d68:	d0f0      	beq.n	8003d4c <HAL_RCC_OscConfig+0x574>
 8003d6a:	e03f      	b.n	8003dec <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d6c:	4b22      	ldr	r3, [pc, #136]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	4b21      	ldr	r3, [pc, #132]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003d72:	4924      	ldr	r1, [pc, #144]	@ (8003e04 <HAL_RCC_OscConfig+0x62c>)
 8003d74:	400a      	ands	r2, r1
 8003d76:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d78:	f7ff f894 	bl	8002ea4 <HAL_GetTick>
 8003d7c:	0003      	movs	r3, r0
 8003d7e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d80:	e008      	b.n	8003d94 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d82:	f7ff f88f 	bl	8002ea4 <HAL_GetTick>
 8003d86:	0002      	movs	r2, r0
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e02c      	b.n	8003dee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d94:	4b18      	ldr	r3, [pc, #96]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	2380      	movs	r3, #128	@ 0x80
 8003d9a:	049b      	lsls	r3, r3, #18
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	d1f0      	bne.n	8003d82 <HAL_RCC_OscConfig+0x5aa>
 8003da0:	e024      	b.n	8003dec <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d101      	bne.n	8003dae <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e01f      	b.n	8003dee <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003dae:	4b12      	ldr	r3, [pc, #72]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003db4:	4b10      	ldr	r3, [pc, #64]	@ (8003df8 <HAL_RCC_OscConfig+0x620>)
 8003db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	2380      	movs	r3, #128	@ 0x80
 8003dbe:	025b      	lsls	r3, r3, #9
 8003dc0:	401a      	ands	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d10e      	bne.n	8003de8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	220f      	movs	r2, #15
 8003dce:	401a      	ands	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d107      	bne.n	8003de8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	23f0      	movs	r3, #240	@ 0xf0
 8003ddc:	039b      	lsls	r3, r3, #14
 8003dde:	401a      	ands	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d001      	beq.n	8003dec <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e000      	b.n	8003dee <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	0018      	movs	r0, r3
 8003df0:	46bd      	mov	sp, r7
 8003df2:	b008      	add	sp, #32
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	46c0      	nop			@ (mov r8, r8)
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	00001388 	.word	0x00001388
 8003e00:	efffffff 	.word	0xefffffff
 8003e04:	feffffff 	.word	0xfeffffff
 8003e08:	ffc2ffff 	.word	0xffc2ffff

08003e0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e0b3      	b.n	8003f88 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e20:	4b5b      	ldr	r3, [pc, #364]	@ (8003f90 <HAL_RCC_ClockConfig+0x184>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2201      	movs	r2, #1
 8003e26:	4013      	ands	r3, r2
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d911      	bls.n	8003e52 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e2e:	4b58      	ldr	r3, [pc, #352]	@ (8003f90 <HAL_RCC_ClockConfig+0x184>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2201      	movs	r2, #1
 8003e34:	4393      	bics	r3, r2
 8003e36:	0019      	movs	r1, r3
 8003e38:	4b55      	ldr	r3, [pc, #340]	@ (8003f90 <HAL_RCC_ClockConfig+0x184>)
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e40:	4b53      	ldr	r3, [pc, #332]	@ (8003f90 <HAL_RCC_ClockConfig+0x184>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2201      	movs	r2, #1
 8003e46:	4013      	ands	r3, r2
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d001      	beq.n	8003e52 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e09a      	b.n	8003f88 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2202      	movs	r2, #2
 8003e58:	4013      	ands	r3, r2
 8003e5a:	d015      	beq.n	8003e88 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2204      	movs	r2, #4
 8003e62:	4013      	ands	r3, r2
 8003e64:	d006      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003e66:	4b4b      	ldr	r3, [pc, #300]	@ (8003f94 <HAL_RCC_ClockConfig+0x188>)
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	4b4a      	ldr	r3, [pc, #296]	@ (8003f94 <HAL_RCC_ClockConfig+0x188>)
 8003e6c:	21e0      	movs	r1, #224	@ 0xe0
 8003e6e:	00c9      	lsls	r1, r1, #3
 8003e70:	430a      	orrs	r2, r1
 8003e72:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e74:	4b47      	ldr	r3, [pc, #284]	@ (8003f94 <HAL_RCC_ClockConfig+0x188>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	22f0      	movs	r2, #240	@ 0xf0
 8003e7a:	4393      	bics	r3, r2
 8003e7c:	0019      	movs	r1, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689a      	ldr	r2, [r3, #8]
 8003e82:	4b44      	ldr	r3, [pc, #272]	@ (8003f94 <HAL_RCC_ClockConfig+0x188>)
 8003e84:	430a      	orrs	r2, r1
 8003e86:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	4013      	ands	r3, r2
 8003e90:	d040      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d107      	bne.n	8003eaa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e9a:	4b3e      	ldr	r3, [pc, #248]	@ (8003f94 <HAL_RCC_ClockConfig+0x188>)
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	2380      	movs	r3, #128	@ 0x80
 8003ea0:	029b      	lsls	r3, r3, #10
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	d114      	bne.n	8003ed0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e06e      	b.n	8003f88 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d107      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eb2:	4b38      	ldr	r3, [pc, #224]	@ (8003f94 <HAL_RCC_ClockConfig+0x188>)
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	2380      	movs	r3, #128	@ 0x80
 8003eb8:	049b      	lsls	r3, r3, #18
 8003eba:	4013      	ands	r3, r2
 8003ebc:	d108      	bne.n	8003ed0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e062      	b.n	8003f88 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec2:	4b34      	ldr	r3, [pc, #208]	@ (8003f94 <HAL_RCC_ClockConfig+0x188>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	4013      	ands	r3, r2
 8003eca:	d101      	bne.n	8003ed0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e05b      	b.n	8003f88 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ed0:	4b30      	ldr	r3, [pc, #192]	@ (8003f94 <HAL_RCC_ClockConfig+0x188>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	2203      	movs	r2, #3
 8003ed6:	4393      	bics	r3, r2
 8003ed8:	0019      	movs	r1, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	4b2d      	ldr	r3, [pc, #180]	@ (8003f94 <HAL_RCC_ClockConfig+0x188>)
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ee4:	f7fe ffde 	bl	8002ea4 <HAL_GetTick>
 8003ee8:	0003      	movs	r3, r0
 8003eea:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eec:	e009      	b.n	8003f02 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eee:	f7fe ffd9 	bl	8002ea4 <HAL_GetTick>
 8003ef2:	0002      	movs	r2, r0
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	4a27      	ldr	r2, [pc, #156]	@ (8003f98 <HAL_RCC_ClockConfig+0x18c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e042      	b.n	8003f88 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f02:	4b24      	ldr	r3, [pc, #144]	@ (8003f94 <HAL_RCC_ClockConfig+0x188>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	220c      	movs	r2, #12
 8003f08:	401a      	ands	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d1ec      	bne.n	8003eee <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f14:	4b1e      	ldr	r3, [pc, #120]	@ (8003f90 <HAL_RCC_ClockConfig+0x184>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d211      	bcs.n	8003f46 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f22:	4b1b      	ldr	r3, [pc, #108]	@ (8003f90 <HAL_RCC_ClockConfig+0x184>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2201      	movs	r2, #1
 8003f28:	4393      	bics	r3, r2
 8003f2a:	0019      	movs	r1, r3
 8003f2c:	4b18      	ldr	r3, [pc, #96]	@ (8003f90 <HAL_RCC_ClockConfig+0x184>)
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f34:	4b16      	ldr	r3, [pc, #88]	@ (8003f90 <HAL_RCC_ClockConfig+0x184>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d001      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e020      	b.n	8003f88 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2204      	movs	r2, #4
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	d009      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003f50:	4b10      	ldr	r3, [pc, #64]	@ (8003f94 <HAL_RCC_ClockConfig+0x188>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	4a11      	ldr	r2, [pc, #68]	@ (8003f9c <HAL_RCC_ClockConfig+0x190>)
 8003f56:	4013      	ands	r3, r2
 8003f58:	0019      	movs	r1, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f94 <HAL_RCC_ClockConfig+0x188>)
 8003f60:	430a      	orrs	r2, r1
 8003f62:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003f64:	f000 f820 	bl	8003fa8 <HAL_RCC_GetSysClockFreq>
 8003f68:	0001      	movs	r1, r0
 8003f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f94 <HAL_RCC_ClockConfig+0x188>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	091b      	lsrs	r3, r3, #4
 8003f70:	220f      	movs	r2, #15
 8003f72:	4013      	ands	r3, r2
 8003f74:	4a0a      	ldr	r2, [pc, #40]	@ (8003fa0 <HAL_RCC_ClockConfig+0x194>)
 8003f76:	5cd3      	ldrb	r3, [r2, r3]
 8003f78:	000a      	movs	r2, r1
 8003f7a:	40da      	lsrs	r2, r3
 8003f7c:	4b09      	ldr	r3, [pc, #36]	@ (8003fa4 <HAL_RCC_ClockConfig+0x198>)
 8003f7e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003f80:	2003      	movs	r0, #3
 8003f82:	f7fe ff49 	bl	8002e18 <HAL_InitTick>
  
  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	0018      	movs	r0, r3
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	b004      	add	sp, #16
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40022000 	.word	0x40022000
 8003f94:	40021000 	.word	0x40021000
 8003f98:	00001388 	.word	0x00001388
 8003f9c:	fffff8ff 	.word	0xfffff8ff
 8003fa0:	08008ad0 	.word	0x08008ad0
 8003fa4:	20000048 	.word	0x20000048

08003fa8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60fb      	str	r3, [r7, #12]
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60bb      	str	r3, [r7, #8]
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	617b      	str	r3, [r7, #20]
 8003fba:	2300      	movs	r3, #0
 8003fbc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003fc2:	4b20      	ldr	r3, [pc, #128]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	220c      	movs	r2, #12
 8003fcc:	4013      	ands	r3, r2
 8003fce:	2b04      	cmp	r3, #4
 8003fd0:	d002      	beq.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x30>
 8003fd2:	2b08      	cmp	r3, #8
 8003fd4:	d003      	beq.n	8003fde <HAL_RCC_GetSysClockFreq+0x36>
 8003fd6:	e02c      	b.n	8004032 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8004048 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003fda:	613b      	str	r3, [r7, #16]
      break;
 8003fdc:	e02c      	b.n	8004038 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	0c9b      	lsrs	r3, r3, #18
 8003fe2:	220f      	movs	r2, #15
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	4a19      	ldr	r2, [pc, #100]	@ (800404c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003fe8:	5cd3      	ldrb	r3, [r2, r3]
 8003fea:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003fec:	4b15      	ldr	r3, [pc, #84]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff0:	220f      	movs	r2, #15
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	4a16      	ldr	r2, [pc, #88]	@ (8004050 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003ff6:	5cd3      	ldrb	r3, [r2, r3]
 8003ff8:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	2380      	movs	r3, #128	@ 0x80
 8003ffe:	025b      	lsls	r3, r3, #9
 8004000:	4013      	ands	r3, r2
 8004002:	d009      	beq.n	8004018 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004004:	68b9      	ldr	r1, [r7, #8]
 8004006:	4810      	ldr	r0, [pc, #64]	@ (8004048 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004008:	f7fc f89a 	bl	8000140 <__udivsi3>
 800400c:	0003      	movs	r3, r0
 800400e:	001a      	movs	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4353      	muls	r3, r2
 8004014:	617b      	str	r3, [r7, #20]
 8004016:	e009      	b.n	800402c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004018:	6879      	ldr	r1, [r7, #4]
 800401a:	000a      	movs	r2, r1
 800401c:	0152      	lsls	r2, r2, #5
 800401e:	1a52      	subs	r2, r2, r1
 8004020:	0193      	lsls	r3, r2, #6
 8004022:	1a9b      	subs	r3, r3, r2
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	185b      	adds	r3, r3, r1
 8004028:	021b      	lsls	r3, r3, #8
 800402a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	613b      	str	r3, [r7, #16]
      break;
 8004030:	e002      	b.n	8004038 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004032:	4b05      	ldr	r3, [pc, #20]	@ (8004048 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004034:	613b      	str	r3, [r7, #16]
      break;
 8004036:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004038:	693b      	ldr	r3, [r7, #16]
}
 800403a:	0018      	movs	r0, r3
 800403c:	46bd      	mov	sp, r7
 800403e:	b006      	add	sp, #24
 8004040:	bd80      	pop	{r7, pc}
 8004042:	46c0      	nop			@ (mov r8, r8)
 8004044:	40021000 	.word	0x40021000
 8004048:	007a1200 	.word	0x007a1200
 800404c:	08008ae8 	.word	0x08008ae8
 8004050:	08008af8 	.word	0x08008af8

08004054 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004058:	4b02      	ldr	r3, [pc, #8]	@ (8004064 <HAL_RCC_GetHCLKFreq+0x10>)
 800405a:	681b      	ldr	r3, [r3, #0]
}
 800405c:	0018      	movs	r0, r3
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	46c0      	nop			@ (mov r8, r8)
 8004064:	20000048 	.word	0x20000048

08004068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800406c:	f7ff fff2 	bl	8004054 <HAL_RCC_GetHCLKFreq>
 8004070:	0001      	movs	r1, r0
 8004072:	4b06      	ldr	r3, [pc, #24]	@ (800408c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	0a1b      	lsrs	r3, r3, #8
 8004078:	2207      	movs	r2, #7
 800407a:	4013      	ands	r3, r2
 800407c:	4a04      	ldr	r2, [pc, #16]	@ (8004090 <HAL_RCC_GetPCLK1Freq+0x28>)
 800407e:	5cd3      	ldrb	r3, [r2, r3]
 8004080:	40d9      	lsrs	r1, r3
 8004082:	000b      	movs	r3, r1
}    
 8004084:	0018      	movs	r0, r3
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	46c0      	nop			@ (mov r8, r8)
 800408c:	40021000 	.word	0x40021000
 8004090:	08008ae0 	.word	0x08008ae0

08004094 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e042      	b.n	800412c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	223d      	movs	r2, #61	@ 0x3d
 80040aa:	5c9b      	ldrb	r3, [r3, r2]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d107      	bne.n	80040c2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	223c      	movs	r2, #60	@ 0x3c
 80040b6:	2100      	movs	r1, #0
 80040b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	0018      	movs	r0, r3
 80040be:	f7fe fd27 	bl	8002b10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	223d      	movs	r2, #61	@ 0x3d
 80040c6:	2102      	movs	r1, #2
 80040c8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	3304      	adds	r3, #4
 80040d2:	0019      	movs	r1, r3
 80040d4:	0010      	movs	r0, r2
 80040d6:	f000 f877 	bl	80041c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2246      	movs	r2, #70	@ 0x46
 80040de:	2101      	movs	r1, #1
 80040e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	223e      	movs	r2, #62	@ 0x3e
 80040e6:	2101      	movs	r1, #1
 80040e8:	5499      	strb	r1, [r3, r2]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	223f      	movs	r2, #63	@ 0x3f
 80040ee:	2101      	movs	r1, #1
 80040f0:	5499      	strb	r1, [r3, r2]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2240      	movs	r2, #64	@ 0x40
 80040f6:	2101      	movs	r1, #1
 80040f8:	5499      	strb	r1, [r3, r2]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2241      	movs	r2, #65	@ 0x41
 80040fe:	2101      	movs	r1, #1
 8004100:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2242      	movs	r2, #66	@ 0x42
 8004106:	2101      	movs	r1, #1
 8004108:	5499      	strb	r1, [r3, r2]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2243      	movs	r2, #67	@ 0x43
 800410e:	2101      	movs	r1, #1
 8004110:	5499      	strb	r1, [r3, r2]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2244      	movs	r2, #68	@ 0x44
 8004116:	2101      	movs	r1, #1
 8004118:	5499      	strb	r1, [r3, r2]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2245      	movs	r2, #69	@ 0x45
 800411e:	2101      	movs	r1, #1
 8004120:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	223d      	movs	r2, #61	@ 0x3d
 8004126:	2101      	movs	r1, #1
 8004128:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	0018      	movs	r0, r3
 800412e:	46bd      	mov	sp, r7
 8004130:	b002      	add	sp, #8
 8004132:	bd80      	pop	{r7, pc}

08004134 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	223d      	movs	r2, #61	@ 0x3d
 8004140:	5c9b      	ldrb	r3, [r3, r2]
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b01      	cmp	r3, #1
 8004146:	d001      	beq.n	800414c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e033      	b.n	80041b4 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	223d      	movs	r2, #61	@ 0x3d
 8004150:	2102      	movs	r1, #2
 8004152:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a18      	ldr	r2, [pc, #96]	@ (80041bc <HAL_TIM_Base_Start+0x88>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d00f      	beq.n	800417e <HAL_TIM_Base_Start+0x4a>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	2380      	movs	r3, #128	@ 0x80
 8004164:	05db      	lsls	r3, r3, #23
 8004166:	429a      	cmp	r2, r3
 8004168:	d009      	beq.n	800417e <HAL_TIM_Base_Start+0x4a>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a14      	ldr	r2, [pc, #80]	@ (80041c0 <HAL_TIM_Base_Start+0x8c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d004      	beq.n	800417e <HAL_TIM_Base_Start+0x4a>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a12      	ldr	r2, [pc, #72]	@ (80041c4 <HAL_TIM_Base_Start+0x90>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d111      	bne.n	80041a2 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	2207      	movs	r2, #7
 8004186:	4013      	ands	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2b06      	cmp	r3, #6
 800418e:	d010      	beq.n	80041b2 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2101      	movs	r1, #1
 800419c:	430a      	orrs	r2, r1
 800419e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041a0:	e007      	b.n	80041b2 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2101      	movs	r1, #1
 80041ae:	430a      	orrs	r2, r1
 80041b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	0018      	movs	r0, r3
 80041b6:	46bd      	mov	sp, r7
 80041b8:	b004      	add	sp, #16
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40012c00 	.word	0x40012c00
 80041c0:	40000400 	.word	0x40000400
 80041c4:	40014000 	.word	0x40014000

080041c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a3b      	ldr	r2, [pc, #236]	@ (80042c8 <TIM_Base_SetConfig+0x100>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d008      	beq.n	80041f2 <TIM_Base_SetConfig+0x2a>
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	2380      	movs	r3, #128	@ 0x80
 80041e4:	05db      	lsls	r3, r3, #23
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d003      	beq.n	80041f2 <TIM_Base_SetConfig+0x2a>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a37      	ldr	r2, [pc, #220]	@ (80042cc <TIM_Base_SetConfig+0x104>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d108      	bne.n	8004204 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2270      	movs	r2, #112	@ 0x70
 80041f6:	4393      	bics	r3, r2
 80041f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	4313      	orrs	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a30      	ldr	r2, [pc, #192]	@ (80042c8 <TIM_Base_SetConfig+0x100>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d018      	beq.n	800423e <TIM_Base_SetConfig+0x76>
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	2380      	movs	r3, #128	@ 0x80
 8004210:	05db      	lsls	r3, r3, #23
 8004212:	429a      	cmp	r2, r3
 8004214:	d013      	beq.n	800423e <TIM_Base_SetConfig+0x76>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a2c      	ldr	r2, [pc, #176]	@ (80042cc <TIM_Base_SetConfig+0x104>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d00f      	beq.n	800423e <TIM_Base_SetConfig+0x76>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a2b      	ldr	r2, [pc, #172]	@ (80042d0 <TIM_Base_SetConfig+0x108>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d00b      	beq.n	800423e <TIM_Base_SetConfig+0x76>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a2a      	ldr	r2, [pc, #168]	@ (80042d4 <TIM_Base_SetConfig+0x10c>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d007      	beq.n	800423e <TIM_Base_SetConfig+0x76>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a29      	ldr	r2, [pc, #164]	@ (80042d8 <TIM_Base_SetConfig+0x110>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d003      	beq.n	800423e <TIM_Base_SetConfig+0x76>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a28      	ldr	r2, [pc, #160]	@ (80042dc <TIM_Base_SetConfig+0x114>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d108      	bne.n	8004250 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	4a27      	ldr	r2, [pc, #156]	@ (80042e0 <TIM_Base_SetConfig+0x118>)
 8004242:	4013      	ands	r3, r2
 8004244:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	4313      	orrs	r3, r2
 800424e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2280      	movs	r2, #128	@ 0x80
 8004254:	4393      	bics	r3, r2
 8004256:	001a      	movs	r2, r3
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	4313      	orrs	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	689a      	ldr	r2, [r3, #8]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a13      	ldr	r2, [pc, #76]	@ (80042c8 <TIM_Base_SetConfig+0x100>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d00b      	beq.n	8004296 <TIM_Base_SetConfig+0xce>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a14      	ldr	r2, [pc, #80]	@ (80042d4 <TIM_Base_SetConfig+0x10c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d007      	beq.n	8004296 <TIM_Base_SetConfig+0xce>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a13      	ldr	r2, [pc, #76]	@ (80042d8 <TIM_Base_SetConfig+0x110>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d003      	beq.n	8004296 <TIM_Base_SetConfig+0xce>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a12      	ldr	r2, [pc, #72]	@ (80042dc <TIM_Base_SetConfig+0x114>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d103      	bne.n	800429e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	691a      	ldr	r2, [r3, #16]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	2201      	movs	r2, #1
 80042aa:	4013      	ands	r3, r2
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d106      	bne.n	80042be <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	2201      	movs	r2, #1
 80042b6:	4393      	bics	r3, r2
 80042b8:	001a      	movs	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	611a      	str	r2, [r3, #16]
  }
}
 80042be:	46c0      	nop			@ (mov r8, r8)
 80042c0:	46bd      	mov	sp, r7
 80042c2:	b004      	add	sp, #16
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	46c0      	nop			@ (mov r8, r8)
 80042c8:	40012c00 	.word	0x40012c00
 80042cc:	40000400 	.word	0x40000400
 80042d0:	40002000 	.word	0x40002000
 80042d4:	40014000 	.word	0x40014000
 80042d8:	40014400 	.word	0x40014400
 80042dc:	40014800 	.word	0x40014800
 80042e0:	fffffcff 	.word	0xfffffcff

080042e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	223c      	movs	r2, #60	@ 0x3c
 80042f2:	5c9b      	ldrb	r3, [r3, r2]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e047      	b.n	800438c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	223c      	movs	r2, #60	@ 0x3c
 8004300:	2101      	movs	r1, #1
 8004302:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	223d      	movs	r2, #61	@ 0x3d
 8004308:	2102      	movs	r1, #2
 800430a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2270      	movs	r2, #112	@ 0x70
 8004320:	4393      	bics	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	4313      	orrs	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a16      	ldr	r2, [pc, #88]	@ (8004394 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d00f      	beq.n	8004360 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	2380      	movs	r3, #128	@ 0x80
 8004346:	05db      	lsls	r3, r3, #23
 8004348:	429a      	cmp	r2, r3
 800434a:	d009      	beq.n	8004360 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a11      	ldr	r2, [pc, #68]	@ (8004398 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d004      	beq.n	8004360 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a10      	ldr	r2, [pc, #64]	@ (800439c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d10c      	bne.n	800437a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2280      	movs	r2, #128	@ 0x80
 8004364:	4393      	bics	r3, r2
 8004366:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	4313      	orrs	r3, r2
 8004370:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	223d      	movs	r2, #61	@ 0x3d
 800437e:	2101      	movs	r1, #1
 8004380:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	223c      	movs	r2, #60	@ 0x3c
 8004386:	2100      	movs	r1, #0
 8004388:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	0018      	movs	r0, r3
 800438e:	46bd      	mov	sp, r7
 8004390:	b004      	add	sp, #16
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40012c00 	.word	0x40012c00
 8004398:	40000400 	.word	0x40000400
 800439c:	40014000 	.word	0x40014000

080043a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e044      	b.n	800443c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d107      	bne.n	80043ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2278      	movs	r2, #120	@ 0x78
 80043be:	2100      	movs	r1, #0
 80043c0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	0018      	movs	r0, r3
 80043c6:	f7fe fbc1 	bl	8002b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2224      	movs	r2, #36	@ 0x24
 80043ce:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2101      	movs	r1, #1
 80043dc:	438a      	bics	r2, r1
 80043de:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d003      	beq.n	80043f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	0018      	movs	r0, r3
 80043ec:	f000 fae0 	bl	80049b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	0018      	movs	r0, r3
 80043f4:	f000 f99c 	bl	8004730 <UART_SetConfig>
 80043f8:	0003      	movs	r3, r0
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d101      	bne.n	8004402 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e01c      	b.n	800443c <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	490d      	ldr	r1, [pc, #52]	@ (8004444 <HAL_UART_Init+0xa4>)
 800440e:	400a      	ands	r2, r1
 8004410:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	212a      	movs	r1, #42	@ 0x2a
 800441e:	438a      	bics	r2, r1
 8004420:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2101      	movs	r1, #1
 800442e:	430a      	orrs	r2, r1
 8004430:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	0018      	movs	r0, r3
 8004436:	f000 fb6f 	bl	8004b18 <UART_CheckIdleState>
 800443a:	0003      	movs	r3, r0
}
 800443c:	0018      	movs	r0, r3
 800443e:	46bd      	mov	sp, r7
 8004440:	b002      	add	sp, #8
 8004442:	bd80      	pop	{r7, pc}
 8004444:	ffffb7ff 	.word	0xffffb7ff

08004448 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b08a      	sub	sp, #40	@ 0x28
 800444c:	af02      	add	r7, sp, #8
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	603b      	str	r3, [r7, #0]
 8004454:	1dbb      	adds	r3, r7, #6
 8004456:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800445c:	2b20      	cmp	r3, #32
 800445e:	d000      	beq.n	8004462 <HAL_UART_Transmit+0x1a>
 8004460:	e08c      	b.n	800457c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d003      	beq.n	8004470 <HAL_UART_Transmit+0x28>
 8004468:	1dbb      	adds	r3, r7, #6
 800446a:	881b      	ldrh	r3, [r3, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e084      	b.n	800457e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	2380      	movs	r3, #128	@ 0x80
 800447a:	015b      	lsls	r3, r3, #5
 800447c:	429a      	cmp	r2, r3
 800447e:	d109      	bne.n	8004494 <HAL_UART_Transmit+0x4c>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d105      	bne.n	8004494 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	2201      	movs	r2, #1
 800448c:	4013      	ands	r3, r2
 800448e:	d001      	beq.n	8004494 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e074      	b.n	800457e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2284      	movs	r2, #132	@ 0x84
 8004498:	2100      	movs	r1, #0
 800449a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2221      	movs	r2, #33	@ 0x21
 80044a0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044a2:	f7fe fcff 	bl	8002ea4 <HAL_GetTick>
 80044a6:	0003      	movs	r3, r0
 80044a8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	1dba      	adds	r2, r7, #6
 80044ae:	2150      	movs	r1, #80	@ 0x50
 80044b0:	8812      	ldrh	r2, [r2, #0]
 80044b2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	1dba      	adds	r2, r7, #6
 80044b8:	2152      	movs	r1, #82	@ 0x52
 80044ba:	8812      	ldrh	r2, [r2, #0]
 80044bc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	689a      	ldr	r2, [r3, #8]
 80044c2:	2380      	movs	r3, #128	@ 0x80
 80044c4:	015b      	lsls	r3, r3, #5
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d108      	bne.n	80044dc <HAL_UART_Transmit+0x94>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d104      	bne.n	80044dc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80044d2:	2300      	movs	r3, #0
 80044d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	61bb      	str	r3, [r7, #24]
 80044da:	e003      	b.n	80044e4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044e0:	2300      	movs	r3, #0
 80044e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80044e4:	e02f      	b.n	8004546 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	0013      	movs	r3, r2
 80044f0:	2200      	movs	r2, #0
 80044f2:	2180      	movs	r1, #128	@ 0x80
 80044f4:	f000 fbb8 	bl	8004c68 <UART_WaitOnFlagUntilTimeout>
 80044f8:	1e03      	subs	r3, r0, #0
 80044fa:	d004      	beq.n	8004506 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2220      	movs	r2, #32
 8004500:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e03b      	b.n	800457e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10b      	bne.n	8004524 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	881a      	ldrh	r2, [r3, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	05d2      	lsls	r2, r2, #23
 8004516:	0dd2      	lsrs	r2, r2, #23
 8004518:	b292      	uxth	r2, r2
 800451a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	3302      	adds	r3, #2
 8004520:	61bb      	str	r3, [r7, #24]
 8004522:	e007      	b.n	8004534 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	781a      	ldrb	r2, [r3, #0]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	3301      	adds	r3, #1
 8004532:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2252      	movs	r2, #82	@ 0x52
 8004538:	5a9b      	ldrh	r3, [r3, r2]
 800453a:	b29b      	uxth	r3, r3
 800453c:	3b01      	subs	r3, #1
 800453e:	b299      	uxth	r1, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2252      	movs	r2, #82	@ 0x52
 8004544:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2252      	movs	r2, #82	@ 0x52
 800454a:	5a9b      	ldrh	r3, [r3, r2]
 800454c:	b29b      	uxth	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1c9      	bne.n	80044e6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	0013      	movs	r3, r2
 800455c:	2200      	movs	r2, #0
 800455e:	2140      	movs	r1, #64	@ 0x40
 8004560:	f000 fb82 	bl	8004c68 <UART_WaitOnFlagUntilTimeout>
 8004564:	1e03      	subs	r3, r0, #0
 8004566:	d004      	beq.n	8004572 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2220      	movs	r2, #32
 800456c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e005      	b.n	800457e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2220      	movs	r2, #32
 8004576:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004578:	2300      	movs	r3, #0
 800457a:	e000      	b.n	800457e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800457c:	2302      	movs	r3, #2
  }
}
 800457e:	0018      	movs	r0, r3
 8004580:	46bd      	mov	sp, r7
 8004582:	b008      	add	sp, #32
 8004584:	bd80      	pop	{r7, pc}
	...

08004588 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b08a      	sub	sp, #40	@ 0x28
 800458c:	af02      	add	r7, sp, #8
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	603b      	str	r3, [r7, #0]
 8004594:	1dbb      	adds	r3, r7, #6
 8004596:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2280      	movs	r2, #128	@ 0x80
 800459c:	589b      	ldr	r3, [r3, r2]
 800459e:	2b20      	cmp	r3, #32
 80045a0:	d000      	beq.n	80045a4 <HAL_UART_Receive+0x1c>
 80045a2:	e0bd      	b.n	8004720 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_UART_Receive+0x2a>
 80045aa:	1dbb      	adds	r3, r7, #6
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e0b5      	b.n	8004722 <HAL_UART_Receive+0x19a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	2380      	movs	r3, #128	@ 0x80
 80045bc:	015b      	lsls	r3, r3, #5
 80045be:	429a      	cmp	r2, r3
 80045c0:	d109      	bne.n	80045d6 <HAL_UART_Receive+0x4e>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d105      	bne.n	80045d6 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2201      	movs	r2, #1
 80045ce:	4013      	ands	r3, r2
 80045d0:	d001      	beq.n	80045d6 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e0a5      	b.n	8004722 <HAL_UART_Receive+0x19a>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2284      	movs	r2, #132	@ 0x84
 80045da:	2100      	movs	r1, #0
 80045dc:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2280      	movs	r2, #128	@ 0x80
 80045e2:	2122      	movs	r1, #34	@ 0x22
 80045e4:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045ec:	f7fe fc5a 	bl	8002ea4 <HAL_GetTick>
 80045f0:	0003      	movs	r3, r0
 80045f2:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	1dba      	adds	r2, r7, #6
 80045f8:	2158      	movs	r1, #88	@ 0x58
 80045fa:	8812      	ldrh	r2, [r2, #0]
 80045fc:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	1dba      	adds	r2, r7, #6
 8004602:	215a      	movs	r1, #90	@ 0x5a
 8004604:	8812      	ldrh	r2, [r2, #0]
 8004606:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	2380      	movs	r3, #128	@ 0x80
 800460e:	015b      	lsls	r3, r3, #5
 8004610:	429a      	cmp	r2, r3
 8004612:	d10d      	bne.n	8004630 <HAL_UART_Receive+0xa8>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d104      	bne.n	8004626 <HAL_UART_Receive+0x9e>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	225c      	movs	r2, #92	@ 0x5c
 8004620:	4942      	ldr	r1, [pc, #264]	@ (800472c <HAL_UART_Receive+0x1a4>)
 8004622:	5299      	strh	r1, [r3, r2]
 8004624:	e01a      	b.n	800465c <HAL_UART_Receive+0xd4>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	225c      	movs	r2, #92	@ 0x5c
 800462a:	21ff      	movs	r1, #255	@ 0xff
 800462c:	5299      	strh	r1, [r3, r2]
 800462e:	e015      	b.n	800465c <HAL_UART_Receive+0xd4>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10d      	bne.n	8004654 <HAL_UART_Receive+0xcc>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d104      	bne.n	800464a <HAL_UART_Receive+0xc2>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	225c      	movs	r2, #92	@ 0x5c
 8004644:	21ff      	movs	r1, #255	@ 0xff
 8004646:	5299      	strh	r1, [r3, r2]
 8004648:	e008      	b.n	800465c <HAL_UART_Receive+0xd4>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	225c      	movs	r2, #92	@ 0x5c
 800464e:	217f      	movs	r1, #127	@ 0x7f
 8004650:	5299      	strh	r1, [r3, r2]
 8004652:	e003      	b.n	800465c <HAL_UART_Receive+0xd4>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	225c      	movs	r2, #92	@ 0x5c
 8004658:	2100      	movs	r1, #0
 800465a:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800465c:	2312      	movs	r3, #18
 800465e:	18fb      	adds	r3, r7, r3
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	215c      	movs	r1, #92	@ 0x5c
 8004664:	5a52      	ldrh	r2, [r2, r1]
 8004666:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	689a      	ldr	r2, [r3, #8]
 800466c:	2380      	movs	r3, #128	@ 0x80
 800466e:	015b      	lsls	r3, r3, #5
 8004670:	429a      	cmp	r2, r3
 8004672:	d108      	bne.n	8004686 <HAL_UART_Receive+0xfe>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d104      	bne.n	8004686 <HAL_UART_Receive+0xfe>
    {
      pdata8bits  = NULL;
 800467c:	2300      	movs	r3, #0
 800467e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	61bb      	str	r3, [r7, #24]
 8004684:	e003      	b.n	800468e <HAL_UART_Receive+0x106>
    }
    else
    {
      pdata8bits  = pData;
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800468a:	2300      	movs	r3, #0
 800468c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800468e:	e03b      	b.n	8004708 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	0013      	movs	r3, r2
 800469a:	2200      	movs	r2, #0
 800469c:	2120      	movs	r1, #32
 800469e:	f000 fae3 	bl	8004c68 <UART_WaitOnFlagUntilTimeout>
 80046a2:	1e03      	subs	r3, r0, #0
 80046a4:	d005      	beq.n	80046b2 <HAL_UART_Receive+0x12a>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2280      	movs	r2, #128	@ 0x80
 80046aa:	2120      	movs	r1, #32
 80046ac:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e037      	b.n	8004722 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10e      	bne.n	80046d6 <HAL_UART_Receive+0x14e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80046be:	b29b      	uxth	r3, r3
 80046c0:	2212      	movs	r2, #18
 80046c2:	18ba      	adds	r2, r7, r2
 80046c4:	8812      	ldrh	r2, [r2, #0]
 80046c6:	4013      	ands	r3, r2
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	3302      	adds	r3, #2
 80046d2:	61bb      	str	r3, [r7, #24]
 80046d4:	e00f      	b.n	80046f6 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80046dc:	b29b      	uxth	r3, r3
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2212      	movs	r2, #18
 80046e2:	18ba      	adds	r2, r7, r2
 80046e4:	8812      	ldrh	r2, [r2, #0]
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	4013      	ands	r3, r2
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	3301      	adds	r3, #1
 80046f4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	225a      	movs	r2, #90	@ 0x5a
 80046fa:	5a9b      	ldrh	r3, [r3, r2]
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	3b01      	subs	r3, #1
 8004700:	b299      	uxth	r1, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	225a      	movs	r2, #90	@ 0x5a
 8004706:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	225a      	movs	r2, #90	@ 0x5a
 800470c:	5a9b      	ldrh	r3, [r3, r2]
 800470e:	b29b      	uxth	r3, r3
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1bd      	bne.n	8004690 <HAL_UART_Receive+0x108>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2280      	movs	r2, #128	@ 0x80
 8004718:	2120      	movs	r1, #32
 800471a:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800471c:	2300      	movs	r3, #0
 800471e:	e000      	b.n	8004722 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004720:	2302      	movs	r3, #2
  }
}
 8004722:	0018      	movs	r0, r3
 8004724:	46bd      	mov	sp, r7
 8004726:	b008      	add	sp, #32
 8004728:	bd80      	pop	{r7, pc}
 800472a:	46c0      	nop			@ (mov r8, r8)
 800472c:	000001ff 	.word	0x000001ff

08004730 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b088      	sub	sp, #32
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004738:	231e      	movs	r3, #30
 800473a:	18fb      	adds	r3, r7, r3
 800473c:	2200      	movs	r2, #0
 800473e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	431a      	orrs	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	4313      	orrs	r3, r2
 8004756:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a8d      	ldr	r2, [pc, #564]	@ (8004994 <UART_SetConfig+0x264>)
 8004760:	4013      	ands	r3, r2
 8004762:	0019      	movs	r1, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	430a      	orrs	r2, r1
 800476c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	4a88      	ldr	r2, [pc, #544]	@ (8004998 <UART_SetConfig+0x268>)
 8004776:	4013      	ands	r3, r2
 8004778:	0019      	movs	r1, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68da      	ldr	r2, [r3, #12]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	430a      	orrs	r2, r1
 8004784:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a1b      	ldr	r3, [r3, #32]
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	4313      	orrs	r3, r2
 8004794:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	4a7f      	ldr	r2, [pc, #508]	@ (800499c <UART_SetConfig+0x26c>)
 800479e:	4013      	ands	r3, r2
 80047a0:	0019      	movs	r1, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a7b      	ldr	r2, [pc, #492]	@ (80049a0 <UART_SetConfig+0x270>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d127      	bne.n	8004806 <UART_SetConfig+0xd6>
 80047b6:	4b7b      	ldr	r3, [pc, #492]	@ (80049a4 <UART_SetConfig+0x274>)
 80047b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ba:	2203      	movs	r2, #3
 80047bc:	4013      	ands	r3, r2
 80047be:	2b03      	cmp	r3, #3
 80047c0:	d00d      	beq.n	80047de <UART_SetConfig+0xae>
 80047c2:	d81b      	bhi.n	80047fc <UART_SetConfig+0xcc>
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d014      	beq.n	80047f2 <UART_SetConfig+0xc2>
 80047c8:	d818      	bhi.n	80047fc <UART_SetConfig+0xcc>
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d002      	beq.n	80047d4 <UART_SetConfig+0xa4>
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d00a      	beq.n	80047e8 <UART_SetConfig+0xb8>
 80047d2:	e013      	b.n	80047fc <UART_SetConfig+0xcc>
 80047d4:	231f      	movs	r3, #31
 80047d6:	18fb      	adds	r3, r7, r3
 80047d8:	2200      	movs	r2, #0
 80047da:	701a      	strb	r2, [r3, #0]
 80047dc:	e021      	b.n	8004822 <UART_SetConfig+0xf2>
 80047de:	231f      	movs	r3, #31
 80047e0:	18fb      	adds	r3, r7, r3
 80047e2:	2202      	movs	r2, #2
 80047e4:	701a      	strb	r2, [r3, #0]
 80047e6:	e01c      	b.n	8004822 <UART_SetConfig+0xf2>
 80047e8:	231f      	movs	r3, #31
 80047ea:	18fb      	adds	r3, r7, r3
 80047ec:	2204      	movs	r2, #4
 80047ee:	701a      	strb	r2, [r3, #0]
 80047f0:	e017      	b.n	8004822 <UART_SetConfig+0xf2>
 80047f2:	231f      	movs	r3, #31
 80047f4:	18fb      	adds	r3, r7, r3
 80047f6:	2208      	movs	r2, #8
 80047f8:	701a      	strb	r2, [r3, #0]
 80047fa:	e012      	b.n	8004822 <UART_SetConfig+0xf2>
 80047fc:	231f      	movs	r3, #31
 80047fe:	18fb      	adds	r3, r7, r3
 8004800:	2210      	movs	r2, #16
 8004802:	701a      	strb	r2, [r3, #0]
 8004804:	e00d      	b.n	8004822 <UART_SetConfig+0xf2>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a67      	ldr	r2, [pc, #412]	@ (80049a8 <UART_SetConfig+0x278>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d104      	bne.n	800481a <UART_SetConfig+0xea>
 8004810:	231f      	movs	r3, #31
 8004812:	18fb      	adds	r3, r7, r3
 8004814:	2200      	movs	r2, #0
 8004816:	701a      	strb	r2, [r3, #0]
 8004818:	e003      	b.n	8004822 <UART_SetConfig+0xf2>
 800481a:	231f      	movs	r3, #31
 800481c:	18fb      	adds	r3, r7, r3
 800481e:	2210      	movs	r2, #16
 8004820:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	69da      	ldr	r2, [r3, #28]
 8004826:	2380      	movs	r3, #128	@ 0x80
 8004828:	021b      	lsls	r3, r3, #8
 800482a:	429a      	cmp	r2, r3
 800482c:	d15c      	bne.n	80048e8 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800482e:	231f      	movs	r3, #31
 8004830:	18fb      	adds	r3, r7, r3
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	2b08      	cmp	r3, #8
 8004836:	d015      	beq.n	8004864 <UART_SetConfig+0x134>
 8004838:	dc18      	bgt.n	800486c <UART_SetConfig+0x13c>
 800483a:	2b04      	cmp	r3, #4
 800483c:	d00d      	beq.n	800485a <UART_SetConfig+0x12a>
 800483e:	dc15      	bgt.n	800486c <UART_SetConfig+0x13c>
 8004840:	2b00      	cmp	r3, #0
 8004842:	d002      	beq.n	800484a <UART_SetConfig+0x11a>
 8004844:	2b02      	cmp	r3, #2
 8004846:	d005      	beq.n	8004854 <UART_SetConfig+0x124>
 8004848:	e010      	b.n	800486c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800484a:	f7ff fc0d 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 800484e:	0003      	movs	r3, r0
 8004850:	61bb      	str	r3, [r7, #24]
        break;
 8004852:	e012      	b.n	800487a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004854:	4b55      	ldr	r3, [pc, #340]	@ (80049ac <UART_SetConfig+0x27c>)
 8004856:	61bb      	str	r3, [r7, #24]
        break;
 8004858:	e00f      	b.n	800487a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800485a:	f7ff fba5 	bl	8003fa8 <HAL_RCC_GetSysClockFreq>
 800485e:	0003      	movs	r3, r0
 8004860:	61bb      	str	r3, [r7, #24]
        break;
 8004862:	e00a      	b.n	800487a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004864:	2380      	movs	r3, #128	@ 0x80
 8004866:	021b      	lsls	r3, r3, #8
 8004868:	61bb      	str	r3, [r7, #24]
        break;
 800486a:	e006      	b.n	800487a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800486c:	2300      	movs	r3, #0
 800486e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004870:	231e      	movs	r3, #30
 8004872:	18fb      	adds	r3, r7, r3
 8004874:	2201      	movs	r2, #1
 8004876:	701a      	strb	r2, [r3, #0]
        break;
 8004878:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d100      	bne.n	8004882 <UART_SetConfig+0x152>
 8004880:	e07a      	b.n	8004978 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	005a      	lsls	r2, r3, #1
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	085b      	lsrs	r3, r3, #1
 800488c:	18d2      	adds	r2, r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	0019      	movs	r1, r3
 8004894:	0010      	movs	r0, r2
 8004896:	f7fb fc53 	bl	8000140 <__udivsi3>
 800489a:	0003      	movs	r3, r0
 800489c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	2b0f      	cmp	r3, #15
 80048a2:	d91c      	bls.n	80048de <UART_SetConfig+0x1ae>
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	2380      	movs	r3, #128	@ 0x80
 80048a8:	025b      	lsls	r3, r3, #9
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d217      	bcs.n	80048de <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	200e      	movs	r0, #14
 80048b4:	183b      	adds	r3, r7, r0
 80048b6:	210f      	movs	r1, #15
 80048b8:	438a      	bics	r2, r1
 80048ba:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	085b      	lsrs	r3, r3, #1
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	2207      	movs	r2, #7
 80048c4:	4013      	ands	r3, r2
 80048c6:	b299      	uxth	r1, r3
 80048c8:	183b      	adds	r3, r7, r0
 80048ca:	183a      	adds	r2, r7, r0
 80048cc:	8812      	ldrh	r2, [r2, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	183a      	adds	r2, r7, r0
 80048d8:	8812      	ldrh	r2, [r2, #0]
 80048da:	60da      	str	r2, [r3, #12]
 80048dc:	e04c      	b.n	8004978 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80048de:	231e      	movs	r3, #30
 80048e0:	18fb      	adds	r3, r7, r3
 80048e2:	2201      	movs	r2, #1
 80048e4:	701a      	strb	r2, [r3, #0]
 80048e6:	e047      	b.n	8004978 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048e8:	231f      	movs	r3, #31
 80048ea:	18fb      	adds	r3, r7, r3
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	2b08      	cmp	r3, #8
 80048f0:	d015      	beq.n	800491e <UART_SetConfig+0x1ee>
 80048f2:	dc18      	bgt.n	8004926 <UART_SetConfig+0x1f6>
 80048f4:	2b04      	cmp	r3, #4
 80048f6:	d00d      	beq.n	8004914 <UART_SetConfig+0x1e4>
 80048f8:	dc15      	bgt.n	8004926 <UART_SetConfig+0x1f6>
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d002      	beq.n	8004904 <UART_SetConfig+0x1d4>
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d005      	beq.n	800490e <UART_SetConfig+0x1de>
 8004902:	e010      	b.n	8004926 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004904:	f7ff fbb0 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 8004908:	0003      	movs	r3, r0
 800490a:	61bb      	str	r3, [r7, #24]
        break;
 800490c:	e012      	b.n	8004934 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800490e:	4b27      	ldr	r3, [pc, #156]	@ (80049ac <UART_SetConfig+0x27c>)
 8004910:	61bb      	str	r3, [r7, #24]
        break;
 8004912:	e00f      	b.n	8004934 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004914:	f7ff fb48 	bl	8003fa8 <HAL_RCC_GetSysClockFreq>
 8004918:	0003      	movs	r3, r0
 800491a:	61bb      	str	r3, [r7, #24]
        break;
 800491c:	e00a      	b.n	8004934 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800491e:	2380      	movs	r3, #128	@ 0x80
 8004920:	021b      	lsls	r3, r3, #8
 8004922:	61bb      	str	r3, [r7, #24]
        break;
 8004924:	e006      	b.n	8004934 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800492a:	231e      	movs	r3, #30
 800492c:	18fb      	adds	r3, r7, r3
 800492e:	2201      	movs	r2, #1
 8004930:	701a      	strb	r2, [r3, #0]
        break;
 8004932:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d01e      	beq.n	8004978 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	085a      	lsrs	r2, r3, #1
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	18d2      	adds	r2, r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	0019      	movs	r1, r3
 800494a:	0010      	movs	r0, r2
 800494c:	f7fb fbf8 	bl	8000140 <__udivsi3>
 8004950:	0003      	movs	r3, r0
 8004952:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	2b0f      	cmp	r3, #15
 8004958:	d90a      	bls.n	8004970 <UART_SetConfig+0x240>
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	2380      	movs	r3, #128	@ 0x80
 800495e:	025b      	lsls	r3, r3, #9
 8004960:	429a      	cmp	r2, r3
 8004962:	d205      	bcs.n	8004970 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	b29a      	uxth	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	60da      	str	r2, [r3, #12]
 800496e:	e003      	b.n	8004978 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004970:	231e      	movs	r3, #30
 8004972:	18fb      	adds	r3, r7, r3
 8004974:	2201      	movs	r2, #1
 8004976:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004984:	231e      	movs	r3, #30
 8004986:	18fb      	adds	r3, r7, r3
 8004988:	781b      	ldrb	r3, [r3, #0]
}
 800498a:	0018      	movs	r0, r3
 800498c:	46bd      	mov	sp, r7
 800498e:	b008      	add	sp, #32
 8004990:	bd80      	pop	{r7, pc}
 8004992:	46c0      	nop			@ (mov r8, r8)
 8004994:	ffff69f3 	.word	0xffff69f3
 8004998:	ffffcfff 	.word	0xffffcfff
 800499c:	fffff4ff 	.word	0xfffff4ff
 80049a0:	40013800 	.word	0x40013800
 80049a4:	40021000 	.word	0x40021000
 80049a8:	40004400 	.word	0x40004400
 80049ac:	007a1200 	.word	0x007a1200

080049b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049bc:	2208      	movs	r2, #8
 80049be:	4013      	ands	r3, r2
 80049c0:	d00b      	beq.n	80049da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	4a4a      	ldr	r2, [pc, #296]	@ (8004af4 <UART_AdvFeatureConfig+0x144>)
 80049ca:	4013      	ands	r3, r2
 80049cc:	0019      	movs	r1, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049de:	2201      	movs	r2, #1
 80049e0:	4013      	ands	r3, r2
 80049e2:	d00b      	beq.n	80049fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	4a43      	ldr	r2, [pc, #268]	@ (8004af8 <UART_AdvFeatureConfig+0x148>)
 80049ec:	4013      	ands	r3, r2
 80049ee:	0019      	movs	r1, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a00:	2202      	movs	r2, #2
 8004a02:	4013      	ands	r3, r2
 8004a04:	d00b      	beq.n	8004a1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	4a3b      	ldr	r2, [pc, #236]	@ (8004afc <UART_AdvFeatureConfig+0x14c>)
 8004a0e:	4013      	ands	r3, r2
 8004a10:	0019      	movs	r1, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a22:	2204      	movs	r2, #4
 8004a24:	4013      	ands	r3, r2
 8004a26:	d00b      	beq.n	8004a40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	4a34      	ldr	r2, [pc, #208]	@ (8004b00 <UART_AdvFeatureConfig+0x150>)
 8004a30:	4013      	ands	r3, r2
 8004a32:	0019      	movs	r1, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a44:	2210      	movs	r2, #16
 8004a46:	4013      	ands	r3, r2
 8004a48:	d00b      	beq.n	8004a62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	4a2c      	ldr	r2, [pc, #176]	@ (8004b04 <UART_AdvFeatureConfig+0x154>)
 8004a52:	4013      	ands	r3, r2
 8004a54:	0019      	movs	r1, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a66:	2220      	movs	r2, #32
 8004a68:	4013      	ands	r3, r2
 8004a6a:	d00b      	beq.n	8004a84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	4a25      	ldr	r2, [pc, #148]	@ (8004b08 <UART_AdvFeatureConfig+0x158>)
 8004a74:	4013      	ands	r3, r2
 8004a76:	0019      	movs	r1, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a88:	2240      	movs	r2, #64	@ 0x40
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	d01d      	beq.n	8004aca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	4a1d      	ldr	r2, [pc, #116]	@ (8004b0c <UART_AdvFeatureConfig+0x15c>)
 8004a96:	4013      	ands	r3, r2
 8004a98:	0019      	movs	r1, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004aaa:	2380      	movs	r3, #128	@ 0x80
 8004aac:	035b      	lsls	r3, r3, #13
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d10b      	bne.n	8004aca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	4a15      	ldr	r2, [pc, #84]	@ (8004b10 <UART_AdvFeatureConfig+0x160>)
 8004aba:	4013      	ands	r3, r2
 8004abc:	0019      	movs	r1, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ace:	2280      	movs	r2, #128	@ 0x80
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	d00b      	beq.n	8004aec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	4a0e      	ldr	r2, [pc, #56]	@ (8004b14 <UART_AdvFeatureConfig+0x164>)
 8004adc:	4013      	ands	r3, r2
 8004ade:	0019      	movs	r1, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	605a      	str	r2, [r3, #4]
  }
}
 8004aec:	46c0      	nop			@ (mov r8, r8)
 8004aee:	46bd      	mov	sp, r7
 8004af0:	b002      	add	sp, #8
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	ffff7fff 	.word	0xffff7fff
 8004af8:	fffdffff 	.word	0xfffdffff
 8004afc:	fffeffff 	.word	0xfffeffff
 8004b00:	fffbffff 	.word	0xfffbffff
 8004b04:	ffffefff 	.word	0xffffefff
 8004b08:	ffffdfff 	.word	0xffffdfff
 8004b0c:	ffefffff 	.word	0xffefffff
 8004b10:	ff9fffff 	.word	0xff9fffff
 8004b14:	fff7ffff 	.word	0xfff7ffff

08004b18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b092      	sub	sp, #72	@ 0x48
 8004b1c:	af02      	add	r7, sp, #8
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2284      	movs	r2, #132	@ 0x84
 8004b24:	2100      	movs	r1, #0
 8004b26:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b28:	f7fe f9bc 	bl	8002ea4 <HAL_GetTick>
 8004b2c:	0003      	movs	r3, r0
 8004b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2208      	movs	r2, #8
 8004b38:	4013      	ands	r3, r2
 8004b3a:	2b08      	cmp	r3, #8
 8004b3c:	d12c      	bne.n	8004b98 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b40:	2280      	movs	r2, #128	@ 0x80
 8004b42:	0391      	lsls	r1, r2, #14
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	4a46      	ldr	r2, [pc, #280]	@ (8004c60 <UART_CheckIdleState+0x148>)
 8004b48:	9200      	str	r2, [sp, #0]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f000 f88c 	bl	8004c68 <UART_WaitOnFlagUntilTimeout>
 8004b50:	1e03      	subs	r3, r0, #0
 8004b52:	d021      	beq.n	8004b98 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b54:	f3ef 8310 	mrs	r3, PRIMASK
 8004b58:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b5e:	2301      	movs	r3, #1
 8004b60:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b64:	f383 8810 	msr	PRIMASK, r3
}
 8004b68:	46c0      	nop			@ (mov r8, r8)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2180      	movs	r1, #128	@ 0x80
 8004b76:	438a      	bics	r2, r1
 8004b78:	601a      	str	r2, [r3, #0]
 8004b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b80:	f383 8810 	msr	PRIMASK, r3
}
 8004b84:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2278      	movs	r2, #120	@ 0x78
 8004b90:	2100      	movs	r1, #0
 8004b92:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e05f      	b.n	8004c58 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2204      	movs	r2, #4
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	d146      	bne.n	8004c34 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ba8:	2280      	movs	r2, #128	@ 0x80
 8004baa:	03d1      	lsls	r1, r2, #15
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	4a2c      	ldr	r2, [pc, #176]	@ (8004c60 <UART_CheckIdleState+0x148>)
 8004bb0:	9200      	str	r2, [sp, #0]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f000 f858 	bl	8004c68 <UART_WaitOnFlagUntilTimeout>
 8004bb8:	1e03      	subs	r3, r0, #0
 8004bba:	d03b      	beq.n	8004c34 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bbc:	f3ef 8310 	mrs	r3, PRIMASK
 8004bc0:	60fb      	str	r3, [r7, #12]
  return(result);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f383 8810 	msr	PRIMASK, r3
}
 8004bd0:	46c0      	nop			@ (mov r8, r8)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4921      	ldr	r1, [pc, #132]	@ (8004c64 <UART_CheckIdleState+0x14c>)
 8004bde:	400a      	ands	r2, r1
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004be4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f383 8810 	msr	PRIMASK, r3
}
 8004bec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bee:	f3ef 8310 	mrs	r3, PRIMASK
 8004bf2:	61bb      	str	r3, [r7, #24]
  return(result);
 8004bf4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bf6:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	f383 8810 	msr	PRIMASK, r3
}
 8004c02:	46c0      	nop			@ (mov r8, r8)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689a      	ldr	r2, [r3, #8]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2101      	movs	r1, #1
 8004c10:	438a      	bics	r2, r1
 8004c12:	609a      	str	r2, [r3, #8]
 8004c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c16:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c18:	6a3b      	ldr	r3, [r7, #32]
 8004c1a:	f383 8810 	msr	PRIMASK, r3
}
 8004c1e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2280      	movs	r2, #128	@ 0x80
 8004c24:	2120      	movs	r1, #32
 8004c26:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2278      	movs	r2, #120	@ 0x78
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e011      	b.n	8004c58 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2220      	movs	r2, #32
 8004c38:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2280      	movs	r2, #128	@ 0x80
 8004c3e:	2120      	movs	r1, #32
 8004c40:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2278      	movs	r2, #120	@ 0x78
 8004c52:	2100      	movs	r1, #0
 8004c54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	0018      	movs	r0, r3
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	b010      	add	sp, #64	@ 0x40
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	01ffffff 	.word	0x01ffffff
 8004c64:	fffffedf 	.word	0xfffffedf

08004c68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	603b      	str	r3, [r7, #0]
 8004c74:	1dfb      	adds	r3, r7, #7
 8004c76:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c78:	e051      	b.n	8004d1e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	d04e      	beq.n	8004d1e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c80:	f7fe f910 	bl	8002ea4 <HAL_GetTick>
 8004c84:	0002      	movs	r2, r0
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	69ba      	ldr	r2, [r7, #24]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d302      	bcc.n	8004c96 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e051      	b.n	8004d3e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2204      	movs	r2, #4
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	d03b      	beq.n	8004d1e <UART_WaitOnFlagUntilTimeout+0xb6>
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	2b80      	cmp	r3, #128	@ 0x80
 8004caa:	d038      	beq.n	8004d1e <UART_WaitOnFlagUntilTimeout+0xb6>
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	2b40      	cmp	r3, #64	@ 0x40
 8004cb0:	d035      	beq.n	8004d1e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	69db      	ldr	r3, [r3, #28]
 8004cb8:	2208      	movs	r2, #8
 8004cba:	4013      	ands	r3, r2
 8004cbc:	2b08      	cmp	r3, #8
 8004cbe:	d111      	bne.n	8004ce4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2208      	movs	r2, #8
 8004cc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	0018      	movs	r0, r3
 8004ccc:	f000 f83c 	bl	8004d48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2284      	movs	r2, #132	@ 0x84
 8004cd4:	2108      	movs	r1, #8
 8004cd6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2278      	movs	r2, #120	@ 0x78
 8004cdc:	2100      	movs	r1, #0
 8004cde:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e02c      	b.n	8004d3e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	69da      	ldr	r2, [r3, #28]
 8004cea:	2380      	movs	r3, #128	@ 0x80
 8004cec:	011b      	lsls	r3, r3, #4
 8004cee:	401a      	ands	r2, r3
 8004cf0:	2380      	movs	r3, #128	@ 0x80
 8004cf2:	011b      	lsls	r3, r3, #4
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d112      	bne.n	8004d1e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2280      	movs	r2, #128	@ 0x80
 8004cfe:	0112      	lsls	r2, r2, #4
 8004d00:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	0018      	movs	r0, r3
 8004d06:	f000 f81f 	bl	8004d48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2284      	movs	r2, #132	@ 0x84
 8004d0e:	2120      	movs	r1, #32
 8004d10:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2278      	movs	r2, #120	@ 0x78
 8004d16:	2100      	movs	r1, #0
 8004d18:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e00f      	b.n	8004d3e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	4013      	ands	r3, r2
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	425a      	negs	r2, r3
 8004d2e:	4153      	adcs	r3, r2
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	001a      	movs	r2, r3
 8004d34:	1dfb      	adds	r3, r7, #7
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d09e      	beq.n	8004c7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	0018      	movs	r0, r3
 8004d40:	46bd      	mov	sp, r7
 8004d42:	b004      	add	sp, #16
 8004d44:	bd80      	pop	{r7, pc}
	...

08004d48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b08e      	sub	sp, #56	@ 0x38
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d50:	f3ef 8310 	mrs	r3, PRIMASK
 8004d54:	617b      	str	r3, [r7, #20]
  return(result);
 8004d56:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d58:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	f383 8810 	msr	PRIMASK, r3
}
 8004d64:	46c0      	nop			@ (mov r8, r8)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4926      	ldr	r1, [pc, #152]	@ (8004e0c <UART_EndRxTransfer+0xc4>)
 8004d72:	400a      	ands	r2, r1
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	f383 8810 	msr	PRIMASK, r3
}
 8004d80:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d82:	f3ef 8310 	mrs	r3, PRIMASK
 8004d86:	623b      	str	r3, [r7, #32]
  return(result);
 8004d88:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d92:	f383 8810 	msr	PRIMASK, r3
}
 8004d96:	46c0      	nop			@ (mov r8, r8)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689a      	ldr	r2, [r3, #8]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2101      	movs	r1, #1
 8004da4:	438a      	bics	r2, r1
 8004da6:	609a      	str	r2, [r3, #8]
 8004da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004daa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dae:	f383 8810 	msr	PRIMASK, r3
}
 8004db2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d118      	bne.n	8004dee <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dbc:	f3ef 8310 	mrs	r3, PRIMASK
 8004dc0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004dc2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f383 8810 	msr	PRIMASK, r3
}
 8004dd0:	46c0      	nop			@ (mov r8, r8)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2110      	movs	r1, #16
 8004dde:	438a      	bics	r2, r1
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004de4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	f383 8810 	msr	PRIMASK, r3
}
 8004dec:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2280      	movs	r2, #128	@ 0x80
 8004df2:	2120      	movs	r1, #32
 8004df4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004e02:	46c0      	nop			@ (mov r8, r8)
 8004e04:	46bd      	mov	sp, r7
 8004e06:	b00e      	add	sp, #56	@ 0x38
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	46c0      	nop			@ (mov r8, r8)
 8004e0c:	fffffedf 	.word	0xfffffedf

08004e10 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	0002      	movs	r2, r0
 8004e18:	1dbb      	adds	r3, r7, #6
 8004e1a:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004e20:	1dbb      	adds	r3, r7, #6
 8004e22:	2200      	movs	r2, #0
 8004e24:	5e9b      	ldrsh	r3, [r3, r2]
 8004e26:	2b84      	cmp	r3, #132	@ 0x84
 8004e28:	d006      	beq.n	8004e38 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8004e2a:	1dbb      	adds	r3, r7, #6
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	5e9a      	ldrsh	r2, [r3, r2]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	18d3      	adds	r3, r2, r3
 8004e34:	3303      	adds	r3, #3
 8004e36:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004e38:	68fb      	ldr	r3, [r7, #12]
}
 8004e3a:	0018      	movs	r0, r3
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	b004      	add	sp, #16
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004e46:	f000 faa5 	bl	8005394 <vTaskStartScheduler>
  
  return osOK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	0018      	movs	r0, r3
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004e52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e54:	b089      	sub	sp, #36	@ 0x24
 8004e56:	af04      	add	r7, sp, #16
 8004e58:	6078      	str	r0, [r7, #4]
 8004e5a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d020      	beq.n	8004ea6 <osThreadCreate+0x54>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d01c      	beq.n	8004ea6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685c      	ldr	r4, [r3, #4]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	691e      	ldr	r6, [r3, #16]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2208      	movs	r2, #8
 8004e7c:	5e9b      	ldrsh	r3, [r3, r2]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e7e:	0018      	movs	r0, r3
 8004e80:	f7ff ffc6 	bl	8004e10 <makeFreeRtosPriority>
              thread_def->buffer, thread_def->controlblock);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	695a      	ldr	r2, [r3, #20]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e8c:	6839      	ldr	r1, [r7, #0]
 8004e8e:	9302      	str	r3, [sp, #8]
 8004e90:	9201      	str	r2, [sp, #4]
 8004e92:	9000      	str	r0, [sp, #0]
 8004e94:	000b      	movs	r3, r1
 8004e96:	0032      	movs	r2, r6
 8004e98:	0029      	movs	r1, r5
 8004e9a:	0020      	movs	r0, r4
 8004e9c:	f000 f8e3 	bl	8005066 <xTaskCreateStatic>
 8004ea0:	0003      	movs	r3, r0
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	e01d      	b.n	8004ee2 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685c      	ldr	r4, [r3, #4]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004eb2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2208      	movs	r2, #8
 8004eb8:	5e9b      	ldrsh	r3, [r3, r2]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004eba:	0018      	movs	r0, r3
 8004ebc:	f7ff ffa8 	bl	8004e10 <makeFreeRtosPriority>
 8004ec0:	0001      	movs	r1, r0
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	230c      	movs	r3, #12
 8004ec6:	18fb      	adds	r3, r7, r3
 8004ec8:	9301      	str	r3, [sp, #4]
 8004eca:	9100      	str	r1, [sp, #0]
 8004ecc:	0013      	movs	r3, r2
 8004ece:	0032      	movs	r2, r6
 8004ed0:	0029      	movs	r1, r5
 8004ed2:	0020      	movs	r0, r4
 8004ed4:	f000 f90d 	bl	80050f2 <xTaskCreate>
 8004ed8:	0003      	movs	r3, r0
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d001      	beq.n	8004ee2 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	e000      	b.n	8004ee4 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
}
 8004ee4:	0018      	movs	r0, r3
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	b005      	add	sp, #20
 8004eea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004eec <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <osDelay+0x16>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	e000      	b.n	8004f04 <osDelay+0x18>
 8004f02:	2301      	movs	r3, #1
 8004f04:	0018      	movs	r0, r3
 8004f06:	f000 fa1f 	bl	8005348 <vTaskDelay>
  
  return osOK;
 8004f0a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004f0c:	0018      	movs	r0, r3
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	b004      	add	sp, #16
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	3308      	adds	r3, #8
 8004f20:	001a      	movs	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	4252      	negs	r2, r2
 8004f2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	3308      	adds	r3, #8
 8004f32:	001a      	movs	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	3308      	adds	r3, #8
 8004f3c:	001a      	movs	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f48:	46c0      	nop			@ (mov r8, r8)
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	b002      	add	sp, #8
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f5e:	46c0      	nop			@ (mov r8, r8)
 8004f60:	46bd      	mov	sp, r7
 8004f62:	b002      	add	sp, #8
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b084      	sub	sp, #16
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
 8004f6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	689a      	ldr	r2, [r3, #8]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	1c5a      	adds	r2, r3, #1
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	601a      	str	r2, [r3, #0]
}
 8004fa2:	46c0      	nop			@ (mov r8, r8)
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	b004      	add	sp, #16
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b084      	sub	sp, #16
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
 8004fb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	d103      	bne.n	8004fc8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	60fb      	str	r3, [r7, #12]
 8004fc6:	e00c      	b.n	8004fe2 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	3308      	adds	r3, #8
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	e002      	b.n	8004fd6 <vListInsert+0x2c>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	60fb      	str	r3, [r7, #12]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d2f6      	bcs.n	8004fd0 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	685a      	ldr	r2, [r3, #4]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	1c5a      	adds	r2, r3, #1
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	601a      	str	r2, [r3, #0]
}
 800500e:	46c0      	nop			@ (mov r8, r8)
 8005010:	46bd      	mov	sp, r7
 8005012:	b004      	add	sp, #16
 8005014:	bd80      	pop	{r7, pc}

08005016 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b084      	sub	sp, #16
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6892      	ldr	r2, [r2, #8]
 800502c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	6852      	ldr	r2, [r2, #4]
 8005036:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	429a      	cmp	r2, r3
 8005040:	d103      	bne.n	800504a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	689a      	ldr	r2, [r3, #8]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	1e5a      	subs	r2, r3, #1
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
}
 800505e:	0018      	movs	r0, r3
 8005060:	46bd      	mov	sp, r7
 8005062:	b004      	add	sp, #16
 8005064:	bd80      	pop	{r7, pc}

08005066 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005066:	b590      	push	{r4, r7, lr}
 8005068:	b08d      	sub	sp, #52	@ 0x34
 800506a:	af04      	add	r7, sp, #16
 800506c:	60f8      	str	r0, [r7, #12]
 800506e:	60b9      	str	r1, [r7, #8]
 8005070:	607a      	str	r2, [r7, #4]
 8005072:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005076:	2b00      	cmp	r3, #0
 8005078:	d102      	bne.n	8005080 <xTaskCreateStatic+0x1a>
 800507a:	b672      	cpsid	i
 800507c:	46c0      	nop			@ (mov r8, r8)
 800507e:	e7fd      	b.n	800507c <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8005080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005082:	2b00      	cmp	r3, #0
 8005084:	d102      	bne.n	800508c <xTaskCreateStatic+0x26>
 8005086:	b672      	cpsid	i
 8005088:	46c0      	nop			@ (mov r8, r8)
 800508a:	e7fd      	b.n	8005088 <xTaskCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800508c:	2354      	movs	r3, #84	@ 0x54
 800508e:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	2b54      	cmp	r3, #84	@ 0x54
 8005094:	d002      	beq.n	800509c <xTaskCreateStatic+0x36>
 8005096:	b672      	cpsid	i
 8005098:	46c0      	nop			@ (mov r8, r8)
 800509a:	e7fd      	b.n	8005098 <xTaskCreateStatic+0x32>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800509c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d020      	beq.n	80050e4 <xTaskCreateStatic+0x7e>
 80050a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d01d      	beq.n	80050e4 <xTaskCreateStatic+0x7e>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050aa:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80050b0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	2251      	movs	r2, #81	@ 0x51
 80050b6:	2102      	movs	r1, #2
 80050b8:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80050ba:	683c      	ldr	r4, [r7, #0]
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	68b9      	ldr	r1, [r7, #8]
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	2300      	movs	r3, #0
 80050c4:	9303      	str	r3, [sp, #12]
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	9302      	str	r3, [sp, #8]
 80050ca:	2318      	movs	r3, #24
 80050cc:	18fb      	adds	r3, r7, r3
 80050ce:	9301      	str	r3, [sp, #4]
 80050d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	0023      	movs	r3, r4
 80050d6:	f000 f859 	bl	800518c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	0018      	movs	r0, r3
 80050de:	f000 f8cf 	bl	8005280 <prvAddNewTaskToReadyList>
 80050e2:	e001      	b.n	80050e8 <xTaskCreateStatic+0x82>
		}
		else
		{
			xReturn = NULL;
 80050e4:	2300      	movs	r3, #0
 80050e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80050e8:	69bb      	ldr	r3, [r7, #24]
	}
 80050ea:	0018      	movs	r0, r3
 80050ec:	46bd      	mov	sp, r7
 80050ee:	b009      	add	sp, #36	@ 0x24
 80050f0:	bd90      	pop	{r4, r7, pc}

080050f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80050f2:	b590      	push	{r4, r7, lr}
 80050f4:	b08d      	sub	sp, #52	@ 0x34
 80050f6:	af04      	add	r7, sp, #16
 80050f8:	60f8      	str	r0, [r7, #12]
 80050fa:	60b9      	str	r1, [r7, #8]
 80050fc:	603b      	str	r3, [r7, #0]
 80050fe:	1dbb      	adds	r3, r7, #6
 8005100:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005102:	1dbb      	adds	r3, r7, #6
 8005104:	881b      	ldrh	r3, [r3, #0]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	0018      	movs	r0, r3
 800510a:	f000 fda1 	bl	8005c50 <pvPortMalloc>
 800510e:	0003      	movs	r3, r0
 8005110:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d010      	beq.n	800513a <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005118:	2054      	movs	r0, #84	@ 0x54
 800511a:	f000 fd99 	bl	8005c50 <pvPortMalloc>
 800511e:	0003      	movs	r3, r0
 8005120:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d003      	beq.n	8005130 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	631a      	str	r2, [r3, #48]	@ 0x30
 800512e:	e006      	b.n	800513e <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	0018      	movs	r0, r3
 8005134:	f000 fe34 	bl	8005da0 <vPortFree>
 8005138:	e001      	b.n	800513e <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800513a:	2300      	movs	r3, #0
 800513c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d01a      	beq.n	800517a <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	2251      	movs	r2, #81	@ 0x51
 8005148:	2100      	movs	r1, #0
 800514a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800514c:	1dbb      	adds	r3, r7, #6
 800514e:	881a      	ldrh	r2, [r3, #0]
 8005150:	683c      	ldr	r4, [r7, #0]
 8005152:	68b9      	ldr	r1, [r7, #8]
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	2300      	movs	r3, #0
 8005158:	9303      	str	r3, [sp, #12]
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	9302      	str	r3, [sp, #8]
 800515e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005160:	9301      	str	r3, [sp, #4]
 8005162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	0023      	movs	r3, r4
 8005168:	f000 f810 	bl	800518c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	0018      	movs	r0, r3
 8005170:	f000 f886 	bl	8005280 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005174:	2301      	movs	r3, #1
 8005176:	61bb      	str	r3, [r7, #24]
 8005178:	e002      	b.n	8005180 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800517a:	2301      	movs	r3, #1
 800517c:	425b      	negs	r3, r3
 800517e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005180:	69bb      	ldr	r3, [r7, #24]
	}
 8005182:	0018      	movs	r0, r3
 8005184:	46bd      	mov	sp, r7
 8005186:	b009      	add	sp, #36	@ 0x24
 8005188:	bd90      	pop	{r4, r7, pc}
	...

0800518c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
 8005198:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800519a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800519c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4936      	ldr	r1, [pc, #216]	@ (800527c <prvInitialiseNewTask+0xf0>)
 80051a2:	468c      	mov	ip, r1
 80051a4:	4463      	add	r3, ip
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	18d3      	adds	r3, r2, r3
 80051aa:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	2207      	movs	r2, #7
 80051b0:	4393      	bics	r3, r2
 80051b2:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	2207      	movs	r2, #7
 80051b8:	4013      	ands	r3, r2
 80051ba:	d002      	beq.n	80051c2 <prvInitialiseNewTask+0x36>
 80051bc:	b672      	cpsid	i
 80051be:	46c0      	nop			@ (mov r8, r8)
 80051c0:	e7fd      	b.n	80051be <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051c2:	2300      	movs	r3, #0
 80051c4:	617b      	str	r3, [r7, #20]
 80051c6:	e013      	b.n	80051f0 <prvInitialiseNewTask+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	18d3      	adds	r3, r2, r3
 80051ce:	7818      	ldrb	r0, [r3, #0]
 80051d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051d2:	2134      	movs	r1, #52	@ 0x34
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	18d3      	adds	r3, r2, r3
 80051d8:	185b      	adds	r3, r3, r1
 80051da:	1c02      	adds	r2, r0, #0
 80051dc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	18d3      	adds	r3, r2, r3
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d006      	beq.n	80051f8 <prvInitialiseNewTask+0x6c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	3301      	adds	r3, #1
 80051ee:	617b      	str	r3, [r7, #20]
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	2b0f      	cmp	r3, #15
 80051f4:	d9e8      	bls.n	80051c8 <prvInitialiseNewTask+0x3c>
 80051f6:	e000      	b.n	80051fa <prvInitialiseNewTask+0x6e>
		{
			break;
 80051f8:	46c0      	nop			@ (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80051fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051fc:	2243      	movs	r2, #67	@ 0x43
 80051fe:	2100      	movs	r1, #0
 8005200:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005202:	6a3b      	ldr	r3, [r7, #32]
 8005204:	2b06      	cmp	r3, #6
 8005206:	d901      	bls.n	800520c <prvInitialiseNewTask+0x80>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005208:	2306      	movs	r3, #6
 800520a:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800520c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800520e:	6a3a      	ldr	r2, [r7, #32]
 8005210:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005214:	6a3a      	ldr	r2, [r7, #32]
 8005216:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800521a:	2200      	movs	r2, #0
 800521c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800521e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005220:	3304      	adds	r3, #4
 8005222:	0018      	movs	r0, r3
 8005224:	f7ff fe94 	bl	8004f50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800522a:	3318      	adds	r3, #24
 800522c:	0018      	movs	r0, r3
 800522e:	f7ff fe8f 	bl	8004f50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005234:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005236:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005238:	6a3b      	ldr	r3, [r7, #32]
 800523a:	2207      	movs	r2, #7
 800523c:	1ad2      	subs	r2, r2, r3
 800523e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005240:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005244:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005246:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524a:	2200      	movs	r2, #0
 800524c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800524e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005250:	2250      	movs	r2, #80	@ 0x50
 8005252:	2100      	movs	r1, #0
 8005254:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	68f9      	ldr	r1, [r7, #12]
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	0018      	movs	r0, r3
 800525e:	f000 fbc7 	bl	80059f0 <pxPortInitialiseStack>
 8005262:	0002      	movs	r2, r0
 8005264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005266:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800526a:	2b00      	cmp	r3, #0
 800526c:	d002      	beq.n	8005274 <prvInitialiseNewTask+0xe8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800526e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005270:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005272:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005274:	46c0      	nop			@ (mov r8, r8)
 8005276:	46bd      	mov	sp, r7
 8005278:	b006      	add	sp, #24
 800527a:	bd80      	pop	{r7, pc}
 800527c:	3fffffff 	.word	0x3fffffff

08005280 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005288:	f000 fc4a 	bl	8005b20 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800528c:	4b28      	ldr	r3, [pc, #160]	@ (8005330 <prvAddNewTaskToReadyList+0xb0>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	1c5a      	adds	r2, r3, #1
 8005292:	4b27      	ldr	r3, [pc, #156]	@ (8005330 <prvAddNewTaskToReadyList+0xb0>)
 8005294:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8005296:	4b27      	ldr	r3, [pc, #156]	@ (8005334 <prvAddNewTaskToReadyList+0xb4>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d109      	bne.n	80052b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800529e:	4b25      	ldr	r3, [pc, #148]	@ (8005334 <prvAddNewTaskToReadyList+0xb4>)
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80052a4:	4b22      	ldr	r3, [pc, #136]	@ (8005330 <prvAddNewTaskToReadyList+0xb0>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d110      	bne.n	80052ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80052ac:	f000 fa70 	bl	8005790 <prvInitialiseTaskLists>
 80052b0:	e00d      	b.n	80052ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80052b2:	4b21      	ldr	r3, [pc, #132]	@ (8005338 <prvAddNewTaskToReadyList+0xb8>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d109      	bne.n	80052ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80052ba:	4b1e      	ldr	r3, [pc, #120]	@ (8005334 <prvAddNewTaskToReadyList+0xb4>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d802      	bhi.n	80052ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80052c8:	4b1a      	ldr	r3, [pc, #104]	@ (8005334 <prvAddNewTaskToReadyList+0xb4>)
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80052ce:	4b1b      	ldr	r3, [pc, #108]	@ (800533c <prvAddNewTaskToReadyList+0xbc>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	1c5a      	adds	r2, r3, #1
 80052d4:	4b19      	ldr	r3, [pc, #100]	@ (800533c <prvAddNewTaskToReadyList+0xbc>)
 80052d6:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052dc:	4b18      	ldr	r3, [pc, #96]	@ (8005340 <prvAddNewTaskToReadyList+0xc0>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d903      	bls.n	80052ec <prvAddNewTaskToReadyList+0x6c>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052e8:	4b15      	ldr	r3, [pc, #84]	@ (8005340 <prvAddNewTaskToReadyList+0xc0>)
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052f0:	0013      	movs	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	189b      	adds	r3, r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4a12      	ldr	r2, [pc, #72]	@ (8005344 <prvAddNewTaskToReadyList+0xc4>)
 80052fa:	189a      	adds	r2, r3, r2
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3304      	adds	r3, #4
 8005300:	0019      	movs	r1, r3
 8005302:	0010      	movs	r0, r2
 8005304:	f7ff fe2f 	bl	8004f66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005308:	f000 fc1c 	bl	8005b44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800530c:	4b0a      	ldr	r3, [pc, #40]	@ (8005338 <prvAddNewTaskToReadyList+0xb8>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d008      	beq.n	8005326 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005314:	4b07      	ldr	r3, [pc, #28]	@ (8005334 <prvAddNewTaskToReadyList+0xb4>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800531e:	429a      	cmp	r2, r3
 8005320:	d201      	bcs.n	8005326 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005322:	f000 fbed 	bl	8005b00 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005326:	46c0      	nop			@ (mov r8, r8)
 8005328:	46bd      	mov	sp, r7
 800532a:	b002      	add	sp, #8
 800532c:	bd80      	pop	{r7, pc}
 800532e:	46c0      	nop			@ (mov r8, r8)
 8005330:	20000704 	.word	0x20000704
 8005334:	20000604 	.word	0x20000604
 8005338:	20000710 	.word	0x20000710
 800533c:	20000720 	.word	0x20000720
 8005340:	2000070c 	.word	0x2000070c
 8005344:	20000608 	.word	0x20000608

08005348 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005350:	2300      	movs	r3, #0
 8005352:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d011      	beq.n	800537e <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800535a:	4b0d      	ldr	r3, [pc, #52]	@ (8005390 <vTaskDelay+0x48>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d002      	beq.n	8005368 <vTaskDelay+0x20>
 8005362:	b672      	cpsid	i
 8005364:	46c0      	nop			@ (mov r8, r8)
 8005366:	e7fd      	b.n	8005364 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8005368:	f000 f862 	bl	8005430 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2100      	movs	r1, #0
 8005370:	0018      	movs	r0, r3
 8005372:	f000 fae9 	bl	8005948 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005376:	f000 f867 	bl	8005448 <xTaskResumeAll>
 800537a:	0003      	movs	r3, r0
 800537c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
 8005384:	f000 fbbc 	bl	8005b00 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005388:	46c0      	nop			@ (mov r8, r8)
 800538a:	46bd      	mov	sp, r7
 800538c:	b004      	add	sp, #16
 800538e:	bd80      	pop	{r7, pc}
 8005390:	2000072c 	.word	0x2000072c

08005394 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005394:	b590      	push	{r4, r7, lr}
 8005396:	b089      	sub	sp, #36	@ 0x24
 8005398:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800539a:	2300      	movs	r3, #0
 800539c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800539e:	2300      	movs	r3, #0
 80053a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80053a2:	003a      	movs	r2, r7
 80053a4:	1d39      	adds	r1, r7, #4
 80053a6:	2308      	movs	r3, #8
 80053a8:	18fb      	adds	r3, r7, r3
 80053aa:	0018      	movs	r0, r3
 80053ac:	f7fd f928 	bl	8002600 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80053b0:	683c      	ldr	r4, [r7, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	4918      	ldr	r1, [pc, #96]	@ (8005418 <vTaskStartScheduler+0x84>)
 80053b8:	4818      	ldr	r0, [pc, #96]	@ (800541c <vTaskStartScheduler+0x88>)
 80053ba:	9202      	str	r2, [sp, #8]
 80053bc:	9301      	str	r3, [sp, #4]
 80053be:	2300      	movs	r3, #0
 80053c0:	9300      	str	r3, [sp, #0]
 80053c2:	2300      	movs	r3, #0
 80053c4:	0022      	movs	r2, r4
 80053c6:	f7ff fe4e 	bl	8005066 <xTaskCreateStatic>
 80053ca:	0002      	movs	r2, r0
 80053cc:	4b14      	ldr	r3, [pc, #80]	@ (8005420 <vTaskStartScheduler+0x8c>)
 80053ce:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80053d0:	4b13      	ldr	r3, [pc, #76]	@ (8005420 <vTaskStartScheduler+0x8c>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d002      	beq.n	80053de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80053d8:	2301      	movs	r3, #1
 80053da:	60fb      	str	r3, [r7, #12]
 80053dc:	e001      	b.n	80053e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80053de:	2300      	movs	r3, #0
 80053e0:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d10d      	bne.n	8005404 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80053e8:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80053ea:	4b0e      	ldr	r3, [pc, #56]	@ (8005424 <vTaskStartScheduler+0x90>)
 80053ec:	2201      	movs	r2, #1
 80053ee:	4252      	negs	r2, r2
 80053f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80053f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005428 <vTaskStartScheduler+0x94>)
 80053f4:	2201      	movs	r2, #1
 80053f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80053f8:	4b0c      	ldr	r3, [pc, #48]	@ (800542c <vTaskStartScheduler+0x98>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80053fe:	f000 fb5b 	bl	8005ab8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005402:	e005      	b.n	8005410 <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	3301      	adds	r3, #1
 8005408:	d102      	bne.n	8005410 <vTaskStartScheduler+0x7c>
 800540a:	b672      	cpsid	i
 800540c:	46c0      	nop			@ (mov r8, r8)
 800540e:	e7fd      	b.n	800540c <vTaskStartScheduler+0x78>
}
 8005410:	46c0      	nop			@ (mov r8, r8)
 8005412:	46bd      	mov	sp, r7
 8005414:	b005      	add	sp, #20
 8005416:	bd90      	pop	{r4, r7, pc}
 8005418:	08008a88 	.word	0x08008a88
 800541c:	08005771 	.word	0x08005771
 8005420:	20000728 	.word	0x20000728
 8005424:	20000724 	.word	0x20000724
 8005428:	20000710 	.word	0x20000710
 800542c:	20000708 	.word	0x20000708

08005430 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005430:	b580      	push	{r7, lr}
 8005432:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005434:	4b03      	ldr	r3, [pc, #12]	@ (8005444 <vTaskSuspendAll+0x14>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	1c5a      	adds	r2, r3, #1
 800543a:	4b02      	ldr	r3, [pc, #8]	@ (8005444 <vTaskSuspendAll+0x14>)
 800543c:	601a      	str	r2, [r3, #0]
}
 800543e:	46c0      	nop			@ (mov r8, r8)
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	2000072c 	.word	0x2000072c

08005448 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800544e:	2300      	movs	r3, #0
 8005450:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005452:	2300      	movs	r3, #0
 8005454:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005456:	4b3a      	ldr	r3, [pc, #232]	@ (8005540 <xTaskResumeAll+0xf8>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d102      	bne.n	8005464 <xTaskResumeAll+0x1c>
 800545e:	b672      	cpsid	i
 8005460:	46c0      	nop			@ (mov r8, r8)
 8005462:	e7fd      	b.n	8005460 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005464:	f000 fb5c 	bl	8005b20 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005468:	4b35      	ldr	r3, [pc, #212]	@ (8005540 <xTaskResumeAll+0xf8>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	1e5a      	subs	r2, r3, #1
 800546e:	4b34      	ldr	r3, [pc, #208]	@ (8005540 <xTaskResumeAll+0xf8>)
 8005470:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005472:	4b33      	ldr	r3, [pc, #204]	@ (8005540 <xTaskResumeAll+0xf8>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d15b      	bne.n	8005532 <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800547a:	4b32      	ldr	r3, [pc, #200]	@ (8005544 <xTaskResumeAll+0xfc>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d057      	beq.n	8005532 <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005482:	e02f      	b.n	80054e4 <xTaskResumeAll+0x9c>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005484:	4b30      	ldr	r3, [pc, #192]	@ (8005548 <xTaskResumeAll+0x100>)
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	3318      	adds	r3, #24
 8005490:	0018      	movs	r0, r3
 8005492:	f7ff fdc0 	bl	8005016 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	3304      	adds	r3, #4
 800549a:	0018      	movs	r0, r3
 800549c:	f7ff fdbb 	bl	8005016 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054a4:	4b29      	ldr	r3, [pc, #164]	@ (800554c <xTaskResumeAll+0x104>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d903      	bls.n	80054b4 <xTaskResumeAll+0x6c>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054b0:	4b26      	ldr	r3, [pc, #152]	@ (800554c <xTaskResumeAll+0x104>)
 80054b2:	601a      	str	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054b8:	0013      	movs	r3, r2
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	189b      	adds	r3, r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	4a23      	ldr	r2, [pc, #140]	@ (8005550 <xTaskResumeAll+0x108>)
 80054c2:	189a      	adds	r2, r3, r2
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	3304      	adds	r3, #4
 80054c8:	0019      	movs	r1, r3
 80054ca:	0010      	movs	r0, r2
 80054cc:	f7ff fd4b 	bl	8004f66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054d4:	4b1f      	ldr	r3, [pc, #124]	@ (8005554 <xTaskResumeAll+0x10c>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054da:	429a      	cmp	r2, r3
 80054dc:	d302      	bcc.n	80054e4 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 80054de:	4b1e      	ldr	r3, [pc, #120]	@ (8005558 <xTaskResumeAll+0x110>)
 80054e0:	2201      	movs	r2, #1
 80054e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054e4:	4b18      	ldr	r3, [pc, #96]	@ (8005548 <xTaskResumeAll+0x100>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1cb      	bne.n	8005484 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80054f2:	f000 f9e9 	bl	80058c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80054f6:	4b19      	ldr	r3, [pc, #100]	@ (800555c <xTaskResumeAll+0x114>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00f      	beq.n	8005522 <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005502:	f000 f82d 	bl	8005560 <xTaskIncrementTick>
 8005506:	1e03      	subs	r3, r0, #0
 8005508:	d002      	beq.n	8005510 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 800550a:	4b13      	ldr	r3, [pc, #76]	@ (8005558 <xTaskResumeAll+0x110>)
 800550c:	2201      	movs	r2, #1
 800550e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	3b01      	subs	r3, #1
 8005514:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1f2      	bne.n	8005502 <xTaskResumeAll+0xba>

						uxPendedTicks = 0;
 800551c:	4b0f      	ldr	r3, [pc, #60]	@ (800555c <xTaskResumeAll+0x114>)
 800551e:	2200      	movs	r2, #0
 8005520:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005522:	4b0d      	ldr	r3, [pc, #52]	@ (8005558 <xTaskResumeAll+0x110>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800552a:	2301      	movs	r3, #1
 800552c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800552e:	f000 fae7 	bl	8005b00 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005532:	f000 fb07 	bl	8005b44 <vPortExitCritical>

	return xAlreadyYielded;
 8005536:	68bb      	ldr	r3, [r7, #8]
}
 8005538:	0018      	movs	r0, r3
 800553a:	46bd      	mov	sp, r7
 800553c:	b004      	add	sp, #16
 800553e:	bd80      	pop	{r7, pc}
 8005540:	2000072c 	.word	0x2000072c
 8005544:	20000704 	.word	0x20000704
 8005548:	200006c4 	.word	0x200006c4
 800554c:	2000070c 	.word	0x2000070c
 8005550:	20000608 	.word	0x20000608
 8005554:	20000604 	.word	0x20000604
 8005558:	20000718 	.word	0x20000718
 800555c:	20000714 	.word	0x20000714

08005560 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005566:	2300      	movs	r3, #0
 8005568:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800556a:	4b4d      	ldr	r3, [pc, #308]	@ (80056a0 <xTaskIncrementTick+0x140>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d000      	beq.n	8005574 <xTaskIncrementTick+0x14>
 8005572:	e084      	b.n	800567e <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005574:	4b4b      	ldr	r3, [pc, #300]	@ (80056a4 <xTaskIncrementTick+0x144>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	3301      	adds	r3, #1
 800557a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800557c:	4b49      	ldr	r3, [pc, #292]	@ (80056a4 <xTaskIncrementTick+0x144>)
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d118      	bne.n	80055ba <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005588:	4b47      	ldr	r3, [pc, #284]	@ (80056a8 <xTaskIncrementTick+0x148>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <xTaskIncrementTick+0x38>
 8005592:	b672      	cpsid	i
 8005594:	46c0      	nop			@ (mov r8, r8)
 8005596:	e7fd      	b.n	8005594 <xTaskIncrementTick+0x34>
 8005598:	4b43      	ldr	r3, [pc, #268]	@ (80056a8 <xTaskIncrementTick+0x148>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	60fb      	str	r3, [r7, #12]
 800559e:	4b43      	ldr	r3, [pc, #268]	@ (80056ac <xTaskIncrementTick+0x14c>)
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	4b41      	ldr	r3, [pc, #260]	@ (80056a8 <xTaskIncrementTick+0x148>)
 80055a4:	601a      	str	r2, [r3, #0]
 80055a6:	4b41      	ldr	r3, [pc, #260]	@ (80056ac <xTaskIncrementTick+0x14c>)
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	4b40      	ldr	r3, [pc, #256]	@ (80056b0 <xTaskIncrementTick+0x150>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	1c5a      	adds	r2, r3, #1
 80055b2:	4b3f      	ldr	r3, [pc, #252]	@ (80056b0 <xTaskIncrementTick+0x150>)
 80055b4:	601a      	str	r2, [r3, #0]
 80055b6:	f000 f987 	bl	80058c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80055ba:	4b3e      	ldr	r3, [pc, #248]	@ (80056b4 <xTaskIncrementTick+0x154>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d34e      	bcc.n	8005662 <xTaskIncrementTick+0x102>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055c4:	4b38      	ldr	r3, [pc, #224]	@ (80056a8 <xTaskIncrementTick+0x148>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <xTaskIncrementTick+0x72>
 80055ce:	2301      	movs	r3, #1
 80055d0:	e000      	b.n	80055d4 <xTaskIncrementTick+0x74>
 80055d2:	2300      	movs	r3, #0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d004      	beq.n	80055e2 <xTaskIncrementTick+0x82>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055d8:	4b36      	ldr	r3, [pc, #216]	@ (80056b4 <xTaskIncrementTick+0x154>)
 80055da:	2201      	movs	r2, #1
 80055dc:	4252      	negs	r2, r2
 80055de:	601a      	str	r2, [r3, #0]
					break;
 80055e0:	e03f      	b.n	8005662 <xTaskIncrementTick+0x102>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80055e2:	4b31      	ldr	r3, [pc, #196]	@ (80056a8 <xTaskIncrementTick+0x148>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d203      	bcs.n	8005602 <xTaskIncrementTick+0xa2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80055fa:	4b2e      	ldr	r3, [pc, #184]	@ (80056b4 <xTaskIncrementTick+0x154>)
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	601a      	str	r2, [r3, #0]
						break;
 8005600:	e02f      	b.n	8005662 <xTaskIncrementTick+0x102>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	3304      	adds	r3, #4
 8005606:	0018      	movs	r0, r3
 8005608:	f7ff fd05 	bl	8005016 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005610:	2b00      	cmp	r3, #0
 8005612:	d004      	beq.n	800561e <xTaskIncrementTick+0xbe>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	3318      	adds	r3, #24
 8005618:	0018      	movs	r0, r3
 800561a:	f7ff fcfc 	bl	8005016 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005622:	4b25      	ldr	r3, [pc, #148]	@ (80056b8 <xTaskIncrementTick+0x158>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	429a      	cmp	r2, r3
 8005628:	d903      	bls.n	8005632 <xTaskIncrementTick+0xd2>
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800562e:	4b22      	ldr	r3, [pc, #136]	@ (80056b8 <xTaskIncrementTick+0x158>)
 8005630:	601a      	str	r2, [r3, #0]
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005636:	0013      	movs	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	189b      	adds	r3, r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4a1f      	ldr	r2, [pc, #124]	@ (80056bc <xTaskIncrementTick+0x15c>)
 8005640:	189a      	adds	r2, r3, r2
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	3304      	adds	r3, #4
 8005646:	0019      	movs	r1, r3
 8005648:	0010      	movs	r0, r2
 800564a:	f7ff fc8c 	bl	8004f66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005652:	4b1b      	ldr	r3, [pc, #108]	@ (80056c0 <xTaskIncrementTick+0x160>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005658:	429a      	cmp	r2, r3
 800565a:	d3b3      	bcc.n	80055c4 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 800565c:	2301      	movs	r3, #1
 800565e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005660:	e7b0      	b.n	80055c4 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005662:	4b17      	ldr	r3, [pc, #92]	@ (80056c0 <xTaskIncrementTick+0x160>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005668:	4914      	ldr	r1, [pc, #80]	@ (80056bc <xTaskIncrementTick+0x15c>)
 800566a:	0013      	movs	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	189b      	adds	r3, r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	585b      	ldr	r3, [r3, r1]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d907      	bls.n	8005688 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8005678:	2301      	movs	r3, #1
 800567a:	617b      	str	r3, [r7, #20]
 800567c:	e004      	b.n	8005688 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800567e:	4b11      	ldr	r3, [pc, #68]	@ (80056c4 <xTaskIncrementTick+0x164>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	1c5a      	adds	r2, r3, #1
 8005684:	4b0f      	ldr	r3, [pc, #60]	@ (80056c4 <xTaskIncrementTick+0x164>)
 8005686:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005688:	4b0f      	ldr	r3, [pc, #60]	@ (80056c8 <xTaskIncrementTick+0x168>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d001      	beq.n	8005694 <xTaskIncrementTick+0x134>
		{
			xSwitchRequired = pdTRUE;
 8005690:	2301      	movs	r3, #1
 8005692:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005694:	697b      	ldr	r3, [r7, #20]
}
 8005696:	0018      	movs	r0, r3
 8005698:	46bd      	mov	sp, r7
 800569a:	b006      	add	sp, #24
 800569c:	bd80      	pop	{r7, pc}
 800569e:	46c0      	nop			@ (mov r8, r8)
 80056a0:	2000072c 	.word	0x2000072c
 80056a4:	20000708 	.word	0x20000708
 80056a8:	200006bc 	.word	0x200006bc
 80056ac:	200006c0 	.word	0x200006c0
 80056b0:	2000071c 	.word	0x2000071c
 80056b4:	20000724 	.word	0x20000724
 80056b8:	2000070c 	.word	0x2000070c
 80056bc:	20000608 	.word	0x20000608
 80056c0:	20000604 	.word	0x20000604
 80056c4:	20000714 	.word	0x20000714
 80056c8:	20000718 	.word	0x20000718

080056cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80056d2:	4b22      	ldr	r3, [pc, #136]	@ (800575c <vTaskSwitchContext+0x90>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80056da:	4b21      	ldr	r3, [pc, #132]	@ (8005760 <vTaskSwitchContext+0x94>)
 80056dc:	2201      	movs	r2, #1
 80056de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80056e0:	e038      	b.n	8005754 <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 80056e2:	4b1f      	ldr	r3, [pc, #124]	@ (8005760 <vTaskSwitchContext+0x94>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80056e8:	4b1e      	ldr	r3, [pc, #120]	@ (8005764 <vTaskSwitchContext+0x98>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	607b      	str	r3, [r7, #4]
 80056ee:	e008      	b.n	8005702 <vTaskSwitchContext+0x36>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d102      	bne.n	80056fc <vTaskSwitchContext+0x30>
 80056f6:	b672      	cpsid	i
 80056f8:	46c0      	nop			@ (mov r8, r8)
 80056fa:	e7fd      	b.n	80056f8 <vTaskSwitchContext+0x2c>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	3b01      	subs	r3, #1
 8005700:	607b      	str	r3, [r7, #4]
 8005702:	4919      	ldr	r1, [pc, #100]	@ (8005768 <vTaskSwitchContext+0x9c>)
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	0013      	movs	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	189b      	adds	r3, r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	585b      	ldr	r3, [r3, r1]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d0ed      	beq.n	80056f0 <vTaskSwitchContext+0x24>
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	0013      	movs	r3, r2
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	189b      	adds	r3, r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4a12      	ldr	r2, [pc, #72]	@ (8005768 <vTaskSwitchContext+0x9c>)
 8005720:	189b      	adds	r3, r3, r2
 8005722:	603b      	str	r3, [r7, #0]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	685a      	ldr	r2, [r3, #4]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	605a      	str	r2, [r3, #4]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	3308      	adds	r3, #8
 8005736:	429a      	cmp	r2, r3
 8005738:	d104      	bne.n	8005744 <vTaskSwitchContext+0x78>
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	605a      	str	r2, [r3, #4]
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	68da      	ldr	r2, [r3, #12]
 800574a:	4b08      	ldr	r3, [pc, #32]	@ (800576c <vTaskSwitchContext+0xa0>)
 800574c:	601a      	str	r2, [r3, #0]
 800574e:	4b05      	ldr	r3, [pc, #20]	@ (8005764 <vTaskSwitchContext+0x98>)
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	601a      	str	r2, [r3, #0]
}
 8005754:	46c0      	nop			@ (mov r8, r8)
 8005756:	46bd      	mov	sp, r7
 8005758:	b002      	add	sp, #8
 800575a:	bd80      	pop	{r7, pc}
 800575c:	2000072c 	.word	0x2000072c
 8005760:	20000718 	.word	0x20000718
 8005764:	2000070c 	.word	0x2000070c
 8005768:	20000608 	.word	0x20000608
 800576c:	20000604 	.word	0x20000604

08005770 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005778:	f000 f84e 	bl	8005818 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800577c:	4b03      	ldr	r3, [pc, #12]	@ (800578c <prvIdleTask+0x1c>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d9f9      	bls.n	8005778 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005784:	f000 f9bc 	bl	8005b00 <vPortYield>
		prvCheckTasksWaitingTermination();
 8005788:	e7f6      	b.n	8005778 <prvIdleTask+0x8>
 800578a:	46c0      	nop			@ (mov r8, r8)
 800578c:	20000608 	.word	0x20000608

08005790 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005796:	2300      	movs	r3, #0
 8005798:	607b      	str	r3, [r7, #4]
 800579a:	e00c      	b.n	80057b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	0013      	movs	r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	189b      	adds	r3, r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4a14      	ldr	r2, [pc, #80]	@ (80057f8 <prvInitialiseTaskLists+0x68>)
 80057a8:	189b      	adds	r3, r3, r2
 80057aa:	0018      	movs	r0, r3
 80057ac:	f7ff fbb2 	bl	8004f14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	3301      	adds	r3, #1
 80057b4:	607b      	str	r3, [r7, #4]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b06      	cmp	r3, #6
 80057ba:	d9ef      	bls.n	800579c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80057bc:	4b0f      	ldr	r3, [pc, #60]	@ (80057fc <prvInitialiseTaskLists+0x6c>)
 80057be:	0018      	movs	r0, r3
 80057c0:	f7ff fba8 	bl	8004f14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80057c4:	4b0e      	ldr	r3, [pc, #56]	@ (8005800 <prvInitialiseTaskLists+0x70>)
 80057c6:	0018      	movs	r0, r3
 80057c8:	f7ff fba4 	bl	8004f14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80057cc:	4b0d      	ldr	r3, [pc, #52]	@ (8005804 <prvInitialiseTaskLists+0x74>)
 80057ce:	0018      	movs	r0, r3
 80057d0:	f7ff fba0 	bl	8004f14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80057d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005808 <prvInitialiseTaskLists+0x78>)
 80057d6:	0018      	movs	r0, r3
 80057d8:	f7ff fb9c 	bl	8004f14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80057dc:	4b0b      	ldr	r3, [pc, #44]	@ (800580c <prvInitialiseTaskLists+0x7c>)
 80057de:	0018      	movs	r0, r3
 80057e0:	f7ff fb98 	bl	8004f14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80057e4:	4b0a      	ldr	r3, [pc, #40]	@ (8005810 <prvInitialiseTaskLists+0x80>)
 80057e6:	4a05      	ldr	r2, [pc, #20]	@ (80057fc <prvInitialiseTaskLists+0x6c>)
 80057e8:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80057ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005814 <prvInitialiseTaskLists+0x84>)
 80057ec:	4a04      	ldr	r2, [pc, #16]	@ (8005800 <prvInitialiseTaskLists+0x70>)
 80057ee:	601a      	str	r2, [r3, #0]
}
 80057f0:	46c0      	nop			@ (mov r8, r8)
 80057f2:	46bd      	mov	sp, r7
 80057f4:	b002      	add	sp, #8
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	20000608 	.word	0x20000608
 80057fc:	20000694 	.word	0x20000694
 8005800:	200006a8 	.word	0x200006a8
 8005804:	200006c4 	.word	0x200006c4
 8005808:	200006d8 	.word	0x200006d8
 800580c:	200006f0 	.word	0x200006f0
 8005810:	200006bc 	.word	0x200006bc
 8005814:	200006c0 	.word	0x200006c0

08005818 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800581e:	e01a      	b.n	8005856 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8005820:	f000 f97e 	bl	8005b20 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005824:	4b10      	ldr	r3, [pc, #64]	@ (8005868 <prvCheckTasksWaitingTermination+0x50>)
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	3304      	adds	r3, #4
 8005830:	0018      	movs	r0, r3
 8005832:	f7ff fbf0 	bl	8005016 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005836:	4b0d      	ldr	r3, [pc, #52]	@ (800586c <prvCheckTasksWaitingTermination+0x54>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	1e5a      	subs	r2, r3, #1
 800583c:	4b0b      	ldr	r3, [pc, #44]	@ (800586c <prvCheckTasksWaitingTermination+0x54>)
 800583e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005840:	4b0b      	ldr	r3, [pc, #44]	@ (8005870 <prvCheckTasksWaitingTermination+0x58>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	1e5a      	subs	r2, r3, #1
 8005846:	4b0a      	ldr	r3, [pc, #40]	@ (8005870 <prvCheckTasksWaitingTermination+0x58>)
 8005848:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800584a:	f000 f97b 	bl	8005b44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	0018      	movs	r0, r3
 8005852:	f000 f80f 	bl	8005874 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005856:	4b06      	ldr	r3, [pc, #24]	@ (8005870 <prvCheckTasksWaitingTermination+0x58>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1e0      	bne.n	8005820 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800585e:	46c0      	nop			@ (mov r8, r8)
 8005860:	46c0      	nop			@ (mov r8, r8)
 8005862:	46bd      	mov	sp, r7
 8005864:	b002      	add	sp, #8
 8005866:	bd80      	pop	{r7, pc}
 8005868:	200006d8 	.word	0x200006d8
 800586c:	20000704 	.word	0x20000704
 8005870:	200006ec 	.word	0x200006ec

08005874 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2251      	movs	r2, #81	@ 0x51
 8005880:	5c9b      	ldrb	r3, [r3, r2]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d109      	bne.n	800589a <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800588a:	0018      	movs	r0, r3
 800588c:	f000 fa88 	bl	8005da0 <vPortFree>
				vPortFree( pxTCB );
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	0018      	movs	r0, r3
 8005894:	f000 fa84 	bl	8005da0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005898:	e011      	b.n	80058be <prvDeleteTCB+0x4a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2251      	movs	r2, #81	@ 0x51
 800589e:	5c9b      	ldrb	r3, [r3, r2]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d104      	bne.n	80058ae <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	0018      	movs	r0, r3
 80058a8:	f000 fa7a 	bl	8005da0 <vPortFree>
	}
 80058ac:	e007      	b.n	80058be <prvDeleteTCB+0x4a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2251      	movs	r2, #81	@ 0x51
 80058b2:	5c9b      	ldrb	r3, [r3, r2]
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d002      	beq.n	80058be <prvDeleteTCB+0x4a>
 80058b8:	b672      	cpsid	i
 80058ba:	46c0      	nop			@ (mov r8, r8)
 80058bc:	e7fd      	b.n	80058ba <prvDeleteTCB+0x46>
	}
 80058be:	46c0      	nop			@ (mov r8, r8)
 80058c0:	46bd      	mov	sp, r7
 80058c2:	b002      	add	sp, #8
 80058c4:	bd80      	pop	{r7, pc}
	...

080058c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005908 <prvResetNextTaskUnblockTime+0x40>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <prvResetNextTaskUnblockTime+0x14>
 80058d8:	2301      	movs	r3, #1
 80058da:	e000      	b.n	80058de <prvResetNextTaskUnblockTime+0x16>
 80058dc:	2300      	movs	r3, #0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d004      	beq.n	80058ec <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80058e2:	4b0a      	ldr	r3, [pc, #40]	@ (800590c <prvResetNextTaskUnblockTime+0x44>)
 80058e4:	2201      	movs	r2, #1
 80058e6:	4252      	negs	r2, r2
 80058e8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80058ea:	e008      	b.n	80058fe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80058ec:	4b06      	ldr	r3, [pc, #24]	@ (8005908 <prvResetNextTaskUnblockTime+0x40>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685a      	ldr	r2, [r3, #4]
 80058fa:	4b04      	ldr	r3, [pc, #16]	@ (800590c <prvResetNextTaskUnblockTime+0x44>)
 80058fc:	601a      	str	r2, [r3, #0]
}
 80058fe:	46c0      	nop			@ (mov r8, r8)
 8005900:	46bd      	mov	sp, r7
 8005902:	b002      	add	sp, #8
 8005904:	bd80      	pop	{r7, pc}
 8005906:	46c0      	nop			@ (mov r8, r8)
 8005908:	200006bc 	.word	0x200006bc
 800590c:	20000724 	.word	0x20000724

08005910 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005916:	4b0a      	ldr	r3, [pc, #40]	@ (8005940 <xTaskGetSchedulerState+0x30>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d102      	bne.n	8005924 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800591e:	2301      	movs	r3, #1
 8005920:	607b      	str	r3, [r7, #4]
 8005922:	e008      	b.n	8005936 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005924:	4b07      	ldr	r3, [pc, #28]	@ (8005944 <xTaskGetSchedulerState+0x34>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d102      	bne.n	8005932 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800592c:	2302      	movs	r3, #2
 800592e:	607b      	str	r3, [r7, #4]
 8005930:	e001      	b.n	8005936 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005932:	2300      	movs	r3, #0
 8005934:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005936:	687b      	ldr	r3, [r7, #4]
	}
 8005938:	0018      	movs	r0, r3
 800593a:	46bd      	mov	sp, r7
 800593c:	b002      	add	sp, #8
 800593e:	bd80      	pop	{r7, pc}
 8005940:	20000710 	.word	0x20000710
 8005944:	2000072c 	.word	0x2000072c

08005948 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005952:	4b21      	ldr	r3, [pc, #132]	@ (80059d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005958:	4b20      	ldr	r3, [pc, #128]	@ (80059dc <prvAddCurrentTaskToDelayedList+0x94>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	3304      	adds	r3, #4
 800595e:	0018      	movs	r0, r3
 8005960:	f7ff fb59 	bl	8005016 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	3301      	adds	r3, #1
 8005968:	d10b      	bne.n	8005982 <prvAddCurrentTaskToDelayedList+0x3a>
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d008      	beq.n	8005982 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005970:	4b1a      	ldr	r3, [pc, #104]	@ (80059dc <prvAddCurrentTaskToDelayedList+0x94>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	1d1a      	adds	r2, r3, #4
 8005976:	4b1a      	ldr	r3, [pc, #104]	@ (80059e0 <prvAddCurrentTaskToDelayedList+0x98>)
 8005978:	0011      	movs	r1, r2
 800597a:	0018      	movs	r0, r3
 800597c:	f7ff faf3 	bl	8004f66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005980:	e026      	b.n	80059d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	18d3      	adds	r3, r2, r3
 8005988:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800598a:	4b14      	ldr	r3, [pc, #80]	@ (80059dc <prvAddCurrentTaskToDelayedList+0x94>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	429a      	cmp	r2, r3
 8005998:	d209      	bcs.n	80059ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800599a:	4b12      	ldr	r3, [pc, #72]	@ (80059e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	4b0f      	ldr	r3, [pc, #60]	@ (80059dc <prvAddCurrentTaskToDelayedList+0x94>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	3304      	adds	r3, #4
 80059a4:	0019      	movs	r1, r3
 80059a6:	0010      	movs	r0, r2
 80059a8:	f7ff faff 	bl	8004faa <vListInsert>
}
 80059ac:	e010      	b.n	80059d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059ae:	4b0e      	ldr	r3, [pc, #56]	@ (80059e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	4b0a      	ldr	r3, [pc, #40]	@ (80059dc <prvAddCurrentTaskToDelayedList+0x94>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3304      	adds	r3, #4
 80059b8:	0019      	movs	r1, r3
 80059ba:	0010      	movs	r0, r2
 80059bc:	f7ff faf5 	bl	8004faa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80059c0:	4b0a      	ldr	r3, [pc, #40]	@ (80059ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d202      	bcs.n	80059d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80059ca:	4b08      	ldr	r3, [pc, #32]	@ (80059ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	601a      	str	r2, [r3, #0]
}
 80059d0:	46c0      	nop			@ (mov r8, r8)
 80059d2:	46bd      	mov	sp, r7
 80059d4:	b004      	add	sp, #16
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	20000708 	.word	0x20000708
 80059dc:	20000604 	.word	0x20000604
 80059e0:	200006f0 	.word	0x200006f0
 80059e4:	200006c0 	.word	0x200006c0
 80059e8:	200006bc 	.word	0x200006bc
 80059ec:	20000724 	.word	0x20000724

080059f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	3b04      	subs	r3, #4
 8005a00:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2280      	movs	r2, #128	@ 0x80
 8005a06:	0452      	lsls	r2, r2, #17
 8005a08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	3b04      	subs	r3, #4
 8005a0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	3b04      	subs	r3, #4
 8005a1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005a1c:	4a08      	ldr	r2, [pc, #32]	@ (8005a40 <pxPortInitialiseStack+0x50>)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	3b14      	subs	r3, #20
 8005a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	3b20      	subs	r3, #32
 8005a32:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a34:	68fb      	ldr	r3, [r7, #12]
}
 8005a36:	0018      	movs	r0, r3
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	b004      	add	sp, #16
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	46c0      	nop			@ (mov r8, r8)
 8005a40:	08005a45 	.word	0x08005a45

08005a44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a4e:	4b08      	ldr	r3, [pc, #32]	@ (8005a70 <prvTaskExitError+0x2c>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	3301      	adds	r3, #1
 8005a54:	d002      	beq.n	8005a5c <prvTaskExitError+0x18>
 8005a56:	b672      	cpsid	i
 8005a58:	46c0      	nop			@ (mov r8, r8)
 8005a5a:	e7fd      	b.n	8005a58 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8005a5c:	b672      	cpsid	i
	while( ulDummy == 0 )
 8005a5e:	46c0      	nop			@ (mov r8, r8)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d0fc      	beq.n	8005a60 <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005a66:	46c0      	nop			@ (mov r8, r8)
 8005a68:	46c0      	nop			@ (mov r8, r8)
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	b002      	add	sp, #8
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	20000054 	.word	0x20000054

08005a74 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8005a78:	46c0      	nop			@ (mov r8, r8)
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
	...

08005a80 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8005a80:	4a0b      	ldr	r2, [pc, #44]	@ (8005ab0 <pxCurrentTCBConst2>)
 8005a82:	6813      	ldr	r3, [r2, #0]
 8005a84:	6818      	ldr	r0, [r3, #0]
 8005a86:	3020      	adds	r0, #32
 8005a88:	f380 8809 	msr	PSP, r0
 8005a8c:	2002      	movs	r0, #2
 8005a8e:	f380 8814 	msr	CONTROL, r0
 8005a92:	f3bf 8f6f 	isb	sy
 8005a96:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005a98:	46ae      	mov	lr, r5
 8005a9a:	bc08      	pop	{r3}
 8005a9c:	bc04      	pop	{r2}
 8005a9e:	b662      	cpsie	i
 8005aa0:	4718      	bx	r3
 8005aa2:	46c0      	nop			@ (mov r8, r8)
 8005aa4:	46c0      	nop			@ (mov r8, r8)
 8005aa6:	46c0      	nop			@ (mov r8, r8)
 8005aa8:	46c0      	nop			@ (mov r8, r8)
 8005aaa:	46c0      	nop			@ (mov r8, r8)
 8005aac:	46c0      	nop			@ (mov r8, r8)
 8005aae:	46c0      	nop			@ (mov r8, r8)

08005ab0 <pxCurrentTCBConst2>:
 8005ab0:	20000604 	.word	0x20000604
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8005ab4:	46c0      	nop			@ (mov r8, r8)
 8005ab6:	46c0      	nop			@ (mov r8, r8)

08005ab8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8005abc:	4b0e      	ldr	r3, [pc, #56]	@ (8005af8 <xPortStartScheduler+0x40>)
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8005af8 <xPortStartScheduler+0x40>)
 8005ac2:	21ff      	movs	r1, #255	@ 0xff
 8005ac4:	0409      	lsls	r1, r1, #16
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8005aca:	4b0b      	ldr	r3, [pc, #44]	@ (8005af8 <xPortStartScheduler+0x40>)
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	4b0a      	ldr	r3, [pc, #40]	@ (8005af8 <xPortStartScheduler+0x40>)
 8005ad0:	21ff      	movs	r1, #255	@ 0xff
 8005ad2:	0609      	lsls	r1, r1, #24
 8005ad4:	430a      	orrs	r2, r1
 8005ad6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8005ad8:	f000 f898 	bl	8005c0c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005adc:	4b07      	ldr	r3, [pc, #28]	@ (8005afc <xPortStartScheduler+0x44>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8005ae2:	f7ff ffcd 	bl	8005a80 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005ae6:	f7ff fdf1 	bl	80056cc <vTaskSwitchContext>
	prvTaskExitError();
 8005aea:	f7ff ffab 	bl	8005a44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	0018      	movs	r0, r3
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	46c0      	nop			@ (mov r8, r8)
 8005af8:	e000ed20 	.word	0xe000ed20
 8005afc:	20000054 	.word	0x20000054

08005b00 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8005b04:	4b05      	ldr	r3, [pc, #20]	@ (8005b1c <vPortYield+0x1c>)
 8005b06:	2280      	movs	r2, #128	@ 0x80
 8005b08:	0552      	lsls	r2, r2, #21
 8005b0a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8005b0c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005b10:	f3bf 8f6f 	isb	sy
}
 8005b14:	46c0      	nop			@ (mov r8, r8)
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	46c0      	nop			@ (mov r8, r8)
 8005b1c:	e000ed04 	.word	0xe000ed04

08005b20 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8005b24:	b672      	cpsid	i
    uxCriticalNesting++;
 8005b26:	4b06      	ldr	r3, [pc, #24]	@ (8005b40 <vPortEnterCritical+0x20>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	1c5a      	adds	r2, r3, #1
 8005b2c:	4b04      	ldr	r3, [pc, #16]	@ (8005b40 <vPortEnterCritical+0x20>)
 8005b2e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8005b30:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005b34:	f3bf 8f6f 	isb	sy
}
 8005b38:	46c0      	nop			@ (mov r8, r8)
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	46c0      	nop			@ (mov r8, r8)
 8005b40:	20000054 	.word	0x20000054

08005b44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005b48:	4b09      	ldr	r3, [pc, #36]	@ (8005b70 <vPortExitCritical+0x2c>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d102      	bne.n	8005b56 <vPortExitCritical+0x12>
 8005b50:	b672      	cpsid	i
 8005b52:	46c0      	nop			@ (mov r8, r8)
 8005b54:	e7fd      	b.n	8005b52 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8005b56:	4b06      	ldr	r3, [pc, #24]	@ (8005b70 <vPortExitCritical+0x2c>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	1e5a      	subs	r2, r3, #1
 8005b5c:	4b04      	ldr	r3, [pc, #16]	@ (8005b70 <vPortExitCritical+0x2c>)
 8005b5e:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8005b60:	4b03      	ldr	r3, [pc, #12]	@ (8005b70 <vPortExitCritical+0x2c>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d100      	bne.n	8005b6a <vPortExitCritical+0x26>
    {
        portENABLE_INTERRUPTS();
 8005b68:	b662      	cpsie	i
    }
}
 8005b6a:	46c0      	nop			@ (mov r8, r8)
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	20000054 	.word	0x20000054

08005b74 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005b74:	f3ef 8010 	mrs	r0, PRIMASK
 8005b78:	b672      	cpsid	i
 8005b7a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8005b7c:	46c0      	nop			@ (mov r8, r8)
 8005b7e:	0018      	movs	r0, r3

08005b80 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005b80:	f380 8810 	msr	PRIMASK, r0
 8005b84:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8005b86:	46c0      	nop			@ (mov r8, r8)
	...

08005b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b90:	f3ef 8009 	mrs	r0, PSP
 8005b94:	4b0e      	ldr	r3, [pc, #56]	@ (8005bd0 <pxCurrentTCBConst>)
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	3820      	subs	r0, #32
 8005b9a:	6010      	str	r0, [r2, #0]
 8005b9c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005b9e:	4644      	mov	r4, r8
 8005ba0:	464d      	mov	r5, r9
 8005ba2:	4656      	mov	r6, sl
 8005ba4:	465f      	mov	r7, fp
 8005ba6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005ba8:	b508      	push	{r3, lr}
 8005baa:	b672      	cpsid	i
 8005bac:	f7ff fd8e 	bl	80056cc <vTaskSwitchContext>
 8005bb0:	b662      	cpsie	i
 8005bb2:	bc0c      	pop	{r2, r3}
 8005bb4:	6811      	ldr	r1, [r2, #0]
 8005bb6:	6808      	ldr	r0, [r1, #0]
 8005bb8:	3010      	adds	r0, #16
 8005bba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005bbc:	46a0      	mov	r8, r4
 8005bbe:	46a9      	mov	r9, r5
 8005bc0:	46b2      	mov	sl, r6
 8005bc2:	46bb      	mov	fp, r7
 8005bc4:	f380 8809 	msr	PSP, r0
 8005bc8:	3820      	subs	r0, #32
 8005bca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005bcc:	4718      	bx	r3
 8005bce:	46c0      	nop			@ (mov r8, r8)

08005bd0 <pxCurrentTCBConst>:
 8005bd0:	20000604 	.word	0x20000604
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8005bd4:	46c0      	nop			@ (mov r8, r8)
 8005bd6:	46c0      	nop			@ (mov r8, r8)

08005bd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8005bde:	f7ff ffc9 	bl	8005b74 <ulSetInterruptMaskFromISR>
 8005be2:	0003      	movs	r3, r0
 8005be4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005be6:	f7ff fcbb 	bl	8005560 <xTaskIncrementTick>
 8005bea:	1e03      	subs	r3, r0, #0
 8005bec:	d003      	beq.n	8005bf6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8005bee:	4b06      	ldr	r3, [pc, #24]	@ (8005c08 <xPortSysTickHandler+0x30>)
 8005bf0:	2280      	movs	r2, #128	@ 0x80
 8005bf2:	0552      	lsls	r2, r2, #21
 8005bf4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	0018      	movs	r0, r3
 8005bfa:	f7ff ffc1 	bl	8005b80 <vClearInterruptMaskFromISR>
}
 8005bfe:	46c0      	nop			@ (mov r8, r8)
 8005c00:	46bd      	mov	sp, r7
 8005c02:	b002      	add	sp, #8
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	46c0      	nop			@ (mov r8, r8)
 8005c08:	e000ed04 	.word	0xe000ed04

08005c0c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8005c10:	4b0b      	ldr	r3, [pc, #44]	@ (8005c40 <prvSetupTimerInterrupt+0x34>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8005c16:	4b0b      	ldr	r3, [pc, #44]	@ (8005c44 <prvSetupTimerInterrupt+0x38>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8005c48 <prvSetupTimerInterrupt+0x3c>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	22fa      	movs	r2, #250	@ 0xfa
 8005c22:	0091      	lsls	r1, r2, #2
 8005c24:	0018      	movs	r0, r3
 8005c26:	f7fa fa8b 	bl	8000140 <__udivsi3>
 8005c2a:	0003      	movs	r3, r0
 8005c2c:	001a      	movs	r2, r3
 8005c2e:	4b07      	ldr	r3, [pc, #28]	@ (8005c4c <prvSetupTimerInterrupt+0x40>)
 8005c30:	3a01      	subs	r2, #1
 8005c32:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8005c34:	4b02      	ldr	r3, [pc, #8]	@ (8005c40 <prvSetupTimerInterrupt+0x34>)
 8005c36:	2207      	movs	r2, #7
 8005c38:	601a      	str	r2, [r3, #0]
}
 8005c3a:	46c0      	nop			@ (mov r8, r8)
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	e000e010 	.word	0xe000e010
 8005c44:	e000e018 	.word	0xe000e018
 8005c48:	20000048 	.word	0x20000048
 8005c4c:	e000e014 	.word	0xe000e014

08005c50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8005c5c:	f7ff fbe8 	bl	8005430 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c60:	4b4a      	ldr	r3, [pc, #296]	@ (8005d8c <pvPortMalloc+0x13c>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d101      	bne.n	8005c6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c68:	f000 f8e4 	bl	8005e34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c6c:	4b48      	ldr	r3, [pc, #288]	@ (8005d90 <pvPortMalloc+0x140>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	4013      	ands	r3, r2
 8005c74:	d000      	beq.n	8005c78 <pvPortMalloc+0x28>
 8005c76:	e07b      	b.n	8005d70 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d013      	beq.n	8005ca6 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 8005c7e:	2208      	movs	r2, #8
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	189b      	adds	r3, r3, r2
 8005c84:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2207      	movs	r2, #7
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	d00b      	beq.n	8005ca6 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2207      	movs	r2, #7
 8005c92:	4393      	bics	r3, r2
 8005c94:	3308      	adds	r3, #8
 8005c96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2207      	movs	r2, #7
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	d002      	beq.n	8005ca6 <pvPortMalloc+0x56>
 8005ca0:	b672      	cpsid	i
 8005ca2:	46c0      	nop			@ (mov r8, r8)
 8005ca4:	e7fd      	b.n	8005ca2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d061      	beq.n	8005d70 <pvPortMalloc+0x120>
 8005cac:	4b39      	ldr	r3, [pc, #228]	@ (8005d94 <pvPortMalloc+0x144>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d85c      	bhi.n	8005d70 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005cb6:	4b38      	ldr	r3, [pc, #224]	@ (8005d98 <pvPortMalloc+0x148>)
 8005cb8:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8005cba:	4b37      	ldr	r3, [pc, #220]	@ (8005d98 <pvPortMalloc+0x148>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cc0:	e004      	b.n	8005ccc <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d903      	bls.n	8005cde <pvPortMalloc+0x8e>
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1f1      	bne.n	8005cc2 <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005cde:	4b2b      	ldr	r3, [pc, #172]	@ (8005d8c <pvPortMalloc+0x13c>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d043      	beq.n	8005d70 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2208      	movs	r2, #8
 8005cee:	189b      	adds	r3, r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	1ad2      	subs	r2, r2, r3
 8005d02:	2308      	movs	r3, #8
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d917      	bls.n	8005d3a <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	18d3      	adds	r3, r2, r3
 8005d10:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	2207      	movs	r2, #7
 8005d16:	4013      	ands	r3, r2
 8005d18:	d002      	beq.n	8005d20 <pvPortMalloc+0xd0>
 8005d1a:	b672      	cpsid	i
 8005d1c:	46c0      	nop			@ (mov r8, r8)
 8005d1e:	e7fd      	b.n	8005d1c <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	1ad2      	subs	r2, r2, r3
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	0018      	movs	r0, r3
 8005d36:	f000 f8dd 	bl	8005ef4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d3a:	4b16      	ldr	r3, [pc, #88]	@ (8005d94 <pvPortMalloc+0x144>)
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	1ad2      	subs	r2, r2, r3
 8005d44:	4b13      	ldr	r3, [pc, #76]	@ (8005d94 <pvPortMalloc+0x144>)
 8005d46:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d48:	4b12      	ldr	r3, [pc, #72]	@ (8005d94 <pvPortMalloc+0x144>)
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	4b13      	ldr	r3, [pc, #76]	@ (8005d9c <pvPortMalloc+0x14c>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d203      	bcs.n	8005d5c <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d54:	4b0f      	ldr	r3, [pc, #60]	@ (8005d94 <pvPortMalloc+0x144>)
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	4b10      	ldr	r3, [pc, #64]	@ (8005d9c <pvPortMalloc+0x14c>)
 8005d5a:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	4b0b      	ldr	r3, [pc, #44]	@ (8005d90 <pvPortMalloc+0x140>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	431a      	orrs	r2, r3
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d70:	f7ff fb6a 	bl	8005448 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2207      	movs	r2, #7
 8005d78:	4013      	ands	r3, r2
 8005d7a:	d002      	beq.n	8005d82 <pvPortMalloc+0x132>
 8005d7c:	b672      	cpsid	i
 8005d7e:	46c0      	nop			@ (mov r8, r8)
 8005d80:	e7fd      	b.n	8005d7e <pvPortMalloc+0x12e>
	return pvReturn;
 8005d82:	68fb      	ldr	r3, [r7, #12]
}
 8005d84:	0018      	movs	r0, r3
 8005d86:	46bd      	mov	sp, r7
 8005d88:	b006      	add	sp, #24
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	20001338 	.word	0x20001338
 8005d90:	20001344 	.word	0x20001344
 8005d94:	2000133c 	.word	0x2000133c
 8005d98:	20001330 	.word	0x20001330
 8005d9c:	20001340 	.word	0x20001340

08005da0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d037      	beq.n	8005e22 <vPortFree+0x82>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005db2:	2308      	movs	r3, #8
 8005db4:	425b      	negs	r3, r3
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	18d3      	adds	r3, r2, r3
 8005dba:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	4b19      	ldr	r3, [pc, #100]	@ (8005e2c <vPortFree+0x8c>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4013      	ands	r3, r2
 8005dca:	d102      	bne.n	8005dd2 <vPortFree+0x32>
 8005dcc:	b672      	cpsid	i
 8005dce:	46c0      	nop			@ (mov r8, r8)
 8005dd0:	e7fd      	b.n	8005dce <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d002      	beq.n	8005de0 <vPortFree+0x40>
 8005dda:	b672      	cpsid	i
 8005ddc:	46c0      	nop			@ (mov r8, r8)
 8005dde:	e7fd      	b.n	8005ddc <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	4b11      	ldr	r3, [pc, #68]	@ (8005e2c <vPortFree+0x8c>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4013      	ands	r3, r2
 8005dea:	d01a      	beq.n	8005e22 <vPortFree+0x82>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d116      	bne.n	8005e22 <vPortFree+0x82>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	685a      	ldr	r2, [r3, #4]
 8005df8:	4b0c      	ldr	r3, [pc, #48]	@ (8005e2c <vPortFree+0x8c>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	43db      	mvns	r3, r3
 8005dfe:	401a      	ands	r2, r3
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e04:	f7ff fb14 	bl	8005430 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	4b08      	ldr	r3, [pc, #32]	@ (8005e30 <vPortFree+0x90>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	18d2      	adds	r2, r2, r3
 8005e12:	4b07      	ldr	r3, [pc, #28]	@ (8005e30 <vPortFree+0x90>)
 8005e14:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	0018      	movs	r0, r3
 8005e1a:	f000 f86b 	bl	8005ef4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005e1e:	f7ff fb13 	bl	8005448 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e22:	46c0      	nop			@ (mov r8, r8)
 8005e24:	46bd      	mov	sp, r7
 8005e26:	b004      	add	sp, #16
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	46c0      	nop			@ (mov r8, r8)
 8005e2c:	20001344 	.word	0x20001344
 8005e30:	2000133c 	.word	0x2000133c

08005e34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e3a:	23c0      	movs	r3, #192	@ 0xc0
 8005e3c:	011b      	lsls	r3, r3, #4
 8005e3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e40:	4b26      	ldr	r3, [pc, #152]	@ (8005edc <prvHeapInit+0xa8>)
 8005e42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2207      	movs	r2, #7
 8005e48:	4013      	ands	r3, r2
 8005e4a:	d00c      	beq.n	8005e66 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	3307      	adds	r3, #7
 8005e50:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2207      	movs	r2, #7
 8005e56:	4393      	bics	r3, r2
 8005e58:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	1ad2      	subs	r2, r2, r3
 8005e60:	4b1e      	ldr	r3, [pc, #120]	@ (8005edc <prvHeapInit+0xa8>)
 8005e62:	18d3      	adds	r3, r2, r3
 8005e64:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8005ee0 <prvHeapInit+0xac>)
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e70:	4b1b      	ldr	r3, [pc, #108]	@ (8005ee0 <prvHeapInit+0xac>)
 8005e72:	2200      	movs	r2, #0
 8005e74:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	18d3      	adds	r3, r2, r3
 8005e7c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e7e:	2208      	movs	r2, #8
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	1a9b      	subs	r3, r3, r2
 8005e84:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2207      	movs	r2, #7
 8005e8a:	4393      	bics	r3, r2
 8005e8c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	4b14      	ldr	r3, [pc, #80]	@ (8005ee4 <prvHeapInit+0xb0>)
 8005e92:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8005e94:	4b13      	ldr	r3, [pc, #76]	@ (8005ee4 <prvHeapInit+0xb0>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e9c:	4b11      	ldr	r3, [pc, #68]	@ (8005ee4 <prvHeapInit+0xb0>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	1ad2      	subs	r2, r2, r3
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8005ee4 <prvHeapInit+0xb0>)
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685a      	ldr	r2, [r3, #4]
 8005ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8005ee8 <prvHeapInit+0xb4>)
 8005ec0:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	685a      	ldr	r2, [r3, #4]
 8005ec6:	4b09      	ldr	r3, [pc, #36]	@ (8005eec <prvHeapInit+0xb8>)
 8005ec8:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005eca:	4b09      	ldr	r3, [pc, #36]	@ (8005ef0 <prvHeapInit+0xbc>)
 8005ecc:	2280      	movs	r2, #128	@ 0x80
 8005ece:	0612      	lsls	r2, r2, #24
 8005ed0:	601a      	str	r2, [r3, #0]
}
 8005ed2:	46c0      	nop			@ (mov r8, r8)
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	b004      	add	sp, #16
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	46c0      	nop			@ (mov r8, r8)
 8005edc:	20000730 	.word	0x20000730
 8005ee0:	20001330 	.word	0x20001330
 8005ee4:	20001338 	.word	0x20001338
 8005ee8:	20001340 	.word	0x20001340
 8005eec:	2000133c 	.word	0x2000133c
 8005ef0:	20001344 	.word	0x20001344

08005ef4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005efc:	4b27      	ldr	r3, [pc, #156]	@ (8005f9c <prvInsertBlockIntoFreeList+0xa8>)
 8005efe:	60fb      	str	r3, [r7, #12]
 8005f00:	e002      	b.n	8005f08 <prvInsertBlockIntoFreeList+0x14>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	60fb      	str	r3, [r7, #12]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d8f7      	bhi.n	8005f02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	18d3      	adds	r3, r2, r3
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d108      	bne.n	8005f36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	18d2      	adds	r2, r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	18d2      	adds	r2, r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d118      	bne.n	8005f7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	4b14      	ldr	r3, [pc, #80]	@ (8005fa0 <prvInsertBlockIntoFreeList+0xac>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d00d      	beq.n	8005f72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	18d2      	adds	r2, r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	601a      	str	r2, [r3, #0]
 8005f70:	e008      	b.n	8005f84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f72:	4b0b      	ldr	r3, [pc, #44]	@ (8005fa0 <prvInsertBlockIntoFreeList+0xac>)
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	601a      	str	r2, [r3, #0]
 8005f7a:	e003      	b.n	8005f84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d002      	beq.n	8005f92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f92:	46c0      	nop			@ (mov r8, r8)
 8005f94:	46bd      	mov	sp, r7
 8005f96:	b004      	add	sp, #16
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	46c0      	nop			@ (mov r8, r8)
 8005f9c:	20001330 	.word	0x20001330
 8005fa0:	20001338 	.word	0x20001338

08005fa4 <malloc>:
 8005fa4:	b510      	push	{r4, lr}
 8005fa6:	4b03      	ldr	r3, [pc, #12]	@ (8005fb4 <malloc+0x10>)
 8005fa8:	0001      	movs	r1, r0
 8005faa:	6818      	ldr	r0, [r3, #0]
 8005fac:	f000 f826 	bl	8005ffc <_malloc_r>
 8005fb0:	bd10      	pop	{r4, pc}
 8005fb2:	46c0      	nop			@ (mov r8, r8)
 8005fb4:	20000064 	.word	0x20000064

08005fb8 <sbrk_aligned>:
 8005fb8:	b570      	push	{r4, r5, r6, lr}
 8005fba:	4e0f      	ldr	r6, [pc, #60]	@ (8005ff8 <sbrk_aligned+0x40>)
 8005fbc:	000d      	movs	r5, r1
 8005fbe:	6831      	ldr	r1, [r6, #0]
 8005fc0:	0004      	movs	r4, r0
 8005fc2:	2900      	cmp	r1, #0
 8005fc4:	d102      	bne.n	8005fcc <sbrk_aligned+0x14>
 8005fc6:	f000 fe61 	bl	8006c8c <_sbrk_r>
 8005fca:	6030      	str	r0, [r6, #0]
 8005fcc:	0029      	movs	r1, r5
 8005fce:	0020      	movs	r0, r4
 8005fd0:	f000 fe5c 	bl	8006c8c <_sbrk_r>
 8005fd4:	1c43      	adds	r3, r0, #1
 8005fd6:	d103      	bne.n	8005fe0 <sbrk_aligned+0x28>
 8005fd8:	2501      	movs	r5, #1
 8005fda:	426d      	negs	r5, r5
 8005fdc:	0028      	movs	r0, r5
 8005fde:	bd70      	pop	{r4, r5, r6, pc}
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	1cc5      	adds	r5, r0, #3
 8005fe4:	439d      	bics	r5, r3
 8005fe6:	42a8      	cmp	r0, r5
 8005fe8:	d0f8      	beq.n	8005fdc <sbrk_aligned+0x24>
 8005fea:	1a29      	subs	r1, r5, r0
 8005fec:	0020      	movs	r0, r4
 8005fee:	f000 fe4d 	bl	8006c8c <_sbrk_r>
 8005ff2:	3001      	adds	r0, #1
 8005ff4:	d1f2      	bne.n	8005fdc <sbrk_aligned+0x24>
 8005ff6:	e7ef      	b.n	8005fd8 <sbrk_aligned+0x20>
 8005ff8:	20001348 	.word	0x20001348

08005ffc <_malloc_r>:
 8005ffc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ffe:	2203      	movs	r2, #3
 8006000:	1ccb      	adds	r3, r1, #3
 8006002:	4393      	bics	r3, r2
 8006004:	3308      	adds	r3, #8
 8006006:	0005      	movs	r5, r0
 8006008:	001f      	movs	r7, r3
 800600a:	2b0c      	cmp	r3, #12
 800600c:	d234      	bcs.n	8006078 <_malloc_r+0x7c>
 800600e:	270c      	movs	r7, #12
 8006010:	42b9      	cmp	r1, r7
 8006012:	d833      	bhi.n	800607c <_malloc_r+0x80>
 8006014:	0028      	movs	r0, r5
 8006016:	f000 f871 	bl	80060fc <__malloc_lock>
 800601a:	4e37      	ldr	r6, [pc, #220]	@ (80060f8 <_malloc_r+0xfc>)
 800601c:	6833      	ldr	r3, [r6, #0]
 800601e:	001c      	movs	r4, r3
 8006020:	2c00      	cmp	r4, #0
 8006022:	d12f      	bne.n	8006084 <_malloc_r+0x88>
 8006024:	0039      	movs	r1, r7
 8006026:	0028      	movs	r0, r5
 8006028:	f7ff ffc6 	bl	8005fb8 <sbrk_aligned>
 800602c:	0004      	movs	r4, r0
 800602e:	1c43      	adds	r3, r0, #1
 8006030:	d15f      	bne.n	80060f2 <_malloc_r+0xf6>
 8006032:	6834      	ldr	r4, [r6, #0]
 8006034:	9400      	str	r4, [sp, #0]
 8006036:	9b00      	ldr	r3, [sp, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d14a      	bne.n	80060d2 <_malloc_r+0xd6>
 800603c:	2c00      	cmp	r4, #0
 800603e:	d052      	beq.n	80060e6 <_malloc_r+0xea>
 8006040:	6823      	ldr	r3, [r4, #0]
 8006042:	0028      	movs	r0, r5
 8006044:	18e3      	adds	r3, r4, r3
 8006046:	9900      	ldr	r1, [sp, #0]
 8006048:	9301      	str	r3, [sp, #4]
 800604a:	f000 fe1f 	bl	8006c8c <_sbrk_r>
 800604e:	9b01      	ldr	r3, [sp, #4]
 8006050:	4283      	cmp	r3, r0
 8006052:	d148      	bne.n	80060e6 <_malloc_r+0xea>
 8006054:	6823      	ldr	r3, [r4, #0]
 8006056:	0028      	movs	r0, r5
 8006058:	1aff      	subs	r7, r7, r3
 800605a:	0039      	movs	r1, r7
 800605c:	f7ff ffac 	bl	8005fb8 <sbrk_aligned>
 8006060:	3001      	adds	r0, #1
 8006062:	d040      	beq.n	80060e6 <_malloc_r+0xea>
 8006064:	6823      	ldr	r3, [r4, #0]
 8006066:	19db      	adds	r3, r3, r7
 8006068:	6023      	str	r3, [r4, #0]
 800606a:	6833      	ldr	r3, [r6, #0]
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	2a00      	cmp	r2, #0
 8006070:	d133      	bne.n	80060da <_malloc_r+0xde>
 8006072:	9b00      	ldr	r3, [sp, #0]
 8006074:	6033      	str	r3, [r6, #0]
 8006076:	e019      	b.n	80060ac <_malloc_r+0xb0>
 8006078:	2b00      	cmp	r3, #0
 800607a:	dac9      	bge.n	8006010 <_malloc_r+0x14>
 800607c:	230c      	movs	r3, #12
 800607e:	602b      	str	r3, [r5, #0]
 8006080:	2000      	movs	r0, #0
 8006082:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006084:	6821      	ldr	r1, [r4, #0]
 8006086:	1bc9      	subs	r1, r1, r7
 8006088:	d420      	bmi.n	80060cc <_malloc_r+0xd0>
 800608a:	290b      	cmp	r1, #11
 800608c:	d90a      	bls.n	80060a4 <_malloc_r+0xa8>
 800608e:	19e2      	adds	r2, r4, r7
 8006090:	6027      	str	r7, [r4, #0]
 8006092:	42a3      	cmp	r3, r4
 8006094:	d104      	bne.n	80060a0 <_malloc_r+0xa4>
 8006096:	6032      	str	r2, [r6, #0]
 8006098:	6863      	ldr	r3, [r4, #4]
 800609a:	6011      	str	r1, [r2, #0]
 800609c:	6053      	str	r3, [r2, #4]
 800609e:	e005      	b.n	80060ac <_malloc_r+0xb0>
 80060a0:	605a      	str	r2, [r3, #4]
 80060a2:	e7f9      	b.n	8006098 <_malloc_r+0x9c>
 80060a4:	6862      	ldr	r2, [r4, #4]
 80060a6:	42a3      	cmp	r3, r4
 80060a8:	d10e      	bne.n	80060c8 <_malloc_r+0xcc>
 80060aa:	6032      	str	r2, [r6, #0]
 80060ac:	0028      	movs	r0, r5
 80060ae:	f000 f82d 	bl	800610c <__malloc_unlock>
 80060b2:	0020      	movs	r0, r4
 80060b4:	2207      	movs	r2, #7
 80060b6:	300b      	adds	r0, #11
 80060b8:	1d23      	adds	r3, r4, #4
 80060ba:	4390      	bics	r0, r2
 80060bc:	1ac2      	subs	r2, r0, r3
 80060be:	4298      	cmp	r0, r3
 80060c0:	d0df      	beq.n	8006082 <_malloc_r+0x86>
 80060c2:	1a1b      	subs	r3, r3, r0
 80060c4:	50a3      	str	r3, [r4, r2]
 80060c6:	e7dc      	b.n	8006082 <_malloc_r+0x86>
 80060c8:	605a      	str	r2, [r3, #4]
 80060ca:	e7ef      	b.n	80060ac <_malloc_r+0xb0>
 80060cc:	0023      	movs	r3, r4
 80060ce:	6864      	ldr	r4, [r4, #4]
 80060d0:	e7a6      	b.n	8006020 <_malloc_r+0x24>
 80060d2:	9c00      	ldr	r4, [sp, #0]
 80060d4:	6863      	ldr	r3, [r4, #4]
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	e7ad      	b.n	8006036 <_malloc_r+0x3a>
 80060da:	001a      	movs	r2, r3
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	42a3      	cmp	r3, r4
 80060e0:	d1fb      	bne.n	80060da <_malloc_r+0xde>
 80060e2:	2300      	movs	r3, #0
 80060e4:	e7da      	b.n	800609c <_malloc_r+0xa0>
 80060e6:	230c      	movs	r3, #12
 80060e8:	0028      	movs	r0, r5
 80060ea:	602b      	str	r3, [r5, #0]
 80060ec:	f000 f80e 	bl	800610c <__malloc_unlock>
 80060f0:	e7c6      	b.n	8006080 <_malloc_r+0x84>
 80060f2:	6007      	str	r7, [r0, #0]
 80060f4:	e7da      	b.n	80060ac <_malloc_r+0xb0>
 80060f6:	46c0      	nop			@ (mov r8, r8)
 80060f8:	2000134c 	.word	0x2000134c

080060fc <__malloc_lock>:
 80060fc:	b510      	push	{r4, lr}
 80060fe:	4802      	ldr	r0, [pc, #8]	@ (8006108 <__malloc_lock+0xc>)
 8006100:	f000 fe15 	bl	8006d2e <__retarget_lock_acquire_recursive>
 8006104:	bd10      	pop	{r4, pc}
 8006106:	46c0      	nop			@ (mov r8, r8)
 8006108:	20001490 	.word	0x20001490

0800610c <__malloc_unlock>:
 800610c:	b510      	push	{r4, lr}
 800610e:	4802      	ldr	r0, [pc, #8]	@ (8006118 <__malloc_unlock+0xc>)
 8006110:	f000 fe0e 	bl	8006d30 <__retarget_lock_release_recursive>
 8006114:	bd10      	pop	{r4, pc}
 8006116:	46c0      	nop			@ (mov r8, r8)
 8006118:	20001490 	.word	0x20001490

0800611c <__cvt>:
 800611c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800611e:	001f      	movs	r7, r3
 8006120:	2300      	movs	r3, #0
 8006122:	0016      	movs	r6, r2
 8006124:	b08b      	sub	sp, #44	@ 0x2c
 8006126:	429f      	cmp	r7, r3
 8006128:	da04      	bge.n	8006134 <__cvt+0x18>
 800612a:	2180      	movs	r1, #128	@ 0x80
 800612c:	0609      	lsls	r1, r1, #24
 800612e:	187b      	adds	r3, r7, r1
 8006130:	001f      	movs	r7, r3
 8006132:	232d      	movs	r3, #45	@ 0x2d
 8006134:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006136:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8006138:	7013      	strb	r3, [r2, #0]
 800613a:	2320      	movs	r3, #32
 800613c:	2203      	movs	r2, #3
 800613e:	439d      	bics	r5, r3
 8006140:	2d46      	cmp	r5, #70	@ 0x46
 8006142:	d007      	beq.n	8006154 <__cvt+0x38>
 8006144:	002b      	movs	r3, r5
 8006146:	3b45      	subs	r3, #69	@ 0x45
 8006148:	4259      	negs	r1, r3
 800614a:	414b      	adcs	r3, r1
 800614c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800614e:	3a01      	subs	r2, #1
 8006150:	18cb      	adds	r3, r1, r3
 8006152:	9310      	str	r3, [sp, #64]	@ 0x40
 8006154:	ab09      	add	r3, sp, #36	@ 0x24
 8006156:	9304      	str	r3, [sp, #16]
 8006158:	ab08      	add	r3, sp, #32
 800615a:	9303      	str	r3, [sp, #12]
 800615c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800615e:	9200      	str	r2, [sp, #0]
 8006160:	9302      	str	r3, [sp, #8]
 8006162:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006164:	0032      	movs	r2, r6
 8006166:	9301      	str	r3, [sp, #4]
 8006168:	003b      	movs	r3, r7
 800616a:	f000 fe85 	bl	8006e78 <_dtoa_r>
 800616e:	0004      	movs	r4, r0
 8006170:	2d47      	cmp	r5, #71	@ 0x47
 8006172:	d11b      	bne.n	80061ac <__cvt+0x90>
 8006174:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006176:	07db      	lsls	r3, r3, #31
 8006178:	d511      	bpl.n	800619e <__cvt+0x82>
 800617a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800617c:	18c3      	adds	r3, r0, r3
 800617e:	9307      	str	r3, [sp, #28]
 8006180:	2200      	movs	r2, #0
 8006182:	2300      	movs	r3, #0
 8006184:	0030      	movs	r0, r6
 8006186:	0039      	movs	r1, r7
 8006188:	f7fa f960 	bl	800044c <__aeabi_dcmpeq>
 800618c:	2800      	cmp	r0, #0
 800618e:	d001      	beq.n	8006194 <__cvt+0x78>
 8006190:	9b07      	ldr	r3, [sp, #28]
 8006192:	9309      	str	r3, [sp, #36]	@ 0x24
 8006194:	2230      	movs	r2, #48	@ 0x30
 8006196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006198:	9907      	ldr	r1, [sp, #28]
 800619a:	428b      	cmp	r3, r1
 800619c:	d320      	bcc.n	80061e0 <__cvt+0xc4>
 800619e:	0020      	movs	r0, r4
 80061a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061a2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80061a4:	1b1b      	subs	r3, r3, r4
 80061a6:	6013      	str	r3, [r2, #0]
 80061a8:	b00b      	add	sp, #44	@ 0x2c
 80061aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80061ae:	18c3      	adds	r3, r0, r3
 80061b0:	9307      	str	r3, [sp, #28]
 80061b2:	2d46      	cmp	r5, #70	@ 0x46
 80061b4:	d1e4      	bne.n	8006180 <__cvt+0x64>
 80061b6:	7803      	ldrb	r3, [r0, #0]
 80061b8:	2b30      	cmp	r3, #48	@ 0x30
 80061ba:	d10c      	bne.n	80061d6 <__cvt+0xba>
 80061bc:	2200      	movs	r2, #0
 80061be:	2300      	movs	r3, #0
 80061c0:	0030      	movs	r0, r6
 80061c2:	0039      	movs	r1, r7
 80061c4:	f7fa f942 	bl	800044c <__aeabi_dcmpeq>
 80061c8:	2800      	cmp	r0, #0
 80061ca:	d104      	bne.n	80061d6 <__cvt+0xba>
 80061cc:	2301      	movs	r3, #1
 80061ce:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80061d0:	1a9b      	subs	r3, r3, r2
 80061d2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80061d4:	6013      	str	r3, [r2, #0]
 80061d6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80061d8:	9a07      	ldr	r2, [sp, #28]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	18d3      	adds	r3, r2, r3
 80061de:	e7ce      	b.n	800617e <__cvt+0x62>
 80061e0:	1c59      	adds	r1, r3, #1
 80061e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80061e4:	701a      	strb	r2, [r3, #0]
 80061e6:	e7d6      	b.n	8006196 <__cvt+0x7a>

080061e8 <__exponent>:
 80061e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061ea:	232b      	movs	r3, #43	@ 0x2b
 80061ec:	0005      	movs	r5, r0
 80061ee:	000c      	movs	r4, r1
 80061f0:	b085      	sub	sp, #20
 80061f2:	7002      	strb	r2, [r0, #0]
 80061f4:	2900      	cmp	r1, #0
 80061f6:	da01      	bge.n	80061fc <__exponent+0x14>
 80061f8:	424c      	negs	r4, r1
 80061fa:	3302      	adds	r3, #2
 80061fc:	706b      	strb	r3, [r5, #1]
 80061fe:	2c09      	cmp	r4, #9
 8006200:	dd2c      	ble.n	800625c <__exponent+0x74>
 8006202:	ab02      	add	r3, sp, #8
 8006204:	1dde      	adds	r6, r3, #7
 8006206:	0020      	movs	r0, r4
 8006208:	210a      	movs	r1, #10
 800620a:	f7fa f909 	bl	8000420 <__aeabi_idivmod>
 800620e:	0037      	movs	r7, r6
 8006210:	3130      	adds	r1, #48	@ 0x30
 8006212:	3e01      	subs	r6, #1
 8006214:	0020      	movs	r0, r4
 8006216:	7031      	strb	r1, [r6, #0]
 8006218:	210a      	movs	r1, #10
 800621a:	9401      	str	r4, [sp, #4]
 800621c:	f7fa f81a 	bl	8000254 <__divsi3>
 8006220:	9b01      	ldr	r3, [sp, #4]
 8006222:	0004      	movs	r4, r0
 8006224:	2b63      	cmp	r3, #99	@ 0x63
 8006226:	dcee      	bgt.n	8006206 <__exponent+0x1e>
 8006228:	1eba      	subs	r2, r7, #2
 800622a:	1ca8      	adds	r0, r5, #2
 800622c:	0001      	movs	r1, r0
 800622e:	0013      	movs	r3, r2
 8006230:	3430      	adds	r4, #48	@ 0x30
 8006232:	7014      	strb	r4, [r2, #0]
 8006234:	ac02      	add	r4, sp, #8
 8006236:	3407      	adds	r4, #7
 8006238:	429c      	cmp	r4, r3
 800623a:	d80a      	bhi.n	8006252 <__exponent+0x6a>
 800623c:	2300      	movs	r3, #0
 800623e:	42a2      	cmp	r2, r4
 8006240:	d803      	bhi.n	800624a <__exponent+0x62>
 8006242:	3309      	adds	r3, #9
 8006244:	aa02      	add	r2, sp, #8
 8006246:	189b      	adds	r3, r3, r2
 8006248:	1bdb      	subs	r3, r3, r7
 800624a:	18c0      	adds	r0, r0, r3
 800624c:	1b40      	subs	r0, r0, r5
 800624e:	b005      	add	sp, #20
 8006250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006252:	781c      	ldrb	r4, [r3, #0]
 8006254:	3301      	adds	r3, #1
 8006256:	700c      	strb	r4, [r1, #0]
 8006258:	3101      	adds	r1, #1
 800625a:	e7eb      	b.n	8006234 <__exponent+0x4c>
 800625c:	2330      	movs	r3, #48	@ 0x30
 800625e:	18e4      	adds	r4, r4, r3
 8006260:	70ab      	strb	r3, [r5, #2]
 8006262:	1d28      	adds	r0, r5, #4
 8006264:	70ec      	strb	r4, [r5, #3]
 8006266:	e7f1      	b.n	800624c <__exponent+0x64>

08006268 <_printf_float>:
 8006268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800626a:	b097      	sub	sp, #92	@ 0x5c
 800626c:	000d      	movs	r5, r1
 800626e:	920a      	str	r2, [sp, #40]	@ 0x28
 8006270:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8006272:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006274:	9009      	str	r0, [sp, #36]	@ 0x24
 8006276:	f000 fccb 	bl	8006c10 <_localeconv_r>
 800627a:	6803      	ldr	r3, [r0, #0]
 800627c:	0018      	movs	r0, r3
 800627e:	930d      	str	r3, [sp, #52]	@ 0x34
 8006280:	f7f9 ff42 	bl	8000108 <strlen>
 8006284:	2300      	movs	r3, #0
 8006286:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006288:	9314      	str	r3, [sp, #80]	@ 0x50
 800628a:	7e2b      	ldrb	r3, [r5, #24]
 800628c:	2207      	movs	r2, #7
 800628e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006290:	682b      	ldr	r3, [r5, #0]
 8006292:	930e      	str	r3, [sp, #56]	@ 0x38
 8006294:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006296:	6823      	ldr	r3, [r4, #0]
 8006298:	05c9      	lsls	r1, r1, #23
 800629a:	d545      	bpl.n	8006328 <_printf_float+0xc0>
 800629c:	189b      	adds	r3, r3, r2
 800629e:	4393      	bics	r3, r2
 80062a0:	001a      	movs	r2, r3
 80062a2:	3208      	adds	r2, #8
 80062a4:	6022      	str	r2, [r4, #0]
 80062a6:	2201      	movs	r2, #1
 80062a8:	681e      	ldr	r6, [r3, #0]
 80062aa:	685f      	ldr	r7, [r3, #4]
 80062ac:	007b      	lsls	r3, r7, #1
 80062ae:	085b      	lsrs	r3, r3, #1
 80062b0:	9311      	str	r3, [sp, #68]	@ 0x44
 80062b2:	9610      	str	r6, [sp, #64]	@ 0x40
 80062b4:	64ae      	str	r6, [r5, #72]	@ 0x48
 80062b6:	64ef      	str	r7, [r5, #76]	@ 0x4c
 80062b8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80062ba:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80062bc:	4ba7      	ldr	r3, [pc, #668]	@ (800655c <_printf_float+0x2f4>)
 80062be:	4252      	negs	r2, r2
 80062c0:	f7fb fefe 	bl	80020c0 <__aeabi_dcmpun>
 80062c4:	2800      	cmp	r0, #0
 80062c6:	d131      	bne.n	800632c <_printf_float+0xc4>
 80062c8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80062ca:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80062cc:	2201      	movs	r2, #1
 80062ce:	4ba3      	ldr	r3, [pc, #652]	@ (800655c <_printf_float+0x2f4>)
 80062d0:	4252      	negs	r2, r2
 80062d2:	f7fa f8cb 	bl	800046c <__aeabi_dcmple>
 80062d6:	2800      	cmp	r0, #0
 80062d8:	d128      	bne.n	800632c <_printf_float+0xc4>
 80062da:	2200      	movs	r2, #0
 80062dc:	2300      	movs	r3, #0
 80062de:	0030      	movs	r0, r6
 80062e0:	0039      	movs	r1, r7
 80062e2:	f7fa f8b9 	bl	8000458 <__aeabi_dcmplt>
 80062e6:	2800      	cmp	r0, #0
 80062e8:	d003      	beq.n	80062f2 <_printf_float+0x8a>
 80062ea:	002b      	movs	r3, r5
 80062ec:	222d      	movs	r2, #45	@ 0x2d
 80062ee:	3343      	adds	r3, #67	@ 0x43
 80062f0:	701a      	strb	r2, [r3, #0]
 80062f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80062f4:	4f9a      	ldr	r7, [pc, #616]	@ (8006560 <_printf_float+0x2f8>)
 80062f6:	2b47      	cmp	r3, #71	@ 0x47
 80062f8:	d900      	bls.n	80062fc <_printf_float+0x94>
 80062fa:	4f9a      	ldr	r7, [pc, #616]	@ (8006564 <_printf_float+0x2fc>)
 80062fc:	2303      	movs	r3, #3
 80062fe:	2400      	movs	r4, #0
 8006300:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006302:	612b      	str	r3, [r5, #16]
 8006304:	3301      	adds	r3, #1
 8006306:	439a      	bics	r2, r3
 8006308:	602a      	str	r2, [r5, #0]
 800630a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800630c:	0029      	movs	r1, r5
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006312:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006314:	aa15      	add	r2, sp, #84	@ 0x54
 8006316:	f000 f9e5 	bl	80066e4 <_printf_common>
 800631a:	3001      	adds	r0, #1
 800631c:	d000      	beq.n	8006320 <_printf_float+0xb8>
 800631e:	e09f      	b.n	8006460 <_printf_float+0x1f8>
 8006320:	2001      	movs	r0, #1
 8006322:	4240      	negs	r0, r0
 8006324:	b017      	add	sp, #92	@ 0x5c
 8006326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006328:	3307      	adds	r3, #7
 800632a:	e7b8      	b.n	800629e <_printf_float+0x36>
 800632c:	0032      	movs	r2, r6
 800632e:	003b      	movs	r3, r7
 8006330:	0030      	movs	r0, r6
 8006332:	0039      	movs	r1, r7
 8006334:	f7fb fec4 	bl	80020c0 <__aeabi_dcmpun>
 8006338:	2800      	cmp	r0, #0
 800633a:	d00b      	beq.n	8006354 <_printf_float+0xec>
 800633c:	2f00      	cmp	r7, #0
 800633e:	da03      	bge.n	8006348 <_printf_float+0xe0>
 8006340:	002b      	movs	r3, r5
 8006342:	222d      	movs	r2, #45	@ 0x2d
 8006344:	3343      	adds	r3, #67	@ 0x43
 8006346:	701a      	strb	r2, [r3, #0]
 8006348:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800634a:	4f87      	ldr	r7, [pc, #540]	@ (8006568 <_printf_float+0x300>)
 800634c:	2b47      	cmp	r3, #71	@ 0x47
 800634e:	d9d5      	bls.n	80062fc <_printf_float+0x94>
 8006350:	4f86      	ldr	r7, [pc, #536]	@ (800656c <_printf_float+0x304>)
 8006352:	e7d3      	b.n	80062fc <_printf_float+0x94>
 8006354:	2220      	movs	r2, #32
 8006356:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8006358:	686b      	ldr	r3, [r5, #4]
 800635a:	4394      	bics	r4, r2
 800635c:	1c5a      	adds	r2, r3, #1
 800635e:	d146      	bne.n	80063ee <_printf_float+0x186>
 8006360:	3307      	adds	r3, #7
 8006362:	606b      	str	r3, [r5, #4]
 8006364:	2380      	movs	r3, #128	@ 0x80
 8006366:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006368:	00db      	lsls	r3, r3, #3
 800636a:	4313      	orrs	r3, r2
 800636c:	2200      	movs	r2, #0
 800636e:	602b      	str	r3, [r5, #0]
 8006370:	9206      	str	r2, [sp, #24]
 8006372:	aa14      	add	r2, sp, #80	@ 0x50
 8006374:	9205      	str	r2, [sp, #20]
 8006376:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006378:	a90a      	add	r1, sp, #40	@ 0x28
 800637a:	9204      	str	r2, [sp, #16]
 800637c:	aa13      	add	r2, sp, #76	@ 0x4c
 800637e:	9203      	str	r2, [sp, #12]
 8006380:	2223      	movs	r2, #35	@ 0x23
 8006382:	1852      	adds	r2, r2, r1
 8006384:	9202      	str	r2, [sp, #8]
 8006386:	9301      	str	r3, [sp, #4]
 8006388:	686b      	ldr	r3, [r5, #4]
 800638a:	0032      	movs	r2, r6
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006390:	003b      	movs	r3, r7
 8006392:	f7ff fec3 	bl	800611c <__cvt>
 8006396:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006398:	0007      	movs	r7, r0
 800639a:	2c47      	cmp	r4, #71	@ 0x47
 800639c:	d12d      	bne.n	80063fa <_printf_float+0x192>
 800639e:	1cd3      	adds	r3, r2, #3
 80063a0:	db02      	blt.n	80063a8 <_printf_float+0x140>
 80063a2:	686b      	ldr	r3, [r5, #4]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	dd48      	ble.n	800643a <_printf_float+0x1d2>
 80063a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80063aa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80063ac:	3b02      	subs	r3, #2
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	930c      	str	r3, [sp, #48]	@ 0x30
 80063b2:	0028      	movs	r0, r5
 80063b4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80063b6:	3901      	subs	r1, #1
 80063b8:	3050      	adds	r0, #80	@ 0x50
 80063ba:	9113      	str	r1, [sp, #76]	@ 0x4c
 80063bc:	f7ff ff14 	bl	80061e8 <__exponent>
 80063c0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80063c2:	0004      	movs	r4, r0
 80063c4:	1813      	adds	r3, r2, r0
 80063c6:	612b      	str	r3, [r5, #16]
 80063c8:	2a01      	cmp	r2, #1
 80063ca:	dc02      	bgt.n	80063d2 <_printf_float+0x16a>
 80063cc:	682a      	ldr	r2, [r5, #0]
 80063ce:	07d2      	lsls	r2, r2, #31
 80063d0:	d501      	bpl.n	80063d6 <_printf_float+0x16e>
 80063d2:	3301      	adds	r3, #1
 80063d4:	612b      	str	r3, [r5, #16]
 80063d6:	2323      	movs	r3, #35	@ 0x23
 80063d8:	aa0a      	add	r2, sp, #40	@ 0x28
 80063da:	189b      	adds	r3, r3, r2
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d100      	bne.n	80063e4 <_printf_float+0x17c>
 80063e2:	e792      	b.n	800630a <_printf_float+0xa2>
 80063e4:	002b      	movs	r3, r5
 80063e6:	222d      	movs	r2, #45	@ 0x2d
 80063e8:	3343      	adds	r3, #67	@ 0x43
 80063ea:	701a      	strb	r2, [r3, #0]
 80063ec:	e78d      	b.n	800630a <_printf_float+0xa2>
 80063ee:	2c47      	cmp	r4, #71	@ 0x47
 80063f0:	d1b8      	bne.n	8006364 <_printf_float+0xfc>
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1b6      	bne.n	8006364 <_printf_float+0xfc>
 80063f6:	3301      	adds	r3, #1
 80063f8:	e7b3      	b.n	8006362 <_printf_float+0xfa>
 80063fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80063fc:	0011      	movs	r1, r2
 80063fe:	2b65      	cmp	r3, #101	@ 0x65
 8006400:	d9d7      	bls.n	80063b2 <_printf_float+0x14a>
 8006402:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006404:	2b66      	cmp	r3, #102	@ 0x66
 8006406:	d11a      	bne.n	800643e <_printf_float+0x1d6>
 8006408:	686b      	ldr	r3, [r5, #4]
 800640a:	2a00      	cmp	r2, #0
 800640c:	dd09      	ble.n	8006422 <_printf_float+0x1ba>
 800640e:	612a      	str	r2, [r5, #16]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d102      	bne.n	800641a <_printf_float+0x1b2>
 8006414:	6829      	ldr	r1, [r5, #0]
 8006416:	07c9      	lsls	r1, r1, #31
 8006418:	d50b      	bpl.n	8006432 <_printf_float+0x1ca>
 800641a:	3301      	adds	r3, #1
 800641c:	189b      	adds	r3, r3, r2
 800641e:	612b      	str	r3, [r5, #16]
 8006420:	e007      	b.n	8006432 <_printf_float+0x1ca>
 8006422:	2b00      	cmp	r3, #0
 8006424:	d103      	bne.n	800642e <_printf_float+0x1c6>
 8006426:	2201      	movs	r2, #1
 8006428:	6829      	ldr	r1, [r5, #0]
 800642a:	4211      	tst	r1, r2
 800642c:	d000      	beq.n	8006430 <_printf_float+0x1c8>
 800642e:	1c9a      	adds	r2, r3, #2
 8006430:	612a      	str	r2, [r5, #16]
 8006432:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006434:	2400      	movs	r4, #0
 8006436:	65ab      	str	r3, [r5, #88]	@ 0x58
 8006438:	e7cd      	b.n	80063d6 <_printf_float+0x16e>
 800643a:	2367      	movs	r3, #103	@ 0x67
 800643c:	930c      	str	r3, [sp, #48]	@ 0x30
 800643e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006440:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006442:	4299      	cmp	r1, r3
 8006444:	db06      	blt.n	8006454 <_printf_float+0x1ec>
 8006446:	682b      	ldr	r3, [r5, #0]
 8006448:	6129      	str	r1, [r5, #16]
 800644a:	07db      	lsls	r3, r3, #31
 800644c:	d5f1      	bpl.n	8006432 <_printf_float+0x1ca>
 800644e:	3101      	adds	r1, #1
 8006450:	6129      	str	r1, [r5, #16]
 8006452:	e7ee      	b.n	8006432 <_printf_float+0x1ca>
 8006454:	2201      	movs	r2, #1
 8006456:	2900      	cmp	r1, #0
 8006458:	dce0      	bgt.n	800641c <_printf_float+0x1b4>
 800645a:	1892      	adds	r2, r2, r2
 800645c:	1a52      	subs	r2, r2, r1
 800645e:	e7dd      	b.n	800641c <_printf_float+0x1b4>
 8006460:	682a      	ldr	r2, [r5, #0]
 8006462:	0553      	lsls	r3, r2, #21
 8006464:	d408      	bmi.n	8006478 <_printf_float+0x210>
 8006466:	692b      	ldr	r3, [r5, #16]
 8006468:	003a      	movs	r2, r7
 800646a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800646c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800646e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006470:	47a0      	blx	r4
 8006472:	3001      	adds	r0, #1
 8006474:	d129      	bne.n	80064ca <_printf_float+0x262>
 8006476:	e753      	b.n	8006320 <_printf_float+0xb8>
 8006478:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800647a:	2b65      	cmp	r3, #101	@ 0x65
 800647c:	d800      	bhi.n	8006480 <_printf_float+0x218>
 800647e:	e0da      	b.n	8006636 <_printf_float+0x3ce>
 8006480:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8006482:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8006484:	2200      	movs	r2, #0
 8006486:	2300      	movs	r3, #0
 8006488:	f7f9 ffe0 	bl	800044c <__aeabi_dcmpeq>
 800648c:	2800      	cmp	r0, #0
 800648e:	d033      	beq.n	80064f8 <_printf_float+0x290>
 8006490:	2301      	movs	r3, #1
 8006492:	4a37      	ldr	r2, [pc, #220]	@ (8006570 <_printf_float+0x308>)
 8006494:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006496:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006498:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800649a:	47a0      	blx	r4
 800649c:	3001      	adds	r0, #1
 800649e:	d100      	bne.n	80064a2 <_printf_float+0x23a>
 80064a0:	e73e      	b.n	8006320 <_printf_float+0xb8>
 80064a2:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80064a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80064a6:	42b3      	cmp	r3, r6
 80064a8:	db02      	blt.n	80064b0 <_printf_float+0x248>
 80064aa:	682b      	ldr	r3, [r5, #0]
 80064ac:	07db      	lsls	r3, r3, #31
 80064ae:	d50c      	bpl.n	80064ca <_printf_float+0x262>
 80064b0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80064b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80064b6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80064b8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80064ba:	47a0      	blx	r4
 80064bc:	2400      	movs	r4, #0
 80064be:	3001      	adds	r0, #1
 80064c0:	d100      	bne.n	80064c4 <_printf_float+0x25c>
 80064c2:	e72d      	b.n	8006320 <_printf_float+0xb8>
 80064c4:	1e73      	subs	r3, r6, #1
 80064c6:	42a3      	cmp	r3, r4
 80064c8:	dc0a      	bgt.n	80064e0 <_printf_float+0x278>
 80064ca:	682b      	ldr	r3, [r5, #0]
 80064cc:	079b      	lsls	r3, r3, #30
 80064ce:	d500      	bpl.n	80064d2 <_printf_float+0x26a>
 80064d0:	e105      	b.n	80066de <_printf_float+0x476>
 80064d2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80064d4:	68e8      	ldr	r0, [r5, #12]
 80064d6:	4298      	cmp	r0, r3
 80064d8:	db00      	blt.n	80064dc <_printf_float+0x274>
 80064da:	e723      	b.n	8006324 <_printf_float+0xbc>
 80064dc:	0018      	movs	r0, r3
 80064de:	e721      	b.n	8006324 <_printf_float+0xbc>
 80064e0:	002a      	movs	r2, r5
 80064e2:	2301      	movs	r3, #1
 80064e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80064e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80064e8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80064ea:	321a      	adds	r2, #26
 80064ec:	47b8      	blx	r7
 80064ee:	3001      	adds	r0, #1
 80064f0:	d100      	bne.n	80064f4 <_printf_float+0x28c>
 80064f2:	e715      	b.n	8006320 <_printf_float+0xb8>
 80064f4:	3401      	adds	r4, #1
 80064f6:	e7e5      	b.n	80064c4 <_printf_float+0x25c>
 80064f8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	dc3a      	bgt.n	8006574 <_printf_float+0x30c>
 80064fe:	2301      	movs	r3, #1
 8006500:	4a1b      	ldr	r2, [pc, #108]	@ (8006570 <_printf_float+0x308>)
 8006502:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006504:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006506:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006508:	47a0      	blx	r4
 800650a:	3001      	adds	r0, #1
 800650c:	d100      	bne.n	8006510 <_printf_float+0x2a8>
 800650e:	e707      	b.n	8006320 <_printf_float+0xb8>
 8006510:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8006512:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006514:	4333      	orrs	r3, r6
 8006516:	d102      	bne.n	800651e <_printf_float+0x2b6>
 8006518:	682b      	ldr	r3, [r5, #0]
 800651a:	07db      	lsls	r3, r3, #31
 800651c:	d5d5      	bpl.n	80064ca <_printf_float+0x262>
 800651e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006520:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006522:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006524:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006526:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006528:	47a0      	blx	r4
 800652a:	2300      	movs	r3, #0
 800652c:	3001      	adds	r0, #1
 800652e:	d100      	bne.n	8006532 <_printf_float+0x2ca>
 8006530:	e6f6      	b.n	8006320 <_printf_float+0xb8>
 8006532:	930c      	str	r3, [sp, #48]	@ 0x30
 8006534:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006536:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006538:	425b      	negs	r3, r3
 800653a:	4293      	cmp	r3, r2
 800653c:	dc01      	bgt.n	8006542 <_printf_float+0x2da>
 800653e:	0033      	movs	r3, r6
 8006540:	e792      	b.n	8006468 <_printf_float+0x200>
 8006542:	002a      	movs	r2, r5
 8006544:	2301      	movs	r3, #1
 8006546:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006548:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800654a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800654c:	321a      	adds	r2, #26
 800654e:	47a0      	blx	r4
 8006550:	3001      	adds	r0, #1
 8006552:	d100      	bne.n	8006556 <_printf_float+0x2ee>
 8006554:	e6e4      	b.n	8006320 <_printf_float+0xb8>
 8006556:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006558:	3301      	adds	r3, #1
 800655a:	e7ea      	b.n	8006532 <_printf_float+0x2ca>
 800655c:	7fefffff 	.word	0x7fefffff
 8006560:	08008b08 	.word	0x08008b08
 8006564:	08008b0c 	.word	0x08008b0c
 8006568:	08008b10 	.word	0x08008b10
 800656c:	08008b14 	.word	0x08008b14
 8006570:	08008b18 	.word	0x08008b18
 8006574:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006576:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8006578:	930c      	str	r3, [sp, #48]	@ 0x30
 800657a:	429e      	cmp	r6, r3
 800657c:	dd00      	ble.n	8006580 <_printf_float+0x318>
 800657e:	001e      	movs	r6, r3
 8006580:	2e00      	cmp	r6, #0
 8006582:	dc31      	bgt.n	80065e8 <_printf_float+0x380>
 8006584:	43f3      	mvns	r3, r6
 8006586:	2400      	movs	r4, #0
 8006588:	17db      	asrs	r3, r3, #31
 800658a:	4033      	ands	r3, r6
 800658c:	930e      	str	r3, [sp, #56]	@ 0x38
 800658e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8006590:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006592:	1af3      	subs	r3, r6, r3
 8006594:	42a3      	cmp	r3, r4
 8006596:	dc30      	bgt.n	80065fa <_printf_float+0x392>
 8006598:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800659a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800659c:	429a      	cmp	r2, r3
 800659e:	dc38      	bgt.n	8006612 <_printf_float+0x3aa>
 80065a0:	682b      	ldr	r3, [r5, #0]
 80065a2:	07db      	lsls	r3, r3, #31
 80065a4:	d435      	bmi.n	8006612 <_printf_float+0x3aa>
 80065a6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80065a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80065aa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80065ac:	1b9b      	subs	r3, r3, r6
 80065ae:	1b14      	subs	r4, r2, r4
 80065b0:	429c      	cmp	r4, r3
 80065b2:	dd00      	ble.n	80065b6 <_printf_float+0x34e>
 80065b4:	001c      	movs	r4, r3
 80065b6:	2c00      	cmp	r4, #0
 80065b8:	dc34      	bgt.n	8006624 <_printf_float+0x3bc>
 80065ba:	43e3      	mvns	r3, r4
 80065bc:	2600      	movs	r6, #0
 80065be:	17db      	asrs	r3, r3, #31
 80065c0:	401c      	ands	r4, r3
 80065c2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80065c4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	1b1b      	subs	r3, r3, r4
 80065ca:	42b3      	cmp	r3, r6
 80065cc:	dc00      	bgt.n	80065d0 <_printf_float+0x368>
 80065ce:	e77c      	b.n	80064ca <_printf_float+0x262>
 80065d0:	002a      	movs	r2, r5
 80065d2:	2301      	movs	r3, #1
 80065d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80065d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80065d8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80065da:	321a      	adds	r2, #26
 80065dc:	47b8      	blx	r7
 80065de:	3001      	adds	r0, #1
 80065e0:	d100      	bne.n	80065e4 <_printf_float+0x37c>
 80065e2:	e69d      	b.n	8006320 <_printf_float+0xb8>
 80065e4:	3601      	adds	r6, #1
 80065e6:	e7ec      	b.n	80065c2 <_printf_float+0x35a>
 80065e8:	0033      	movs	r3, r6
 80065ea:	003a      	movs	r2, r7
 80065ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80065ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80065f0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80065f2:	47a0      	blx	r4
 80065f4:	3001      	adds	r0, #1
 80065f6:	d1c5      	bne.n	8006584 <_printf_float+0x31c>
 80065f8:	e692      	b.n	8006320 <_printf_float+0xb8>
 80065fa:	002a      	movs	r2, r5
 80065fc:	2301      	movs	r3, #1
 80065fe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006600:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006602:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006604:	321a      	adds	r2, #26
 8006606:	47b0      	blx	r6
 8006608:	3001      	adds	r0, #1
 800660a:	d100      	bne.n	800660e <_printf_float+0x3a6>
 800660c:	e688      	b.n	8006320 <_printf_float+0xb8>
 800660e:	3401      	adds	r4, #1
 8006610:	e7bd      	b.n	800658e <_printf_float+0x326>
 8006612:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006614:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006616:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006618:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800661a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800661c:	47a0      	blx	r4
 800661e:	3001      	adds	r0, #1
 8006620:	d1c1      	bne.n	80065a6 <_printf_float+0x33e>
 8006622:	e67d      	b.n	8006320 <_printf_float+0xb8>
 8006624:	19ba      	adds	r2, r7, r6
 8006626:	0023      	movs	r3, r4
 8006628:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800662a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800662c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800662e:	47b0      	blx	r6
 8006630:	3001      	adds	r0, #1
 8006632:	d1c2      	bne.n	80065ba <_printf_float+0x352>
 8006634:	e674      	b.n	8006320 <_printf_float+0xb8>
 8006636:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006638:	930c      	str	r3, [sp, #48]	@ 0x30
 800663a:	2b01      	cmp	r3, #1
 800663c:	dc02      	bgt.n	8006644 <_printf_float+0x3dc>
 800663e:	2301      	movs	r3, #1
 8006640:	421a      	tst	r2, r3
 8006642:	d039      	beq.n	80066b8 <_printf_float+0x450>
 8006644:	2301      	movs	r3, #1
 8006646:	003a      	movs	r2, r7
 8006648:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800664a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800664c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800664e:	47b0      	blx	r6
 8006650:	3001      	adds	r0, #1
 8006652:	d100      	bne.n	8006656 <_printf_float+0x3ee>
 8006654:	e664      	b.n	8006320 <_printf_float+0xb8>
 8006656:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006658:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800665a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800665c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800665e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006660:	47b0      	blx	r6
 8006662:	3001      	adds	r0, #1
 8006664:	d100      	bne.n	8006668 <_printf_float+0x400>
 8006666:	e65b      	b.n	8006320 <_printf_float+0xb8>
 8006668:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800666a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800666c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800666e:	2200      	movs	r2, #0
 8006670:	3b01      	subs	r3, #1
 8006672:	930c      	str	r3, [sp, #48]	@ 0x30
 8006674:	2300      	movs	r3, #0
 8006676:	f7f9 fee9 	bl	800044c <__aeabi_dcmpeq>
 800667a:	2800      	cmp	r0, #0
 800667c:	d11a      	bne.n	80066b4 <_printf_float+0x44c>
 800667e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006680:	1c7a      	adds	r2, r7, #1
 8006682:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006684:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006686:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006688:	47b0      	blx	r6
 800668a:	3001      	adds	r0, #1
 800668c:	d10e      	bne.n	80066ac <_printf_float+0x444>
 800668e:	e647      	b.n	8006320 <_printf_float+0xb8>
 8006690:	002a      	movs	r2, r5
 8006692:	2301      	movs	r3, #1
 8006694:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006696:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006698:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800669a:	321a      	adds	r2, #26
 800669c:	47b8      	blx	r7
 800669e:	3001      	adds	r0, #1
 80066a0:	d100      	bne.n	80066a4 <_printf_float+0x43c>
 80066a2:	e63d      	b.n	8006320 <_printf_float+0xb8>
 80066a4:	3601      	adds	r6, #1
 80066a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80066a8:	429e      	cmp	r6, r3
 80066aa:	dbf1      	blt.n	8006690 <_printf_float+0x428>
 80066ac:	002a      	movs	r2, r5
 80066ae:	0023      	movs	r3, r4
 80066b0:	3250      	adds	r2, #80	@ 0x50
 80066b2:	e6da      	b.n	800646a <_printf_float+0x202>
 80066b4:	2600      	movs	r6, #0
 80066b6:	e7f6      	b.n	80066a6 <_printf_float+0x43e>
 80066b8:	003a      	movs	r2, r7
 80066ba:	e7e2      	b.n	8006682 <_printf_float+0x41a>
 80066bc:	002a      	movs	r2, r5
 80066be:	2301      	movs	r3, #1
 80066c0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80066c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80066c4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80066c6:	3219      	adds	r2, #25
 80066c8:	47b0      	blx	r6
 80066ca:	3001      	adds	r0, #1
 80066cc:	d100      	bne.n	80066d0 <_printf_float+0x468>
 80066ce:	e627      	b.n	8006320 <_printf_float+0xb8>
 80066d0:	3401      	adds	r4, #1
 80066d2:	68eb      	ldr	r3, [r5, #12]
 80066d4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80066d6:	1a9b      	subs	r3, r3, r2
 80066d8:	42a3      	cmp	r3, r4
 80066da:	dcef      	bgt.n	80066bc <_printf_float+0x454>
 80066dc:	e6f9      	b.n	80064d2 <_printf_float+0x26a>
 80066de:	2400      	movs	r4, #0
 80066e0:	e7f7      	b.n	80066d2 <_printf_float+0x46a>
 80066e2:	46c0      	nop			@ (mov r8, r8)

080066e4 <_printf_common>:
 80066e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066e6:	0016      	movs	r6, r2
 80066e8:	9301      	str	r3, [sp, #4]
 80066ea:	688a      	ldr	r2, [r1, #8]
 80066ec:	690b      	ldr	r3, [r1, #16]
 80066ee:	000c      	movs	r4, r1
 80066f0:	9000      	str	r0, [sp, #0]
 80066f2:	4293      	cmp	r3, r2
 80066f4:	da00      	bge.n	80066f8 <_printf_common+0x14>
 80066f6:	0013      	movs	r3, r2
 80066f8:	0022      	movs	r2, r4
 80066fa:	6033      	str	r3, [r6, #0]
 80066fc:	3243      	adds	r2, #67	@ 0x43
 80066fe:	7812      	ldrb	r2, [r2, #0]
 8006700:	2a00      	cmp	r2, #0
 8006702:	d001      	beq.n	8006708 <_printf_common+0x24>
 8006704:	3301      	adds	r3, #1
 8006706:	6033      	str	r3, [r6, #0]
 8006708:	6823      	ldr	r3, [r4, #0]
 800670a:	069b      	lsls	r3, r3, #26
 800670c:	d502      	bpl.n	8006714 <_printf_common+0x30>
 800670e:	6833      	ldr	r3, [r6, #0]
 8006710:	3302      	adds	r3, #2
 8006712:	6033      	str	r3, [r6, #0]
 8006714:	6822      	ldr	r2, [r4, #0]
 8006716:	2306      	movs	r3, #6
 8006718:	0015      	movs	r5, r2
 800671a:	401d      	ands	r5, r3
 800671c:	421a      	tst	r2, r3
 800671e:	d027      	beq.n	8006770 <_printf_common+0x8c>
 8006720:	0023      	movs	r3, r4
 8006722:	3343      	adds	r3, #67	@ 0x43
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	1e5a      	subs	r2, r3, #1
 8006728:	4193      	sbcs	r3, r2
 800672a:	6822      	ldr	r2, [r4, #0]
 800672c:	0692      	lsls	r2, r2, #26
 800672e:	d430      	bmi.n	8006792 <_printf_common+0xae>
 8006730:	0022      	movs	r2, r4
 8006732:	9901      	ldr	r1, [sp, #4]
 8006734:	9800      	ldr	r0, [sp, #0]
 8006736:	9d08      	ldr	r5, [sp, #32]
 8006738:	3243      	adds	r2, #67	@ 0x43
 800673a:	47a8      	blx	r5
 800673c:	3001      	adds	r0, #1
 800673e:	d025      	beq.n	800678c <_printf_common+0xa8>
 8006740:	2206      	movs	r2, #6
 8006742:	6823      	ldr	r3, [r4, #0]
 8006744:	2500      	movs	r5, #0
 8006746:	4013      	ands	r3, r2
 8006748:	2b04      	cmp	r3, #4
 800674a:	d105      	bne.n	8006758 <_printf_common+0x74>
 800674c:	6833      	ldr	r3, [r6, #0]
 800674e:	68e5      	ldr	r5, [r4, #12]
 8006750:	1aed      	subs	r5, r5, r3
 8006752:	43eb      	mvns	r3, r5
 8006754:	17db      	asrs	r3, r3, #31
 8006756:	401d      	ands	r5, r3
 8006758:	68a3      	ldr	r3, [r4, #8]
 800675a:	6922      	ldr	r2, [r4, #16]
 800675c:	4293      	cmp	r3, r2
 800675e:	dd01      	ble.n	8006764 <_printf_common+0x80>
 8006760:	1a9b      	subs	r3, r3, r2
 8006762:	18ed      	adds	r5, r5, r3
 8006764:	2600      	movs	r6, #0
 8006766:	42b5      	cmp	r5, r6
 8006768:	d120      	bne.n	80067ac <_printf_common+0xc8>
 800676a:	2000      	movs	r0, #0
 800676c:	e010      	b.n	8006790 <_printf_common+0xac>
 800676e:	3501      	adds	r5, #1
 8006770:	68e3      	ldr	r3, [r4, #12]
 8006772:	6832      	ldr	r2, [r6, #0]
 8006774:	1a9b      	subs	r3, r3, r2
 8006776:	42ab      	cmp	r3, r5
 8006778:	ddd2      	ble.n	8006720 <_printf_common+0x3c>
 800677a:	0022      	movs	r2, r4
 800677c:	2301      	movs	r3, #1
 800677e:	9901      	ldr	r1, [sp, #4]
 8006780:	9800      	ldr	r0, [sp, #0]
 8006782:	9f08      	ldr	r7, [sp, #32]
 8006784:	3219      	adds	r2, #25
 8006786:	47b8      	blx	r7
 8006788:	3001      	adds	r0, #1
 800678a:	d1f0      	bne.n	800676e <_printf_common+0x8a>
 800678c:	2001      	movs	r0, #1
 800678e:	4240      	negs	r0, r0
 8006790:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006792:	2030      	movs	r0, #48	@ 0x30
 8006794:	18e1      	adds	r1, r4, r3
 8006796:	3143      	adds	r1, #67	@ 0x43
 8006798:	7008      	strb	r0, [r1, #0]
 800679a:	0021      	movs	r1, r4
 800679c:	1c5a      	adds	r2, r3, #1
 800679e:	3145      	adds	r1, #69	@ 0x45
 80067a0:	7809      	ldrb	r1, [r1, #0]
 80067a2:	18a2      	adds	r2, r4, r2
 80067a4:	3243      	adds	r2, #67	@ 0x43
 80067a6:	3302      	adds	r3, #2
 80067a8:	7011      	strb	r1, [r2, #0]
 80067aa:	e7c1      	b.n	8006730 <_printf_common+0x4c>
 80067ac:	0022      	movs	r2, r4
 80067ae:	2301      	movs	r3, #1
 80067b0:	9901      	ldr	r1, [sp, #4]
 80067b2:	9800      	ldr	r0, [sp, #0]
 80067b4:	9f08      	ldr	r7, [sp, #32]
 80067b6:	321a      	adds	r2, #26
 80067b8:	47b8      	blx	r7
 80067ba:	3001      	adds	r0, #1
 80067bc:	d0e6      	beq.n	800678c <_printf_common+0xa8>
 80067be:	3601      	adds	r6, #1
 80067c0:	e7d1      	b.n	8006766 <_printf_common+0x82>
	...

080067c4 <_printf_i>:
 80067c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067c6:	b08b      	sub	sp, #44	@ 0x2c
 80067c8:	9206      	str	r2, [sp, #24]
 80067ca:	000a      	movs	r2, r1
 80067cc:	3243      	adds	r2, #67	@ 0x43
 80067ce:	9307      	str	r3, [sp, #28]
 80067d0:	9005      	str	r0, [sp, #20]
 80067d2:	9203      	str	r2, [sp, #12]
 80067d4:	7e0a      	ldrb	r2, [r1, #24]
 80067d6:	000c      	movs	r4, r1
 80067d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80067da:	2a78      	cmp	r2, #120	@ 0x78
 80067dc:	d809      	bhi.n	80067f2 <_printf_i+0x2e>
 80067de:	2a62      	cmp	r2, #98	@ 0x62
 80067e0:	d80b      	bhi.n	80067fa <_printf_i+0x36>
 80067e2:	2a00      	cmp	r2, #0
 80067e4:	d100      	bne.n	80067e8 <_printf_i+0x24>
 80067e6:	e0bc      	b.n	8006962 <_printf_i+0x19e>
 80067e8:	497b      	ldr	r1, [pc, #492]	@ (80069d8 <_printf_i+0x214>)
 80067ea:	9104      	str	r1, [sp, #16]
 80067ec:	2a58      	cmp	r2, #88	@ 0x58
 80067ee:	d100      	bne.n	80067f2 <_printf_i+0x2e>
 80067f0:	e090      	b.n	8006914 <_printf_i+0x150>
 80067f2:	0025      	movs	r5, r4
 80067f4:	3542      	adds	r5, #66	@ 0x42
 80067f6:	702a      	strb	r2, [r5, #0]
 80067f8:	e022      	b.n	8006840 <_printf_i+0x7c>
 80067fa:	0010      	movs	r0, r2
 80067fc:	3863      	subs	r0, #99	@ 0x63
 80067fe:	2815      	cmp	r0, #21
 8006800:	d8f7      	bhi.n	80067f2 <_printf_i+0x2e>
 8006802:	f7f9 fc93 	bl	800012c <__gnu_thumb1_case_shi>
 8006806:	0016      	.short	0x0016
 8006808:	fff6001f 	.word	0xfff6001f
 800680c:	fff6fff6 	.word	0xfff6fff6
 8006810:	001ffff6 	.word	0x001ffff6
 8006814:	fff6fff6 	.word	0xfff6fff6
 8006818:	fff6fff6 	.word	0xfff6fff6
 800681c:	003600a1 	.word	0x003600a1
 8006820:	fff60080 	.word	0xfff60080
 8006824:	00b2fff6 	.word	0x00b2fff6
 8006828:	0036fff6 	.word	0x0036fff6
 800682c:	fff6fff6 	.word	0xfff6fff6
 8006830:	0084      	.short	0x0084
 8006832:	0025      	movs	r5, r4
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	3542      	adds	r5, #66	@ 0x42
 8006838:	1d11      	adds	r1, r2, #4
 800683a:	6019      	str	r1, [r3, #0]
 800683c:	6813      	ldr	r3, [r2, #0]
 800683e:	702b      	strb	r3, [r5, #0]
 8006840:	2301      	movs	r3, #1
 8006842:	e0a0      	b.n	8006986 <_printf_i+0x1c2>
 8006844:	6818      	ldr	r0, [r3, #0]
 8006846:	6809      	ldr	r1, [r1, #0]
 8006848:	1d02      	adds	r2, r0, #4
 800684a:	060d      	lsls	r5, r1, #24
 800684c:	d50b      	bpl.n	8006866 <_printf_i+0xa2>
 800684e:	6806      	ldr	r6, [r0, #0]
 8006850:	601a      	str	r2, [r3, #0]
 8006852:	2e00      	cmp	r6, #0
 8006854:	da03      	bge.n	800685e <_printf_i+0x9a>
 8006856:	232d      	movs	r3, #45	@ 0x2d
 8006858:	9a03      	ldr	r2, [sp, #12]
 800685a:	4276      	negs	r6, r6
 800685c:	7013      	strb	r3, [r2, #0]
 800685e:	4b5e      	ldr	r3, [pc, #376]	@ (80069d8 <_printf_i+0x214>)
 8006860:	270a      	movs	r7, #10
 8006862:	9304      	str	r3, [sp, #16]
 8006864:	e018      	b.n	8006898 <_printf_i+0xd4>
 8006866:	6806      	ldr	r6, [r0, #0]
 8006868:	601a      	str	r2, [r3, #0]
 800686a:	0649      	lsls	r1, r1, #25
 800686c:	d5f1      	bpl.n	8006852 <_printf_i+0x8e>
 800686e:	b236      	sxth	r6, r6
 8006870:	e7ef      	b.n	8006852 <_printf_i+0x8e>
 8006872:	6808      	ldr	r0, [r1, #0]
 8006874:	6819      	ldr	r1, [r3, #0]
 8006876:	c940      	ldmia	r1!, {r6}
 8006878:	0605      	lsls	r5, r0, #24
 800687a:	d402      	bmi.n	8006882 <_printf_i+0xbe>
 800687c:	0640      	lsls	r0, r0, #25
 800687e:	d500      	bpl.n	8006882 <_printf_i+0xbe>
 8006880:	b2b6      	uxth	r6, r6
 8006882:	6019      	str	r1, [r3, #0]
 8006884:	4b54      	ldr	r3, [pc, #336]	@ (80069d8 <_printf_i+0x214>)
 8006886:	270a      	movs	r7, #10
 8006888:	9304      	str	r3, [sp, #16]
 800688a:	2a6f      	cmp	r2, #111	@ 0x6f
 800688c:	d100      	bne.n	8006890 <_printf_i+0xcc>
 800688e:	3f02      	subs	r7, #2
 8006890:	0023      	movs	r3, r4
 8006892:	2200      	movs	r2, #0
 8006894:	3343      	adds	r3, #67	@ 0x43
 8006896:	701a      	strb	r2, [r3, #0]
 8006898:	6863      	ldr	r3, [r4, #4]
 800689a:	60a3      	str	r3, [r4, #8]
 800689c:	2b00      	cmp	r3, #0
 800689e:	db03      	blt.n	80068a8 <_printf_i+0xe4>
 80068a0:	2104      	movs	r1, #4
 80068a2:	6822      	ldr	r2, [r4, #0]
 80068a4:	438a      	bics	r2, r1
 80068a6:	6022      	str	r2, [r4, #0]
 80068a8:	2e00      	cmp	r6, #0
 80068aa:	d102      	bne.n	80068b2 <_printf_i+0xee>
 80068ac:	9d03      	ldr	r5, [sp, #12]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00c      	beq.n	80068cc <_printf_i+0x108>
 80068b2:	9d03      	ldr	r5, [sp, #12]
 80068b4:	0030      	movs	r0, r6
 80068b6:	0039      	movs	r1, r7
 80068b8:	f7f9 fcc8 	bl	800024c <__aeabi_uidivmod>
 80068bc:	9b04      	ldr	r3, [sp, #16]
 80068be:	3d01      	subs	r5, #1
 80068c0:	5c5b      	ldrb	r3, [r3, r1]
 80068c2:	702b      	strb	r3, [r5, #0]
 80068c4:	0033      	movs	r3, r6
 80068c6:	0006      	movs	r6, r0
 80068c8:	429f      	cmp	r7, r3
 80068ca:	d9f3      	bls.n	80068b4 <_printf_i+0xf0>
 80068cc:	2f08      	cmp	r7, #8
 80068ce:	d109      	bne.n	80068e4 <_printf_i+0x120>
 80068d0:	6823      	ldr	r3, [r4, #0]
 80068d2:	07db      	lsls	r3, r3, #31
 80068d4:	d506      	bpl.n	80068e4 <_printf_i+0x120>
 80068d6:	6862      	ldr	r2, [r4, #4]
 80068d8:	6923      	ldr	r3, [r4, #16]
 80068da:	429a      	cmp	r2, r3
 80068dc:	dc02      	bgt.n	80068e4 <_printf_i+0x120>
 80068de:	2330      	movs	r3, #48	@ 0x30
 80068e0:	3d01      	subs	r5, #1
 80068e2:	702b      	strb	r3, [r5, #0]
 80068e4:	9b03      	ldr	r3, [sp, #12]
 80068e6:	1b5b      	subs	r3, r3, r5
 80068e8:	6123      	str	r3, [r4, #16]
 80068ea:	9b07      	ldr	r3, [sp, #28]
 80068ec:	0021      	movs	r1, r4
 80068ee:	9300      	str	r3, [sp, #0]
 80068f0:	9805      	ldr	r0, [sp, #20]
 80068f2:	9b06      	ldr	r3, [sp, #24]
 80068f4:	aa09      	add	r2, sp, #36	@ 0x24
 80068f6:	f7ff fef5 	bl	80066e4 <_printf_common>
 80068fa:	3001      	adds	r0, #1
 80068fc:	d148      	bne.n	8006990 <_printf_i+0x1cc>
 80068fe:	2001      	movs	r0, #1
 8006900:	4240      	negs	r0, r0
 8006902:	b00b      	add	sp, #44	@ 0x2c
 8006904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006906:	2220      	movs	r2, #32
 8006908:	6809      	ldr	r1, [r1, #0]
 800690a:	430a      	orrs	r2, r1
 800690c:	6022      	str	r2, [r4, #0]
 800690e:	2278      	movs	r2, #120	@ 0x78
 8006910:	4932      	ldr	r1, [pc, #200]	@ (80069dc <_printf_i+0x218>)
 8006912:	9104      	str	r1, [sp, #16]
 8006914:	0021      	movs	r1, r4
 8006916:	3145      	adds	r1, #69	@ 0x45
 8006918:	700a      	strb	r2, [r1, #0]
 800691a:	6819      	ldr	r1, [r3, #0]
 800691c:	6822      	ldr	r2, [r4, #0]
 800691e:	c940      	ldmia	r1!, {r6}
 8006920:	0610      	lsls	r0, r2, #24
 8006922:	d402      	bmi.n	800692a <_printf_i+0x166>
 8006924:	0650      	lsls	r0, r2, #25
 8006926:	d500      	bpl.n	800692a <_printf_i+0x166>
 8006928:	b2b6      	uxth	r6, r6
 800692a:	6019      	str	r1, [r3, #0]
 800692c:	07d3      	lsls	r3, r2, #31
 800692e:	d502      	bpl.n	8006936 <_printf_i+0x172>
 8006930:	2320      	movs	r3, #32
 8006932:	4313      	orrs	r3, r2
 8006934:	6023      	str	r3, [r4, #0]
 8006936:	2e00      	cmp	r6, #0
 8006938:	d001      	beq.n	800693e <_printf_i+0x17a>
 800693a:	2710      	movs	r7, #16
 800693c:	e7a8      	b.n	8006890 <_printf_i+0xcc>
 800693e:	2220      	movs	r2, #32
 8006940:	6823      	ldr	r3, [r4, #0]
 8006942:	4393      	bics	r3, r2
 8006944:	6023      	str	r3, [r4, #0]
 8006946:	e7f8      	b.n	800693a <_printf_i+0x176>
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	680d      	ldr	r5, [r1, #0]
 800694c:	1d10      	adds	r0, r2, #4
 800694e:	6949      	ldr	r1, [r1, #20]
 8006950:	6018      	str	r0, [r3, #0]
 8006952:	6813      	ldr	r3, [r2, #0]
 8006954:	062e      	lsls	r6, r5, #24
 8006956:	d501      	bpl.n	800695c <_printf_i+0x198>
 8006958:	6019      	str	r1, [r3, #0]
 800695a:	e002      	b.n	8006962 <_printf_i+0x19e>
 800695c:	066d      	lsls	r5, r5, #25
 800695e:	d5fb      	bpl.n	8006958 <_printf_i+0x194>
 8006960:	8019      	strh	r1, [r3, #0]
 8006962:	2300      	movs	r3, #0
 8006964:	9d03      	ldr	r5, [sp, #12]
 8006966:	6123      	str	r3, [r4, #16]
 8006968:	e7bf      	b.n	80068ea <_printf_i+0x126>
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	1d11      	adds	r1, r2, #4
 800696e:	6019      	str	r1, [r3, #0]
 8006970:	6815      	ldr	r5, [r2, #0]
 8006972:	2100      	movs	r1, #0
 8006974:	0028      	movs	r0, r5
 8006976:	6862      	ldr	r2, [r4, #4]
 8006978:	f000 f9db 	bl	8006d32 <memchr>
 800697c:	2800      	cmp	r0, #0
 800697e:	d001      	beq.n	8006984 <_printf_i+0x1c0>
 8006980:	1b40      	subs	r0, r0, r5
 8006982:	6060      	str	r0, [r4, #4]
 8006984:	6863      	ldr	r3, [r4, #4]
 8006986:	6123      	str	r3, [r4, #16]
 8006988:	2300      	movs	r3, #0
 800698a:	9a03      	ldr	r2, [sp, #12]
 800698c:	7013      	strb	r3, [r2, #0]
 800698e:	e7ac      	b.n	80068ea <_printf_i+0x126>
 8006990:	002a      	movs	r2, r5
 8006992:	6923      	ldr	r3, [r4, #16]
 8006994:	9906      	ldr	r1, [sp, #24]
 8006996:	9805      	ldr	r0, [sp, #20]
 8006998:	9d07      	ldr	r5, [sp, #28]
 800699a:	47a8      	blx	r5
 800699c:	3001      	adds	r0, #1
 800699e:	d0ae      	beq.n	80068fe <_printf_i+0x13a>
 80069a0:	6823      	ldr	r3, [r4, #0]
 80069a2:	079b      	lsls	r3, r3, #30
 80069a4:	d415      	bmi.n	80069d2 <_printf_i+0x20e>
 80069a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069a8:	68e0      	ldr	r0, [r4, #12]
 80069aa:	4298      	cmp	r0, r3
 80069ac:	daa9      	bge.n	8006902 <_printf_i+0x13e>
 80069ae:	0018      	movs	r0, r3
 80069b0:	e7a7      	b.n	8006902 <_printf_i+0x13e>
 80069b2:	0022      	movs	r2, r4
 80069b4:	2301      	movs	r3, #1
 80069b6:	9906      	ldr	r1, [sp, #24]
 80069b8:	9805      	ldr	r0, [sp, #20]
 80069ba:	9e07      	ldr	r6, [sp, #28]
 80069bc:	3219      	adds	r2, #25
 80069be:	47b0      	blx	r6
 80069c0:	3001      	adds	r0, #1
 80069c2:	d09c      	beq.n	80068fe <_printf_i+0x13a>
 80069c4:	3501      	adds	r5, #1
 80069c6:	68e3      	ldr	r3, [r4, #12]
 80069c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80069ca:	1a9b      	subs	r3, r3, r2
 80069cc:	42ab      	cmp	r3, r5
 80069ce:	dcf0      	bgt.n	80069b2 <_printf_i+0x1ee>
 80069d0:	e7e9      	b.n	80069a6 <_printf_i+0x1e2>
 80069d2:	2500      	movs	r5, #0
 80069d4:	e7f7      	b.n	80069c6 <_printf_i+0x202>
 80069d6:	46c0      	nop			@ (mov r8, r8)
 80069d8:	08008b1a 	.word	0x08008b1a
 80069dc:	08008b2b 	.word	0x08008b2b

080069e0 <std>:
 80069e0:	2300      	movs	r3, #0
 80069e2:	b510      	push	{r4, lr}
 80069e4:	0004      	movs	r4, r0
 80069e6:	6003      	str	r3, [r0, #0]
 80069e8:	6043      	str	r3, [r0, #4]
 80069ea:	6083      	str	r3, [r0, #8]
 80069ec:	8181      	strh	r1, [r0, #12]
 80069ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80069f0:	81c2      	strh	r2, [r0, #14]
 80069f2:	6103      	str	r3, [r0, #16]
 80069f4:	6143      	str	r3, [r0, #20]
 80069f6:	6183      	str	r3, [r0, #24]
 80069f8:	0019      	movs	r1, r3
 80069fa:	2208      	movs	r2, #8
 80069fc:	305c      	adds	r0, #92	@ 0x5c
 80069fe:	f000 f8ff 	bl	8006c00 <memset>
 8006a02:	4b0b      	ldr	r3, [pc, #44]	@ (8006a30 <std+0x50>)
 8006a04:	6224      	str	r4, [r4, #32]
 8006a06:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a08:	4b0a      	ldr	r3, [pc, #40]	@ (8006a34 <std+0x54>)
 8006a0a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8006a38 <std+0x58>)
 8006a0e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006a10:	4b0a      	ldr	r3, [pc, #40]	@ (8006a3c <std+0x5c>)
 8006a12:	6323      	str	r3, [r4, #48]	@ 0x30
 8006a14:	4b0a      	ldr	r3, [pc, #40]	@ (8006a40 <std+0x60>)
 8006a16:	429c      	cmp	r4, r3
 8006a18:	d005      	beq.n	8006a26 <std+0x46>
 8006a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8006a44 <std+0x64>)
 8006a1c:	429c      	cmp	r4, r3
 8006a1e:	d002      	beq.n	8006a26 <std+0x46>
 8006a20:	4b09      	ldr	r3, [pc, #36]	@ (8006a48 <std+0x68>)
 8006a22:	429c      	cmp	r4, r3
 8006a24:	d103      	bne.n	8006a2e <std+0x4e>
 8006a26:	0020      	movs	r0, r4
 8006a28:	3058      	adds	r0, #88	@ 0x58
 8006a2a:	f000 f97f 	bl	8006d2c <__retarget_lock_init_recursive>
 8006a2e:	bd10      	pop	{r4, pc}
 8006a30:	08006b69 	.word	0x08006b69
 8006a34:	08006b91 	.word	0x08006b91
 8006a38:	08006bc9 	.word	0x08006bc9
 8006a3c:	08006bf5 	.word	0x08006bf5
 8006a40:	20001350 	.word	0x20001350
 8006a44:	200013b8 	.word	0x200013b8
 8006a48:	20001420 	.word	0x20001420

08006a4c <stdio_exit_handler>:
 8006a4c:	b510      	push	{r4, lr}
 8006a4e:	4a03      	ldr	r2, [pc, #12]	@ (8006a5c <stdio_exit_handler+0x10>)
 8006a50:	4903      	ldr	r1, [pc, #12]	@ (8006a60 <stdio_exit_handler+0x14>)
 8006a52:	4804      	ldr	r0, [pc, #16]	@ (8006a64 <stdio_exit_handler+0x18>)
 8006a54:	f000 f86c 	bl	8006b30 <_fwalk_sglue>
 8006a58:	bd10      	pop	{r4, pc}
 8006a5a:	46c0      	nop			@ (mov r8, r8)
 8006a5c:	20000058 	.word	0x20000058
 8006a60:	08008349 	.word	0x08008349
 8006a64:	20000068 	.word	0x20000068

08006a68 <cleanup_stdio>:
 8006a68:	6841      	ldr	r1, [r0, #4]
 8006a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8006a98 <cleanup_stdio+0x30>)
 8006a6c:	b510      	push	{r4, lr}
 8006a6e:	0004      	movs	r4, r0
 8006a70:	4299      	cmp	r1, r3
 8006a72:	d001      	beq.n	8006a78 <cleanup_stdio+0x10>
 8006a74:	f001 fc68 	bl	8008348 <_fflush_r>
 8006a78:	68a1      	ldr	r1, [r4, #8]
 8006a7a:	4b08      	ldr	r3, [pc, #32]	@ (8006a9c <cleanup_stdio+0x34>)
 8006a7c:	4299      	cmp	r1, r3
 8006a7e:	d002      	beq.n	8006a86 <cleanup_stdio+0x1e>
 8006a80:	0020      	movs	r0, r4
 8006a82:	f001 fc61 	bl	8008348 <_fflush_r>
 8006a86:	68e1      	ldr	r1, [r4, #12]
 8006a88:	4b05      	ldr	r3, [pc, #20]	@ (8006aa0 <cleanup_stdio+0x38>)
 8006a8a:	4299      	cmp	r1, r3
 8006a8c:	d002      	beq.n	8006a94 <cleanup_stdio+0x2c>
 8006a8e:	0020      	movs	r0, r4
 8006a90:	f001 fc5a 	bl	8008348 <_fflush_r>
 8006a94:	bd10      	pop	{r4, pc}
 8006a96:	46c0      	nop			@ (mov r8, r8)
 8006a98:	20001350 	.word	0x20001350
 8006a9c:	200013b8 	.word	0x200013b8
 8006aa0:	20001420 	.word	0x20001420

08006aa4 <global_stdio_init.part.0>:
 8006aa4:	b510      	push	{r4, lr}
 8006aa6:	4b09      	ldr	r3, [pc, #36]	@ (8006acc <global_stdio_init.part.0+0x28>)
 8006aa8:	4a09      	ldr	r2, [pc, #36]	@ (8006ad0 <global_stdio_init.part.0+0x2c>)
 8006aaa:	2104      	movs	r1, #4
 8006aac:	601a      	str	r2, [r3, #0]
 8006aae:	4809      	ldr	r0, [pc, #36]	@ (8006ad4 <global_stdio_init.part.0+0x30>)
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f7ff ff95 	bl	80069e0 <std>
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	2109      	movs	r1, #9
 8006aba:	4807      	ldr	r0, [pc, #28]	@ (8006ad8 <global_stdio_init.part.0+0x34>)
 8006abc:	f7ff ff90 	bl	80069e0 <std>
 8006ac0:	2202      	movs	r2, #2
 8006ac2:	2112      	movs	r1, #18
 8006ac4:	4805      	ldr	r0, [pc, #20]	@ (8006adc <global_stdio_init.part.0+0x38>)
 8006ac6:	f7ff ff8b 	bl	80069e0 <std>
 8006aca:	bd10      	pop	{r4, pc}
 8006acc:	20001488 	.word	0x20001488
 8006ad0:	08006a4d 	.word	0x08006a4d
 8006ad4:	20001350 	.word	0x20001350
 8006ad8:	200013b8 	.word	0x200013b8
 8006adc:	20001420 	.word	0x20001420

08006ae0 <__sfp_lock_acquire>:
 8006ae0:	b510      	push	{r4, lr}
 8006ae2:	4802      	ldr	r0, [pc, #8]	@ (8006aec <__sfp_lock_acquire+0xc>)
 8006ae4:	f000 f923 	bl	8006d2e <__retarget_lock_acquire_recursive>
 8006ae8:	bd10      	pop	{r4, pc}
 8006aea:	46c0      	nop			@ (mov r8, r8)
 8006aec:	20001491 	.word	0x20001491

08006af0 <__sfp_lock_release>:
 8006af0:	b510      	push	{r4, lr}
 8006af2:	4802      	ldr	r0, [pc, #8]	@ (8006afc <__sfp_lock_release+0xc>)
 8006af4:	f000 f91c 	bl	8006d30 <__retarget_lock_release_recursive>
 8006af8:	bd10      	pop	{r4, pc}
 8006afa:	46c0      	nop			@ (mov r8, r8)
 8006afc:	20001491 	.word	0x20001491

08006b00 <__sinit>:
 8006b00:	b510      	push	{r4, lr}
 8006b02:	0004      	movs	r4, r0
 8006b04:	f7ff ffec 	bl	8006ae0 <__sfp_lock_acquire>
 8006b08:	6a23      	ldr	r3, [r4, #32]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d002      	beq.n	8006b14 <__sinit+0x14>
 8006b0e:	f7ff ffef 	bl	8006af0 <__sfp_lock_release>
 8006b12:	bd10      	pop	{r4, pc}
 8006b14:	4b04      	ldr	r3, [pc, #16]	@ (8006b28 <__sinit+0x28>)
 8006b16:	6223      	str	r3, [r4, #32]
 8006b18:	4b04      	ldr	r3, [pc, #16]	@ (8006b2c <__sinit+0x2c>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1f6      	bne.n	8006b0e <__sinit+0xe>
 8006b20:	f7ff ffc0 	bl	8006aa4 <global_stdio_init.part.0>
 8006b24:	e7f3      	b.n	8006b0e <__sinit+0xe>
 8006b26:	46c0      	nop			@ (mov r8, r8)
 8006b28:	08006a69 	.word	0x08006a69
 8006b2c:	20001488 	.word	0x20001488

08006b30 <_fwalk_sglue>:
 8006b30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b32:	0014      	movs	r4, r2
 8006b34:	2600      	movs	r6, #0
 8006b36:	9000      	str	r0, [sp, #0]
 8006b38:	9101      	str	r1, [sp, #4]
 8006b3a:	68a5      	ldr	r5, [r4, #8]
 8006b3c:	6867      	ldr	r7, [r4, #4]
 8006b3e:	3f01      	subs	r7, #1
 8006b40:	d504      	bpl.n	8006b4c <_fwalk_sglue+0x1c>
 8006b42:	6824      	ldr	r4, [r4, #0]
 8006b44:	2c00      	cmp	r4, #0
 8006b46:	d1f8      	bne.n	8006b3a <_fwalk_sglue+0xa>
 8006b48:	0030      	movs	r0, r6
 8006b4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b4c:	89ab      	ldrh	r3, [r5, #12]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d908      	bls.n	8006b64 <_fwalk_sglue+0x34>
 8006b52:	220e      	movs	r2, #14
 8006b54:	5eab      	ldrsh	r3, [r5, r2]
 8006b56:	3301      	adds	r3, #1
 8006b58:	d004      	beq.n	8006b64 <_fwalk_sglue+0x34>
 8006b5a:	0029      	movs	r1, r5
 8006b5c:	9800      	ldr	r0, [sp, #0]
 8006b5e:	9b01      	ldr	r3, [sp, #4]
 8006b60:	4798      	blx	r3
 8006b62:	4306      	orrs	r6, r0
 8006b64:	3568      	adds	r5, #104	@ 0x68
 8006b66:	e7ea      	b.n	8006b3e <_fwalk_sglue+0xe>

08006b68 <__sread>:
 8006b68:	b570      	push	{r4, r5, r6, lr}
 8006b6a:	000c      	movs	r4, r1
 8006b6c:	250e      	movs	r5, #14
 8006b6e:	5f49      	ldrsh	r1, [r1, r5]
 8006b70:	f000 f878 	bl	8006c64 <_read_r>
 8006b74:	2800      	cmp	r0, #0
 8006b76:	db03      	blt.n	8006b80 <__sread+0x18>
 8006b78:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006b7a:	181b      	adds	r3, r3, r0
 8006b7c:	6563      	str	r3, [r4, #84]	@ 0x54
 8006b7e:	bd70      	pop	{r4, r5, r6, pc}
 8006b80:	89a3      	ldrh	r3, [r4, #12]
 8006b82:	4a02      	ldr	r2, [pc, #8]	@ (8006b8c <__sread+0x24>)
 8006b84:	4013      	ands	r3, r2
 8006b86:	81a3      	strh	r3, [r4, #12]
 8006b88:	e7f9      	b.n	8006b7e <__sread+0x16>
 8006b8a:	46c0      	nop			@ (mov r8, r8)
 8006b8c:	ffffefff 	.word	0xffffefff

08006b90 <__swrite>:
 8006b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b92:	001f      	movs	r7, r3
 8006b94:	898b      	ldrh	r3, [r1, #12]
 8006b96:	0005      	movs	r5, r0
 8006b98:	000c      	movs	r4, r1
 8006b9a:	0016      	movs	r6, r2
 8006b9c:	05db      	lsls	r3, r3, #23
 8006b9e:	d505      	bpl.n	8006bac <__swrite+0x1c>
 8006ba0:	230e      	movs	r3, #14
 8006ba2:	5ec9      	ldrsh	r1, [r1, r3]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	f000 f848 	bl	8006c3c <_lseek_r>
 8006bac:	89a3      	ldrh	r3, [r4, #12]
 8006bae:	4a05      	ldr	r2, [pc, #20]	@ (8006bc4 <__swrite+0x34>)
 8006bb0:	0028      	movs	r0, r5
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	81a3      	strh	r3, [r4, #12]
 8006bb6:	0032      	movs	r2, r6
 8006bb8:	230e      	movs	r3, #14
 8006bba:	5ee1      	ldrsh	r1, [r4, r3]
 8006bbc:	003b      	movs	r3, r7
 8006bbe:	f000 f877 	bl	8006cb0 <_write_r>
 8006bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bc4:	ffffefff 	.word	0xffffefff

08006bc8 <__sseek>:
 8006bc8:	b570      	push	{r4, r5, r6, lr}
 8006bca:	000c      	movs	r4, r1
 8006bcc:	250e      	movs	r5, #14
 8006bce:	5f49      	ldrsh	r1, [r1, r5]
 8006bd0:	f000 f834 	bl	8006c3c <_lseek_r>
 8006bd4:	89a3      	ldrh	r3, [r4, #12]
 8006bd6:	1c42      	adds	r2, r0, #1
 8006bd8:	d103      	bne.n	8006be2 <__sseek+0x1a>
 8006bda:	4a05      	ldr	r2, [pc, #20]	@ (8006bf0 <__sseek+0x28>)
 8006bdc:	4013      	ands	r3, r2
 8006bde:	81a3      	strh	r3, [r4, #12]
 8006be0:	bd70      	pop	{r4, r5, r6, pc}
 8006be2:	2280      	movs	r2, #128	@ 0x80
 8006be4:	0152      	lsls	r2, r2, #5
 8006be6:	4313      	orrs	r3, r2
 8006be8:	81a3      	strh	r3, [r4, #12]
 8006bea:	6560      	str	r0, [r4, #84]	@ 0x54
 8006bec:	e7f8      	b.n	8006be0 <__sseek+0x18>
 8006bee:	46c0      	nop			@ (mov r8, r8)
 8006bf0:	ffffefff 	.word	0xffffefff

08006bf4 <__sclose>:
 8006bf4:	b510      	push	{r4, lr}
 8006bf6:	230e      	movs	r3, #14
 8006bf8:	5ec9      	ldrsh	r1, [r1, r3]
 8006bfa:	f000 f80d 	bl	8006c18 <_close_r>
 8006bfe:	bd10      	pop	{r4, pc}

08006c00 <memset>:
 8006c00:	0003      	movs	r3, r0
 8006c02:	1882      	adds	r2, r0, r2
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d100      	bne.n	8006c0a <memset+0xa>
 8006c08:	4770      	bx	lr
 8006c0a:	7019      	strb	r1, [r3, #0]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	e7f9      	b.n	8006c04 <memset+0x4>

08006c10 <_localeconv_r>:
 8006c10:	4800      	ldr	r0, [pc, #0]	@ (8006c14 <_localeconv_r+0x4>)
 8006c12:	4770      	bx	lr
 8006c14:	200001a4 	.word	0x200001a4

08006c18 <_close_r>:
 8006c18:	2300      	movs	r3, #0
 8006c1a:	b570      	push	{r4, r5, r6, lr}
 8006c1c:	4d06      	ldr	r5, [pc, #24]	@ (8006c38 <_close_r+0x20>)
 8006c1e:	0004      	movs	r4, r0
 8006c20:	0008      	movs	r0, r1
 8006c22:	602b      	str	r3, [r5, #0]
 8006c24:	f7fc f852 	bl	8002ccc <_close>
 8006c28:	1c43      	adds	r3, r0, #1
 8006c2a:	d103      	bne.n	8006c34 <_close_r+0x1c>
 8006c2c:	682b      	ldr	r3, [r5, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d000      	beq.n	8006c34 <_close_r+0x1c>
 8006c32:	6023      	str	r3, [r4, #0]
 8006c34:	bd70      	pop	{r4, r5, r6, pc}
 8006c36:	46c0      	nop			@ (mov r8, r8)
 8006c38:	2000148c 	.word	0x2000148c

08006c3c <_lseek_r>:
 8006c3c:	b570      	push	{r4, r5, r6, lr}
 8006c3e:	0004      	movs	r4, r0
 8006c40:	0008      	movs	r0, r1
 8006c42:	0011      	movs	r1, r2
 8006c44:	001a      	movs	r2, r3
 8006c46:	2300      	movs	r3, #0
 8006c48:	4d05      	ldr	r5, [pc, #20]	@ (8006c60 <_lseek_r+0x24>)
 8006c4a:	602b      	str	r3, [r5, #0]
 8006c4c:	f7fc f85f 	bl	8002d0e <_lseek>
 8006c50:	1c43      	adds	r3, r0, #1
 8006c52:	d103      	bne.n	8006c5c <_lseek_r+0x20>
 8006c54:	682b      	ldr	r3, [r5, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d000      	beq.n	8006c5c <_lseek_r+0x20>
 8006c5a:	6023      	str	r3, [r4, #0]
 8006c5c:	bd70      	pop	{r4, r5, r6, pc}
 8006c5e:	46c0      	nop			@ (mov r8, r8)
 8006c60:	2000148c 	.word	0x2000148c

08006c64 <_read_r>:
 8006c64:	b570      	push	{r4, r5, r6, lr}
 8006c66:	0004      	movs	r4, r0
 8006c68:	0008      	movs	r0, r1
 8006c6a:	0011      	movs	r1, r2
 8006c6c:	001a      	movs	r2, r3
 8006c6e:	2300      	movs	r3, #0
 8006c70:	4d05      	ldr	r5, [pc, #20]	@ (8006c88 <_read_r+0x24>)
 8006c72:	602b      	str	r3, [r5, #0]
 8006c74:	f7fb fff1 	bl	8002c5a <_read>
 8006c78:	1c43      	adds	r3, r0, #1
 8006c7a:	d103      	bne.n	8006c84 <_read_r+0x20>
 8006c7c:	682b      	ldr	r3, [r5, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d000      	beq.n	8006c84 <_read_r+0x20>
 8006c82:	6023      	str	r3, [r4, #0]
 8006c84:	bd70      	pop	{r4, r5, r6, pc}
 8006c86:	46c0      	nop			@ (mov r8, r8)
 8006c88:	2000148c 	.word	0x2000148c

08006c8c <_sbrk_r>:
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	b570      	push	{r4, r5, r6, lr}
 8006c90:	4d06      	ldr	r5, [pc, #24]	@ (8006cac <_sbrk_r+0x20>)
 8006c92:	0004      	movs	r4, r0
 8006c94:	0008      	movs	r0, r1
 8006c96:	602b      	str	r3, [r5, #0]
 8006c98:	f7fc f844 	bl	8002d24 <_sbrk>
 8006c9c:	1c43      	adds	r3, r0, #1
 8006c9e:	d103      	bne.n	8006ca8 <_sbrk_r+0x1c>
 8006ca0:	682b      	ldr	r3, [r5, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d000      	beq.n	8006ca8 <_sbrk_r+0x1c>
 8006ca6:	6023      	str	r3, [r4, #0]
 8006ca8:	bd70      	pop	{r4, r5, r6, pc}
 8006caa:	46c0      	nop			@ (mov r8, r8)
 8006cac:	2000148c 	.word	0x2000148c

08006cb0 <_write_r>:
 8006cb0:	b570      	push	{r4, r5, r6, lr}
 8006cb2:	0004      	movs	r4, r0
 8006cb4:	0008      	movs	r0, r1
 8006cb6:	0011      	movs	r1, r2
 8006cb8:	001a      	movs	r2, r3
 8006cba:	2300      	movs	r3, #0
 8006cbc:	4d05      	ldr	r5, [pc, #20]	@ (8006cd4 <_write_r+0x24>)
 8006cbe:	602b      	str	r3, [r5, #0]
 8006cc0:	f7fb ffe8 	bl	8002c94 <_write>
 8006cc4:	1c43      	adds	r3, r0, #1
 8006cc6:	d103      	bne.n	8006cd0 <_write_r+0x20>
 8006cc8:	682b      	ldr	r3, [r5, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d000      	beq.n	8006cd0 <_write_r+0x20>
 8006cce:	6023      	str	r3, [r4, #0]
 8006cd0:	bd70      	pop	{r4, r5, r6, pc}
 8006cd2:	46c0      	nop			@ (mov r8, r8)
 8006cd4:	2000148c 	.word	0x2000148c

08006cd8 <__errno>:
 8006cd8:	4b01      	ldr	r3, [pc, #4]	@ (8006ce0 <__errno+0x8>)
 8006cda:	6818      	ldr	r0, [r3, #0]
 8006cdc:	4770      	bx	lr
 8006cde:	46c0      	nop			@ (mov r8, r8)
 8006ce0:	20000064 	.word	0x20000064

08006ce4 <__libc_init_array>:
 8006ce4:	b570      	push	{r4, r5, r6, lr}
 8006ce6:	2600      	movs	r6, #0
 8006ce8:	4c0c      	ldr	r4, [pc, #48]	@ (8006d1c <__libc_init_array+0x38>)
 8006cea:	4d0d      	ldr	r5, [pc, #52]	@ (8006d20 <__libc_init_array+0x3c>)
 8006cec:	1b64      	subs	r4, r4, r5
 8006cee:	10a4      	asrs	r4, r4, #2
 8006cf0:	42a6      	cmp	r6, r4
 8006cf2:	d109      	bne.n	8006d08 <__libc_init_array+0x24>
 8006cf4:	2600      	movs	r6, #0
 8006cf6:	f001 fe91 	bl	8008a1c <_init>
 8006cfa:	4c0a      	ldr	r4, [pc, #40]	@ (8006d24 <__libc_init_array+0x40>)
 8006cfc:	4d0a      	ldr	r5, [pc, #40]	@ (8006d28 <__libc_init_array+0x44>)
 8006cfe:	1b64      	subs	r4, r4, r5
 8006d00:	10a4      	asrs	r4, r4, #2
 8006d02:	42a6      	cmp	r6, r4
 8006d04:	d105      	bne.n	8006d12 <__libc_init_array+0x2e>
 8006d06:	bd70      	pop	{r4, r5, r6, pc}
 8006d08:	00b3      	lsls	r3, r6, #2
 8006d0a:	58eb      	ldr	r3, [r5, r3]
 8006d0c:	4798      	blx	r3
 8006d0e:	3601      	adds	r6, #1
 8006d10:	e7ee      	b.n	8006cf0 <__libc_init_array+0xc>
 8006d12:	00b3      	lsls	r3, r6, #2
 8006d14:	58eb      	ldr	r3, [r5, r3]
 8006d16:	4798      	blx	r3
 8006d18:	3601      	adds	r6, #1
 8006d1a:	e7f2      	b.n	8006d02 <__libc_init_array+0x1e>
 8006d1c:	08008e78 	.word	0x08008e78
 8006d20:	08008e78 	.word	0x08008e78
 8006d24:	08008e7c 	.word	0x08008e7c
 8006d28:	08008e78 	.word	0x08008e78

08006d2c <__retarget_lock_init_recursive>:
 8006d2c:	4770      	bx	lr

08006d2e <__retarget_lock_acquire_recursive>:
 8006d2e:	4770      	bx	lr

08006d30 <__retarget_lock_release_recursive>:
 8006d30:	4770      	bx	lr

08006d32 <memchr>:
 8006d32:	b2c9      	uxtb	r1, r1
 8006d34:	1882      	adds	r2, r0, r2
 8006d36:	4290      	cmp	r0, r2
 8006d38:	d101      	bne.n	8006d3e <memchr+0xc>
 8006d3a:	2000      	movs	r0, #0
 8006d3c:	4770      	bx	lr
 8006d3e:	7803      	ldrb	r3, [r0, #0]
 8006d40:	428b      	cmp	r3, r1
 8006d42:	d0fb      	beq.n	8006d3c <memchr+0xa>
 8006d44:	3001      	adds	r0, #1
 8006d46:	e7f6      	b.n	8006d36 <memchr+0x4>

08006d48 <memcpy>:
 8006d48:	2300      	movs	r3, #0
 8006d4a:	b510      	push	{r4, lr}
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d100      	bne.n	8006d52 <memcpy+0xa>
 8006d50:	bd10      	pop	{r4, pc}
 8006d52:	5ccc      	ldrb	r4, [r1, r3]
 8006d54:	54c4      	strb	r4, [r0, r3]
 8006d56:	3301      	adds	r3, #1
 8006d58:	e7f8      	b.n	8006d4c <memcpy+0x4>

08006d5a <quorem>:
 8006d5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d5c:	6902      	ldr	r2, [r0, #16]
 8006d5e:	690f      	ldr	r7, [r1, #16]
 8006d60:	b087      	sub	sp, #28
 8006d62:	0006      	movs	r6, r0
 8006d64:	000b      	movs	r3, r1
 8006d66:	2000      	movs	r0, #0
 8006d68:	9102      	str	r1, [sp, #8]
 8006d6a:	42ba      	cmp	r2, r7
 8006d6c:	db6d      	blt.n	8006e4a <quorem+0xf0>
 8006d6e:	3f01      	subs	r7, #1
 8006d70:	00bc      	lsls	r4, r7, #2
 8006d72:	3314      	adds	r3, #20
 8006d74:	9305      	str	r3, [sp, #20]
 8006d76:	191b      	adds	r3, r3, r4
 8006d78:	9303      	str	r3, [sp, #12]
 8006d7a:	0033      	movs	r3, r6
 8006d7c:	3314      	adds	r3, #20
 8006d7e:	191c      	adds	r4, r3, r4
 8006d80:	9301      	str	r3, [sp, #4]
 8006d82:	6823      	ldr	r3, [r4, #0]
 8006d84:	9304      	str	r3, [sp, #16]
 8006d86:	9b03      	ldr	r3, [sp, #12]
 8006d88:	9804      	ldr	r0, [sp, #16]
 8006d8a:	681d      	ldr	r5, [r3, #0]
 8006d8c:	3501      	adds	r5, #1
 8006d8e:	0029      	movs	r1, r5
 8006d90:	f7f9 f9d6 	bl	8000140 <__udivsi3>
 8006d94:	9b04      	ldr	r3, [sp, #16]
 8006d96:	9000      	str	r0, [sp, #0]
 8006d98:	42ab      	cmp	r3, r5
 8006d9a:	d32b      	bcc.n	8006df4 <quorem+0x9a>
 8006d9c:	9b05      	ldr	r3, [sp, #20]
 8006d9e:	9d01      	ldr	r5, [sp, #4]
 8006da0:	469c      	mov	ip, r3
 8006da2:	2300      	movs	r3, #0
 8006da4:	9305      	str	r3, [sp, #20]
 8006da6:	9304      	str	r3, [sp, #16]
 8006da8:	4662      	mov	r2, ip
 8006daa:	ca08      	ldmia	r2!, {r3}
 8006dac:	6828      	ldr	r0, [r5, #0]
 8006dae:	4694      	mov	ip, r2
 8006db0:	9a00      	ldr	r2, [sp, #0]
 8006db2:	b299      	uxth	r1, r3
 8006db4:	4351      	muls	r1, r2
 8006db6:	9a05      	ldr	r2, [sp, #20]
 8006db8:	0c1b      	lsrs	r3, r3, #16
 8006dba:	1889      	adds	r1, r1, r2
 8006dbc:	9a00      	ldr	r2, [sp, #0]
 8006dbe:	4353      	muls	r3, r2
 8006dc0:	0c0a      	lsrs	r2, r1, #16
 8006dc2:	189b      	adds	r3, r3, r2
 8006dc4:	0c1a      	lsrs	r2, r3, #16
 8006dc6:	b289      	uxth	r1, r1
 8006dc8:	9205      	str	r2, [sp, #20]
 8006dca:	b282      	uxth	r2, r0
 8006dcc:	1a52      	subs	r2, r2, r1
 8006dce:	9904      	ldr	r1, [sp, #16]
 8006dd0:	0c00      	lsrs	r0, r0, #16
 8006dd2:	1852      	adds	r2, r2, r1
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	1411      	asrs	r1, r2, #16
 8006dd8:	1ac3      	subs	r3, r0, r3
 8006dda:	185b      	adds	r3, r3, r1
 8006ddc:	1419      	asrs	r1, r3, #16
 8006dde:	b292      	uxth	r2, r2
 8006de0:	041b      	lsls	r3, r3, #16
 8006de2:	431a      	orrs	r2, r3
 8006de4:	9b03      	ldr	r3, [sp, #12]
 8006de6:	9104      	str	r1, [sp, #16]
 8006de8:	c504      	stmia	r5!, {r2}
 8006dea:	4563      	cmp	r3, ip
 8006dec:	d2dc      	bcs.n	8006da8 <quorem+0x4e>
 8006dee:	6823      	ldr	r3, [r4, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d030      	beq.n	8006e56 <quorem+0xfc>
 8006df4:	0030      	movs	r0, r6
 8006df6:	9902      	ldr	r1, [sp, #8]
 8006df8:	f001 f90a 	bl	8008010 <__mcmp>
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	db23      	blt.n	8006e48 <quorem+0xee>
 8006e00:	0034      	movs	r4, r6
 8006e02:	2500      	movs	r5, #0
 8006e04:	9902      	ldr	r1, [sp, #8]
 8006e06:	3414      	adds	r4, #20
 8006e08:	3114      	adds	r1, #20
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	c901      	ldmia	r1!, {r0}
 8006e0e:	9302      	str	r3, [sp, #8]
 8006e10:	466b      	mov	r3, sp
 8006e12:	891b      	ldrh	r3, [r3, #8]
 8006e14:	b282      	uxth	r2, r0
 8006e16:	1a9a      	subs	r2, r3, r2
 8006e18:	9b02      	ldr	r3, [sp, #8]
 8006e1a:	1952      	adds	r2, r2, r5
 8006e1c:	0c00      	lsrs	r0, r0, #16
 8006e1e:	0c1b      	lsrs	r3, r3, #16
 8006e20:	1a1b      	subs	r3, r3, r0
 8006e22:	1410      	asrs	r0, r2, #16
 8006e24:	181b      	adds	r3, r3, r0
 8006e26:	141d      	asrs	r5, r3, #16
 8006e28:	b292      	uxth	r2, r2
 8006e2a:	041b      	lsls	r3, r3, #16
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	9b03      	ldr	r3, [sp, #12]
 8006e30:	c404      	stmia	r4!, {r2}
 8006e32:	428b      	cmp	r3, r1
 8006e34:	d2e9      	bcs.n	8006e0a <quorem+0xb0>
 8006e36:	9a01      	ldr	r2, [sp, #4]
 8006e38:	00bb      	lsls	r3, r7, #2
 8006e3a:	18d3      	adds	r3, r2, r3
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	2a00      	cmp	r2, #0
 8006e40:	d013      	beq.n	8006e6a <quorem+0x110>
 8006e42:	9b00      	ldr	r3, [sp, #0]
 8006e44:	3301      	adds	r3, #1
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	9800      	ldr	r0, [sp, #0]
 8006e4a:	b007      	add	sp, #28
 8006e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e4e:	6823      	ldr	r3, [r4, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d104      	bne.n	8006e5e <quorem+0x104>
 8006e54:	3f01      	subs	r7, #1
 8006e56:	9b01      	ldr	r3, [sp, #4]
 8006e58:	3c04      	subs	r4, #4
 8006e5a:	42a3      	cmp	r3, r4
 8006e5c:	d3f7      	bcc.n	8006e4e <quorem+0xf4>
 8006e5e:	6137      	str	r7, [r6, #16]
 8006e60:	e7c8      	b.n	8006df4 <quorem+0x9a>
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	2a00      	cmp	r2, #0
 8006e66:	d104      	bne.n	8006e72 <quorem+0x118>
 8006e68:	3f01      	subs	r7, #1
 8006e6a:	9a01      	ldr	r2, [sp, #4]
 8006e6c:	3b04      	subs	r3, #4
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d3f7      	bcc.n	8006e62 <quorem+0x108>
 8006e72:	6137      	str	r7, [r6, #16]
 8006e74:	e7e5      	b.n	8006e42 <quorem+0xe8>
	...

08006e78 <_dtoa_r>:
 8006e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e7a:	0014      	movs	r4, r2
 8006e7c:	001d      	movs	r5, r3
 8006e7e:	69c6      	ldr	r6, [r0, #28]
 8006e80:	b09d      	sub	sp, #116	@ 0x74
 8006e82:	940a      	str	r4, [sp, #40]	@ 0x28
 8006e84:	950b      	str	r5, [sp, #44]	@ 0x2c
 8006e86:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8006e88:	9003      	str	r0, [sp, #12]
 8006e8a:	2e00      	cmp	r6, #0
 8006e8c:	d10f      	bne.n	8006eae <_dtoa_r+0x36>
 8006e8e:	2010      	movs	r0, #16
 8006e90:	f7ff f888 	bl	8005fa4 <malloc>
 8006e94:	9b03      	ldr	r3, [sp, #12]
 8006e96:	1e02      	subs	r2, r0, #0
 8006e98:	61d8      	str	r0, [r3, #28]
 8006e9a:	d104      	bne.n	8006ea6 <_dtoa_r+0x2e>
 8006e9c:	21ef      	movs	r1, #239	@ 0xef
 8006e9e:	4bc7      	ldr	r3, [pc, #796]	@ (80071bc <_dtoa_r+0x344>)
 8006ea0:	48c7      	ldr	r0, [pc, #796]	@ (80071c0 <_dtoa_r+0x348>)
 8006ea2:	f001 fa7d 	bl	80083a0 <__assert_func>
 8006ea6:	6046      	str	r6, [r0, #4]
 8006ea8:	6086      	str	r6, [r0, #8]
 8006eaa:	6006      	str	r6, [r0, #0]
 8006eac:	60c6      	str	r6, [r0, #12]
 8006eae:	9b03      	ldr	r3, [sp, #12]
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	6819      	ldr	r1, [r3, #0]
 8006eb4:	2900      	cmp	r1, #0
 8006eb6:	d00b      	beq.n	8006ed0 <_dtoa_r+0x58>
 8006eb8:	685a      	ldr	r2, [r3, #4]
 8006eba:	2301      	movs	r3, #1
 8006ebc:	4093      	lsls	r3, r2
 8006ebe:	604a      	str	r2, [r1, #4]
 8006ec0:	608b      	str	r3, [r1, #8]
 8006ec2:	9803      	ldr	r0, [sp, #12]
 8006ec4:	f000 fe5a 	bl	8007b7c <_Bfree>
 8006ec8:	2200      	movs	r2, #0
 8006eca:	9b03      	ldr	r3, [sp, #12]
 8006ecc:	69db      	ldr	r3, [r3, #28]
 8006ece:	601a      	str	r2, [r3, #0]
 8006ed0:	2d00      	cmp	r5, #0
 8006ed2:	da1e      	bge.n	8006f12 <_dtoa_r+0x9a>
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	603b      	str	r3, [r7, #0]
 8006ed8:	006b      	lsls	r3, r5, #1
 8006eda:	085b      	lsrs	r3, r3, #1
 8006edc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ede:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006ee0:	4bb8      	ldr	r3, [pc, #736]	@ (80071c4 <_dtoa_r+0x34c>)
 8006ee2:	4ab8      	ldr	r2, [pc, #736]	@ (80071c4 <_dtoa_r+0x34c>)
 8006ee4:	403b      	ands	r3, r7
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d116      	bne.n	8006f18 <_dtoa_r+0xa0>
 8006eea:	4bb7      	ldr	r3, [pc, #732]	@ (80071c8 <_dtoa_r+0x350>)
 8006eec:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006eee:	6013      	str	r3, [r2, #0]
 8006ef0:	033b      	lsls	r3, r7, #12
 8006ef2:	0b1b      	lsrs	r3, r3, #12
 8006ef4:	4323      	orrs	r3, r4
 8006ef6:	d101      	bne.n	8006efc <_dtoa_r+0x84>
 8006ef8:	f000 fd83 	bl	8007a02 <_dtoa_r+0xb8a>
 8006efc:	4bb3      	ldr	r3, [pc, #716]	@ (80071cc <_dtoa_r+0x354>)
 8006efe:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006f00:	9308      	str	r3, [sp, #32]
 8006f02:	2a00      	cmp	r2, #0
 8006f04:	d002      	beq.n	8006f0c <_dtoa_r+0x94>
 8006f06:	4bb2      	ldr	r3, [pc, #712]	@ (80071d0 <_dtoa_r+0x358>)
 8006f08:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006f0a:	6013      	str	r3, [r2, #0]
 8006f0c:	9808      	ldr	r0, [sp, #32]
 8006f0e:	b01d      	add	sp, #116	@ 0x74
 8006f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f12:	2300      	movs	r3, #0
 8006f14:	603b      	str	r3, [r7, #0]
 8006f16:	e7e2      	b.n	8006ede <_dtoa_r+0x66>
 8006f18:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f1c:	9212      	str	r2, [sp, #72]	@ 0x48
 8006f1e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006f20:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006f22:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006f24:	2200      	movs	r2, #0
 8006f26:	2300      	movs	r3, #0
 8006f28:	f7f9 fa90 	bl	800044c <__aeabi_dcmpeq>
 8006f2c:	1e06      	subs	r6, r0, #0
 8006f2e:	d00b      	beq.n	8006f48 <_dtoa_r+0xd0>
 8006f30:	2301      	movs	r3, #1
 8006f32:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006f34:	6013      	str	r3, [r2, #0]
 8006f36:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d002      	beq.n	8006f42 <_dtoa_r+0xca>
 8006f3c:	4ba5      	ldr	r3, [pc, #660]	@ (80071d4 <_dtoa_r+0x35c>)
 8006f3e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006f40:	6013      	str	r3, [r2, #0]
 8006f42:	4ba5      	ldr	r3, [pc, #660]	@ (80071d8 <_dtoa_r+0x360>)
 8006f44:	9308      	str	r3, [sp, #32]
 8006f46:	e7e1      	b.n	8006f0c <_dtoa_r+0x94>
 8006f48:	ab1a      	add	r3, sp, #104	@ 0x68
 8006f4a:	9301      	str	r3, [sp, #4]
 8006f4c:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006f4e:	9300      	str	r3, [sp, #0]
 8006f50:	9803      	ldr	r0, [sp, #12]
 8006f52:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006f54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006f56:	f001 f911 	bl	800817c <__d2b>
 8006f5a:	007a      	lsls	r2, r7, #1
 8006f5c:	9005      	str	r0, [sp, #20]
 8006f5e:	0d52      	lsrs	r2, r2, #21
 8006f60:	d100      	bne.n	8006f64 <_dtoa_r+0xec>
 8006f62:	e07b      	b.n	800705c <_dtoa_r+0x1e4>
 8006f64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006f66:	9618      	str	r6, [sp, #96]	@ 0x60
 8006f68:	0319      	lsls	r1, r3, #12
 8006f6a:	4b9c      	ldr	r3, [pc, #624]	@ (80071dc <_dtoa_r+0x364>)
 8006f6c:	0b09      	lsrs	r1, r1, #12
 8006f6e:	430b      	orrs	r3, r1
 8006f70:	499b      	ldr	r1, [pc, #620]	@ (80071e0 <_dtoa_r+0x368>)
 8006f72:	1857      	adds	r7, r2, r1
 8006f74:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006f76:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006f78:	0019      	movs	r1, r3
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	4b99      	ldr	r3, [pc, #612]	@ (80071e4 <_dtoa_r+0x36c>)
 8006f7e:	f7fa fd03 	bl	8001988 <__aeabi_dsub>
 8006f82:	4a99      	ldr	r2, [pc, #612]	@ (80071e8 <_dtoa_r+0x370>)
 8006f84:	4b99      	ldr	r3, [pc, #612]	@ (80071ec <_dtoa_r+0x374>)
 8006f86:	f7fa fa37 	bl	80013f8 <__aeabi_dmul>
 8006f8a:	4a99      	ldr	r2, [pc, #612]	@ (80071f0 <_dtoa_r+0x378>)
 8006f8c:	4b99      	ldr	r3, [pc, #612]	@ (80071f4 <_dtoa_r+0x37c>)
 8006f8e:	f7f9 fa8b 	bl	80004a8 <__aeabi_dadd>
 8006f92:	0004      	movs	r4, r0
 8006f94:	0038      	movs	r0, r7
 8006f96:	000d      	movs	r5, r1
 8006f98:	f7fb f8f0 	bl	800217c <__aeabi_i2d>
 8006f9c:	4a96      	ldr	r2, [pc, #600]	@ (80071f8 <_dtoa_r+0x380>)
 8006f9e:	4b97      	ldr	r3, [pc, #604]	@ (80071fc <_dtoa_r+0x384>)
 8006fa0:	f7fa fa2a 	bl	80013f8 <__aeabi_dmul>
 8006fa4:	0002      	movs	r2, r0
 8006fa6:	000b      	movs	r3, r1
 8006fa8:	0020      	movs	r0, r4
 8006faa:	0029      	movs	r1, r5
 8006fac:	f7f9 fa7c 	bl	80004a8 <__aeabi_dadd>
 8006fb0:	0004      	movs	r4, r0
 8006fb2:	000d      	movs	r5, r1
 8006fb4:	f7fb f8a6 	bl	8002104 <__aeabi_d2iz>
 8006fb8:	2200      	movs	r2, #0
 8006fba:	9004      	str	r0, [sp, #16]
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	0020      	movs	r0, r4
 8006fc0:	0029      	movs	r1, r5
 8006fc2:	f7f9 fa49 	bl	8000458 <__aeabi_dcmplt>
 8006fc6:	2800      	cmp	r0, #0
 8006fc8:	d00b      	beq.n	8006fe2 <_dtoa_r+0x16a>
 8006fca:	9804      	ldr	r0, [sp, #16]
 8006fcc:	f7fb f8d6 	bl	800217c <__aeabi_i2d>
 8006fd0:	002b      	movs	r3, r5
 8006fd2:	0022      	movs	r2, r4
 8006fd4:	f7f9 fa3a 	bl	800044c <__aeabi_dcmpeq>
 8006fd8:	4243      	negs	r3, r0
 8006fda:	4158      	adcs	r0, r3
 8006fdc:	9b04      	ldr	r3, [sp, #16]
 8006fde:	1a1b      	subs	r3, r3, r0
 8006fe0:	9304      	str	r3, [sp, #16]
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	9315      	str	r3, [sp, #84]	@ 0x54
 8006fe6:	9b04      	ldr	r3, [sp, #16]
 8006fe8:	2b16      	cmp	r3, #22
 8006fea:	d810      	bhi.n	800700e <_dtoa_r+0x196>
 8006fec:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006fee:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006ff0:	9a04      	ldr	r2, [sp, #16]
 8006ff2:	4b83      	ldr	r3, [pc, #524]	@ (8007200 <_dtoa_r+0x388>)
 8006ff4:	00d2      	lsls	r2, r2, #3
 8006ff6:	189b      	adds	r3, r3, r2
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	f7f9 fa2c 	bl	8000458 <__aeabi_dcmplt>
 8007000:	2800      	cmp	r0, #0
 8007002:	d047      	beq.n	8007094 <_dtoa_r+0x21c>
 8007004:	9b04      	ldr	r3, [sp, #16]
 8007006:	3b01      	subs	r3, #1
 8007008:	9304      	str	r3, [sp, #16]
 800700a:	2300      	movs	r3, #0
 800700c:	9315      	str	r3, [sp, #84]	@ 0x54
 800700e:	2200      	movs	r2, #0
 8007010:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8007012:	9206      	str	r2, [sp, #24]
 8007014:	1bdb      	subs	r3, r3, r7
 8007016:	1e5a      	subs	r2, r3, #1
 8007018:	d53e      	bpl.n	8007098 <_dtoa_r+0x220>
 800701a:	2201      	movs	r2, #1
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	9306      	str	r3, [sp, #24]
 8007020:	2300      	movs	r3, #0
 8007022:	930d      	str	r3, [sp, #52]	@ 0x34
 8007024:	9b04      	ldr	r3, [sp, #16]
 8007026:	2b00      	cmp	r3, #0
 8007028:	db38      	blt.n	800709c <_dtoa_r+0x224>
 800702a:	9a04      	ldr	r2, [sp, #16]
 800702c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800702e:	4694      	mov	ip, r2
 8007030:	4463      	add	r3, ip
 8007032:	930d      	str	r3, [sp, #52]	@ 0x34
 8007034:	2300      	movs	r3, #0
 8007036:	9214      	str	r2, [sp, #80]	@ 0x50
 8007038:	930f      	str	r3, [sp, #60]	@ 0x3c
 800703a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800703c:	2401      	movs	r4, #1
 800703e:	2b09      	cmp	r3, #9
 8007040:	d867      	bhi.n	8007112 <_dtoa_r+0x29a>
 8007042:	2b05      	cmp	r3, #5
 8007044:	dd02      	ble.n	800704c <_dtoa_r+0x1d4>
 8007046:	2400      	movs	r4, #0
 8007048:	3b04      	subs	r3, #4
 800704a:	9322      	str	r3, [sp, #136]	@ 0x88
 800704c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800704e:	1e98      	subs	r0, r3, #2
 8007050:	2803      	cmp	r0, #3
 8007052:	d867      	bhi.n	8007124 <_dtoa_r+0x2ac>
 8007054:	f7f9 f860 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007058:	5b383a2b 	.word	0x5b383a2b
 800705c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800705e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8007060:	18f6      	adds	r6, r6, r3
 8007062:	4b68      	ldr	r3, [pc, #416]	@ (8007204 <_dtoa_r+0x38c>)
 8007064:	18f2      	adds	r2, r6, r3
 8007066:	2a20      	cmp	r2, #32
 8007068:	dd0f      	ble.n	800708a <_dtoa_r+0x212>
 800706a:	2340      	movs	r3, #64	@ 0x40
 800706c:	1a9b      	subs	r3, r3, r2
 800706e:	409f      	lsls	r7, r3
 8007070:	4b65      	ldr	r3, [pc, #404]	@ (8007208 <_dtoa_r+0x390>)
 8007072:	0038      	movs	r0, r7
 8007074:	18f3      	adds	r3, r6, r3
 8007076:	40dc      	lsrs	r4, r3
 8007078:	4320      	orrs	r0, r4
 800707a:	f7fb f8ad 	bl	80021d8 <__aeabi_ui2d>
 800707e:	2201      	movs	r2, #1
 8007080:	4b62      	ldr	r3, [pc, #392]	@ (800720c <_dtoa_r+0x394>)
 8007082:	1e77      	subs	r7, r6, #1
 8007084:	18cb      	adds	r3, r1, r3
 8007086:	9218      	str	r2, [sp, #96]	@ 0x60
 8007088:	e776      	b.n	8006f78 <_dtoa_r+0x100>
 800708a:	2320      	movs	r3, #32
 800708c:	0020      	movs	r0, r4
 800708e:	1a9b      	subs	r3, r3, r2
 8007090:	4098      	lsls	r0, r3
 8007092:	e7f2      	b.n	800707a <_dtoa_r+0x202>
 8007094:	9015      	str	r0, [sp, #84]	@ 0x54
 8007096:	e7ba      	b.n	800700e <_dtoa_r+0x196>
 8007098:	920d      	str	r2, [sp, #52]	@ 0x34
 800709a:	e7c3      	b.n	8007024 <_dtoa_r+0x1ac>
 800709c:	9b06      	ldr	r3, [sp, #24]
 800709e:	9a04      	ldr	r2, [sp, #16]
 80070a0:	1a9b      	subs	r3, r3, r2
 80070a2:	9306      	str	r3, [sp, #24]
 80070a4:	4253      	negs	r3, r2
 80070a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80070a8:	2300      	movs	r3, #0
 80070aa:	9314      	str	r3, [sp, #80]	@ 0x50
 80070ac:	e7c5      	b.n	800703a <_dtoa_r+0x1c2>
 80070ae:	2300      	movs	r3, #0
 80070b0:	9310      	str	r3, [sp, #64]	@ 0x40
 80070b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80070b4:	930e      	str	r3, [sp, #56]	@ 0x38
 80070b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	dc13      	bgt.n	80070e4 <_dtoa_r+0x26c>
 80070bc:	2301      	movs	r3, #1
 80070be:	001a      	movs	r2, r3
 80070c0:	930e      	str	r3, [sp, #56]	@ 0x38
 80070c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80070c4:	9223      	str	r2, [sp, #140]	@ 0x8c
 80070c6:	e00d      	b.n	80070e4 <_dtoa_r+0x26c>
 80070c8:	2301      	movs	r3, #1
 80070ca:	e7f1      	b.n	80070b0 <_dtoa_r+0x238>
 80070cc:	2300      	movs	r3, #0
 80070ce:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80070d0:	9310      	str	r3, [sp, #64]	@ 0x40
 80070d2:	4694      	mov	ip, r2
 80070d4:	9b04      	ldr	r3, [sp, #16]
 80070d6:	4463      	add	r3, ip
 80070d8:	930e      	str	r3, [sp, #56]	@ 0x38
 80070da:	3301      	adds	r3, #1
 80070dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80070de:	2b00      	cmp	r3, #0
 80070e0:	dc00      	bgt.n	80070e4 <_dtoa_r+0x26c>
 80070e2:	2301      	movs	r3, #1
 80070e4:	9a03      	ldr	r2, [sp, #12]
 80070e6:	2100      	movs	r1, #0
 80070e8:	69d0      	ldr	r0, [r2, #28]
 80070ea:	2204      	movs	r2, #4
 80070ec:	0015      	movs	r5, r2
 80070ee:	3514      	adds	r5, #20
 80070f0:	429d      	cmp	r5, r3
 80070f2:	d91b      	bls.n	800712c <_dtoa_r+0x2b4>
 80070f4:	6041      	str	r1, [r0, #4]
 80070f6:	9803      	ldr	r0, [sp, #12]
 80070f8:	f000 fcfc 	bl	8007af4 <_Balloc>
 80070fc:	9008      	str	r0, [sp, #32]
 80070fe:	2800      	cmp	r0, #0
 8007100:	d117      	bne.n	8007132 <_dtoa_r+0x2ba>
 8007102:	21b0      	movs	r1, #176	@ 0xb0
 8007104:	4b42      	ldr	r3, [pc, #264]	@ (8007210 <_dtoa_r+0x398>)
 8007106:	482e      	ldr	r0, [pc, #184]	@ (80071c0 <_dtoa_r+0x348>)
 8007108:	9a08      	ldr	r2, [sp, #32]
 800710a:	31ff      	adds	r1, #255	@ 0xff
 800710c:	e6c9      	b.n	8006ea2 <_dtoa_r+0x2a>
 800710e:	2301      	movs	r3, #1
 8007110:	e7dd      	b.n	80070ce <_dtoa_r+0x256>
 8007112:	2300      	movs	r3, #0
 8007114:	9410      	str	r4, [sp, #64]	@ 0x40
 8007116:	9322      	str	r3, [sp, #136]	@ 0x88
 8007118:	3b01      	subs	r3, #1
 800711a:	930e      	str	r3, [sp, #56]	@ 0x38
 800711c:	9309      	str	r3, [sp, #36]	@ 0x24
 800711e:	2200      	movs	r2, #0
 8007120:	3313      	adds	r3, #19
 8007122:	e7cf      	b.n	80070c4 <_dtoa_r+0x24c>
 8007124:	2301      	movs	r3, #1
 8007126:	9310      	str	r3, [sp, #64]	@ 0x40
 8007128:	3b02      	subs	r3, #2
 800712a:	e7f6      	b.n	800711a <_dtoa_r+0x2a2>
 800712c:	3101      	adds	r1, #1
 800712e:	0052      	lsls	r2, r2, #1
 8007130:	e7dc      	b.n	80070ec <_dtoa_r+0x274>
 8007132:	9b03      	ldr	r3, [sp, #12]
 8007134:	9a08      	ldr	r2, [sp, #32]
 8007136:	69db      	ldr	r3, [r3, #28]
 8007138:	601a      	str	r2, [r3, #0]
 800713a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800713c:	2b0e      	cmp	r3, #14
 800713e:	d900      	bls.n	8007142 <_dtoa_r+0x2ca>
 8007140:	e0d9      	b.n	80072f6 <_dtoa_r+0x47e>
 8007142:	2c00      	cmp	r4, #0
 8007144:	d100      	bne.n	8007148 <_dtoa_r+0x2d0>
 8007146:	e0d6      	b.n	80072f6 <_dtoa_r+0x47e>
 8007148:	9b04      	ldr	r3, [sp, #16]
 800714a:	2b00      	cmp	r3, #0
 800714c:	dd64      	ble.n	8007218 <_dtoa_r+0x3a0>
 800714e:	210f      	movs	r1, #15
 8007150:	9a04      	ldr	r2, [sp, #16]
 8007152:	4b2b      	ldr	r3, [pc, #172]	@ (8007200 <_dtoa_r+0x388>)
 8007154:	400a      	ands	r2, r1
 8007156:	00d2      	lsls	r2, r2, #3
 8007158:	189b      	adds	r3, r3, r2
 800715a:	681e      	ldr	r6, [r3, #0]
 800715c:	685f      	ldr	r7, [r3, #4]
 800715e:	9b04      	ldr	r3, [sp, #16]
 8007160:	2402      	movs	r4, #2
 8007162:	111d      	asrs	r5, r3, #4
 8007164:	05db      	lsls	r3, r3, #23
 8007166:	d50a      	bpl.n	800717e <_dtoa_r+0x306>
 8007168:	4b2a      	ldr	r3, [pc, #168]	@ (8007214 <_dtoa_r+0x39c>)
 800716a:	400d      	ands	r5, r1
 800716c:	6a1a      	ldr	r2, [r3, #32]
 800716e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007170:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007172:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007174:	f7f9 fcfc 	bl	8000b70 <__aeabi_ddiv>
 8007178:	900a      	str	r0, [sp, #40]	@ 0x28
 800717a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800717c:	3401      	adds	r4, #1
 800717e:	4b25      	ldr	r3, [pc, #148]	@ (8007214 <_dtoa_r+0x39c>)
 8007180:	930c      	str	r3, [sp, #48]	@ 0x30
 8007182:	2d00      	cmp	r5, #0
 8007184:	d108      	bne.n	8007198 <_dtoa_r+0x320>
 8007186:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007188:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800718a:	0032      	movs	r2, r6
 800718c:	003b      	movs	r3, r7
 800718e:	f7f9 fcef 	bl	8000b70 <__aeabi_ddiv>
 8007192:	900a      	str	r0, [sp, #40]	@ 0x28
 8007194:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007196:	e05a      	b.n	800724e <_dtoa_r+0x3d6>
 8007198:	2301      	movs	r3, #1
 800719a:	421d      	tst	r5, r3
 800719c:	d009      	beq.n	80071b2 <_dtoa_r+0x33a>
 800719e:	18e4      	adds	r4, r4, r3
 80071a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80071a2:	0030      	movs	r0, r6
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	0039      	movs	r1, r7
 80071aa:	f7fa f925 	bl	80013f8 <__aeabi_dmul>
 80071ae:	0006      	movs	r6, r0
 80071b0:	000f      	movs	r7, r1
 80071b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80071b4:	106d      	asrs	r5, r5, #1
 80071b6:	3308      	adds	r3, #8
 80071b8:	e7e2      	b.n	8007180 <_dtoa_r+0x308>
 80071ba:	46c0      	nop			@ (mov r8, r8)
 80071bc:	08008b49 	.word	0x08008b49
 80071c0:	08008b60 	.word	0x08008b60
 80071c4:	7ff00000 	.word	0x7ff00000
 80071c8:	0000270f 	.word	0x0000270f
 80071cc:	08008b45 	.word	0x08008b45
 80071d0:	08008b48 	.word	0x08008b48
 80071d4:	08008b19 	.word	0x08008b19
 80071d8:	08008b18 	.word	0x08008b18
 80071dc:	3ff00000 	.word	0x3ff00000
 80071e0:	fffffc01 	.word	0xfffffc01
 80071e4:	3ff80000 	.word	0x3ff80000
 80071e8:	636f4361 	.word	0x636f4361
 80071ec:	3fd287a7 	.word	0x3fd287a7
 80071f0:	8b60c8b3 	.word	0x8b60c8b3
 80071f4:	3fc68a28 	.word	0x3fc68a28
 80071f8:	509f79fb 	.word	0x509f79fb
 80071fc:	3fd34413 	.word	0x3fd34413
 8007200:	08008c58 	.word	0x08008c58
 8007204:	00000432 	.word	0x00000432
 8007208:	00000412 	.word	0x00000412
 800720c:	fe100000 	.word	0xfe100000
 8007210:	08008bb8 	.word	0x08008bb8
 8007214:	08008c30 	.word	0x08008c30
 8007218:	9b04      	ldr	r3, [sp, #16]
 800721a:	2402      	movs	r4, #2
 800721c:	2b00      	cmp	r3, #0
 800721e:	d016      	beq.n	800724e <_dtoa_r+0x3d6>
 8007220:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007222:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007224:	220f      	movs	r2, #15
 8007226:	425d      	negs	r5, r3
 8007228:	402a      	ands	r2, r5
 800722a:	4bd7      	ldr	r3, [pc, #860]	@ (8007588 <_dtoa_r+0x710>)
 800722c:	00d2      	lsls	r2, r2, #3
 800722e:	189b      	adds	r3, r3, r2
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	f7fa f8e0 	bl	80013f8 <__aeabi_dmul>
 8007238:	2701      	movs	r7, #1
 800723a:	2300      	movs	r3, #0
 800723c:	900a      	str	r0, [sp, #40]	@ 0x28
 800723e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007240:	4ed2      	ldr	r6, [pc, #840]	@ (800758c <_dtoa_r+0x714>)
 8007242:	112d      	asrs	r5, r5, #4
 8007244:	2d00      	cmp	r5, #0
 8007246:	d000      	beq.n	800724a <_dtoa_r+0x3d2>
 8007248:	e0ba      	b.n	80073c0 <_dtoa_r+0x548>
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1a1      	bne.n	8007192 <_dtoa_r+0x31a>
 800724e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007250:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007252:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007254:	2b00      	cmp	r3, #0
 8007256:	d100      	bne.n	800725a <_dtoa_r+0x3e2>
 8007258:	e0bd      	b.n	80073d6 <_dtoa_r+0x55e>
 800725a:	2200      	movs	r2, #0
 800725c:	0030      	movs	r0, r6
 800725e:	0039      	movs	r1, r7
 8007260:	4bcb      	ldr	r3, [pc, #812]	@ (8007590 <_dtoa_r+0x718>)
 8007262:	f7f9 f8f9 	bl	8000458 <__aeabi_dcmplt>
 8007266:	2800      	cmp	r0, #0
 8007268:	d100      	bne.n	800726c <_dtoa_r+0x3f4>
 800726a:	e0b4      	b.n	80073d6 <_dtoa_r+0x55e>
 800726c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800726e:	2b00      	cmp	r3, #0
 8007270:	d100      	bne.n	8007274 <_dtoa_r+0x3fc>
 8007272:	e0b0      	b.n	80073d6 <_dtoa_r+0x55e>
 8007274:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007276:	2b00      	cmp	r3, #0
 8007278:	dd39      	ble.n	80072ee <_dtoa_r+0x476>
 800727a:	9b04      	ldr	r3, [sp, #16]
 800727c:	2200      	movs	r2, #0
 800727e:	3b01      	subs	r3, #1
 8007280:	930c      	str	r3, [sp, #48]	@ 0x30
 8007282:	0030      	movs	r0, r6
 8007284:	4bc3      	ldr	r3, [pc, #780]	@ (8007594 <_dtoa_r+0x71c>)
 8007286:	0039      	movs	r1, r7
 8007288:	f7fa f8b6 	bl	80013f8 <__aeabi_dmul>
 800728c:	900a      	str	r0, [sp, #40]	@ 0x28
 800728e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007290:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007292:	3401      	adds	r4, #1
 8007294:	0020      	movs	r0, r4
 8007296:	9311      	str	r3, [sp, #68]	@ 0x44
 8007298:	f7fa ff70 	bl	800217c <__aeabi_i2d>
 800729c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800729e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072a0:	f7fa f8aa 	bl	80013f8 <__aeabi_dmul>
 80072a4:	4bbc      	ldr	r3, [pc, #752]	@ (8007598 <_dtoa_r+0x720>)
 80072a6:	2200      	movs	r2, #0
 80072a8:	f7f9 f8fe 	bl	80004a8 <__aeabi_dadd>
 80072ac:	4bbb      	ldr	r3, [pc, #748]	@ (800759c <_dtoa_r+0x724>)
 80072ae:	0006      	movs	r6, r0
 80072b0:	18cf      	adds	r7, r1, r3
 80072b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d000      	beq.n	80072ba <_dtoa_r+0x442>
 80072b8:	e091      	b.n	80073de <_dtoa_r+0x566>
 80072ba:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80072bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80072be:	2200      	movs	r2, #0
 80072c0:	4bb7      	ldr	r3, [pc, #732]	@ (80075a0 <_dtoa_r+0x728>)
 80072c2:	f7fa fb61 	bl	8001988 <__aeabi_dsub>
 80072c6:	0032      	movs	r2, r6
 80072c8:	003b      	movs	r3, r7
 80072ca:	0004      	movs	r4, r0
 80072cc:	000d      	movs	r5, r1
 80072ce:	f7f9 f8d7 	bl	8000480 <__aeabi_dcmpgt>
 80072d2:	2800      	cmp	r0, #0
 80072d4:	d000      	beq.n	80072d8 <_dtoa_r+0x460>
 80072d6:	e29d      	b.n	8007814 <_dtoa_r+0x99c>
 80072d8:	2180      	movs	r1, #128	@ 0x80
 80072da:	0609      	lsls	r1, r1, #24
 80072dc:	187b      	adds	r3, r7, r1
 80072de:	0032      	movs	r2, r6
 80072e0:	0020      	movs	r0, r4
 80072e2:	0029      	movs	r1, r5
 80072e4:	f7f9 f8b8 	bl	8000458 <__aeabi_dcmplt>
 80072e8:	2800      	cmp	r0, #0
 80072ea:	d000      	beq.n	80072ee <_dtoa_r+0x476>
 80072ec:	e130      	b.n	8007550 <_dtoa_r+0x6d8>
 80072ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80072f0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80072f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80072f4:	940b      	str	r4, [sp, #44]	@ 0x2c
 80072f6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	da00      	bge.n	80072fe <_dtoa_r+0x486>
 80072fc:	e177      	b.n	80075ee <_dtoa_r+0x776>
 80072fe:	9a04      	ldr	r2, [sp, #16]
 8007300:	2a0e      	cmp	r2, #14
 8007302:	dd00      	ble.n	8007306 <_dtoa_r+0x48e>
 8007304:	e173      	b.n	80075ee <_dtoa_r+0x776>
 8007306:	4ba0      	ldr	r3, [pc, #640]	@ (8007588 <_dtoa_r+0x710>)
 8007308:	00d2      	lsls	r2, r2, #3
 800730a:	189b      	adds	r3, r3, r2
 800730c:	685c      	ldr	r4, [r3, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	9306      	str	r3, [sp, #24]
 8007312:	9407      	str	r4, [sp, #28]
 8007314:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007316:	2b00      	cmp	r3, #0
 8007318:	da03      	bge.n	8007322 <_dtoa_r+0x4aa>
 800731a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800731c:	2b00      	cmp	r3, #0
 800731e:	dc00      	bgt.n	8007322 <_dtoa_r+0x4aa>
 8007320:	e106      	b.n	8007530 <_dtoa_r+0x6b8>
 8007322:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007324:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007328:	9d08      	ldr	r5, [sp, #32]
 800732a:	3b01      	subs	r3, #1
 800732c:	195b      	adds	r3, r3, r5
 800732e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007330:	9a06      	ldr	r2, [sp, #24]
 8007332:	9b07      	ldr	r3, [sp, #28]
 8007334:	0030      	movs	r0, r6
 8007336:	0039      	movs	r1, r7
 8007338:	f7f9 fc1a 	bl	8000b70 <__aeabi_ddiv>
 800733c:	f7fa fee2 	bl	8002104 <__aeabi_d2iz>
 8007340:	9009      	str	r0, [sp, #36]	@ 0x24
 8007342:	f7fa ff1b 	bl	800217c <__aeabi_i2d>
 8007346:	9a06      	ldr	r2, [sp, #24]
 8007348:	9b07      	ldr	r3, [sp, #28]
 800734a:	f7fa f855 	bl	80013f8 <__aeabi_dmul>
 800734e:	0002      	movs	r2, r0
 8007350:	000b      	movs	r3, r1
 8007352:	0030      	movs	r0, r6
 8007354:	0039      	movs	r1, r7
 8007356:	f7fa fb17 	bl	8001988 <__aeabi_dsub>
 800735a:	002b      	movs	r3, r5
 800735c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800735e:	3501      	adds	r5, #1
 8007360:	3230      	adds	r2, #48	@ 0x30
 8007362:	701a      	strb	r2, [r3, #0]
 8007364:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007366:	002c      	movs	r4, r5
 8007368:	429a      	cmp	r2, r3
 800736a:	d000      	beq.n	800736e <_dtoa_r+0x4f6>
 800736c:	e131      	b.n	80075d2 <_dtoa_r+0x75a>
 800736e:	0002      	movs	r2, r0
 8007370:	000b      	movs	r3, r1
 8007372:	f7f9 f899 	bl	80004a8 <__aeabi_dadd>
 8007376:	9a06      	ldr	r2, [sp, #24]
 8007378:	9b07      	ldr	r3, [sp, #28]
 800737a:	0006      	movs	r6, r0
 800737c:	000f      	movs	r7, r1
 800737e:	f7f9 f87f 	bl	8000480 <__aeabi_dcmpgt>
 8007382:	2800      	cmp	r0, #0
 8007384:	d000      	beq.n	8007388 <_dtoa_r+0x510>
 8007386:	e10f      	b.n	80075a8 <_dtoa_r+0x730>
 8007388:	9a06      	ldr	r2, [sp, #24]
 800738a:	9b07      	ldr	r3, [sp, #28]
 800738c:	0030      	movs	r0, r6
 800738e:	0039      	movs	r1, r7
 8007390:	f7f9 f85c 	bl	800044c <__aeabi_dcmpeq>
 8007394:	2800      	cmp	r0, #0
 8007396:	d003      	beq.n	80073a0 <_dtoa_r+0x528>
 8007398:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800739a:	07dd      	lsls	r5, r3, #31
 800739c:	d500      	bpl.n	80073a0 <_dtoa_r+0x528>
 800739e:	e103      	b.n	80075a8 <_dtoa_r+0x730>
 80073a0:	9905      	ldr	r1, [sp, #20]
 80073a2:	9803      	ldr	r0, [sp, #12]
 80073a4:	f000 fbea 	bl	8007b7c <_Bfree>
 80073a8:	2300      	movs	r3, #0
 80073aa:	7023      	strb	r3, [r4, #0]
 80073ac:	9b04      	ldr	r3, [sp, #16]
 80073ae:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80073b0:	3301      	adds	r3, #1
 80073b2:	6013      	str	r3, [r2, #0]
 80073b4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d100      	bne.n	80073bc <_dtoa_r+0x544>
 80073ba:	e5a7      	b.n	8006f0c <_dtoa_r+0x94>
 80073bc:	601c      	str	r4, [r3, #0]
 80073be:	e5a5      	b.n	8006f0c <_dtoa_r+0x94>
 80073c0:	423d      	tst	r5, r7
 80073c2:	d005      	beq.n	80073d0 <_dtoa_r+0x558>
 80073c4:	6832      	ldr	r2, [r6, #0]
 80073c6:	6873      	ldr	r3, [r6, #4]
 80073c8:	f7fa f816 	bl	80013f8 <__aeabi_dmul>
 80073cc:	003b      	movs	r3, r7
 80073ce:	3401      	adds	r4, #1
 80073d0:	106d      	asrs	r5, r5, #1
 80073d2:	3608      	adds	r6, #8
 80073d4:	e736      	b.n	8007244 <_dtoa_r+0x3cc>
 80073d6:	9b04      	ldr	r3, [sp, #16]
 80073d8:	930c      	str	r3, [sp, #48]	@ 0x30
 80073da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073dc:	e75a      	b.n	8007294 <_dtoa_r+0x41c>
 80073de:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80073e0:	4b69      	ldr	r3, [pc, #420]	@ (8007588 <_dtoa_r+0x710>)
 80073e2:	3a01      	subs	r2, #1
 80073e4:	00d2      	lsls	r2, r2, #3
 80073e6:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80073e8:	189b      	adds	r3, r3, r2
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	2900      	cmp	r1, #0
 80073f0:	d04c      	beq.n	800748c <_dtoa_r+0x614>
 80073f2:	2000      	movs	r0, #0
 80073f4:	496b      	ldr	r1, [pc, #428]	@ (80075a4 <_dtoa_r+0x72c>)
 80073f6:	f7f9 fbbb 	bl	8000b70 <__aeabi_ddiv>
 80073fa:	0032      	movs	r2, r6
 80073fc:	003b      	movs	r3, r7
 80073fe:	f7fa fac3 	bl	8001988 <__aeabi_dsub>
 8007402:	9a08      	ldr	r2, [sp, #32]
 8007404:	0006      	movs	r6, r0
 8007406:	4694      	mov	ip, r2
 8007408:	000f      	movs	r7, r1
 800740a:	9b08      	ldr	r3, [sp, #32]
 800740c:	9316      	str	r3, [sp, #88]	@ 0x58
 800740e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007410:	4463      	add	r3, ip
 8007412:	9311      	str	r3, [sp, #68]	@ 0x44
 8007414:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007416:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007418:	f7fa fe74 	bl	8002104 <__aeabi_d2iz>
 800741c:	0005      	movs	r5, r0
 800741e:	f7fa fead 	bl	800217c <__aeabi_i2d>
 8007422:	0002      	movs	r2, r0
 8007424:	000b      	movs	r3, r1
 8007426:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007428:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800742a:	f7fa faad 	bl	8001988 <__aeabi_dsub>
 800742e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007430:	3530      	adds	r5, #48	@ 0x30
 8007432:	1c5c      	adds	r4, r3, #1
 8007434:	701d      	strb	r5, [r3, #0]
 8007436:	0032      	movs	r2, r6
 8007438:	003b      	movs	r3, r7
 800743a:	900a      	str	r0, [sp, #40]	@ 0x28
 800743c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800743e:	f7f9 f80b 	bl	8000458 <__aeabi_dcmplt>
 8007442:	2800      	cmp	r0, #0
 8007444:	d16a      	bne.n	800751c <_dtoa_r+0x6a4>
 8007446:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007448:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800744a:	2000      	movs	r0, #0
 800744c:	4950      	ldr	r1, [pc, #320]	@ (8007590 <_dtoa_r+0x718>)
 800744e:	f7fa fa9b 	bl	8001988 <__aeabi_dsub>
 8007452:	0032      	movs	r2, r6
 8007454:	003b      	movs	r3, r7
 8007456:	f7f8 ffff 	bl	8000458 <__aeabi_dcmplt>
 800745a:	2800      	cmp	r0, #0
 800745c:	d000      	beq.n	8007460 <_dtoa_r+0x5e8>
 800745e:	e0a5      	b.n	80075ac <_dtoa_r+0x734>
 8007460:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007462:	42a3      	cmp	r3, r4
 8007464:	d100      	bne.n	8007468 <_dtoa_r+0x5f0>
 8007466:	e742      	b.n	80072ee <_dtoa_r+0x476>
 8007468:	2200      	movs	r2, #0
 800746a:	0030      	movs	r0, r6
 800746c:	0039      	movs	r1, r7
 800746e:	4b49      	ldr	r3, [pc, #292]	@ (8007594 <_dtoa_r+0x71c>)
 8007470:	f7f9 ffc2 	bl	80013f8 <__aeabi_dmul>
 8007474:	2200      	movs	r2, #0
 8007476:	0006      	movs	r6, r0
 8007478:	000f      	movs	r7, r1
 800747a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800747c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800747e:	4b45      	ldr	r3, [pc, #276]	@ (8007594 <_dtoa_r+0x71c>)
 8007480:	f7f9 ffba 	bl	80013f8 <__aeabi_dmul>
 8007484:	9416      	str	r4, [sp, #88]	@ 0x58
 8007486:	900a      	str	r0, [sp, #40]	@ 0x28
 8007488:	910b      	str	r1, [sp, #44]	@ 0x2c
 800748a:	e7c3      	b.n	8007414 <_dtoa_r+0x59c>
 800748c:	0030      	movs	r0, r6
 800748e:	0039      	movs	r1, r7
 8007490:	f7f9 ffb2 	bl	80013f8 <__aeabi_dmul>
 8007494:	9d08      	ldr	r5, [sp, #32]
 8007496:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007498:	002b      	movs	r3, r5
 800749a:	4694      	mov	ip, r2
 800749c:	9016      	str	r0, [sp, #88]	@ 0x58
 800749e:	9117      	str	r1, [sp, #92]	@ 0x5c
 80074a0:	4463      	add	r3, ip
 80074a2:	9319      	str	r3, [sp, #100]	@ 0x64
 80074a4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80074a6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80074a8:	f7fa fe2c 	bl	8002104 <__aeabi_d2iz>
 80074ac:	0004      	movs	r4, r0
 80074ae:	f7fa fe65 	bl	800217c <__aeabi_i2d>
 80074b2:	000b      	movs	r3, r1
 80074b4:	0002      	movs	r2, r0
 80074b6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80074b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80074ba:	f7fa fa65 	bl	8001988 <__aeabi_dsub>
 80074be:	3430      	adds	r4, #48	@ 0x30
 80074c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80074c2:	702c      	strb	r4, [r5, #0]
 80074c4:	3501      	adds	r5, #1
 80074c6:	0006      	movs	r6, r0
 80074c8:	000f      	movs	r7, r1
 80074ca:	42ab      	cmp	r3, r5
 80074cc:	d129      	bne.n	8007522 <_dtoa_r+0x6aa>
 80074ce:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80074d0:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80074d2:	9b08      	ldr	r3, [sp, #32]
 80074d4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80074d6:	469c      	mov	ip, r3
 80074d8:	2200      	movs	r2, #0
 80074da:	4b32      	ldr	r3, [pc, #200]	@ (80075a4 <_dtoa_r+0x72c>)
 80074dc:	4464      	add	r4, ip
 80074de:	f7f8 ffe3 	bl	80004a8 <__aeabi_dadd>
 80074e2:	0002      	movs	r2, r0
 80074e4:	000b      	movs	r3, r1
 80074e6:	0030      	movs	r0, r6
 80074e8:	0039      	movs	r1, r7
 80074ea:	f7f8 ffc9 	bl	8000480 <__aeabi_dcmpgt>
 80074ee:	2800      	cmp	r0, #0
 80074f0:	d15c      	bne.n	80075ac <_dtoa_r+0x734>
 80074f2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80074f4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80074f6:	2000      	movs	r0, #0
 80074f8:	492a      	ldr	r1, [pc, #168]	@ (80075a4 <_dtoa_r+0x72c>)
 80074fa:	f7fa fa45 	bl	8001988 <__aeabi_dsub>
 80074fe:	0002      	movs	r2, r0
 8007500:	000b      	movs	r3, r1
 8007502:	0030      	movs	r0, r6
 8007504:	0039      	movs	r1, r7
 8007506:	f7f8 ffa7 	bl	8000458 <__aeabi_dcmplt>
 800750a:	2800      	cmp	r0, #0
 800750c:	d100      	bne.n	8007510 <_dtoa_r+0x698>
 800750e:	e6ee      	b.n	80072ee <_dtoa_r+0x476>
 8007510:	0023      	movs	r3, r4
 8007512:	3c01      	subs	r4, #1
 8007514:	7822      	ldrb	r2, [r4, #0]
 8007516:	2a30      	cmp	r2, #48	@ 0x30
 8007518:	d0fa      	beq.n	8007510 <_dtoa_r+0x698>
 800751a:	001c      	movs	r4, r3
 800751c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800751e:	9304      	str	r3, [sp, #16]
 8007520:	e73e      	b.n	80073a0 <_dtoa_r+0x528>
 8007522:	2200      	movs	r2, #0
 8007524:	4b1b      	ldr	r3, [pc, #108]	@ (8007594 <_dtoa_r+0x71c>)
 8007526:	f7f9 ff67 	bl	80013f8 <__aeabi_dmul>
 800752a:	900a      	str	r0, [sp, #40]	@ 0x28
 800752c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800752e:	e7b9      	b.n	80074a4 <_dtoa_r+0x62c>
 8007530:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007532:	2b00      	cmp	r3, #0
 8007534:	d10c      	bne.n	8007550 <_dtoa_r+0x6d8>
 8007536:	9806      	ldr	r0, [sp, #24]
 8007538:	9907      	ldr	r1, [sp, #28]
 800753a:	2200      	movs	r2, #0
 800753c:	4b18      	ldr	r3, [pc, #96]	@ (80075a0 <_dtoa_r+0x728>)
 800753e:	f7f9 ff5b 	bl	80013f8 <__aeabi_dmul>
 8007542:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007544:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007546:	f7f8 ffa5 	bl	8000494 <__aeabi_dcmpge>
 800754a:	2800      	cmp	r0, #0
 800754c:	d100      	bne.n	8007550 <_dtoa_r+0x6d8>
 800754e:	e164      	b.n	800781a <_dtoa_r+0x9a2>
 8007550:	2600      	movs	r6, #0
 8007552:	0037      	movs	r7, r6
 8007554:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007556:	9c08      	ldr	r4, [sp, #32]
 8007558:	43db      	mvns	r3, r3
 800755a:	930c      	str	r3, [sp, #48]	@ 0x30
 800755c:	2300      	movs	r3, #0
 800755e:	9304      	str	r3, [sp, #16]
 8007560:	0031      	movs	r1, r6
 8007562:	9803      	ldr	r0, [sp, #12]
 8007564:	f000 fb0a 	bl	8007b7c <_Bfree>
 8007568:	2f00      	cmp	r7, #0
 800756a:	d0d7      	beq.n	800751c <_dtoa_r+0x6a4>
 800756c:	9b04      	ldr	r3, [sp, #16]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d005      	beq.n	800757e <_dtoa_r+0x706>
 8007572:	42bb      	cmp	r3, r7
 8007574:	d003      	beq.n	800757e <_dtoa_r+0x706>
 8007576:	0019      	movs	r1, r3
 8007578:	9803      	ldr	r0, [sp, #12]
 800757a:	f000 faff 	bl	8007b7c <_Bfree>
 800757e:	0039      	movs	r1, r7
 8007580:	9803      	ldr	r0, [sp, #12]
 8007582:	f000 fafb 	bl	8007b7c <_Bfree>
 8007586:	e7c9      	b.n	800751c <_dtoa_r+0x6a4>
 8007588:	08008c58 	.word	0x08008c58
 800758c:	08008c30 	.word	0x08008c30
 8007590:	3ff00000 	.word	0x3ff00000
 8007594:	40240000 	.word	0x40240000
 8007598:	401c0000 	.word	0x401c0000
 800759c:	fcc00000 	.word	0xfcc00000
 80075a0:	40140000 	.word	0x40140000
 80075a4:	3fe00000 	.word	0x3fe00000
 80075a8:	9b04      	ldr	r3, [sp, #16]
 80075aa:	930c      	str	r3, [sp, #48]	@ 0x30
 80075ac:	0023      	movs	r3, r4
 80075ae:	001c      	movs	r4, r3
 80075b0:	3b01      	subs	r3, #1
 80075b2:	781a      	ldrb	r2, [r3, #0]
 80075b4:	2a39      	cmp	r2, #57	@ 0x39
 80075b6:	d108      	bne.n	80075ca <_dtoa_r+0x752>
 80075b8:	9a08      	ldr	r2, [sp, #32]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d1f7      	bne.n	80075ae <_dtoa_r+0x736>
 80075be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80075c0:	9908      	ldr	r1, [sp, #32]
 80075c2:	3201      	adds	r2, #1
 80075c4:	920c      	str	r2, [sp, #48]	@ 0x30
 80075c6:	2230      	movs	r2, #48	@ 0x30
 80075c8:	700a      	strb	r2, [r1, #0]
 80075ca:	781a      	ldrb	r2, [r3, #0]
 80075cc:	3201      	adds	r2, #1
 80075ce:	701a      	strb	r2, [r3, #0]
 80075d0:	e7a4      	b.n	800751c <_dtoa_r+0x6a4>
 80075d2:	2200      	movs	r2, #0
 80075d4:	4bc6      	ldr	r3, [pc, #792]	@ (80078f0 <_dtoa_r+0xa78>)
 80075d6:	f7f9 ff0f 	bl	80013f8 <__aeabi_dmul>
 80075da:	2200      	movs	r2, #0
 80075dc:	2300      	movs	r3, #0
 80075de:	0006      	movs	r6, r0
 80075e0:	000f      	movs	r7, r1
 80075e2:	f7f8 ff33 	bl	800044c <__aeabi_dcmpeq>
 80075e6:	2800      	cmp	r0, #0
 80075e8:	d100      	bne.n	80075ec <_dtoa_r+0x774>
 80075ea:	e6a1      	b.n	8007330 <_dtoa_r+0x4b8>
 80075ec:	e6d8      	b.n	80073a0 <_dtoa_r+0x528>
 80075ee:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80075f0:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80075f2:	9c06      	ldr	r4, [sp, #24]
 80075f4:	2f00      	cmp	r7, #0
 80075f6:	d014      	beq.n	8007622 <_dtoa_r+0x7aa>
 80075f8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80075fa:	2a01      	cmp	r2, #1
 80075fc:	dd00      	ble.n	8007600 <_dtoa_r+0x788>
 80075fe:	e0c8      	b.n	8007792 <_dtoa_r+0x91a>
 8007600:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8007602:	2a00      	cmp	r2, #0
 8007604:	d100      	bne.n	8007608 <_dtoa_r+0x790>
 8007606:	e0be      	b.n	8007786 <_dtoa_r+0x90e>
 8007608:	4aba      	ldr	r2, [pc, #744]	@ (80078f4 <_dtoa_r+0xa7c>)
 800760a:	189b      	adds	r3, r3, r2
 800760c:	9a06      	ldr	r2, [sp, #24]
 800760e:	2101      	movs	r1, #1
 8007610:	18d2      	adds	r2, r2, r3
 8007612:	9206      	str	r2, [sp, #24]
 8007614:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007616:	9803      	ldr	r0, [sp, #12]
 8007618:	18d3      	adds	r3, r2, r3
 800761a:	930d      	str	r3, [sp, #52]	@ 0x34
 800761c:	f000 fb66 	bl	8007cec <__i2b>
 8007620:	0007      	movs	r7, r0
 8007622:	2c00      	cmp	r4, #0
 8007624:	d00e      	beq.n	8007644 <_dtoa_r+0x7cc>
 8007626:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007628:	2b00      	cmp	r3, #0
 800762a:	dd0b      	ble.n	8007644 <_dtoa_r+0x7cc>
 800762c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800762e:	0023      	movs	r3, r4
 8007630:	4294      	cmp	r4, r2
 8007632:	dd00      	ble.n	8007636 <_dtoa_r+0x7be>
 8007634:	0013      	movs	r3, r2
 8007636:	9a06      	ldr	r2, [sp, #24]
 8007638:	1ae4      	subs	r4, r4, r3
 800763a:	1ad2      	subs	r2, r2, r3
 800763c:	9206      	str	r2, [sp, #24]
 800763e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	930d      	str	r3, [sp, #52]	@ 0x34
 8007644:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007646:	2b00      	cmp	r3, #0
 8007648:	d01f      	beq.n	800768a <_dtoa_r+0x812>
 800764a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800764c:	2b00      	cmp	r3, #0
 800764e:	d100      	bne.n	8007652 <_dtoa_r+0x7da>
 8007650:	e0b5      	b.n	80077be <_dtoa_r+0x946>
 8007652:	2d00      	cmp	r5, #0
 8007654:	d010      	beq.n	8007678 <_dtoa_r+0x800>
 8007656:	0039      	movs	r1, r7
 8007658:	002a      	movs	r2, r5
 800765a:	9803      	ldr	r0, [sp, #12]
 800765c:	f000 fc10 	bl	8007e80 <__pow5mult>
 8007660:	9a05      	ldr	r2, [sp, #20]
 8007662:	0001      	movs	r1, r0
 8007664:	0007      	movs	r7, r0
 8007666:	9803      	ldr	r0, [sp, #12]
 8007668:	f000 fb58 	bl	8007d1c <__multiply>
 800766c:	0006      	movs	r6, r0
 800766e:	9905      	ldr	r1, [sp, #20]
 8007670:	9803      	ldr	r0, [sp, #12]
 8007672:	f000 fa83 	bl	8007b7c <_Bfree>
 8007676:	9605      	str	r6, [sp, #20]
 8007678:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800767a:	1b5a      	subs	r2, r3, r5
 800767c:	42ab      	cmp	r3, r5
 800767e:	d004      	beq.n	800768a <_dtoa_r+0x812>
 8007680:	9905      	ldr	r1, [sp, #20]
 8007682:	9803      	ldr	r0, [sp, #12]
 8007684:	f000 fbfc 	bl	8007e80 <__pow5mult>
 8007688:	9005      	str	r0, [sp, #20]
 800768a:	2101      	movs	r1, #1
 800768c:	9803      	ldr	r0, [sp, #12]
 800768e:	f000 fb2d 	bl	8007cec <__i2b>
 8007692:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007694:	0006      	movs	r6, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d100      	bne.n	800769c <_dtoa_r+0x824>
 800769a:	e1bc      	b.n	8007a16 <_dtoa_r+0xb9e>
 800769c:	001a      	movs	r2, r3
 800769e:	0001      	movs	r1, r0
 80076a0:	9803      	ldr	r0, [sp, #12]
 80076a2:	f000 fbed 	bl	8007e80 <__pow5mult>
 80076a6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80076a8:	0006      	movs	r6, r0
 80076aa:	2500      	movs	r5, #0
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	dc16      	bgt.n	80076de <_dtoa_r+0x866>
 80076b0:	2500      	movs	r5, #0
 80076b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076b4:	42ab      	cmp	r3, r5
 80076b6:	d10e      	bne.n	80076d6 <_dtoa_r+0x85e>
 80076b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076ba:	031b      	lsls	r3, r3, #12
 80076bc:	42ab      	cmp	r3, r5
 80076be:	d10a      	bne.n	80076d6 <_dtoa_r+0x85e>
 80076c0:	4b8d      	ldr	r3, [pc, #564]	@ (80078f8 <_dtoa_r+0xa80>)
 80076c2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80076c4:	4213      	tst	r3, r2
 80076c6:	d006      	beq.n	80076d6 <_dtoa_r+0x85e>
 80076c8:	9b06      	ldr	r3, [sp, #24]
 80076ca:	3501      	adds	r5, #1
 80076cc:	3301      	adds	r3, #1
 80076ce:	9306      	str	r3, [sp, #24]
 80076d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80076d2:	3301      	adds	r3, #1
 80076d4:	930d      	str	r3, [sp, #52]	@ 0x34
 80076d6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80076d8:	2001      	movs	r0, #1
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d008      	beq.n	80076f0 <_dtoa_r+0x878>
 80076de:	6933      	ldr	r3, [r6, #16]
 80076e0:	3303      	adds	r3, #3
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	18f3      	adds	r3, r6, r3
 80076e6:	6858      	ldr	r0, [r3, #4]
 80076e8:	f000 fab0 	bl	8007c4c <__hi0bits>
 80076ec:	2320      	movs	r3, #32
 80076ee:	1a18      	subs	r0, r3, r0
 80076f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80076f2:	1818      	adds	r0, r3, r0
 80076f4:	0002      	movs	r2, r0
 80076f6:	231f      	movs	r3, #31
 80076f8:	401a      	ands	r2, r3
 80076fa:	4218      	tst	r0, r3
 80076fc:	d065      	beq.n	80077ca <_dtoa_r+0x952>
 80076fe:	3301      	adds	r3, #1
 8007700:	1a9b      	subs	r3, r3, r2
 8007702:	2b04      	cmp	r3, #4
 8007704:	dd5d      	ble.n	80077c2 <_dtoa_r+0x94a>
 8007706:	231c      	movs	r3, #28
 8007708:	1a9b      	subs	r3, r3, r2
 800770a:	9a06      	ldr	r2, [sp, #24]
 800770c:	18e4      	adds	r4, r4, r3
 800770e:	18d2      	adds	r2, r2, r3
 8007710:	9206      	str	r2, [sp, #24]
 8007712:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007714:	18d3      	adds	r3, r2, r3
 8007716:	930d      	str	r3, [sp, #52]	@ 0x34
 8007718:	9b06      	ldr	r3, [sp, #24]
 800771a:	2b00      	cmp	r3, #0
 800771c:	dd05      	ble.n	800772a <_dtoa_r+0x8b2>
 800771e:	001a      	movs	r2, r3
 8007720:	9905      	ldr	r1, [sp, #20]
 8007722:	9803      	ldr	r0, [sp, #12]
 8007724:	f000 fc08 	bl	8007f38 <__lshift>
 8007728:	9005      	str	r0, [sp, #20]
 800772a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800772c:	2b00      	cmp	r3, #0
 800772e:	dd05      	ble.n	800773c <_dtoa_r+0x8c4>
 8007730:	0031      	movs	r1, r6
 8007732:	001a      	movs	r2, r3
 8007734:	9803      	ldr	r0, [sp, #12]
 8007736:	f000 fbff 	bl	8007f38 <__lshift>
 800773a:	0006      	movs	r6, r0
 800773c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800773e:	2b00      	cmp	r3, #0
 8007740:	d045      	beq.n	80077ce <_dtoa_r+0x956>
 8007742:	0031      	movs	r1, r6
 8007744:	9805      	ldr	r0, [sp, #20]
 8007746:	f000 fc63 	bl	8008010 <__mcmp>
 800774a:	2800      	cmp	r0, #0
 800774c:	da3f      	bge.n	80077ce <_dtoa_r+0x956>
 800774e:	9b04      	ldr	r3, [sp, #16]
 8007750:	220a      	movs	r2, #10
 8007752:	3b01      	subs	r3, #1
 8007754:	930c      	str	r3, [sp, #48]	@ 0x30
 8007756:	9905      	ldr	r1, [sp, #20]
 8007758:	2300      	movs	r3, #0
 800775a:	9803      	ldr	r0, [sp, #12]
 800775c:	f000 fa32 	bl	8007bc4 <__multadd>
 8007760:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007762:	9005      	str	r0, [sp, #20]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d100      	bne.n	800776a <_dtoa_r+0x8f2>
 8007768:	e15c      	b.n	8007a24 <_dtoa_r+0xbac>
 800776a:	2300      	movs	r3, #0
 800776c:	0039      	movs	r1, r7
 800776e:	220a      	movs	r2, #10
 8007770:	9803      	ldr	r0, [sp, #12]
 8007772:	f000 fa27 	bl	8007bc4 <__multadd>
 8007776:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007778:	0007      	movs	r7, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	dc55      	bgt.n	800782a <_dtoa_r+0x9b2>
 800777e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007780:	2b02      	cmp	r3, #2
 8007782:	dc2d      	bgt.n	80077e0 <_dtoa_r+0x968>
 8007784:	e051      	b.n	800782a <_dtoa_r+0x9b2>
 8007786:	2336      	movs	r3, #54	@ 0x36
 8007788:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800778a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800778c:	9c06      	ldr	r4, [sp, #24]
 800778e:	1a9b      	subs	r3, r3, r2
 8007790:	e73c      	b.n	800760c <_dtoa_r+0x794>
 8007792:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007794:	1e5d      	subs	r5, r3, #1
 8007796:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007798:	42ab      	cmp	r3, r5
 800779a:	db08      	blt.n	80077ae <_dtoa_r+0x936>
 800779c:	1b5d      	subs	r5, r3, r5
 800779e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077a0:	9c06      	ldr	r4, [sp, #24]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	db00      	blt.n	80077a8 <_dtoa_r+0x930>
 80077a6:	e731      	b.n	800760c <_dtoa_r+0x794>
 80077a8:	1ae4      	subs	r4, r4, r3
 80077aa:	2300      	movs	r3, #0
 80077ac:	e72e      	b.n	800760c <_dtoa_r+0x794>
 80077ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077b0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80077b2:	1aeb      	subs	r3, r5, r3
 80077b4:	18d3      	adds	r3, r2, r3
 80077b6:	950f      	str	r5, [sp, #60]	@ 0x3c
 80077b8:	9314      	str	r3, [sp, #80]	@ 0x50
 80077ba:	2500      	movs	r5, #0
 80077bc:	e7ef      	b.n	800779e <_dtoa_r+0x926>
 80077be:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80077c0:	e75e      	b.n	8007680 <_dtoa_r+0x808>
 80077c2:	2b04      	cmp	r3, #4
 80077c4:	d0a8      	beq.n	8007718 <_dtoa_r+0x8a0>
 80077c6:	331c      	adds	r3, #28
 80077c8:	e79f      	b.n	800770a <_dtoa_r+0x892>
 80077ca:	0013      	movs	r3, r2
 80077cc:	e7fb      	b.n	80077c6 <_dtoa_r+0x94e>
 80077ce:	9b04      	ldr	r3, [sp, #16]
 80077d0:	930c      	str	r3, [sp, #48]	@ 0x30
 80077d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077d4:	930e      	str	r3, [sp, #56]	@ 0x38
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	dc23      	bgt.n	8007822 <_dtoa_r+0x9aa>
 80077da:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80077dc:	2b02      	cmp	r3, #2
 80077de:	dd20      	ble.n	8007822 <_dtoa_r+0x9aa>
 80077e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d000      	beq.n	80077e8 <_dtoa_r+0x970>
 80077e6:	e6b5      	b.n	8007554 <_dtoa_r+0x6dc>
 80077e8:	0031      	movs	r1, r6
 80077ea:	2205      	movs	r2, #5
 80077ec:	9803      	ldr	r0, [sp, #12]
 80077ee:	f000 f9e9 	bl	8007bc4 <__multadd>
 80077f2:	0006      	movs	r6, r0
 80077f4:	0001      	movs	r1, r0
 80077f6:	9805      	ldr	r0, [sp, #20]
 80077f8:	f000 fc0a 	bl	8008010 <__mcmp>
 80077fc:	2800      	cmp	r0, #0
 80077fe:	dc00      	bgt.n	8007802 <_dtoa_r+0x98a>
 8007800:	e6a8      	b.n	8007554 <_dtoa_r+0x6dc>
 8007802:	9b08      	ldr	r3, [sp, #32]
 8007804:	9a08      	ldr	r2, [sp, #32]
 8007806:	1c5c      	adds	r4, r3, #1
 8007808:	2331      	movs	r3, #49	@ 0x31
 800780a:	7013      	strb	r3, [r2, #0]
 800780c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800780e:	3301      	adds	r3, #1
 8007810:	930c      	str	r3, [sp, #48]	@ 0x30
 8007812:	e6a3      	b.n	800755c <_dtoa_r+0x6e4>
 8007814:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8007816:	0037      	movs	r7, r6
 8007818:	e7f3      	b.n	8007802 <_dtoa_r+0x98a>
 800781a:	9b04      	ldr	r3, [sp, #16]
 800781c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800781e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007820:	e7f9      	b.n	8007816 <_dtoa_r+0x99e>
 8007822:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007824:	2b00      	cmp	r3, #0
 8007826:	d100      	bne.n	800782a <_dtoa_r+0x9b2>
 8007828:	e100      	b.n	8007a2c <_dtoa_r+0xbb4>
 800782a:	2c00      	cmp	r4, #0
 800782c:	dd05      	ble.n	800783a <_dtoa_r+0x9c2>
 800782e:	0039      	movs	r1, r7
 8007830:	0022      	movs	r2, r4
 8007832:	9803      	ldr	r0, [sp, #12]
 8007834:	f000 fb80 	bl	8007f38 <__lshift>
 8007838:	0007      	movs	r7, r0
 800783a:	0038      	movs	r0, r7
 800783c:	2d00      	cmp	r5, #0
 800783e:	d018      	beq.n	8007872 <_dtoa_r+0x9fa>
 8007840:	6879      	ldr	r1, [r7, #4]
 8007842:	9803      	ldr	r0, [sp, #12]
 8007844:	f000 f956 	bl	8007af4 <_Balloc>
 8007848:	1e04      	subs	r4, r0, #0
 800784a:	d105      	bne.n	8007858 <_dtoa_r+0x9e0>
 800784c:	0022      	movs	r2, r4
 800784e:	4b2b      	ldr	r3, [pc, #172]	@ (80078fc <_dtoa_r+0xa84>)
 8007850:	482b      	ldr	r0, [pc, #172]	@ (8007900 <_dtoa_r+0xa88>)
 8007852:	492c      	ldr	r1, [pc, #176]	@ (8007904 <_dtoa_r+0xa8c>)
 8007854:	f7ff fb25 	bl	8006ea2 <_dtoa_r+0x2a>
 8007858:	0039      	movs	r1, r7
 800785a:	693a      	ldr	r2, [r7, #16]
 800785c:	310c      	adds	r1, #12
 800785e:	3202      	adds	r2, #2
 8007860:	0092      	lsls	r2, r2, #2
 8007862:	300c      	adds	r0, #12
 8007864:	f7ff fa70 	bl	8006d48 <memcpy>
 8007868:	2201      	movs	r2, #1
 800786a:	0021      	movs	r1, r4
 800786c:	9803      	ldr	r0, [sp, #12]
 800786e:	f000 fb63 	bl	8007f38 <__lshift>
 8007872:	9b08      	ldr	r3, [sp, #32]
 8007874:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007876:	9306      	str	r3, [sp, #24]
 8007878:	3b01      	subs	r3, #1
 800787a:	189b      	adds	r3, r3, r2
 800787c:	2201      	movs	r2, #1
 800787e:	9704      	str	r7, [sp, #16]
 8007880:	0007      	movs	r7, r0
 8007882:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007884:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007886:	4013      	ands	r3, r2
 8007888:	930e      	str	r3, [sp, #56]	@ 0x38
 800788a:	0031      	movs	r1, r6
 800788c:	9805      	ldr	r0, [sp, #20]
 800788e:	f7ff fa64 	bl	8006d5a <quorem>
 8007892:	9904      	ldr	r1, [sp, #16]
 8007894:	0005      	movs	r5, r0
 8007896:	900a      	str	r0, [sp, #40]	@ 0x28
 8007898:	9805      	ldr	r0, [sp, #20]
 800789a:	f000 fbb9 	bl	8008010 <__mcmp>
 800789e:	003a      	movs	r2, r7
 80078a0:	900d      	str	r0, [sp, #52]	@ 0x34
 80078a2:	0031      	movs	r1, r6
 80078a4:	9803      	ldr	r0, [sp, #12]
 80078a6:	f000 fbcf 	bl	8008048 <__mdiff>
 80078aa:	2201      	movs	r2, #1
 80078ac:	68c3      	ldr	r3, [r0, #12]
 80078ae:	0004      	movs	r4, r0
 80078b0:	3530      	adds	r5, #48	@ 0x30
 80078b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d104      	bne.n	80078c2 <_dtoa_r+0xa4a>
 80078b8:	0001      	movs	r1, r0
 80078ba:	9805      	ldr	r0, [sp, #20]
 80078bc:	f000 fba8 	bl	8008010 <__mcmp>
 80078c0:	9009      	str	r0, [sp, #36]	@ 0x24
 80078c2:	0021      	movs	r1, r4
 80078c4:	9803      	ldr	r0, [sp, #12]
 80078c6:	f000 f959 	bl	8007b7c <_Bfree>
 80078ca:	9b06      	ldr	r3, [sp, #24]
 80078cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078ce:	1c5c      	adds	r4, r3, #1
 80078d0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80078d2:	4313      	orrs	r3, r2
 80078d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80078d6:	4313      	orrs	r3, r2
 80078d8:	d116      	bne.n	8007908 <_dtoa_r+0xa90>
 80078da:	2d39      	cmp	r5, #57	@ 0x39
 80078dc:	d02f      	beq.n	800793e <_dtoa_r+0xac6>
 80078de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	dd01      	ble.n	80078e8 <_dtoa_r+0xa70>
 80078e4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80078e6:	3531      	adds	r5, #49	@ 0x31
 80078e8:	9b06      	ldr	r3, [sp, #24]
 80078ea:	701d      	strb	r5, [r3, #0]
 80078ec:	e638      	b.n	8007560 <_dtoa_r+0x6e8>
 80078ee:	46c0      	nop			@ (mov r8, r8)
 80078f0:	40240000 	.word	0x40240000
 80078f4:	00000433 	.word	0x00000433
 80078f8:	7ff00000 	.word	0x7ff00000
 80078fc:	08008bb8 	.word	0x08008bb8
 8007900:	08008b60 	.word	0x08008b60
 8007904:	000002ef 	.word	0x000002ef
 8007908:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800790a:	2b00      	cmp	r3, #0
 800790c:	db04      	blt.n	8007918 <_dtoa_r+0xaa0>
 800790e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007910:	4313      	orrs	r3, r2
 8007912:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007914:	4313      	orrs	r3, r2
 8007916:	d11e      	bne.n	8007956 <_dtoa_r+0xade>
 8007918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800791a:	2b00      	cmp	r3, #0
 800791c:	dde4      	ble.n	80078e8 <_dtoa_r+0xa70>
 800791e:	9905      	ldr	r1, [sp, #20]
 8007920:	2201      	movs	r2, #1
 8007922:	9803      	ldr	r0, [sp, #12]
 8007924:	f000 fb08 	bl	8007f38 <__lshift>
 8007928:	0031      	movs	r1, r6
 800792a:	9005      	str	r0, [sp, #20]
 800792c:	f000 fb70 	bl	8008010 <__mcmp>
 8007930:	2800      	cmp	r0, #0
 8007932:	dc02      	bgt.n	800793a <_dtoa_r+0xac2>
 8007934:	d1d8      	bne.n	80078e8 <_dtoa_r+0xa70>
 8007936:	07eb      	lsls	r3, r5, #31
 8007938:	d5d6      	bpl.n	80078e8 <_dtoa_r+0xa70>
 800793a:	2d39      	cmp	r5, #57	@ 0x39
 800793c:	d1d2      	bne.n	80078e4 <_dtoa_r+0xa6c>
 800793e:	2339      	movs	r3, #57	@ 0x39
 8007940:	9a06      	ldr	r2, [sp, #24]
 8007942:	7013      	strb	r3, [r2, #0]
 8007944:	0023      	movs	r3, r4
 8007946:	001c      	movs	r4, r3
 8007948:	3b01      	subs	r3, #1
 800794a:	781a      	ldrb	r2, [r3, #0]
 800794c:	2a39      	cmp	r2, #57	@ 0x39
 800794e:	d04f      	beq.n	80079f0 <_dtoa_r+0xb78>
 8007950:	3201      	adds	r2, #1
 8007952:	701a      	strb	r2, [r3, #0]
 8007954:	e604      	b.n	8007560 <_dtoa_r+0x6e8>
 8007956:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007958:	2b00      	cmp	r3, #0
 800795a:	dd03      	ble.n	8007964 <_dtoa_r+0xaec>
 800795c:	2d39      	cmp	r5, #57	@ 0x39
 800795e:	d0ee      	beq.n	800793e <_dtoa_r+0xac6>
 8007960:	3501      	adds	r5, #1
 8007962:	e7c1      	b.n	80078e8 <_dtoa_r+0xa70>
 8007964:	9b06      	ldr	r3, [sp, #24]
 8007966:	9a06      	ldr	r2, [sp, #24]
 8007968:	701d      	strb	r5, [r3, #0]
 800796a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800796c:	4293      	cmp	r3, r2
 800796e:	d02a      	beq.n	80079c6 <_dtoa_r+0xb4e>
 8007970:	2300      	movs	r3, #0
 8007972:	220a      	movs	r2, #10
 8007974:	9905      	ldr	r1, [sp, #20]
 8007976:	9803      	ldr	r0, [sp, #12]
 8007978:	f000 f924 	bl	8007bc4 <__multadd>
 800797c:	9b04      	ldr	r3, [sp, #16]
 800797e:	9005      	str	r0, [sp, #20]
 8007980:	42bb      	cmp	r3, r7
 8007982:	d109      	bne.n	8007998 <_dtoa_r+0xb20>
 8007984:	2300      	movs	r3, #0
 8007986:	220a      	movs	r2, #10
 8007988:	9904      	ldr	r1, [sp, #16]
 800798a:	9803      	ldr	r0, [sp, #12]
 800798c:	f000 f91a 	bl	8007bc4 <__multadd>
 8007990:	9004      	str	r0, [sp, #16]
 8007992:	0007      	movs	r7, r0
 8007994:	9406      	str	r4, [sp, #24]
 8007996:	e778      	b.n	800788a <_dtoa_r+0xa12>
 8007998:	9904      	ldr	r1, [sp, #16]
 800799a:	2300      	movs	r3, #0
 800799c:	220a      	movs	r2, #10
 800799e:	9803      	ldr	r0, [sp, #12]
 80079a0:	f000 f910 	bl	8007bc4 <__multadd>
 80079a4:	2300      	movs	r3, #0
 80079a6:	9004      	str	r0, [sp, #16]
 80079a8:	220a      	movs	r2, #10
 80079aa:	0039      	movs	r1, r7
 80079ac:	9803      	ldr	r0, [sp, #12]
 80079ae:	f000 f909 	bl	8007bc4 <__multadd>
 80079b2:	e7ee      	b.n	8007992 <_dtoa_r+0xb1a>
 80079b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079b6:	2401      	movs	r4, #1
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	dd00      	ble.n	80079be <_dtoa_r+0xb46>
 80079bc:	001c      	movs	r4, r3
 80079be:	9b08      	ldr	r3, [sp, #32]
 80079c0:	191c      	adds	r4, r3, r4
 80079c2:	2300      	movs	r3, #0
 80079c4:	9304      	str	r3, [sp, #16]
 80079c6:	9905      	ldr	r1, [sp, #20]
 80079c8:	2201      	movs	r2, #1
 80079ca:	9803      	ldr	r0, [sp, #12]
 80079cc:	f000 fab4 	bl	8007f38 <__lshift>
 80079d0:	0031      	movs	r1, r6
 80079d2:	9005      	str	r0, [sp, #20]
 80079d4:	f000 fb1c 	bl	8008010 <__mcmp>
 80079d8:	2800      	cmp	r0, #0
 80079da:	dcb3      	bgt.n	8007944 <_dtoa_r+0xacc>
 80079dc:	d101      	bne.n	80079e2 <_dtoa_r+0xb6a>
 80079de:	07ed      	lsls	r5, r5, #31
 80079e0:	d4b0      	bmi.n	8007944 <_dtoa_r+0xacc>
 80079e2:	0023      	movs	r3, r4
 80079e4:	001c      	movs	r4, r3
 80079e6:	3b01      	subs	r3, #1
 80079e8:	781a      	ldrb	r2, [r3, #0]
 80079ea:	2a30      	cmp	r2, #48	@ 0x30
 80079ec:	d0fa      	beq.n	80079e4 <_dtoa_r+0xb6c>
 80079ee:	e5b7      	b.n	8007560 <_dtoa_r+0x6e8>
 80079f0:	9a08      	ldr	r2, [sp, #32]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d1a7      	bne.n	8007946 <_dtoa_r+0xace>
 80079f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80079f8:	3301      	adds	r3, #1
 80079fa:	930c      	str	r3, [sp, #48]	@ 0x30
 80079fc:	2331      	movs	r3, #49	@ 0x31
 80079fe:	7013      	strb	r3, [r2, #0]
 8007a00:	e5ae      	b.n	8007560 <_dtoa_r+0x6e8>
 8007a02:	4b15      	ldr	r3, [pc, #84]	@ (8007a58 <_dtoa_r+0xbe0>)
 8007a04:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007a06:	9308      	str	r3, [sp, #32]
 8007a08:	4b14      	ldr	r3, [pc, #80]	@ (8007a5c <_dtoa_r+0xbe4>)
 8007a0a:	2a00      	cmp	r2, #0
 8007a0c:	d001      	beq.n	8007a12 <_dtoa_r+0xb9a>
 8007a0e:	f7ff fa7b 	bl	8006f08 <_dtoa_r+0x90>
 8007a12:	f7ff fa7b 	bl	8006f0c <_dtoa_r+0x94>
 8007a16:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	dc00      	bgt.n	8007a1e <_dtoa_r+0xba6>
 8007a1c:	e648      	b.n	80076b0 <_dtoa_r+0x838>
 8007a1e:	2001      	movs	r0, #1
 8007a20:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8007a22:	e665      	b.n	80076f0 <_dtoa_r+0x878>
 8007a24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	dc00      	bgt.n	8007a2c <_dtoa_r+0xbb4>
 8007a2a:	e6d6      	b.n	80077da <_dtoa_r+0x962>
 8007a2c:	2400      	movs	r4, #0
 8007a2e:	0031      	movs	r1, r6
 8007a30:	9805      	ldr	r0, [sp, #20]
 8007a32:	f7ff f992 	bl	8006d5a <quorem>
 8007a36:	9b08      	ldr	r3, [sp, #32]
 8007a38:	3030      	adds	r0, #48	@ 0x30
 8007a3a:	5518      	strb	r0, [r3, r4]
 8007a3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a3e:	3401      	adds	r4, #1
 8007a40:	0005      	movs	r5, r0
 8007a42:	429c      	cmp	r4, r3
 8007a44:	dab6      	bge.n	80079b4 <_dtoa_r+0xb3c>
 8007a46:	2300      	movs	r3, #0
 8007a48:	220a      	movs	r2, #10
 8007a4a:	9905      	ldr	r1, [sp, #20]
 8007a4c:	9803      	ldr	r0, [sp, #12]
 8007a4e:	f000 f8b9 	bl	8007bc4 <__multadd>
 8007a52:	9005      	str	r0, [sp, #20]
 8007a54:	e7eb      	b.n	8007a2e <_dtoa_r+0xbb6>
 8007a56:	46c0      	nop			@ (mov r8, r8)
 8007a58:	08008b3c 	.word	0x08008b3c
 8007a5c:	08008b44 	.word	0x08008b44

08007a60 <_free_r>:
 8007a60:	b570      	push	{r4, r5, r6, lr}
 8007a62:	0005      	movs	r5, r0
 8007a64:	1e0c      	subs	r4, r1, #0
 8007a66:	d010      	beq.n	8007a8a <_free_r+0x2a>
 8007a68:	3c04      	subs	r4, #4
 8007a6a:	6823      	ldr	r3, [r4, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	da00      	bge.n	8007a72 <_free_r+0x12>
 8007a70:	18e4      	adds	r4, r4, r3
 8007a72:	0028      	movs	r0, r5
 8007a74:	f7fe fb42 	bl	80060fc <__malloc_lock>
 8007a78:	4a1d      	ldr	r2, [pc, #116]	@ (8007af0 <_free_r+0x90>)
 8007a7a:	6813      	ldr	r3, [r2, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d105      	bne.n	8007a8c <_free_r+0x2c>
 8007a80:	6063      	str	r3, [r4, #4]
 8007a82:	6014      	str	r4, [r2, #0]
 8007a84:	0028      	movs	r0, r5
 8007a86:	f7fe fb41 	bl	800610c <__malloc_unlock>
 8007a8a:	bd70      	pop	{r4, r5, r6, pc}
 8007a8c:	42a3      	cmp	r3, r4
 8007a8e:	d908      	bls.n	8007aa2 <_free_r+0x42>
 8007a90:	6820      	ldr	r0, [r4, #0]
 8007a92:	1821      	adds	r1, r4, r0
 8007a94:	428b      	cmp	r3, r1
 8007a96:	d1f3      	bne.n	8007a80 <_free_r+0x20>
 8007a98:	6819      	ldr	r1, [r3, #0]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	1809      	adds	r1, r1, r0
 8007a9e:	6021      	str	r1, [r4, #0]
 8007aa0:	e7ee      	b.n	8007a80 <_free_r+0x20>
 8007aa2:	001a      	movs	r2, r3
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d001      	beq.n	8007aae <_free_r+0x4e>
 8007aaa:	42a3      	cmp	r3, r4
 8007aac:	d9f9      	bls.n	8007aa2 <_free_r+0x42>
 8007aae:	6811      	ldr	r1, [r2, #0]
 8007ab0:	1850      	adds	r0, r2, r1
 8007ab2:	42a0      	cmp	r0, r4
 8007ab4:	d10b      	bne.n	8007ace <_free_r+0x6e>
 8007ab6:	6820      	ldr	r0, [r4, #0]
 8007ab8:	1809      	adds	r1, r1, r0
 8007aba:	1850      	adds	r0, r2, r1
 8007abc:	6011      	str	r1, [r2, #0]
 8007abe:	4283      	cmp	r3, r0
 8007ac0:	d1e0      	bne.n	8007a84 <_free_r+0x24>
 8007ac2:	6818      	ldr	r0, [r3, #0]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	1841      	adds	r1, r0, r1
 8007ac8:	6011      	str	r1, [r2, #0]
 8007aca:	6053      	str	r3, [r2, #4]
 8007acc:	e7da      	b.n	8007a84 <_free_r+0x24>
 8007ace:	42a0      	cmp	r0, r4
 8007ad0:	d902      	bls.n	8007ad8 <_free_r+0x78>
 8007ad2:	230c      	movs	r3, #12
 8007ad4:	602b      	str	r3, [r5, #0]
 8007ad6:	e7d5      	b.n	8007a84 <_free_r+0x24>
 8007ad8:	6820      	ldr	r0, [r4, #0]
 8007ada:	1821      	adds	r1, r4, r0
 8007adc:	428b      	cmp	r3, r1
 8007ade:	d103      	bne.n	8007ae8 <_free_r+0x88>
 8007ae0:	6819      	ldr	r1, [r3, #0]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	1809      	adds	r1, r1, r0
 8007ae6:	6021      	str	r1, [r4, #0]
 8007ae8:	6063      	str	r3, [r4, #4]
 8007aea:	6054      	str	r4, [r2, #4]
 8007aec:	e7ca      	b.n	8007a84 <_free_r+0x24>
 8007aee:	46c0      	nop			@ (mov r8, r8)
 8007af0:	2000134c 	.word	0x2000134c

08007af4 <_Balloc>:
 8007af4:	b570      	push	{r4, r5, r6, lr}
 8007af6:	69c5      	ldr	r5, [r0, #28]
 8007af8:	0006      	movs	r6, r0
 8007afa:	000c      	movs	r4, r1
 8007afc:	2d00      	cmp	r5, #0
 8007afe:	d10e      	bne.n	8007b1e <_Balloc+0x2a>
 8007b00:	2010      	movs	r0, #16
 8007b02:	f7fe fa4f 	bl	8005fa4 <malloc>
 8007b06:	1e02      	subs	r2, r0, #0
 8007b08:	61f0      	str	r0, [r6, #28]
 8007b0a:	d104      	bne.n	8007b16 <_Balloc+0x22>
 8007b0c:	216b      	movs	r1, #107	@ 0x6b
 8007b0e:	4b19      	ldr	r3, [pc, #100]	@ (8007b74 <_Balloc+0x80>)
 8007b10:	4819      	ldr	r0, [pc, #100]	@ (8007b78 <_Balloc+0x84>)
 8007b12:	f000 fc45 	bl	80083a0 <__assert_func>
 8007b16:	6045      	str	r5, [r0, #4]
 8007b18:	6085      	str	r5, [r0, #8]
 8007b1a:	6005      	str	r5, [r0, #0]
 8007b1c:	60c5      	str	r5, [r0, #12]
 8007b1e:	69f5      	ldr	r5, [r6, #28]
 8007b20:	68eb      	ldr	r3, [r5, #12]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d013      	beq.n	8007b4e <_Balloc+0x5a>
 8007b26:	69f3      	ldr	r3, [r6, #28]
 8007b28:	00a2      	lsls	r2, r4, #2
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	189b      	adds	r3, r3, r2
 8007b2e:	6818      	ldr	r0, [r3, #0]
 8007b30:	2800      	cmp	r0, #0
 8007b32:	d118      	bne.n	8007b66 <_Balloc+0x72>
 8007b34:	2101      	movs	r1, #1
 8007b36:	000d      	movs	r5, r1
 8007b38:	40a5      	lsls	r5, r4
 8007b3a:	1d6a      	adds	r2, r5, #5
 8007b3c:	0030      	movs	r0, r6
 8007b3e:	0092      	lsls	r2, r2, #2
 8007b40:	f000 fc4c 	bl	80083dc <_calloc_r>
 8007b44:	2800      	cmp	r0, #0
 8007b46:	d00c      	beq.n	8007b62 <_Balloc+0x6e>
 8007b48:	6044      	str	r4, [r0, #4]
 8007b4a:	6085      	str	r5, [r0, #8]
 8007b4c:	e00d      	b.n	8007b6a <_Balloc+0x76>
 8007b4e:	2221      	movs	r2, #33	@ 0x21
 8007b50:	2104      	movs	r1, #4
 8007b52:	0030      	movs	r0, r6
 8007b54:	f000 fc42 	bl	80083dc <_calloc_r>
 8007b58:	69f3      	ldr	r3, [r6, #28]
 8007b5a:	60e8      	str	r0, [r5, #12]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1e1      	bne.n	8007b26 <_Balloc+0x32>
 8007b62:	2000      	movs	r0, #0
 8007b64:	bd70      	pop	{r4, r5, r6, pc}
 8007b66:	6802      	ldr	r2, [r0, #0]
 8007b68:	601a      	str	r2, [r3, #0]
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	6103      	str	r3, [r0, #16]
 8007b6e:	60c3      	str	r3, [r0, #12]
 8007b70:	e7f8      	b.n	8007b64 <_Balloc+0x70>
 8007b72:	46c0      	nop			@ (mov r8, r8)
 8007b74:	08008b49 	.word	0x08008b49
 8007b78:	08008bc9 	.word	0x08008bc9

08007b7c <_Bfree>:
 8007b7c:	b570      	push	{r4, r5, r6, lr}
 8007b7e:	69c6      	ldr	r6, [r0, #28]
 8007b80:	0005      	movs	r5, r0
 8007b82:	000c      	movs	r4, r1
 8007b84:	2e00      	cmp	r6, #0
 8007b86:	d10e      	bne.n	8007ba6 <_Bfree+0x2a>
 8007b88:	2010      	movs	r0, #16
 8007b8a:	f7fe fa0b 	bl	8005fa4 <malloc>
 8007b8e:	1e02      	subs	r2, r0, #0
 8007b90:	61e8      	str	r0, [r5, #28]
 8007b92:	d104      	bne.n	8007b9e <_Bfree+0x22>
 8007b94:	218f      	movs	r1, #143	@ 0x8f
 8007b96:	4b09      	ldr	r3, [pc, #36]	@ (8007bbc <_Bfree+0x40>)
 8007b98:	4809      	ldr	r0, [pc, #36]	@ (8007bc0 <_Bfree+0x44>)
 8007b9a:	f000 fc01 	bl	80083a0 <__assert_func>
 8007b9e:	6046      	str	r6, [r0, #4]
 8007ba0:	6086      	str	r6, [r0, #8]
 8007ba2:	6006      	str	r6, [r0, #0]
 8007ba4:	60c6      	str	r6, [r0, #12]
 8007ba6:	2c00      	cmp	r4, #0
 8007ba8:	d007      	beq.n	8007bba <_Bfree+0x3e>
 8007baa:	69eb      	ldr	r3, [r5, #28]
 8007bac:	6862      	ldr	r2, [r4, #4]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	0092      	lsls	r2, r2, #2
 8007bb2:	189b      	adds	r3, r3, r2
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	6022      	str	r2, [r4, #0]
 8007bb8:	601c      	str	r4, [r3, #0]
 8007bba:	bd70      	pop	{r4, r5, r6, pc}
 8007bbc:	08008b49 	.word	0x08008b49
 8007bc0:	08008bc9 	.word	0x08008bc9

08007bc4 <__multadd>:
 8007bc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bc6:	000f      	movs	r7, r1
 8007bc8:	9001      	str	r0, [sp, #4]
 8007bca:	000c      	movs	r4, r1
 8007bcc:	001e      	movs	r6, r3
 8007bce:	2000      	movs	r0, #0
 8007bd0:	690d      	ldr	r5, [r1, #16]
 8007bd2:	3714      	adds	r7, #20
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	3001      	adds	r0, #1
 8007bd8:	b299      	uxth	r1, r3
 8007bda:	4351      	muls	r1, r2
 8007bdc:	0c1b      	lsrs	r3, r3, #16
 8007bde:	4353      	muls	r3, r2
 8007be0:	1989      	adds	r1, r1, r6
 8007be2:	0c0e      	lsrs	r6, r1, #16
 8007be4:	199b      	adds	r3, r3, r6
 8007be6:	0c1e      	lsrs	r6, r3, #16
 8007be8:	b289      	uxth	r1, r1
 8007bea:	041b      	lsls	r3, r3, #16
 8007bec:	185b      	adds	r3, r3, r1
 8007bee:	c708      	stmia	r7!, {r3}
 8007bf0:	4285      	cmp	r5, r0
 8007bf2:	dcef      	bgt.n	8007bd4 <__multadd+0x10>
 8007bf4:	2e00      	cmp	r6, #0
 8007bf6:	d022      	beq.n	8007c3e <__multadd+0x7a>
 8007bf8:	68a3      	ldr	r3, [r4, #8]
 8007bfa:	42ab      	cmp	r3, r5
 8007bfc:	dc19      	bgt.n	8007c32 <__multadd+0x6e>
 8007bfe:	6861      	ldr	r1, [r4, #4]
 8007c00:	9801      	ldr	r0, [sp, #4]
 8007c02:	3101      	adds	r1, #1
 8007c04:	f7ff ff76 	bl	8007af4 <_Balloc>
 8007c08:	1e07      	subs	r7, r0, #0
 8007c0a:	d105      	bne.n	8007c18 <__multadd+0x54>
 8007c0c:	003a      	movs	r2, r7
 8007c0e:	21ba      	movs	r1, #186	@ 0xba
 8007c10:	4b0c      	ldr	r3, [pc, #48]	@ (8007c44 <__multadd+0x80>)
 8007c12:	480d      	ldr	r0, [pc, #52]	@ (8007c48 <__multadd+0x84>)
 8007c14:	f000 fbc4 	bl	80083a0 <__assert_func>
 8007c18:	0021      	movs	r1, r4
 8007c1a:	6922      	ldr	r2, [r4, #16]
 8007c1c:	310c      	adds	r1, #12
 8007c1e:	3202      	adds	r2, #2
 8007c20:	0092      	lsls	r2, r2, #2
 8007c22:	300c      	adds	r0, #12
 8007c24:	f7ff f890 	bl	8006d48 <memcpy>
 8007c28:	0021      	movs	r1, r4
 8007c2a:	9801      	ldr	r0, [sp, #4]
 8007c2c:	f7ff ffa6 	bl	8007b7c <_Bfree>
 8007c30:	003c      	movs	r4, r7
 8007c32:	1d2b      	adds	r3, r5, #4
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	18e3      	adds	r3, r4, r3
 8007c38:	3501      	adds	r5, #1
 8007c3a:	605e      	str	r6, [r3, #4]
 8007c3c:	6125      	str	r5, [r4, #16]
 8007c3e:	0020      	movs	r0, r4
 8007c40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c42:	46c0      	nop			@ (mov r8, r8)
 8007c44:	08008bb8 	.word	0x08008bb8
 8007c48:	08008bc9 	.word	0x08008bc9

08007c4c <__hi0bits>:
 8007c4c:	2280      	movs	r2, #128	@ 0x80
 8007c4e:	0003      	movs	r3, r0
 8007c50:	0252      	lsls	r2, r2, #9
 8007c52:	2000      	movs	r0, #0
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d201      	bcs.n	8007c5c <__hi0bits+0x10>
 8007c58:	041b      	lsls	r3, r3, #16
 8007c5a:	3010      	adds	r0, #16
 8007c5c:	2280      	movs	r2, #128	@ 0x80
 8007c5e:	0452      	lsls	r2, r2, #17
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d201      	bcs.n	8007c68 <__hi0bits+0x1c>
 8007c64:	3008      	adds	r0, #8
 8007c66:	021b      	lsls	r3, r3, #8
 8007c68:	2280      	movs	r2, #128	@ 0x80
 8007c6a:	0552      	lsls	r2, r2, #21
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d201      	bcs.n	8007c74 <__hi0bits+0x28>
 8007c70:	3004      	adds	r0, #4
 8007c72:	011b      	lsls	r3, r3, #4
 8007c74:	2280      	movs	r2, #128	@ 0x80
 8007c76:	05d2      	lsls	r2, r2, #23
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d201      	bcs.n	8007c80 <__hi0bits+0x34>
 8007c7c:	3002      	adds	r0, #2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	db03      	blt.n	8007c8c <__hi0bits+0x40>
 8007c84:	3001      	adds	r0, #1
 8007c86:	4213      	tst	r3, r2
 8007c88:	d100      	bne.n	8007c8c <__hi0bits+0x40>
 8007c8a:	2020      	movs	r0, #32
 8007c8c:	4770      	bx	lr

08007c8e <__lo0bits>:
 8007c8e:	6803      	ldr	r3, [r0, #0]
 8007c90:	0001      	movs	r1, r0
 8007c92:	2207      	movs	r2, #7
 8007c94:	0018      	movs	r0, r3
 8007c96:	4010      	ands	r0, r2
 8007c98:	4213      	tst	r3, r2
 8007c9a:	d00d      	beq.n	8007cb8 <__lo0bits+0x2a>
 8007c9c:	3a06      	subs	r2, #6
 8007c9e:	2000      	movs	r0, #0
 8007ca0:	4213      	tst	r3, r2
 8007ca2:	d105      	bne.n	8007cb0 <__lo0bits+0x22>
 8007ca4:	3002      	adds	r0, #2
 8007ca6:	4203      	tst	r3, r0
 8007ca8:	d003      	beq.n	8007cb2 <__lo0bits+0x24>
 8007caa:	40d3      	lsrs	r3, r2
 8007cac:	0010      	movs	r0, r2
 8007cae:	600b      	str	r3, [r1, #0]
 8007cb0:	4770      	bx	lr
 8007cb2:	089b      	lsrs	r3, r3, #2
 8007cb4:	600b      	str	r3, [r1, #0]
 8007cb6:	e7fb      	b.n	8007cb0 <__lo0bits+0x22>
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	2a00      	cmp	r2, #0
 8007cbc:	d101      	bne.n	8007cc2 <__lo0bits+0x34>
 8007cbe:	2010      	movs	r0, #16
 8007cc0:	0c1b      	lsrs	r3, r3, #16
 8007cc2:	b2da      	uxtb	r2, r3
 8007cc4:	2a00      	cmp	r2, #0
 8007cc6:	d101      	bne.n	8007ccc <__lo0bits+0x3e>
 8007cc8:	3008      	adds	r0, #8
 8007cca:	0a1b      	lsrs	r3, r3, #8
 8007ccc:	071a      	lsls	r2, r3, #28
 8007cce:	d101      	bne.n	8007cd4 <__lo0bits+0x46>
 8007cd0:	3004      	adds	r0, #4
 8007cd2:	091b      	lsrs	r3, r3, #4
 8007cd4:	079a      	lsls	r2, r3, #30
 8007cd6:	d101      	bne.n	8007cdc <__lo0bits+0x4e>
 8007cd8:	3002      	adds	r0, #2
 8007cda:	089b      	lsrs	r3, r3, #2
 8007cdc:	07da      	lsls	r2, r3, #31
 8007cde:	d4e9      	bmi.n	8007cb4 <__lo0bits+0x26>
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	085b      	lsrs	r3, r3, #1
 8007ce4:	d1e6      	bne.n	8007cb4 <__lo0bits+0x26>
 8007ce6:	2020      	movs	r0, #32
 8007ce8:	e7e2      	b.n	8007cb0 <__lo0bits+0x22>
	...

08007cec <__i2b>:
 8007cec:	b510      	push	{r4, lr}
 8007cee:	000c      	movs	r4, r1
 8007cf0:	2101      	movs	r1, #1
 8007cf2:	f7ff feff 	bl	8007af4 <_Balloc>
 8007cf6:	2800      	cmp	r0, #0
 8007cf8:	d107      	bne.n	8007d0a <__i2b+0x1e>
 8007cfa:	2146      	movs	r1, #70	@ 0x46
 8007cfc:	4c05      	ldr	r4, [pc, #20]	@ (8007d14 <__i2b+0x28>)
 8007cfe:	0002      	movs	r2, r0
 8007d00:	4b05      	ldr	r3, [pc, #20]	@ (8007d18 <__i2b+0x2c>)
 8007d02:	0020      	movs	r0, r4
 8007d04:	31ff      	adds	r1, #255	@ 0xff
 8007d06:	f000 fb4b 	bl	80083a0 <__assert_func>
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	6144      	str	r4, [r0, #20]
 8007d0e:	6103      	str	r3, [r0, #16]
 8007d10:	bd10      	pop	{r4, pc}
 8007d12:	46c0      	nop			@ (mov r8, r8)
 8007d14:	08008bc9 	.word	0x08008bc9
 8007d18:	08008bb8 	.word	0x08008bb8

08007d1c <__multiply>:
 8007d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d1e:	0014      	movs	r4, r2
 8007d20:	690a      	ldr	r2, [r1, #16]
 8007d22:	6923      	ldr	r3, [r4, #16]
 8007d24:	000d      	movs	r5, r1
 8007d26:	b08b      	sub	sp, #44	@ 0x2c
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	db02      	blt.n	8007d32 <__multiply+0x16>
 8007d2c:	0023      	movs	r3, r4
 8007d2e:	000c      	movs	r4, r1
 8007d30:	001d      	movs	r5, r3
 8007d32:	6927      	ldr	r7, [r4, #16]
 8007d34:	692e      	ldr	r6, [r5, #16]
 8007d36:	6861      	ldr	r1, [r4, #4]
 8007d38:	19bb      	adds	r3, r7, r6
 8007d3a:	9303      	str	r3, [sp, #12]
 8007d3c:	68a3      	ldr	r3, [r4, #8]
 8007d3e:	19ba      	adds	r2, r7, r6
 8007d40:	4293      	cmp	r3, r2
 8007d42:	da00      	bge.n	8007d46 <__multiply+0x2a>
 8007d44:	3101      	adds	r1, #1
 8007d46:	f7ff fed5 	bl	8007af4 <_Balloc>
 8007d4a:	9002      	str	r0, [sp, #8]
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	d106      	bne.n	8007d5e <__multiply+0x42>
 8007d50:	21b1      	movs	r1, #177	@ 0xb1
 8007d52:	4b49      	ldr	r3, [pc, #292]	@ (8007e78 <__multiply+0x15c>)
 8007d54:	4849      	ldr	r0, [pc, #292]	@ (8007e7c <__multiply+0x160>)
 8007d56:	9a02      	ldr	r2, [sp, #8]
 8007d58:	0049      	lsls	r1, r1, #1
 8007d5a:	f000 fb21 	bl	80083a0 <__assert_func>
 8007d5e:	9b02      	ldr	r3, [sp, #8]
 8007d60:	2200      	movs	r2, #0
 8007d62:	3314      	adds	r3, #20
 8007d64:	469c      	mov	ip, r3
 8007d66:	19bb      	adds	r3, r7, r6
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	4463      	add	r3, ip
 8007d6c:	9304      	str	r3, [sp, #16]
 8007d6e:	4663      	mov	r3, ip
 8007d70:	9904      	ldr	r1, [sp, #16]
 8007d72:	428b      	cmp	r3, r1
 8007d74:	d32a      	bcc.n	8007dcc <__multiply+0xb0>
 8007d76:	0023      	movs	r3, r4
 8007d78:	00bf      	lsls	r7, r7, #2
 8007d7a:	3314      	adds	r3, #20
 8007d7c:	3514      	adds	r5, #20
 8007d7e:	9308      	str	r3, [sp, #32]
 8007d80:	00b6      	lsls	r6, r6, #2
 8007d82:	19db      	adds	r3, r3, r7
 8007d84:	9305      	str	r3, [sp, #20]
 8007d86:	19ab      	adds	r3, r5, r6
 8007d88:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d8a:	2304      	movs	r3, #4
 8007d8c:	9306      	str	r3, [sp, #24]
 8007d8e:	0023      	movs	r3, r4
 8007d90:	9a05      	ldr	r2, [sp, #20]
 8007d92:	3315      	adds	r3, #21
 8007d94:	9501      	str	r5, [sp, #4]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d305      	bcc.n	8007da6 <__multiply+0x8a>
 8007d9a:	1b13      	subs	r3, r2, r4
 8007d9c:	3b15      	subs	r3, #21
 8007d9e:	089b      	lsrs	r3, r3, #2
 8007da0:	3301      	adds	r3, #1
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	9306      	str	r3, [sp, #24]
 8007da6:	9b01      	ldr	r3, [sp, #4]
 8007da8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d310      	bcc.n	8007dd0 <__multiply+0xb4>
 8007dae:	9b03      	ldr	r3, [sp, #12]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	dd05      	ble.n	8007dc0 <__multiply+0xa4>
 8007db4:	9b04      	ldr	r3, [sp, #16]
 8007db6:	3b04      	subs	r3, #4
 8007db8:	9304      	str	r3, [sp, #16]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d056      	beq.n	8007e6e <__multiply+0x152>
 8007dc0:	9b02      	ldr	r3, [sp, #8]
 8007dc2:	9a03      	ldr	r2, [sp, #12]
 8007dc4:	0018      	movs	r0, r3
 8007dc6:	611a      	str	r2, [r3, #16]
 8007dc8:	b00b      	add	sp, #44	@ 0x2c
 8007dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dcc:	c304      	stmia	r3!, {r2}
 8007dce:	e7cf      	b.n	8007d70 <__multiply+0x54>
 8007dd0:	9b01      	ldr	r3, [sp, #4]
 8007dd2:	6818      	ldr	r0, [r3, #0]
 8007dd4:	b280      	uxth	r0, r0
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	d01e      	beq.n	8007e18 <__multiply+0xfc>
 8007dda:	4667      	mov	r7, ip
 8007ddc:	2500      	movs	r5, #0
 8007dde:	9e08      	ldr	r6, [sp, #32]
 8007de0:	ce02      	ldmia	r6!, {r1}
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	9307      	str	r3, [sp, #28]
 8007de6:	b28b      	uxth	r3, r1
 8007de8:	4343      	muls	r3, r0
 8007dea:	001a      	movs	r2, r3
 8007dec:	466b      	mov	r3, sp
 8007dee:	0c09      	lsrs	r1, r1, #16
 8007df0:	8b9b      	ldrh	r3, [r3, #28]
 8007df2:	4341      	muls	r1, r0
 8007df4:	18d3      	adds	r3, r2, r3
 8007df6:	9a07      	ldr	r2, [sp, #28]
 8007df8:	195b      	adds	r3, r3, r5
 8007dfa:	0c12      	lsrs	r2, r2, #16
 8007dfc:	1889      	adds	r1, r1, r2
 8007dfe:	0c1a      	lsrs	r2, r3, #16
 8007e00:	188a      	adds	r2, r1, r2
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	0c15      	lsrs	r5, r2, #16
 8007e06:	0412      	lsls	r2, r2, #16
 8007e08:	431a      	orrs	r2, r3
 8007e0a:	9b05      	ldr	r3, [sp, #20]
 8007e0c:	c704      	stmia	r7!, {r2}
 8007e0e:	42b3      	cmp	r3, r6
 8007e10:	d8e6      	bhi.n	8007de0 <__multiply+0xc4>
 8007e12:	4663      	mov	r3, ip
 8007e14:	9a06      	ldr	r2, [sp, #24]
 8007e16:	509d      	str	r5, [r3, r2]
 8007e18:	9b01      	ldr	r3, [sp, #4]
 8007e1a:	6818      	ldr	r0, [r3, #0]
 8007e1c:	0c00      	lsrs	r0, r0, #16
 8007e1e:	d020      	beq.n	8007e62 <__multiply+0x146>
 8007e20:	4663      	mov	r3, ip
 8007e22:	0025      	movs	r5, r4
 8007e24:	4661      	mov	r1, ip
 8007e26:	2700      	movs	r7, #0
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	3514      	adds	r5, #20
 8007e2c:	682a      	ldr	r2, [r5, #0]
 8007e2e:	680e      	ldr	r6, [r1, #0]
 8007e30:	b292      	uxth	r2, r2
 8007e32:	4342      	muls	r2, r0
 8007e34:	0c36      	lsrs	r6, r6, #16
 8007e36:	1992      	adds	r2, r2, r6
 8007e38:	19d2      	adds	r2, r2, r7
 8007e3a:	0416      	lsls	r6, r2, #16
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	431e      	orrs	r6, r3
 8007e40:	600e      	str	r6, [r1, #0]
 8007e42:	cd40      	ldmia	r5!, {r6}
 8007e44:	684b      	ldr	r3, [r1, #4]
 8007e46:	0c36      	lsrs	r6, r6, #16
 8007e48:	4346      	muls	r6, r0
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	0c12      	lsrs	r2, r2, #16
 8007e4e:	18f3      	adds	r3, r6, r3
 8007e50:	189b      	adds	r3, r3, r2
 8007e52:	9a05      	ldr	r2, [sp, #20]
 8007e54:	0c1f      	lsrs	r7, r3, #16
 8007e56:	3104      	adds	r1, #4
 8007e58:	42aa      	cmp	r2, r5
 8007e5a:	d8e7      	bhi.n	8007e2c <__multiply+0x110>
 8007e5c:	4662      	mov	r2, ip
 8007e5e:	9906      	ldr	r1, [sp, #24]
 8007e60:	5053      	str	r3, [r2, r1]
 8007e62:	9b01      	ldr	r3, [sp, #4]
 8007e64:	3304      	adds	r3, #4
 8007e66:	9301      	str	r3, [sp, #4]
 8007e68:	2304      	movs	r3, #4
 8007e6a:	449c      	add	ip, r3
 8007e6c:	e79b      	b.n	8007da6 <__multiply+0x8a>
 8007e6e:	9b03      	ldr	r3, [sp, #12]
 8007e70:	3b01      	subs	r3, #1
 8007e72:	9303      	str	r3, [sp, #12]
 8007e74:	e79b      	b.n	8007dae <__multiply+0x92>
 8007e76:	46c0      	nop			@ (mov r8, r8)
 8007e78:	08008bb8 	.word	0x08008bb8
 8007e7c:	08008bc9 	.word	0x08008bc9

08007e80 <__pow5mult>:
 8007e80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e82:	2303      	movs	r3, #3
 8007e84:	0015      	movs	r5, r2
 8007e86:	0007      	movs	r7, r0
 8007e88:	000e      	movs	r6, r1
 8007e8a:	401a      	ands	r2, r3
 8007e8c:	421d      	tst	r5, r3
 8007e8e:	d008      	beq.n	8007ea2 <__pow5mult+0x22>
 8007e90:	4925      	ldr	r1, [pc, #148]	@ (8007f28 <__pow5mult+0xa8>)
 8007e92:	3a01      	subs	r2, #1
 8007e94:	0092      	lsls	r2, r2, #2
 8007e96:	5852      	ldr	r2, [r2, r1]
 8007e98:	2300      	movs	r3, #0
 8007e9a:	0031      	movs	r1, r6
 8007e9c:	f7ff fe92 	bl	8007bc4 <__multadd>
 8007ea0:	0006      	movs	r6, r0
 8007ea2:	10ad      	asrs	r5, r5, #2
 8007ea4:	d03d      	beq.n	8007f22 <__pow5mult+0xa2>
 8007ea6:	69fc      	ldr	r4, [r7, #28]
 8007ea8:	2c00      	cmp	r4, #0
 8007eaa:	d10f      	bne.n	8007ecc <__pow5mult+0x4c>
 8007eac:	2010      	movs	r0, #16
 8007eae:	f7fe f879 	bl	8005fa4 <malloc>
 8007eb2:	1e02      	subs	r2, r0, #0
 8007eb4:	61f8      	str	r0, [r7, #28]
 8007eb6:	d105      	bne.n	8007ec4 <__pow5mult+0x44>
 8007eb8:	21b4      	movs	r1, #180	@ 0xb4
 8007eba:	4b1c      	ldr	r3, [pc, #112]	@ (8007f2c <__pow5mult+0xac>)
 8007ebc:	481c      	ldr	r0, [pc, #112]	@ (8007f30 <__pow5mult+0xb0>)
 8007ebe:	31ff      	adds	r1, #255	@ 0xff
 8007ec0:	f000 fa6e 	bl	80083a0 <__assert_func>
 8007ec4:	6044      	str	r4, [r0, #4]
 8007ec6:	6084      	str	r4, [r0, #8]
 8007ec8:	6004      	str	r4, [r0, #0]
 8007eca:	60c4      	str	r4, [r0, #12]
 8007ecc:	69fb      	ldr	r3, [r7, #28]
 8007ece:	689c      	ldr	r4, [r3, #8]
 8007ed0:	9301      	str	r3, [sp, #4]
 8007ed2:	2c00      	cmp	r4, #0
 8007ed4:	d108      	bne.n	8007ee8 <__pow5mult+0x68>
 8007ed6:	0038      	movs	r0, r7
 8007ed8:	4916      	ldr	r1, [pc, #88]	@ (8007f34 <__pow5mult+0xb4>)
 8007eda:	f7ff ff07 	bl	8007cec <__i2b>
 8007ede:	9b01      	ldr	r3, [sp, #4]
 8007ee0:	0004      	movs	r4, r0
 8007ee2:	6098      	str	r0, [r3, #8]
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	6003      	str	r3, [r0, #0]
 8007ee8:	2301      	movs	r3, #1
 8007eea:	421d      	tst	r5, r3
 8007eec:	d00a      	beq.n	8007f04 <__pow5mult+0x84>
 8007eee:	0031      	movs	r1, r6
 8007ef0:	0022      	movs	r2, r4
 8007ef2:	0038      	movs	r0, r7
 8007ef4:	f7ff ff12 	bl	8007d1c <__multiply>
 8007ef8:	0031      	movs	r1, r6
 8007efa:	9001      	str	r0, [sp, #4]
 8007efc:	0038      	movs	r0, r7
 8007efe:	f7ff fe3d 	bl	8007b7c <_Bfree>
 8007f02:	9e01      	ldr	r6, [sp, #4]
 8007f04:	106d      	asrs	r5, r5, #1
 8007f06:	d00c      	beq.n	8007f22 <__pow5mult+0xa2>
 8007f08:	6820      	ldr	r0, [r4, #0]
 8007f0a:	2800      	cmp	r0, #0
 8007f0c:	d107      	bne.n	8007f1e <__pow5mult+0x9e>
 8007f0e:	0022      	movs	r2, r4
 8007f10:	0021      	movs	r1, r4
 8007f12:	0038      	movs	r0, r7
 8007f14:	f7ff ff02 	bl	8007d1c <__multiply>
 8007f18:	2300      	movs	r3, #0
 8007f1a:	6020      	str	r0, [r4, #0]
 8007f1c:	6003      	str	r3, [r0, #0]
 8007f1e:	0004      	movs	r4, r0
 8007f20:	e7e2      	b.n	8007ee8 <__pow5mult+0x68>
 8007f22:	0030      	movs	r0, r6
 8007f24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007f26:	46c0      	nop			@ (mov r8, r8)
 8007f28:	08008c24 	.word	0x08008c24
 8007f2c:	08008b49 	.word	0x08008b49
 8007f30:	08008bc9 	.word	0x08008bc9
 8007f34:	00000271 	.word	0x00000271

08007f38 <__lshift>:
 8007f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f3a:	000c      	movs	r4, r1
 8007f3c:	0016      	movs	r6, r2
 8007f3e:	6923      	ldr	r3, [r4, #16]
 8007f40:	1157      	asrs	r7, r2, #5
 8007f42:	b085      	sub	sp, #20
 8007f44:	18fb      	adds	r3, r7, r3
 8007f46:	9301      	str	r3, [sp, #4]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	9300      	str	r3, [sp, #0]
 8007f4c:	6849      	ldr	r1, [r1, #4]
 8007f4e:	68a3      	ldr	r3, [r4, #8]
 8007f50:	9002      	str	r0, [sp, #8]
 8007f52:	9a00      	ldr	r2, [sp, #0]
 8007f54:	4293      	cmp	r3, r2
 8007f56:	db10      	blt.n	8007f7a <__lshift+0x42>
 8007f58:	9802      	ldr	r0, [sp, #8]
 8007f5a:	f7ff fdcb 	bl	8007af4 <_Balloc>
 8007f5e:	2300      	movs	r3, #0
 8007f60:	0001      	movs	r1, r0
 8007f62:	0005      	movs	r5, r0
 8007f64:	001a      	movs	r2, r3
 8007f66:	3114      	adds	r1, #20
 8007f68:	4298      	cmp	r0, r3
 8007f6a:	d10c      	bne.n	8007f86 <__lshift+0x4e>
 8007f6c:	21ef      	movs	r1, #239	@ 0xef
 8007f6e:	002a      	movs	r2, r5
 8007f70:	4b25      	ldr	r3, [pc, #148]	@ (8008008 <__lshift+0xd0>)
 8007f72:	4826      	ldr	r0, [pc, #152]	@ (800800c <__lshift+0xd4>)
 8007f74:	0049      	lsls	r1, r1, #1
 8007f76:	f000 fa13 	bl	80083a0 <__assert_func>
 8007f7a:	3101      	adds	r1, #1
 8007f7c:	005b      	lsls	r3, r3, #1
 8007f7e:	e7e8      	b.n	8007f52 <__lshift+0x1a>
 8007f80:	0098      	lsls	r0, r3, #2
 8007f82:	500a      	str	r2, [r1, r0]
 8007f84:	3301      	adds	r3, #1
 8007f86:	42bb      	cmp	r3, r7
 8007f88:	dbfa      	blt.n	8007f80 <__lshift+0x48>
 8007f8a:	43fb      	mvns	r3, r7
 8007f8c:	17db      	asrs	r3, r3, #31
 8007f8e:	401f      	ands	r7, r3
 8007f90:	00bf      	lsls	r7, r7, #2
 8007f92:	0023      	movs	r3, r4
 8007f94:	201f      	movs	r0, #31
 8007f96:	19c9      	adds	r1, r1, r7
 8007f98:	0037      	movs	r7, r6
 8007f9a:	6922      	ldr	r2, [r4, #16]
 8007f9c:	3314      	adds	r3, #20
 8007f9e:	0092      	lsls	r2, r2, #2
 8007fa0:	189a      	adds	r2, r3, r2
 8007fa2:	4007      	ands	r7, r0
 8007fa4:	4206      	tst	r6, r0
 8007fa6:	d029      	beq.n	8007ffc <__lshift+0xc4>
 8007fa8:	3001      	adds	r0, #1
 8007faa:	1bc0      	subs	r0, r0, r7
 8007fac:	9003      	str	r0, [sp, #12]
 8007fae:	468c      	mov	ip, r1
 8007fb0:	2000      	movs	r0, #0
 8007fb2:	681e      	ldr	r6, [r3, #0]
 8007fb4:	40be      	lsls	r6, r7
 8007fb6:	4306      	orrs	r6, r0
 8007fb8:	4660      	mov	r0, ip
 8007fba:	c040      	stmia	r0!, {r6}
 8007fbc:	4684      	mov	ip, r0
 8007fbe:	9e03      	ldr	r6, [sp, #12]
 8007fc0:	cb01      	ldmia	r3!, {r0}
 8007fc2:	40f0      	lsrs	r0, r6
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d8f4      	bhi.n	8007fb2 <__lshift+0x7a>
 8007fc8:	0026      	movs	r6, r4
 8007fca:	3615      	adds	r6, #21
 8007fcc:	2304      	movs	r3, #4
 8007fce:	42b2      	cmp	r2, r6
 8007fd0:	d304      	bcc.n	8007fdc <__lshift+0xa4>
 8007fd2:	1b13      	subs	r3, r2, r4
 8007fd4:	3b15      	subs	r3, #21
 8007fd6:	089b      	lsrs	r3, r3, #2
 8007fd8:	3301      	adds	r3, #1
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	50c8      	str	r0, [r1, r3]
 8007fde:	2800      	cmp	r0, #0
 8007fe0:	d002      	beq.n	8007fe8 <__lshift+0xb0>
 8007fe2:	9b01      	ldr	r3, [sp, #4]
 8007fe4:	3302      	adds	r3, #2
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	9b00      	ldr	r3, [sp, #0]
 8007fea:	9802      	ldr	r0, [sp, #8]
 8007fec:	3b01      	subs	r3, #1
 8007fee:	0021      	movs	r1, r4
 8007ff0:	612b      	str	r3, [r5, #16]
 8007ff2:	f7ff fdc3 	bl	8007b7c <_Bfree>
 8007ff6:	0028      	movs	r0, r5
 8007ff8:	b005      	add	sp, #20
 8007ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ffc:	cb01      	ldmia	r3!, {r0}
 8007ffe:	c101      	stmia	r1!, {r0}
 8008000:	429a      	cmp	r2, r3
 8008002:	d8fb      	bhi.n	8007ffc <__lshift+0xc4>
 8008004:	e7f0      	b.n	8007fe8 <__lshift+0xb0>
 8008006:	46c0      	nop			@ (mov r8, r8)
 8008008:	08008bb8 	.word	0x08008bb8
 800800c:	08008bc9 	.word	0x08008bc9

08008010 <__mcmp>:
 8008010:	b530      	push	{r4, r5, lr}
 8008012:	690b      	ldr	r3, [r1, #16]
 8008014:	6904      	ldr	r4, [r0, #16]
 8008016:	0002      	movs	r2, r0
 8008018:	1ae0      	subs	r0, r4, r3
 800801a:	429c      	cmp	r4, r3
 800801c:	d10f      	bne.n	800803e <__mcmp+0x2e>
 800801e:	3214      	adds	r2, #20
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	3114      	adds	r1, #20
 8008024:	0014      	movs	r4, r2
 8008026:	18c9      	adds	r1, r1, r3
 8008028:	18d2      	adds	r2, r2, r3
 800802a:	3a04      	subs	r2, #4
 800802c:	3904      	subs	r1, #4
 800802e:	6815      	ldr	r5, [r2, #0]
 8008030:	680b      	ldr	r3, [r1, #0]
 8008032:	429d      	cmp	r5, r3
 8008034:	d004      	beq.n	8008040 <__mcmp+0x30>
 8008036:	2001      	movs	r0, #1
 8008038:	429d      	cmp	r5, r3
 800803a:	d200      	bcs.n	800803e <__mcmp+0x2e>
 800803c:	3802      	subs	r0, #2
 800803e:	bd30      	pop	{r4, r5, pc}
 8008040:	4294      	cmp	r4, r2
 8008042:	d3f2      	bcc.n	800802a <__mcmp+0x1a>
 8008044:	e7fb      	b.n	800803e <__mcmp+0x2e>
	...

08008048 <__mdiff>:
 8008048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800804a:	000c      	movs	r4, r1
 800804c:	b087      	sub	sp, #28
 800804e:	9000      	str	r0, [sp, #0]
 8008050:	0011      	movs	r1, r2
 8008052:	0020      	movs	r0, r4
 8008054:	0017      	movs	r7, r2
 8008056:	f7ff ffdb 	bl	8008010 <__mcmp>
 800805a:	1e05      	subs	r5, r0, #0
 800805c:	d110      	bne.n	8008080 <__mdiff+0x38>
 800805e:	0001      	movs	r1, r0
 8008060:	9800      	ldr	r0, [sp, #0]
 8008062:	f7ff fd47 	bl	8007af4 <_Balloc>
 8008066:	1e02      	subs	r2, r0, #0
 8008068:	d104      	bne.n	8008074 <__mdiff+0x2c>
 800806a:	4b40      	ldr	r3, [pc, #256]	@ (800816c <__mdiff+0x124>)
 800806c:	4840      	ldr	r0, [pc, #256]	@ (8008170 <__mdiff+0x128>)
 800806e:	4941      	ldr	r1, [pc, #260]	@ (8008174 <__mdiff+0x12c>)
 8008070:	f000 f996 	bl	80083a0 <__assert_func>
 8008074:	2301      	movs	r3, #1
 8008076:	6145      	str	r5, [r0, #20]
 8008078:	6103      	str	r3, [r0, #16]
 800807a:	0010      	movs	r0, r2
 800807c:	b007      	add	sp, #28
 800807e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008080:	2600      	movs	r6, #0
 8008082:	42b0      	cmp	r0, r6
 8008084:	da03      	bge.n	800808e <__mdiff+0x46>
 8008086:	0023      	movs	r3, r4
 8008088:	003c      	movs	r4, r7
 800808a:	001f      	movs	r7, r3
 800808c:	3601      	adds	r6, #1
 800808e:	6861      	ldr	r1, [r4, #4]
 8008090:	9800      	ldr	r0, [sp, #0]
 8008092:	f7ff fd2f 	bl	8007af4 <_Balloc>
 8008096:	1e02      	subs	r2, r0, #0
 8008098:	d103      	bne.n	80080a2 <__mdiff+0x5a>
 800809a:	4b34      	ldr	r3, [pc, #208]	@ (800816c <__mdiff+0x124>)
 800809c:	4834      	ldr	r0, [pc, #208]	@ (8008170 <__mdiff+0x128>)
 800809e:	4936      	ldr	r1, [pc, #216]	@ (8008178 <__mdiff+0x130>)
 80080a0:	e7e6      	b.n	8008070 <__mdiff+0x28>
 80080a2:	6923      	ldr	r3, [r4, #16]
 80080a4:	3414      	adds	r4, #20
 80080a6:	9300      	str	r3, [sp, #0]
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	18e3      	adds	r3, r4, r3
 80080ac:	0021      	movs	r1, r4
 80080ae:	9401      	str	r4, [sp, #4]
 80080b0:	003c      	movs	r4, r7
 80080b2:	9302      	str	r3, [sp, #8]
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	3414      	adds	r4, #20
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	18e3      	adds	r3, r4, r3
 80080bc:	9303      	str	r3, [sp, #12]
 80080be:	0003      	movs	r3, r0
 80080c0:	60c6      	str	r6, [r0, #12]
 80080c2:	468c      	mov	ip, r1
 80080c4:	2000      	movs	r0, #0
 80080c6:	3314      	adds	r3, #20
 80080c8:	9304      	str	r3, [sp, #16]
 80080ca:	9305      	str	r3, [sp, #20]
 80080cc:	4663      	mov	r3, ip
 80080ce:	cb20      	ldmia	r3!, {r5}
 80080d0:	b2a9      	uxth	r1, r5
 80080d2:	000e      	movs	r6, r1
 80080d4:	469c      	mov	ip, r3
 80080d6:	cc08      	ldmia	r4!, {r3}
 80080d8:	0c2d      	lsrs	r5, r5, #16
 80080da:	b299      	uxth	r1, r3
 80080dc:	1a71      	subs	r1, r6, r1
 80080de:	1809      	adds	r1, r1, r0
 80080e0:	0c1b      	lsrs	r3, r3, #16
 80080e2:	1408      	asrs	r0, r1, #16
 80080e4:	1aeb      	subs	r3, r5, r3
 80080e6:	181b      	adds	r3, r3, r0
 80080e8:	1418      	asrs	r0, r3, #16
 80080ea:	b289      	uxth	r1, r1
 80080ec:	041b      	lsls	r3, r3, #16
 80080ee:	4319      	orrs	r1, r3
 80080f0:	9b05      	ldr	r3, [sp, #20]
 80080f2:	c302      	stmia	r3!, {r1}
 80080f4:	9305      	str	r3, [sp, #20]
 80080f6:	9b03      	ldr	r3, [sp, #12]
 80080f8:	42a3      	cmp	r3, r4
 80080fa:	d8e7      	bhi.n	80080cc <__mdiff+0x84>
 80080fc:	0039      	movs	r1, r7
 80080fe:	9c03      	ldr	r4, [sp, #12]
 8008100:	3115      	adds	r1, #21
 8008102:	2304      	movs	r3, #4
 8008104:	428c      	cmp	r4, r1
 8008106:	d304      	bcc.n	8008112 <__mdiff+0xca>
 8008108:	1be3      	subs	r3, r4, r7
 800810a:	3b15      	subs	r3, #21
 800810c:	089b      	lsrs	r3, r3, #2
 800810e:	3301      	adds	r3, #1
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	9901      	ldr	r1, [sp, #4]
 8008114:	18cd      	adds	r5, r1, r3
 8008116:	9904      	ldr	r1, [sp, #16]
 8008118:	002e      	movs	r6, r5
 800811a:	18cb      	adds	r3, r1, r3
 800811c:	001f      	movs	r7, r3
 800811e:	9902      	ldr	r1, [sp, #8]
 8008120:	428e      	cmp	r6, r1
 8008122:	d311      	bcc.n	8008148 <__mdiff+0x100>
 8008124:	9c02      	ldr	r4, [sp, #8]
 8008126:	1ee9      	subs	r1, r5, #3
 8008128:	2000      	movs	r0, #0
 800812a:	428c      	cmp	r4, r1
 800812c:	d304      	bcc.n	8008138 <__mdiff+0xf0>
 800812e:	0021      	movs	r1, r4
 8008130:	3103      	adds	r1, #3
 8008132:	1b49      	subs	r1, r1, r5
 8008134:	0889      	lsrs	r1, r1, #2
 8008136:	0088      	lsls	r0, r1, #2
 8008138:	181b      	adds	r3, r3, r0
 800813a:	3b04      	subs	r3, #4
 800813c:	6819      	ldr	r1, [r3, #0]
 800813e:	2900      	cmp	r1, #0
 8008140:	d010      	beq.n	8008164 <__mdiff+0x11c>
 8008142:	9b00      	ldr	r3, [sp, #0]
 8008144:	6113      	str	r3, [r2, #16]
 8008146:	e798      	b.n	800807a <__mdiff+0x32>
 8008148:	4684      	mov	ip, r0
 800814a:	ce02      	ldmia	r6!, {r1}
 800814c:	b288      	uxth	r0, r1
 800814e:	4460      	add	r0, ip
 8008150:	1400      	asrs	r0, r0, #16
 8008152:	0c0c      	lsrs	r4, r1, #16
 8008154:	1904      	adds	r4, r0, r4
 8008156:	4461      	add	r1, ip
 8008158:	1420      	asrs	r0, r4, #16
 800815a:	b289      	uxth	r1, r1
 800815c:	0424      	lsls	r4, r4, #16
 800815e:	4321      	orrs	r1, r4
 8008160:	c702      	stmia	r7!, {r1}
 8008162:	e7dc      	b.n	800811e <__mdiff+0xd6>
 8008164:	9900      	ldr	r1, [sp, #0]
 8008166:	3901      	subs	r1, #1
 8008168:	9100      	str	r1, [sp, #0]
 800816a:	e7e6      	b.n	800813a <__mdiff+0xf2>
 800816c:	08008bb8 	.word	0x08008bb8
 8008170:	08008bc9 	.word	0x08008bc9
 8008174:	00000237 	.word	0x00000237
 8008178:	00000245 	.word	0x00000245

0800817c <__d2b>:
 800817c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800817e:	2101      	movs	r1, #1
 8008180:	0016      	movs	r6, r2
 8008182:	001f      	movs	r7, r3
 8008184:	f7ff fcb6 	bl	8007af4 <_Balloc>
 8008188:	1e04      	subs	r4, r0, #0
 800818a:	d105      	bne.n	8008198 <__d2b+0x1c>
 800818c:	0022      	movs	r2, r4
 800818e:	4b25      	ldr	r3, [pc, #148]	@ (8008224 <__d2b+0xa8>)
 8008190:	4825      	ldr	r0, [pc, #148]	@ (8008228 <__d2b+0xac>)
 8008192:	4926      	ldr	r1, [pc, #152]	@ (800822c <__d2b+0xb0>)
 8008194:	f000 f904 	bl	80083a0 <__assert_func>
 8008198:	033b      	lsls	r3, r7, #12
 800819a:	007d      	lsls	r5, r7, #1
 800819c:	0b1b      	lsrs	r3, r3, #12
 800819e:	0d6d      	lsrs	r5, r5, #21
 80081a0:	d002      	beq.n	80081a8 <__d2b+0x2c>
 80081a2:	2280      	movs	r2, #128	@ 0x80
 80081a4:	0352      	lsls	r2, r2, #13
 80081a6:	4313      	orrs	r3, r2
 80081a8:	9301      	str	r3, [sp, #4]
 80081aa:	2e00      	cmp	r6, #0
 80081ac:	d025      	beq.n	80081fa <__d2b+0x7e>
 80081ae:	4668      	mov	r0, sp
 80081b0:	9600      	str	r6, [sp, #0]
 80081b2:	f7ff fd6c 	bl	8007c8e <__lo0bits>
 80081b6:	9b01      	ldr	r3, [sp, #4]
 80081b8:	9900      	ldr	r1, [sp, #0]
 80081ba:	2800      	cmp	r0, #0
 80081bc:	d01b      	beq.n	80081f6 <__d2b+0x7a>
 80081be:	2220      	movs	r2, #32
 80081c0:	001e      	movs	r6, r3
 80081c2:	1a12      	subs	r2, r2, r0
 80081c4:	4096      	lsls	r6, r2
 80081c6:	0032      	movs	r2, r6
 80081c8:	40c3      	lsrs	r3, r0
 80081ca:	430a      	orrs	r2, r1
 80081cc:	6162      	str	r2, [r4, #20]
 80081ce:	9301      	str	r3, [sp, #4]
 80081d0:	9e01      	ldr	r6, [sp, #4]
 80081d2:	61a6      	str	r6, [r4, #24]
 80081d4:	1e73      	subs	r3, r6, #1
 80081d6:	419e      	sbcs	r6, r3
 80081d8:	3601      	adds	r6, #1
 80081da:	6126      	str	r6, [r4, #16]
 80081dc:	2d00      	cmp	r5, #0
 80081de:	d014      	beq.n	800820a <__d2b+0x8e>
 80081e0:	2635      	movs	r6, #53	@ 0x35
 80081e2:	4b13      	ldr	r3, [pc, #76]	@ (8008230 <__d2b+0xb4>)
 80081e4:	18ed      	adds	r5, r5, r3
 80081e6:	9b08      	ldr	r3, [sp, #32]
 80081e8:	182d      	adds	r5, r5, r0
 80081ea:	601d      	str	r5, [r3, #0]
 80081ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081ee:	1a36      	subs	r6, r6, r0
 80081f0:	601e      	str	r6, [r3, #0]
 80081f2:	0020      	movs	r0, r4
 80081f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80081f6:	6161      	str	r1, [r4, #20]
 80081f8:	e7ea      	b.n	80081d0 <__d2b+0x54>
 80081fa:	a801      	add	r0, sp, #4
 80081fc:	f7ff fd47 	bl	8007c8e <__lo0bits>
 8008200:	9b01      	ldr	r3, [sp, #4]
 8008202:	2601      	movs	r6, #1
 8008204:	6163      	str	r3, [r4, #20]
 8008206:	3020      	adds	r0, #32
 8008208:	e7e7      	b.n	80081da <__d2b+0x5e>
 800820a:	4b0a      	ldr	r3, [pc, #40]	@ (8008234 <__d2b+0xb8>)
 800820c:	18c0      	adds	r0, r0, r3
 800820e:	9b08      	ldr	r3, [sp, #32]
 8008210:	6018      	str	r0, [r3, #0]
 8008212:	4b09      	ldr	r3, [pc, #36]	@ (8008238 <__d2b+0xbc>)
 8008214:	18f3      	adds	r3, r6, r3
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	18e3      	adds	r3, r4, r3
 800821a:	6958      	ldr	r0, [r3, #20]
 800821c:	f7ff fd16 	bl	8007c4c <__hi0bits>
 8008220:	0176      	lsls	r6, r6, #5
 8008222:	e7e3      	b.n	80081ec <__d2b+0x70>
 8008224:	08008bb8 	.word	0x08008bb8
 8008228:	08008bc9 	.word	0x08008bc9
 800822c:	0000030f 	.word	0x0000030f
 8008230:	fffffbcd 	.word	0xfffffbcd
 8008234:	fffffbce 	.word	0xfffffbce
 8008238:	3fffffff 	.word	0x3fffffff

0800823c <__sflush_r>:
 800823c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800823e:	220c      	movs	r2, #12
 8008240:	5e8b      	ldrsh	r3, [r1, r2]
 8008242:	0005      	movs	r5, r0
 8008244:	000c      	movs	r4, r1
 8008246:	071a      	lsls	r2, r3, #28
 8008248:	d456      	bmi.n	80082f8 <__sflush_r+0xbc>
 800824a:	684a      	ldr	r2, [r1, #4]
 800824c:	2a00      	cmp	r2, #0
 800824e:	dc02      	bgt.n	8008256 <__sflush_r+0x1a>
 8008250:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8008252:	2a00      	cmp	r2, #0
 8008254:	dd4e      	ble.n	80082f4 <__sflush_r+0xb8>
 8008256:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8008258:	2f00      	cmp	r7, #0
 800825a:	d04b      	beq.n	80082f4 <__sflush_r+0xb8>
 800825c:	2200      	movs	r2, #0
 800825e:	2080      	movs	r0, #128	@ 0x80
 8008260:	682e      	ldr	r6, [r5, #0]
 8008262:	602a      	str	r2, [r5, #0]
 8008264:	001a      	movs	r2, r3
 8008266:	0140      	lsls	r0, r0, #5
 8008268:	6a21      	ldr	r1, [r4, #32]
 800826a:	4002      	ands	r2, r0
 800826c:	4203      	tst	r3, r0
 800826e:	d033      	beq.n	80082d8 <__sflush_r+0x9c>
 8008270:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008272:	89a3      	ldrh	r3, [r4, #12]
 8008274:	075b      	lsls	r3, r3, #29
 8008276:	d506      	bpl.n	8008286 <__sflush_r+0x4a>
 8008278:	6863      	ldr	r3, [r4, #4]
 800827a:	1ad2      	subs	r2, r2, r3
 800827c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800827e:	2b00      	cmp	r3, #0
 8008280:	d001      	beq.n	8008286 <__sflush_r+0x4a>
 8008282:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008284:	1ad2      	subs	r2, r2, r3
 8008286:	2300      	movs	r3, #0
 8008288:	0028      	movs	r0, r5
 800828a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800828c:	6a21      	ldr	r1, [r4, #32]
 800828e:	47b8      	blx	r7
 8008290:	89a2      	ldrh	r2, [r4, #12]
 8008292:	1c43      	adds	r3, r0, #1
 8008294:	d106      	bne.n	80082a4 <__sflush_r+0x68>
 8008296:	6829      	ldr	r1, [r5, #0]
 8008298:	291d      	cmp	r1, #29
 800829a:	d846      	bhi.n	800832a <__sflush_r+0xee>
 800829c:	4b29      	ldr	r3, [pc, #164]	@ (8008344 <__sflush_r+0x108>)
 800829e:	410b      	asrs	r3, r1
 80082a0:	07db      	lsls	r3, r3, #31
 80082a2:	d442      	bmi.n	800832a <__sflush_r+0xee>
 80082a4:	2300      	movs	r3, #0
 80082a6:	6063      	str	r3, [r4, #4]
 80082a8:	6923      	ldr	r3, [r4, #16]
 80082aa:	6023      	str	r3, [r4, #0]
 80082ac:	04d2      	lsls	r2, r2, #19
 80082ae:	d505      	bpl.n	80082bc <__sflush_r+0x80>
 80082b0:	1c43      	adds	r3, r0, #1
 80082b2:	d102      	bne.n	80082ba <__sflush_r+0x7e>
 80082b4:	682b      	ldr	r3, [r5, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d100      	bne.n	80082bc <__sflush_r+0x80>
 80082ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80082bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082be:	602e      	str	r6, [r5, #0]
 80082c0:	2900      	cmp	r1, #0
 80082c2:	d017      	beq.n	80082f4 <__sflush_r+0xb8>
 80082c4:	0023      	movs	r3, r4
 80082c6:	3344      	adds	r3, #68	@ 0x44
 80082c8:	4299      	cmp	r1, r3
 80082ca:	d002      	beq.n	80082d2 <__sflush_r+0x96>
 80082cc:	0028      	movs	r0, r5
 80082ce:	f7ff fbc7 	bl	8007a60 <_free_r>
 80082d2:	2300      	movs	r3, #0
 80082d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80082d6:	e00d      	b.n	80082f4 <__sflush_r+0xb8>
 80082d8:	2301      	movs	r3, #1
 80082da:	0028      	movs	r0, r5
 80082dc:	47b8      	blx	r7
 80082de:	0002      	movs	r2, r0
 80082e0:	1c43      	adds	r3, r0, #1
 80082e2:	d1c6      	bne.n	8008272 <__sflush_r+0x36>
 80082e4:	682b      	ldr	r3, [r5, #0]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d0c3      	beq.n	8008272 <__sflush_r+0x36>
 80082ea:	2b1d      	cmp	r3, #29
 80082ec:	d001      	beq.n	80082f2 <__sflush_r+0xb6>
 80082ee:	2b16      	cmp	r3, #22
 80082f0:	d11a      	bne.n	8008328 <__sflush_r+0xec>
 80082f2:	602e      	str	r6, [r5, #0]
 80082f4:	2000      	movs	r0, #0
 80082f6:	e01e      	b.n	8008336 <__sflush_r+0xfa>
 80082f8:	690e      	ldr	r6, [r1, #16]
 80082fa:	2e00      	cmp	r6, #0
 80082fc:	d0fa      	beq.n	80082f4 <__sflush_r+0xb8>
 80082fe:	680f      	ldr	r7, [r1, #0]
 8008300:	600e      	str	r6, [r1, #0]
 8008302:	1bba      	subs	r2, r7, r6
 8008304:	9201      	str	r2, [sp, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	079b      	lsls	r3, r3, #30
 800830a:	d100      	bne.n	800830e <__sflush_r+0xd2>
 800830c:	694a      	ldr	r2, [r1, #20]
 800830e:	60a2      	str	r2, [r4, #8]
 8008310:	9b01      	ldr	r3, [sp, #4]
 8008312:	2b00      	cmp	r3, #0
 8008314:	ddee      	ble.n	80082f4 <__sflush_r+0xb8>
 8008316:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008318:	0032      	movs	r2, r6
 800831a:	001f      	movs	r7, r3
 800831c:	0028      	movs	r0, r5
 800831e:	9b01      	ldr	r3, [sp, #4]
 8008320:	6a21      	ldr	r1, [r4, #32]
 8008322:	47b8      	blx	r7
 8008324:	2800      	cmp	r0, #0
 8008326:	dc07      	bgt.n	8008338 <__sflush_r+0xfc>
 8008328:	89a2      	ldrh	r2, [r4, #12]
 800832a:	2340      	movs	r3, #64	@ 0x40
 800832c:	2001      	movs	r0, #1
 800832e:	4313      	orrs	r3, r2
 8008330:	b21b      	sxth	r3, r3
 8008332:	81a3      	strh	r3, [r4, #12]
 8008334:	4240      	negs	r0, r0
 8008336:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008338:	9b01      	ldr	r3, [sp, #4]
 800833a:	1836      	adds	r6, r6, r0
 800833c:	1a1b      	subs	r3, r3, r0
 800833e:	9301      	str	r3, [sp, #4]
 8008340:	e7e6      	b.n	8008310 <__sflush_r+0xd4>
 8008342:	46c0      	nop			@ (mov r8, r8)
 8008344:	dfbffffe 	.word	0xdfbffffe

08008348 <_fflush_r>:
 8008348:	690b      	ldr	r3, [r1, #16]
 800834a:	b570      	push	{r4, r5, r6, lr}
 800834c:	0005      	movs	r5, r0
 800834e:	000c      	movs	r4, r1
 8008350:	2b00      	cmp	r3, #0
 8008352:	d102      	bne.n	800835a <_fflush_r+0x12>
 8008354:	2500      	movs	r5, #0
 8008356:	0028      	movs	r0, r5
 8008358:	bd70      	pop	{r4, r5, r6, pc}
 800835a:	2800      	cmp	r0, #0
 800835c:	d004      	beq.n	8008368 <_fflush_r+0x20>
 800835e:	6a03      	ldr	r3, [r0, #32]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d101      	bne.n	8008368 <_fflush_r+0x20>
 8008364:	f7fe fbcc 	bl	8006b00 <__sinit>
 8008368:	220c      	movs	r2, #12
 800836a:	5ea3      	ldrsh	r3, [r4, r2]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d0f1      	beq.n	8008354 <_fflush_r+0xc>
 8008370:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008372:	07d2      	lsls	r2, r2, #31
 8008374:	d404      	bmi.n	8008380 <_fflush_r+0x38>
 8008376:	059b      	lsls	r3, r3, #22
 8008378:	d402      	bmi.n	8008380 <_fflush_r+0x38>
 800837a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800837c:	f7fe fcd7 	bl	8006d2e <__retarget_lock_acquire_recursive>
 8008380:	0028      	movs	r0, r5
 8008382:	0021      	movs	r1, r4
 8008384:	f7ff ff5a 	bl	800823c <__sflush_r>
 8008388:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800838a:	0005      	movs	r5, r0
 800838c:	07db      	lsls	r3, r3, #31
 800838e:	d4e2      	bmi.n	8008356 <_fflush_r+0xe>
 8008390:	89a3      	ldrh	r3, [r4, #12]
 8008392:	059b      	lsls	r3, r3, #22
 8008394:	d4df      	bmi.n	8008356 <_fflush_r+0xe>
 8008396:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008398:	f7fe fcca 	bl	8006d30 <__retarget_lock_release_recursive>
 800839c:	e7db      	b.n	8008356 <_fflush_r+0xe>
	...

080083a0 <__assert_func>:
 80083a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80083a2:	0014      	movs	r4, r2
 80083a4:	001a      	movs	r2, r3
 80083a6:	4b09      	ldr	r3, [pc, #36]	@ (80083cc <__assert_func+0x2c>)
 80083a8:	0005      	movs	r5, r0
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	000e      	movs	r6, r1
 80083ae:	68d8      	ldr	r0, [r3, #12]
 80083b0:	4b07      	ldr	r3, [pc, #28]	@ (80083d0 <__assert_func+0x30>)
 80083b2:	2c00      	cmp	r4, #0
 80083b4:	d101      	bne.n	80083ba <__assert_func+0x1a>
 80083b6:	4b07      	ldr	r3, [pc, #28]	@ (80083d4 <__assert_func+0x34>)
 80083b8:	001c      	movs	r4, r3
 80083ba:	4907      	ldr	r1, [pc, #28]	@ (80083d8 <__assert_func+0x38>)
 80083bc:	9301      	str	r3, [sp, #4]
 80083be:	9402      	str	r4, [sp, #8]
 80083c0:	002b      	movs	r3, r5
 80083c2:	9600      	str	r6, [sp, #0]
 80083c4:	f000 f856 	bl	8008474 <fiprintf>
 80083c8:	f000 f864 	bl	8008494 <abort>
 80083cc:	20000064 	.word	0x20000064
 80083d0:	08008d2a 	.word	0x08008d2a
 80083d4:	08008d65 	.word	0x08008d65
 80083d8:	08008d37 	.word	0x08008d37

080083dc <_calloc_r>:
 80083dc:	b570      	push	{r4, r5, r6, lr}
 80083de:	0c0b      	lsrs	r3, r1, #16
 80083e0:	0c15      	lsrs	r5, r2, #16
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d11e      	bne.n	8008424 <_calloc_r+0x48>
 80083e6:	2d00      	cmp	r5, #0
 80083e8:	d10c      	bne.n	8008404 <_calloc_r+0x28>
 80083ea:	b289      	uxth	r1, r1
 80083ec:	b294      	uxth	r4, r2
 80083ee:	434c      	muls	r4, r1
 80083f0:	0021      	movs	r1, r4
 80083f2:	f7fd fe03 	bl	8005ffc <_malloc_r>
 80083f6:	1e05      	subs	r5, r0, #0
 80083f8:	d01a      	beq.n	8008430 <_calloc_r+0x54>
 80083fa:	0022      	movs	r2, r4
 80083fc:	2100      	movs	r1, #0
 80083fe:	f7fe fbff 	bl	8006c00 <memset>
 8008402:	e016      	b.n	8008432 <_calloc_r+0x56>
 8008404:	1c2b      	adds	r3, r5, #0
 8008406:	1c0c      	adds	r4, r1, #0
 8008408:	b289      	uxth	r1, r1
 800840a:	b292      	uxth	r2, r2
 800840c:	434a      	muls	r2, r1
 800840e:	b29b      	uxth	r3, r3
 8008410:	b2a1      	uxth	r1, r4
 8008412:	4359      	muls	r1, r3
 8008414:	0c14      	lsrs	r4, r2, #16
 8008416:	190c      	adds	r4, r1, r4
 8008418:	0c23      	lsrs	r3, r4, #16
 800841a:	d107      	bne.n	800842c <_calloc_r+0x50>
 800841c:	0424      	lsls	r4, r4, #16
 800841e:	b292      	uxth	r2, r2
 8008420:	4314      	orrs	r4, r2
 8008422:	e7e5      	b.n	80083f0 <_calloc_r+0x14>
 8008424:	2d00      	cmp	r5, #0
 8008426:	d101      	bne.n	800842c <_calloc_r+0x50>
 8008428:	1c14      	adds	r4, r2, #0
 800842a:	e7ed      	b.n	8008408 <_calloc_r+0x2c>
 800842c:	230c      	movs	r3, #12
 800842e:	6003      	str	r3, [r0, #0]
 8008430:	2500      	movs	r5, #0
 8008432:	0028      	movs	r0, r5
 8008434:	bd70      	pop	{r4, r5, r6, pc}

08008436 <__ascii_mbtowc>:
 8008436:	b082      	sub	sp, #8
 8008438:	2900      	cmp	r1, #0
 800843a:	d100      	bne.n	800843e <__ascii_mbtowc+0x8>
 800843c:	a901      	add	r1, sp, #4
 800843e:	1e10      	subs	r0, r2, #0
 8008440:	d006      	beq.n	8008450 <__ascii_mbtowc+0x1a>
 8008442:	2b00      	cmp	r3, #0
 8008444:	d006      	beq.n	8008454 <__ascii_mbtowc+0x1e>
 8008446:	7813      	ldrb	r3, [r2, #0]
 8008448:	600b      	str	r3, [r1, #0]
 800844a:	7810      	ldrb	r0, [r2, #0]
 800844c:	1e43      	subs	r3, r0, #1
 800844e:	4198      	sbcs	r0, r3
 8008450:	b002      	add	sp, #8
 8008452:	4770      	bx	lr
 8008454:	2002      	movs	r0, #2
 8008456:	4240      	negs	r0, r0
 8008458:	e7fa      	b.n	8008450 <__ascii_mbtowc+0x1a>

0800845a <__ascii_wctomb>:
 800845a:	0003      	movs	r3, r0
 800845c:	1e08      	subs	r0, r1, #0
 800845e:	d005      	beq.n	800846c <__ascii_wctomb+0x12>
 8008460:	2aff      	cmp	r2, #255	@ 0xff
 8008462:	d904      	bls.n	800846e <__ascii_wctomb+0x14>
 8008464:	228a      	movs	r2, #138	@ 0x8a
 8008466:	2001      	movs	r0, #1
 8008468:	601a      	str	r2, [r3, #0]
 800846a:	4240      	negs	r0, r0
 800846c:	4770      	bx	lr
 800846e:	2001      	movs	r0, #1
 8008470:	700a      	strb	r2, [r1, #0]
 8008472:	e7fb      	b.n	800846c <__ascii_wctomb+0x12>

08008474 <fiprintf>:
 8008474:	b40e      	push	{r1, r2, r3}
 8008476:	b517      	push	{r0, r1, r2, r4, lr}
 8008478:	4c05      	ldr	r4, [pc, #20]	@ (8008490 <fiprintf+0x1c>)
 800847a:	ab05      	add	r3, sp, #20
 800847c:	cb04      	ldmia	r3!, {r2}
 800847e:	0001      	movs	r1, r0
 8008480:	6820      	ldr	r0, [r4, #0]
 8008482:	9301      	str	r3, [sp, #4]
 8008484:	f000 f834 	bl	80084f0 <_vfiprintf_r>
 8008488:	bc1e      	pop	{r1, r2, r3, r4}
 800848a:	bc08      	pop	{r3}
 800848c:	b003      	add	sp, #12
 800848e:	4718      	bx	r3
 8008490:	20000064 	.word	0x20000064

08008494 <abort>:
 8008494:	2006      	movs	r0, #6
 8008496:	b510      	push	{r4, lr}
 8008498:	f000 fa10 	bl	80088bc <raise>
 800849c:	2001      	movs	r0, #1
 800849e:	f7fa fbcf 	bl	8002c40 <_exit>

080084a2 <__sfputc_r>:
 80084a2:	6893      	ldr	r3, [r2, #8]
 80084a4:	b510      	push	{r4, lr}
 80084a6:	3b01      	subs	r3, #1
 80084a8:	6093      	str	r3, [r2, #8]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	da04      	bge.n	80084b8 <__sfputc_r+0x16>
 80084ae:	6994      	ldr	r4, [r2, #24]
 80084b0:	42a3      	cmp	r3, r4
 80084b2:	db07      	blt.n	80084c4 <__sfputc_r+0x22>
 80084b4:	290a      	cmp	r1, #10
 80084b6:	d005      	beq.n	80084c4 <__sfputc_r+0x22>
 80084b8:	6813      	ldr	r3, [r2, #0]
 80084ba:	1c58      	adds	r0, r3, #1
 80084bc:	6010      	str	r0, [r2, #0]
 80084be:	7019      	strb	r1, [r3, #0]
 80084c0:	0008      	movs	r0, r1
 80084c2:	bd10      	pop	{r4, pc}
 80084c4:	f000 f930 	bl	8008728 <__swbuf_r>
 80084c8:	0001      	movs	r1, r0
 80084ca:	e7f9      	b.n	80084c0 <__sfputc_r+0x1e>

080084cc <__sfputs_r>:
 80084cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ce:	0006      	movs	r6, r0
 80084d0:	000f      	movs	r7, r1
 80084d2:	0014      	movs	r4, r2
 80084d4:	18d5      	adds	r5, r2, r3
 80084d6:	42ac      	cmp	r4, r5
 80084d8:	d101      	bne.n	80084de <__sfputs_r+0x12>
 80084da:	2000      	movs	r0, #0
 80084dc:	e007      	b.n	80084ee <__sfputs_r+0x22>
 80084de:	7821      	ldrb	r1, [r4, #0]
 80084e0:	003a      	movs	r2, r7
 80084e2:	0030      	movs	r0, r6
 80084e4:	f7ff ffdd 	bl	80084a2 <__sfputc_r>
 80084e8:	3401      	adds	r4, #1
 80084ea:	1c43      	adds	r3, r0, #1
 80084ec:	d1f3      	bne.n	80084d6 <__sfputs_r+0xa>
 80084ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080084f0 <_vfiprintf_r>:
 80084f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084f2:	b0a1      	sub	sp, #132	@ 0x84
 80084f4:	000f      	movs	r7, r1
 80084f6:	0015      	movs	r5, r2
 80084f8:	001e      	movs	r6, r3
 80084fa:	9003      	str	r0, [sp, #12]
 80084fc:	2800      	cmp	r0, #0
 80084fe:	d004      	beq.n	800850a <_vfiprintf_r+0x1a>
 8008500:	6a03      	ldr	r3, [r0, #32]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d101      	bne.n	800850a <_vfiprintf_r+0x1a>
 8008506:	f7fe fafb 	bl	8006b00 <__sinit>
 800850a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800850c:	07db      	lsls	r3, r3, #31
 800850e:	d405      	bmi.n	800851c <_vfiprintf_r+0x2c>
 8008510:	89bb      	ldrh	r3, [r7, #12]
 8008512:	059b      	lsls	r3, r3, #22
 8008514:	d402      	bmi.n	800851c <_vfiprintf_r+0x2c>
 8008516:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008518:	f7fe fc09 	bl	8006d2e <__retarget_lock_acquire_recursive>
 800851c:	89bb      	ldrh	r3, [r7, #12]
 800851e:	071b      	lsls	r3, r3, #28
 8008520:	d502      	bpl.n	8008528 <_vfiprintf_r+0x38>
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d113      	bne.n	8008550 <_vfiprintf_r+0x60>
 8008528:	0039      	movs	r1, r7
 800852a:	9803      	ldr	r0, [sp, #12]
 800852c:	f000 f93e 	bl	80087ac <__swsetup_r>
 8008530:	2800      	cmp	r0, #0
 8008532:	d00d      	beq.n	8008550 <_vfiprintf_r+0x60>
 8008534:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008536:	07db      	lsls	r3, r3, #31
 8008538:	d503      	bpl.n	8008542 <_vfiprintf_r+0x52>
 800853a:	2001      	movs	r0, #1
 800853c:	4240      	negs	r0, r0
 800853e:	b021      	add	sp, #132	@ 0x84
 8008540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008542:	89bb      	ldrh	r3, [r7, #12]
 8008544:	059b      	lsls	r3, r3, #22
 8008546:	d4f8      	bmi.n	800853a <_vfiprintf_r+0x4a>
 8008548:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800854a:	f7fe fbf1 	bl	8006d30 <__retarget_lock_release_recursive>
 800854e:	e7f4      	b.n	800853a <_vfiprintf_r+0x4a>
 8008550:	2300      	movs	r3, #0
 8008552:	ac08      	add	r4, sp, #32
 8008554:	6163      	str	r3, [r4, #20]
 8008556:	3320      	adds	r3, #32
 8008558:	7663      	strb	r3, [r4, #25]
 800855a:	3310      	adds	r3, #16
 800855c:	76a3      	strb	r3, [r4, #26]
 800855e:	9607      	str	r6, [sp, #28]
 8008560:	002e      	movs	r6, r5
 8008562:	7833      	ldrb	r3, [r6, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d001      	beq.n	800856c <_vfiprintf_r+0x7c>
 8008568:	2b25      	cmp	r3, #37	@ 0x25
 800856a:	d148      	bne.n	80085fe <_vfiprintf_r+0x10e>
 800856c:	1b73      	subs	r3, r6, r5
 800856e:	9305      	str	r3, [sp, #20]
 8008570:	42ae      	cmp	r6, r5
 8008572:	d00b      	beq.n	800858c <_vfiprintf_r+0x9c>
 8008574:	002a      	movs	r2, r5
 8008576:	0039      	movs	r1, r7
 8008578:	9803      	ldr	r0, [sp, #12]
 800857a:	f7ff ffa7 	bl	80084cc <__sfputs_r>
 800857e:	3001      	adds	r0, #1
 8008580:	d100      	bne.n	8008584 <_vfiprintf_r+0x94>
 8008582:	e0ae      	b.n	80086e2 <_vfiprintf_r+0x1f2>
 8008584:	6963      	ldr	r3, [r4, #20]
 8008586:	9a05      	ldr	r2, [sp, #20]
 8008588:	189b      	adds	r3, r3, r2
 800858a:	6163      	str	r3, [r4, #20]
 800858c:	7833      	ldrb	r3, [r6, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d100      	bne.n	8008594 <_vfiprintf_r+0xa4>
 8008592:	e0a6      	b.n	80086e2 <_vfiprintf_r+0x1f2>
 8008594:	2201      	movs	r2, #1
 8008596:	2300      	movs	r3, #0
 8008598:	4252      	negs	r2, r2
 800859a:	6062      	str	r2, [r4, #4]
 800859c:	a904      	add	r1, sp, #16
 800859e:	3254      	adds	r2, #84	@ 0x54
 80085a0:	1852      	adds	r2, r2, r1
 80085a2:	1c75      	adds	r5, r6, #1
 80085a4:	6023      	str	r3, [r4, #0]
 80085a6:	60e3      	str	r3, [r4, #12]
 80085a8:	60a3      	str	r3, [r4, #8]
 80085aa:	7013      	strb	r3, [r2, #0]
 80085ac:	65a3      	str	r3, [r4, #88]	@ 0x58
 80085ae:	4b59      	ldr	r3, [pc, #356]	@ (8008714 <_vfiprintf_r+0x224>)
 80085b0:	2205      	movs	r2, #5
 80085b2:	0018      	movs	r0, r3
 80085b4:	7829      	ldrb	r1, [r5, #0]
 80085b6:	9305      	str	r3, [sp, #20]
 80085b8:	f7fe fbbb 	bl	8006d32 <memchr>
 80085bc:	1c6e      	adds	r6, r5, #1
 80085be:	2800      	cmp	r0, #0
 80085c0:	d11f      	bne.n	8008602 <_vfiprintf_r+0x112>
 80085c2:	6822      	ldr	r2, [r4, #0]
 80085c4:	06d3      	lsls	r3, r2, #27
 80085c6:	d504      	bpl.n	80085d2 <_vfiprintf_r+0xe2>
 80085c8:	2353      	movs	r3, #83	@ 0x53
 80085ca:	a904      	add	r1, sp, #16
 80085cc:	185b      	adds	r3, r3, r1
 80085ce:	2120      	movs	r1, #32
 80085d0:	7019      	strb	r1, [r3, #0]
 80085d2:	0713      	lsls	r3, r2, #28
 80085d4:	d504      	bpl.n	80085e0 <_vfiprintf_r+0xf0>
 80085d6:	2353      	movs	r3, #83	@ 0x53
 80085d8:	a904      	add	r1, sp, #16
 80085da:	185b      	adds	r3, r3, r1
 80085dc:	212b      	movs	r1, #43	@ 0x2b
 80085de:	7019      	strb	r1, [r3, #0]
 80085e0:	782b      	ldrb	r3, [r5, #0]
 80085e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80085e4:	d016      	beq.n	8008614 <_vfiprintf_r+0x124>
 80085e6:	002e      	movs	r6, r5
 80085e8:	2100      	movs	r1, #0
 80085ea:	200a      	movs	r0, #10
 80085ec:	68e3      	ldr	r3, [r4, #12]
 80085ee:	7832      	ldrb	r2, [r6, #0]
 80085f0:	1c75      	adds	r5, r6, #1
 80085f2:	3a30      	subs	r2, #48	@ 0x30
 80085f4:	2a09      	cmp	r2, #9
 80085f6:	d950      	bls.n	800869a <_vfiprintf_r+0x1aa>
 80085f8:	2900      	cmp	r1, #0
 80085fa:	d111      	bne.n	8008620 <_vfiprintf_r+0x130>
 80085fc:	e017      	b.n	800862e <_vfiprintf_r+0x13e>
 80085fe:	3601      	adds	r6, #1
 8008600:	e7af      	b.n	8008562 <_vfiprintf_r+0x72>
 8008602:	9b05      	ldr	r3, [sp, #20]
 8008604:	6822      	ldr	r2, [r4, #0]
 8008606:	1ac0      	subs	r0, r0, r3
 8008608:	2301      	movs	r3, #1
 800860a:	4083      	lsls	r3, r0
 800860c:	4313      	orrs	r3, r2
 800860e:	0035      	movs	r5, r6
 8008610:	6023      	str	r3, [r4, #0]
 8008612:	e7cc      	b.n	80085ae <_vfiprintf_r+0xbe>
 8008614:	9b07      	ldr	r3, [sp, #28]
 8008616:	1d19      	adds	r1, r3, #4
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	9107      	str	r1, [sp, #28]
 800861c:	2b00      	cmp	r3, #0
 800861e:	db01      	blt.n	8008624 <_vfiprintf_r+0x134>
 8008620:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008622:	e004      	b.n	800862e <_vfiprintf_r+0x13e>
 8008624:	425b      	negs	r3, r3
 8008626:	60e3      	str	r3, [r4, #12]
 8008628:	2302      	movs	r3, #2
 800862a:	4313      	orrs	r3, r2
 800862c:	6023      	str	r3, [r4, #0]
 800862e:	7833      	ldrb	r3, [r6, #0]
 8008630:	2b2e      	cmp	r3, #46	@ 0x2e
 8008632:	d10c      	bne.n	800864e <_vfiprintf_r+0x15e>
 8008634:	7873      	ldrb	r3, [r6, #1]
 8008636:	2b2a      	cmp	r3, #42	@ 0x2a
 8008638:	d134      	bne.n	80086a4 <_vfiprintf_r+0x1b4>
 800863a:	9b07      	ldr	r3, [sp, #28]
 800863c:	3602      	adds	r6, #2
 800863e:	1d1a      	adds	r2, r3, #4
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	9207      	str	r2, [sp, #28]
 8008644:	2b00      	cmp	r3, #0
 8008646:	da01      	bge.n	800864c <_vfiprintf_r+0x15c>
 8008648:	2301      	movs	r3, #1
 800864a:	425b      	negs	r3, r3
 800864c:	9309      	str	r3, [sp, #36]	@ 0x24
 800864e:	4d32      	ldr	r5, [pc, #200]	@ (8008718 <_vfiprintf_r+0x228>)
 8008650:	2203      	movs	r2, #3
 8008652:	0028      	movs	r0, r5
 8008654:	7831      	ldrb	r1, [r6, #0]
 8008656:	f7fe fb6c 	bl	8006d32 <memchr>
 800865a:	2800      	cmp	r0, #0
 800865c:	d006      	beq.n	800866c <_vfiprintf_r+0x17c>
 800865e:	2340      	movs	r3, #64	@ 0x40
 8008660:	1b40      	subs	r0, r0, r5
 8008662:	4083      	lsls	r3, r0
 8008664:	6822      	ldr	r2, [r4, #0]
 8008666:	3601      	adds	r6, #1
 8008668:	4313      	orrs	r3, r2
 800866a:	6023      	str	r3, [r4, #0]
 800866c:	7831      	ldrb	r1, [r6, #0]
 800866e:	2206      	movs	r2, #6
 8008670:	482a      	ldr	r0, [pc, #168]	@ (800871c <_vfiprintf_r+0x22c>)
 8008672:	1c75      	adds	r5, r6, #1
 8008674:	7621      	strb	r1, [r4, #24]
 8008676:	f7fe fb5c 	bl	8006d32 <memchr>
 800867a:	2800      	cmp	r0, #0
 800867c:	d040      	beq.n	8008700 <_vfiprintf_r+0x210>
 800867e:	4b28      	ldr	r3, [pc, #160]	@ (8008720 <_vfiprintf_r+0x230>)
 8008680:	2b00      	cmp	r3, #0
 8008682:	d122      	bne.n	80086ca <_vfiprintf_r+0x1da>
 8008684:	2207      	movs	r2, #7
 8008686:	9b07      	ldr	r3, [sp, #28]
 8008688:	3307      	adds	r3, #7
 800868a:	4393      	bics	r3, r2
 800868c:	3308      	adds	r3, #8
 800868e:	9307      	str	r3, [sp, #28]
 8008690:	6963      	ldr	r3, [r4, #20]
 8008692:	9a04      	ldr	r2, [sp, #16]
 8008694:	189b      	adds	r3, r3, r2
 8008696:	6163      	str	r3, [r4, #20]
 8008698:	e762      	b.n	8008560 <_vfiprintf_r+0x70>
 800869a:	4343      	muls	r3, r0
 800869c:	002e      	movs	r6, r5
 800869e:	2101      	movs	r1, #1
 80086a0:	189b      	adds	r3, r3, r2
 80086a2:	e7a4      	b.n	80085ee <_vfiprintf_r+0xfe>
 80086a4:	2300      	movs	r3, #0
 80086a6:	200a      	movs	r0, #10
 80086a8:	0019      	movs	r1, r3
 80086aa:	3601      	adds	r6, #1
 80086ac:	6063      	str	r3, [r4, #4]
 80086ae:	7832      	ldrb	r2, [r6, #0]
 80086b0:	1c75      	adds	r5, r6, #1
 80086b2:	3a30      	subs	r2, #48	@ 0x30
 80086b4:	2a09      	cmp	r2, #9
 80086b6:	d903      	bls.n	80086c0 <_vfiprintf_r+0x1d0>
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d0c8      	beq.n	800864e <_vfiprintf_r+0x15e>
 80086bc:	9109      	str	r1, [sp, #36]	@ 0x24
 80086be:	e7c6      	b.n	800864e <_vfiprintf_r+0x15e>
 80086c0:	4341      	muls	r1, r0
 80086c2:	002e      	movs	r6, r5
 80086c4:	2301      	movs	r3, #1
 80086c6:	1889      	adds	r1, r1, r2
 80086c8:	e7f1      	b.n	80086ae <_vfiprintf_r+0x1be>
 80086ca:	aa07      	add	r2, sp, #28
 80086cc:	9200      	str	r2, [sp, #0]
 80086ce:	0021      	movs	r1, r4
 80086d0:	003a      	movs	r2, r7
 80086d2:	4b14      	ldr	r3, [pc, #80]	@ (8008724 <_vfiprintf_r+0x234>)
 80086d4:	9803      	ldr	r0, [sp, #12]
 80086d6:	f7fd fdc7 	bl	8006268 <_printf_float>
 80086da:	9004      	str	r0, [sp, #16]
 80086dc:	9b04      	ldr	r3, [sp, #16]
 80086de:	3301      	adds	r3, #1
 80086e0:	d1d6      	bne.n	8008690 <_vfiprintf_r+0x1a0>
 80086e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80086e4:	07db      	lsls	r3, r3, #31
 80086e6:	d405      	bmi.n	80086f4 <_vfiprintf_r+0x204>
 80086e8:	89bb      	ldrh	r3, [r7, #12]
 80086ea:	059b      	lsls	r3, r3, #22
 80086ec:	d402      	bmi.n	80086f4 <_vfiprintf_r+0x204>
 80086ee:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80086f0:	f7fe fb1e 	bl	8006d30 <__retarget_lock_release_recursive>
 80086f4:	89bb      	ldrh	r3, [r7, #12]
 80086f6:	065b      	lsls	r3, r3, #25
 80086f8:	d500      	bpl.n	80086fc <_vfiprintf_r+0x20c>
 80086fa:	e71e      	b.n	800853a <_vfiprintf_r+0x4a>
 80086fc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80086fe:	e71e      	b.n	800853e <_vfiprintf_r+0x4e>
 8008700:	aa07      	add	r2, sp, #28
 8008702:	9200      	str	r2, [sp, #0]
 8008704:	0021      	movs	r1, r4
 8008706:	003a      	movs	r2, r7
 8008708:	4b06      	ldr	r3, [pc, #24]	@ (8008724 <_vfiprintf_r+0x234>)
 800870a:	9803      	ldr	r0, [sp, #12]
 800870c:	f7fe f85a 	bl	80067c4 <_printf_i>
 8008710:	e7e3      	b.n	80086da <_vfiprintf_r+0x1ea>
 8008712:	46c0      	nop			@ (mov r8, r8)
 8008714:	08008e67 	.word	0x08008e67
 8008718:	08008e6d 	.word	0x08008e6d
 800871c:	08008e71 	.word	0x08008e71
 8008720:	08006269 	.word	0x08006269
 8008724:	080084cd 	.word	0x080084cd

08008728 <__swbuf_r>:
 8008728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800872a:	0006      	movs	r6, r0
 800872c:	000d      	movs	r5, r1
 800872e:	0014      	movs	r4, r2
 8008730:	2800      	cmp	r0, #0
 8008732:	d004      	beq.n	800873e <__swbuf_r+0x16>
 8008734:	6a03      	ldr	r3, [r0, #32]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d101      	bne.n	800873e <__swbuf_r+0x16>
 800873a:	f7fe f9e1 	bl	8006b00 <__sinit>
 800873e:	69a3      	ldr	r3, [r4, #24]
 8008740:	60a3      	str	r3, [r4, #8]
 8008742:	89a3      	ldrh	r3, [r4, #12]
 8008744:	071b      	lsls	r3, r3, #28
 8008746:	d502      	bpl.n	800874e <__swbuf_r+0x26>
 8008748:	6923      	ldr	r3, [r4, #16]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d109      	bne.n	8008762 <__swbuf_r+0x3a>
 800874e:	0021      	movs	r1, r4
 8008750:	0030      	movs	r0, r6
 8008752:	f000 f82b 	bl	80087ac <__swsetup_r>
 8008756:	2800      	cmp	r0, #0
 8008758:	d003      	beq.n	8008762 <__swbuf_r+0x3a>
 800875a:	2501      	movs	r5, #1
 800875c:	426d      	negs	r5, r5
 800875e:	0028      	movs	r0, r5
 8008760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008762:	6923      	ldr	r3, [r4, #16]
 8008764:	6820      	ldr	r0, [r4, #0]
 8008766:	b2ef      	uxtb	r7, r5
 8008768:	1ac0      	subs	r0, r0, r3
 800876a:	6963      	ldr	r3, [r4, #20]
 800876c:	b2ed      	uxtb	r5, r5
 800876e:	4283      	cmp	r3, r0
 8008770:	dc05      	bgt.n	800877e <__swbuf_r+0x56>
 8008772:	0021      	movs	r1, r4
 8008774:	0030      	movs	r0, r6
 8008776:	f7ff fde7 	bl	8008348 <_fflush_r>
 800877a:	2800      	cmp	r0, #0
 800877c:	d1ed      	bne.n	800875a <__swbuf_r+0x32>
 800877e:	68a3      	ldr	r3, [r4, #8]
 8008780:	3001      	adds	r0, #1
 8008782:	3b01      	subs	r3, #1
 8008784:	60a3      	str	r3, [r4, #8]
 8008786:	6823      	ldr	r3, [r4, #0]
 8008788:	1c5a      	adds	r2, r3, #1
 800878a:	6022      	str	r2, [r4, #0]
 800878c:	701f      	strb	r7, [r3, #0]
 800878e:	6963      	ldr	r3, [r4, #20]
 8008790:	4283      	cmp	r3, r0
 8008792:	d004      	beq.n	800879e <__swbuf_r+0x76>
 8008794:	89a3      	ldrh	r3, [r4, #12]
 8008796:	07db      	lsls	r3, r3, #31
 8008798:	d5e1      	bpl.n	800875e <__swbuf_r+0x36>
 800879a:	2d0a      	cmp	r5, #10
 800879c:	d1df      	bne.n	800875e <__swbuf_r+0x36>
 800879e:	0021      	movs	r1, r4
 80087a0:	0030      	movs	r0, r6
 80087a2:	f7ff fdd1 	bl	8008348 <_fflush_r>
 80087a6:	2800      	cmp	r0, #0
 80087a8:	d0d9      	beq.n	800875e <__swbuf_r+0x36>
 80087aa:	e7d6      	b.n	800875a <__swbuf_r+0x32>

080087ac <__swsetup_r>:
 80087ac:	4b2d      	ldr	r3, [pc, #180]	@ (8008864 <__swsetup_r+0xb8>)
 80087ae:	b570      	push	{r4, r5, r6, lr}
 80087b0:	0005      	movs	r5, r0
 80087b2:	6818      	ldr	r0, [r3, #0]
 80087b4:	000c      	movs	r4, r1
 80087b6:	2800      	cmp	r0, #0
 80087b8:	d004      	beq.n	80087c4 <__swsetup_r+0x18>
 80087ba:	6a03      	ldr	r3, [r0, #32]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d101      	bne.n	80087c4 <__swsetup_r+0x18>
 80087c0:	f7fe f99e 	bl	8006b00 <__sinit>
 80087c4:	230c      	movs	r3, #12
 80087c6:	5ee2      	ldrsh	r2, [r4, r3]
 80087c8:	0713      	lsls	r3, r2, #28
 80087ca:	d423      	bmi.n	8008814 <__swsetup_r+0x68>
 80087cc:	06d3      	lsls	r3, r2, #27
 80087ce:	d407      	bmi.n	80087e0 <__swsetup_r+0x34>
 80087d0:	2309      	movs	r3, #9
 80087d2:	602b      	str	r3, [r5, #0]
 80087d4:	2340      	movs	r3, #64	@ 0x40
 80087d6:	2001      	movs	r0, #1
 80087d8:	4313      	orrs	r3, r2
 80087da:	81a3      	strh	r3, [r4, #12]
 80087dc:	4240      	negs	r0, r0
 80087de:	e03a      	b.n	8008856 <__swsetup_r+0xaa>
 80087e0:	0752      	lsls	r2, r2, #29
 80087e2:	d513      	bpl.n	800880c <__swsetup_r+0x60>
 80087e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80087e6:	2900      	cmp	r1, #0
 80087e8:	d008      	beq.n	80087fc <__swsetup_r+0x50>
 80087ea:	0023      	movs	r3, r4
 80087ec:	3344      	adds	r3, #68	@ 0x44
 80087ee:	4299      	cmp	r1, r3
 80087f0:	d002      	beq.n	80087f8 <__swsetup_r+0x4c>
 80087f2:	0028      	movs	r0, r5
 80087f4:	f7ff f934 	bl	8007a60 <_free_r>
 80087f8:	2300      	movs	r3, #0
 80087fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80087fc:	2224      	movs	r2, #36	@ 0x24
 80087fe:	89a3      	ldrh	r3, [r4, #12]
 8008800:	4393      	bics	r3, r2
 8008802:	81a3      	strh	r3, [r4, #12]
 8008804:	2300      	movs	r3, #0
 8008806:	6063      	str	r3, [r4, #4]
 8008808:	6923      	ldr	r3, [r4, #16]
 800880a:	6023      	str	r3, [r4, #0]
 800880c:	2308      	movs	r3, #8
 800880e:	89a2      	ldrh	r2, [r4, #12]
 8008810:	4313      	orrs	r3, r2
 8008812:	81a3      	strh	r3, [r4, #12]
 8008814:	6923      	ldr	r3, [r4, #16]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d10b      	bne.n	8008832 <__swsetup_r+0x86>
 800881a:	21a0      	movs	r1, #160	@ 0xa0
 800881c:	2280      	movs	r2, #128	@ 0x80
 800881e:	89a3      	ldrh	r3, [r4, #12]
 8008820:	0089      	lsls	r1, r1, #2
 8008822:	0092      	lsls	r2, r2, #2
 8008824:	400b      	ands	r3, r1
 8008826:	4293      	cmp	r3, r2
 8008828:	d003      	beq.n	8008832 <__swsetup_r+0x86>
 800882a:	0021      	movs	r1, r4
 800882c:	0028      	movs	r0, r5
 800882e:	f000 f88f 	bl	8008950 <__smakebuf_r>
 8008832:	230c      	movs	r3, #12
 8008834:	5ee2      	ldrsh	r2, [r4, r3]
 8008836:	2101      	movs	r1, #1
 8008838:	0013      	movs	r3, r2
 800883a:	400b      	ands	r3, r1
 800883c:	420a      	tst	r2, r1
 800883e:	d00b      	beq.n	8008858 <__swsetup_r+0xac>
 8008840:	2300      	movs	r3, #0
 8008842:	60a3      	str	r3, [r4, #8]
 8008844:	6963      	ldr	r3, [r4, #20]
 8008846:	425b      	negs	r3, r3
 8008848:	61a3      	str	r3, [r4, #24]
 800884a:	2000      	movs	r0, #0
 800884c:	6923      	ldr	r3, [r4, #16]
 800884e:	4283      	cmp	r3, r0
 8008850:	d101      	bne.n	8008856 <__swsetup_r+0xaa>
 8008852:	0613      	lsls	r3, r2, #24
 8008854:	d4be      	bmi.n	80087d4 <__swsetup_r+0x28>
 8008856:	bd70      	pop	{r4, r5, r6, pc}
 8008858:	0791      	lsls	r1, r2, #30
 800885a:	d400      	bmi.n	800885e <__swsetup_r+0xb2>
 800885c:	6963      	ldr	r3, [r4, #20]
 800885e:	60a3      	str	r3, [r4, #8]
 8008860:	e7f3      	b.n	800884a <__swsetup_r+0x9e>
 8008862:	46c0      	nop			@ (mov r8, r8)
 8008864:	20000064 	.word	0x20000064

08008868 <_raise_r>:
 8008868:	b570      	push	{r4, r5, r6, lr}
 800886a:	0004      	movs	r4, r0
 800886c:	000d      	movs	r5, r1
 800886e:	291f      	cmp	r1, #31
 8008870:	d904      	bls.n	800887c <_raise_r+0x14>
 8008872:	2316      	movs	r3, #22
 8008874:	6003      	str	r3, [r0, #0]
 8008876:	2001      	movs	r0, #1
 8008878:	4240      	negs	r0, r0
 800887a:	bd70      	pop	{r4, r5, r6, pc}
 800887c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800887e:	2b00      	cmp	r3, #0
 8008880:	d004      	beq.n	800888c <_raise_r+0x24>
 8008882:	008a      	lsls	r2, r1, #2
 8008884:	189b      	adds	r3, r3, r2
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	2a00      	cmp	r2, #0
 800888a:	d108      	bne.n	800889e <_raise_r+0x36>
 800888c:	0020      	movs	r0, r4
 800888e:	f000 f831 	bl	80088f4 <_getpid_r>
 8008892:	002a      	movs	r2, r5
 8008894:	0001      	movs	r1, r0
 8008896:	0020      	movs	r0, r4
 8008898:	f000 f81a 	bl	80088d0 <_kill_r>
 800889c:	e7ed      	b.n	800887a <_raise_r+0x12>
 800889e:	2a01      	cmp	r2, #1
 80088a0:	d009      	beq.n	80088b6 <_raise_r+0x4e>
 80088a2:	1c51      	adds	r1, r2, #1
 80088a4:	d103      	bne.n	80088ae <_raise_r+0x46>
 80088a6:	2316      	movs	r3, #22
 80088a8:	6003      	str	r3, [r0, #0]
 80088aa:	2001      	movs	r0, #1
 80088ac:	e7e5      	b.n	800887a <_raise_r+0x12>
 80088ae:	2100      	movs	r1, #0
 80088b0:	0028      	movs	r0, r5
 80088b2:	6019      	str	r1, [r3, #0]
 80088b4:	4790      	blx	r2
 80088b6:	2000      	movs	r0, #0
 80088b8:	e7df      	b.n	800887a <_raise_r+0x12>
	...

080088bc <raise>:
 80088bc:	b510      	push	{r4, lr}
 80088be:	4b03      	ldr	r3, [pc, #12]	@ (80088cc <raise+0x10>)
 80088c0:	0001      	movs	r1, r0
 80088c2:	6818      	ldr	r0, [r3, #0]
 80088c4:	f7ff ffd0 	bl	8008868 <_raise_r>
 80088c8:	bd10      	pop	{r4, pc}
 80088ca:	46c0      	nop			@ (mov r8, r8)
 80088cc:	20000064 	.word	0x20000064

080088d0 <_kill_r>:
 80088d0:	2300      	movs	r3, #0
 80088d2:	b570      	push	{r4, r5, r6, lr}
 80088d4:	4d06      	ldr	r5, [pc, #24]	@ (80088f0 <_kill_r+0x20>)
 80088d6:	0004      	movs	r4, r0
 80088d8:	0008      	movs	r0, r1
 80088da:	0011      	movs	r1, r2
 80088dc:	602b      	str	r3, [r5, #0]
 80088de:	f7fa f99f 	bl	8002c20 <_kill>
 80088e2:	1c43      	adds	r3, r0, #1
 80088e4:	d103      	bne.n	80088ee <_kill_r+0x1e>
 80088e6:	682b      	ldr	r3, [r5, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d000      	beq.n	80088ee <_kill_r+0x1e>
 80088ec:	6023      	str	r3, [r4, #0]
 80088ee:	bd70      	pop	{r4, r5, r6, pc}
 80088f0:	2000148c 	.word	0x2000148c

080088f4 <_getpid_r>:
 80088f4:	b510      	push	{r4, lr}
 80088f6:	f7fa f98d 	bl	8002c14 <_getpid>
 80088fa:	bd10      	pop	{r4, pc}

080088fc <__swhatbuf_r>:
 80088fc:	b570      	push	{r4, r5, r6, lr}
 80088fe:	000e      	movs	r6, r1
 8008900:	001d      	movs	r5, r3
 8008902:	230e      	movs	r3, #14
 8008904:	5ec9      	ldrsh	r1, [r1, r3]
 8008906:	0014      	movs	r4, r2
 8008908:	b096      	sub	sp, #88	@ 0x58
 800890a:	2900      	cmp	r1, #0
 800890c:	da0c      	bge.n	8008928 <__swhatbuf_r+0x2c>
 800890e:	89b2      	ldrh	r2, [r6, #12]
 8008910:	2380      	movs	r3, #128	@ 0x80
 8008912:	0011      	movs	r1, r2
 8008914:	4019      	ands	r1, r3
 8008916:	421a      	tst	r2, r3
 8008918:	d114      	bne.n	8008944 <__swhatbuf_r+0x48>
 800891a:	2380      	movs	r3, #128	@ 0x80
 800891c:	00db      	lsls	r3, r3, #3
 800891e:	2000      	movs	r0, #0
 8008920:	6029      	str	r1, [r5, #0]
 8008922:	6023      	str	r3, [r4, #0]
 8008924:	b016      	add	sp, #88	@ 0x58
 8008926:	bd70      	pop	{r4, r5, r6, pc}
 8008928:	466a      	mov	r2, sp
 800892a:	f000 f853 	bl	80089d4 <_fstat_r>
 800892e:	2800      	cmp	r0, #0
 8008930:	dbed      	blt.n	800890e <__swhatbuf_r+0x12>
 8008932:	23f0      	movs	r3, #240	@ 0xf0
 8008934:	9901      	ldr	r1, [sp, #4]
 8008936:	021b      	lsls	r3, r3, #8
 8008938:	4019      	ands	r1, r3
 800893a:	4b04      	ldr	r3, [pc, #16]	@ (800894c <__swhatbuf_r+0x50>)
 800893c:	18c9      	adds	r1, r1, r3
 800893e:	424b      	negs	r3, r1
 8008940:	4159      	adcs	r1, r3
 8008942:	e7ea      	b.n	800891a <__swhatbuf_r+0x1e>
 8008944:	2100      	movs	r1, #0
 8008946:	2340      	movs	r3, #64	@ 0x40
 8008948:	e7e9      	b.n	800891e <__swhatbuf_r+0x22>
 800894a:	46c0      	nop			@ (mov r8, r8)
 800894c:	ffffe000 	.word	0xffffe000

08008950 <__smakebuf_r>:
 8008950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008952:	2602      	movs	r6, #2
 8008954:	898b      	ldrh	r3, [r1, #12]
 8008956:	0005      	movs	r5, r0
 8008958:	000c      	movs	r4, r1
 800895a:	b085      	sub	sp, #20
 800895c:	4233      	tst	r3, r6
 800895e:	d007      	beq.n	8008970 <__smakebuf_r+0x20>
 8008960:	0023      	movs	r3, r4
 8008962:	3347      	adds	r3, #71	@ 0x47
 8008964:	6023      	str	r3, [r4, #0]
 8008966:	6123      	str	r3, [r4, #16]
 8008968:	2301      	movs	r3, #1
 800896a:	6163      	str	r3, [r4, #20]
 800896c:	b005      	add	sp, #20
 800896e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008970:	ab03      	add	r3, sp, #12
 8008972:	aa02      	add	r2, sp, #8
 8008974:	f7ff ffc2 	bl	80088fc <__swhatbuf_r>
 8008978:	9f02      	ldr	r7, [sp, #8]
 800897a:	9001      	str	r0, [sp, #4]
 800897c:	0039      	movs	r1, r7
 800897e:	0028      	movs	r0, r5
 8008980:	f7fd fb3c 	bl	8005ffc <_malloc_r>
 8008984:	2800      	cmp	r0, #0
 8008986:	d108      	bne.n	800899a <__smakebuf_r+0x4a>
 8008988:	220c      	movs	r2, #12
 800898a:	5ea3      	ldrsh	r3, [r4, r2]
 800898c:	059a      	lsls	r2, r3, #22
 800898e:	d4ed      	bmi.n	800896c <__smakebuf_r+0x1c>
 8008990:	2203      	movs	r2, #3
 8008992:	4393      	bics	r3, r2
 8008994:	431e      	orrs	r6, r3
 8008996:	81a6      	strh	r6, [r4, #12]
 8008998:	e7e2      	b.n	8008960 <__smakebuf_r+0x10>
 800899a:	2380      	movs	r3, #128	@ 0x80
 800899c:	89a2      	ldrh	r2, [r4, #12]
 800899e:	6020      	str	r0, [r4, #0]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	81a3      	strh	r3, [r4, #12]
 80089a4:	9b03      	ldr	r3, [sp, #12]
 80089a6:	6120      	str	r0, [r4, #16]
 80089a8:	6167      	str	r7, [r4, #20]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d00c      	beq.n	80089c8 <__smakebuf_r+0x78>
 80089ae:	0028      	movs	r0, r5
 80089b0:	230e      	movs	r3, #14
 80089b2:	5ee1      	ldrsh	r1, [r4, r3]
 80089b4:	f000 f820 	bl	80089f8 <_isatty_r>
 80089b8:	2800      	cmp	r0, #0
 80089ba:	d005      	beq.n	80089c8 <__smakebuf_r+0x78>
 80089bc:	2303      	movs	r3, #3
 80089be:	89a2      	ldrh	r2, [r4, #12]
 80089c0:	439a      	bics	r2, r3
 80089c2:	3b02      	subs	r3, #2
 80089c4:	4313      	orrs	r3, r2
 80089c6:	81a3      	strh	r3, [r4, #12]
 80089c8:	89a3      	ldrh	r3, [r4, #12]
 80089ca:	9a01      	ldr	r2, [sp, #4]
 80089cc:	4313      	orrs	r3, r2
 80089ce:	81a3      	strh	r3, [r4, #12]
 80089d0:	e7cc      	b.n	800896c <__smakebuf_r+0x1c>
	...

080089d4 <_fstat_r>:
 80089d4:	2300      	movs	r3, #0
 80089d6:	b570      	push	{r4, r5, r6, lr}
 80089d8:	4d06      	ldr	r5, [pc, #24]	@ (80089f4 <_fstat_r+0x20>)
 80089da:	0004      	movs	r4, r0
 80089dc:	0008      	movs	r0, r1
 80089de:	0011      	movs	r1, r2
 80089e0:	602b      	str	r3, [r5, #0]
 80089e2:	f7fa f97d 	bl	8002ce0 <_fstat>
 80089e6:	1c43      	adds	r3, r0, #1
 80089e8:	d103      	bne.n	80089f2 <_fstat_r+0x1e>
 80089ea:	682b      	ldr	r3, [r5, #0]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d000      	beq.n	80089f2 <_fstat_r+0x1e>
 80089f0:	6023      	str	r3, [r4, #0]
 80089f2:	bd70      	pop	{r4, r5, r6, pc}
 80089f4:	2000148c 	.word	0x2000148c

080089f8 <_isatty_r>:
 80089f8:	2300      	movs	r3, #0
 80089fa:	b570      	push	{r4, r5, r6, lr}
 80089fc:	4d06      	ldr	r5, [pc, #24]	@ (8008a18 <_isatty_r+0x20>)
 80089fe:	0004      	movs	r4, r0
 8008a00:	0008      	movs	r0, r1
 8008a02:	602b      	str	r3, [r5, #0]
 8008a04:	f7fa f97a 	bl	8002cfc <_isatty>
 8008a08:	1c43      	adds	r3, r0, #1
 8008a0a:	d103      	bne.n	8008a14 <_isatty_r+0x1c>
 8008a0c:	682b      	ldr	r3, [r5, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d000      	beq.n	8008a14 <_isatty_r+0x1c>
 8008a12:	6023      	str	r3, [r4, #0]
 8008a14:	bd70      	pop	{r4, r5, r6, pc}
 8008a16:	46c0      	nop			@ (mov r8, r8)
 8008a18:	2000148c 	.word	0x2000148c

08008a1c <_init>:
 8008a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a1e:	46c0      	nop			@ (mov r8, r8)
 8008a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a22:	bc08      	pop	{r3}
 8008a24:	469e      	mov	lr, r3
 8008a26:	4770      	bx	lr

08008a28 <_fini>:
 8008a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a2a:	46c0      	nop			@ (mov r8, r8)
 8008a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a2e:	bc08      	pop	{r3}
 8008a30:	469e      	mov	lr, r3
 8008a32:	4770      	bx	lr
